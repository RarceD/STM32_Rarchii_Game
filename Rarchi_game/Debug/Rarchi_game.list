
Rarchi_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003380  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001968  0800348c  0800348c  0001348c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004df4  08004df4  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08004df4  08004df4  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004df4  08004df4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004df4  08004df4  00014df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004df8  08004df8  00014df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  20000080  08004e7c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  08004e7c  0002050c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1ca  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019a0  00000000  00000000  0002a273  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000810  00000000  00000000  0002bc18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000760  00000000  00000000  0002c428  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000171c1  00000000  00000000  0002cb88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007e4e  00000000  00000000  00043d49  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082d7b  00000000  00000000  0004bb97  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ce912  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000230c  00000000  00000000  000ce990  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08003474 	.word	0x08003474

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08003474 	.word	0x08003474

0800014c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b09a      	sub	sp, #104	; 0x68
 8000150:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	Player children;
	children.points = 33;
 8000152:	2321      	movs	r3, #33	; 0x21
 8000154:	657b      	str	r3, [r7, #84]	; 0x54
	children.state_machine = INIT;
 8000156:	2300      	movs	r3, #0
 8000158:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	children.scrol_position = 18;
 800015c:	2312      	movs	r3, #18
 800015e:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000162:	f001 f8dd 	bl	8001320 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000166:	f000 fa69 	bl	800063c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800016a:	f000 fad1 	bl	8000710 <MX_GPIO_Init>
	MX_I2C1_Init();
 800016e:	f000 faa1 	bl	80006b4 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	SSD1306_Init(); // initialise
 8000172:	f000 fbab 	bl	80008cc <SSD1306_Init>


	SSD1306_GotoXY(0, 0);
 8000176:	2100      	movs	r1, #0
 8000178:	2000      	movs	r0, #0
 800017a:	f000 fd0f 	bl	8000b9c <SSD1306_GotoXY>
	SSD1306_Puts("PTS:", &Font_11x18, 1);
 800017e:	2201      	movs	r2, #1
 8000180:	49c0      	ldr	r1, [pc, #768]	; (8000484 <main+0x338>)
 8000182:	48c1      	ldr	r0, [pc, #772]	; (8000488 <main+0x33c>)
 8000184:	f000 fda0 	bl	8000cc8 <SSD1306_Puts>
	SSD1306_GotoXY(42, 0);
 8000188:	2100      	movs	r1, #0
 800018a:	202a      	movs	r0, #42	; 0x2a
 800018c:	f000 fd06 	bl	8000b9c <SSD1306_GotoXY>
	char *numberstring[(((sizeof children.points)) + 2) / 3 + 2];
	sprintf(numberstring, "%d", children.points++);
 8000190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000192:	1c5a      	adds	r2, r3, #1
 8000194:	657a      	str	r2, [r7, #84]	; 0x54
 8000196:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800019a:	461a      	mov	r2, r3
 800019c:	49bb      	ldr	r1, [pc, #748]	; (800048c <main+0x340>)
 800019e:	f002 fd57 	bl	8002c50 <siprintf>
	SSD1306_Puts(numberstring, &Font_11x18, 1);
 80001a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80001a6:	2201      	movs	r2, #1
 80001a8:	49b6      	ldr	r1, [pc, #728]	; (8000484 <main+0x338>)
 80001aa:	4618      	mov	r0, r3
 80001ac:	f000 fd8c 	bl	8000cc8 <SSD1306_Puts>
	HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 1);
 80001b0:	2201      	movs	r2, #1
 80001b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001b6:	48b6      	ldr	r0, [pc, #728]	; (8000490 <main+0x344>)
 80001b8:	f001 fb8b 	bl	80018d2 <HAL_GPIO_WritePin>
	uint8_t update_screen = 0;
 80001bc:	2300      	movs	r3, #0
 80001be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	SSD1306_DrawBitmap(0, 0, image_data_test_real, 128, 64, 1);
 80001c2:	2301      	movs	r3, #1
 80001c4:	9301      	str	r3, [sp, #4]
 80001c6:	2340      	movs	r3, #64	; 0x40
 80001c8:	9300      	str	r3, [sp, #0]
 80001ca:	2380      	movs	r3, #128	; 0x80
 80001cc:	4ab1      	ldr	r2, [pc, #708]	; (8000494 <main+0x348>)
 80001ce:	2100      	movs	r1, #0
 80001d0:	2000      	movs	r0, #0
 80001d2:	f000 fb13 	bl	80007fc <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 80001d6:	f000 fc3d 	bl	8000a54 <SSD1306_UpdateScreen>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		switch (children.state_machine) {
 80001da:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80001de:	2b05      	cmp	r3, #5
 80001e0:	d8fb      	bhi.n	80001da <main+0x8e>
 80001e2:	a201      	add	r2, pc, #4	; (adr r2, 80001e8 <main+0x9c>)
 80001e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001e8:	08000201 	.word	0x08000201
 80001ec:	080002c3 	.word	0x080002c3
 80001f0:	0800040f 	.word	0x0800040f
 80001f4:	080004b9 	.word	0x080004b9
 80001f8:	0800052f 	.word	0x0800052f
 80001fc:	080005a3 	.word	0x080005a3
		case INIT:
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin) == 0
 8000200:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000204:	48a2      	ldr	r0, [pc, #648]	; (8000490 <main+0x344>)
 8000206:	f001 fb4d 	bl	80018a4 <HAL_GPIO_ReadPin>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d008      	beq.n	8000222 <main+0xd6>
					|| HAL_GPIO_ReadPin(BUTTON_LEFT_GPIO_Port, BUTTON_LEFT_Pin)
 8000210:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000214:	489e      	ldr	r0, [pc, #632]	; (8000490 <main+0x344>)
 8000216:	f001 fb45 	bl	80018a4 <HAL_GPIO_ReadPin>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	f040 81f8 	bne.w	8000612 <main+0x4c6>
							== 0) {
				HAL_GPIO_WritePin(RGB_RED_GPIO_Port, RGB_RED_Pin, 1);
 8000222:	2201      	movs	r2, #1
 8000224:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000228:	4899      	ldr	r0, [pc, #612]	; (8000490 <main+0x344>)
 800022a:	f001 fb52 	bl	80018d2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 0);
 800022e:	2200      	movs	r2, #0
 8000230:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000234:	4896      	ldr	r0, [pc, #600]	; (8000490 <main+0x344>)
 8000236:	f001 fb4c 	bl	80018d2 <HAL_GPIO_WritePin>
				//I update the screen
				SSD1306_Clear();
 800023a:	f000 fecf 	bl	8000fdc <SSD1306_Clear>
				SSD1306_GotoXY(20, 18);
 800023e:	2112      	movs	r1, #18
 8000240:	2014      	movs	r0, #20
 8000242:	f000 fcab 	bl	8000b9c <SSD1306_GotoXY>
				SSD1306_Puts("GAME 1", &Font_7x10, 1);
 8000246:	2201      	movs	r2, #1
 8000248:	4993      	ldr	r1, [pc, #588]	; (8000498 <main+0x34c>)
 800024a:	4894      	ldr	r0, [pc, #592]	; (800049c <main+0x350>)
 800024c:	f000 fd3c 	bl	8000cc8 <SSD1306_Puts>
				SSD1306_GotoXY(20, 28);
 8000250:	211c      	movs	r1, #28
 8000252:	2014      	movs	r0, #20
 8000254:	f000 fca2 	bl	8000b9c <SSD1306_GotoXY>
				SSD1306_Puts("GAME 2", &Font_7x10, 1);
 8000258:	2201      	movs	r2, #1
 800025a:	498f      	ldr	r1, [pc, #572]	; (8000498 <main+0x34c>)
 800025c:	4890      	ldr	r0, [pc, #576]	; (80004a0 <main+0x354>)
 800025e:	f000 fd33 	bl	8000cc8 <SSD1306_Puts>
				SSD1306_GotoXY(20, 38);
 8000262:	2126      	movs	r1, #38	; 0x26
 8000264:	2014      	movs	r0, #20
 8000266:	f000 fc99 	bl	8000b9c <SSD1306_GotoXY>
				SSD1306_Puts("GAME 3", &Font_7x10, 1);
 800026a:	2201      	movs	r2, #1
 800026c:	498a      	ldr	r1, [pc, #552]	; (8000498 <main+0x34c>)
 800026e:	488d      	ldr	r0, [pc, #564]	; (80004a4 <main+0x358>)
 8000270:	f000 fd2a 	bl	8000cc8 <SSD1306_Puts>
				SSD1306_GotoXY(20, 48);
 8000274:	2130      	movs	r1, #48	; 0x30
 8000276:	2014      	movs	r0, #20
 8000278:	f000 fc90 	bl	8000b9c <SSD1306_GotoXY>
				SSD1306_Puts("GAME 4", &Font_7x10, 1);
 800027c:	2201      	movs	r2, #1
 800027e:	4986      	ldr	r1, [pc, #536]	; (8000498 <main+0x34c>)
 8000280:	4889      	ldr	r0, [pc, #548]	; (80004a8 <main+0x35c>)
 8000282:	f000 fd21 	bl	8000cc8 <SSD1306_Puts>
				SSD1306_GotoXY(50, 0);
 8000286:	2100      	movs	r1, #0
 8000288:	2032      	movs	r0, #50	; 0x32
 800028a:	f000 fc87 	bl	8000b9c <SSD1306_GotoXY>
				SSD1306_Puts("Select game", &Font_7x10, 1);
 800028e:	2201      	movs	r2, #1
 8000290:	4981      	ldr	r1, [pc, #516]	; (8000498 <main+0x34c>)
 8000292:	4886      	ldr	r0, [pc, #536]	; (80004ac <main+0x360>)
 8000294:	f000 fd18 	bl	8000cc8 <SSD1306_Puts>
				children.scrol_position = 28;
 8000298:	231c      	movs	r3, #28
 800029a:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
				SSD1306_GotoXY(10, 18);
 800029e:	2112      	movs	r1, #18
 80002a0:	200a      	movs	r0, #10
 80002a2:	f000 fc7b 	bl	8000b9c <SSD1306_GotoXY>
				SSD1306_Puts(">", &Font_7x10, 1);
 80002a6:	2201      	movs	r2, #1
 80002a8:	497b      	ldr	r1, [pc, #492]	; (8000498 <main+0x34c>)
 80002aa:	4881      	ldr	r0, [pc, #516]	; (80004b0 <main+0x364>)
 80002ac:	f000 fd0c 	bl	8000cc8 <SSD1306_Puts>
				SSD1306_UpdateScreen(); //display
 80002b0:	f000 fbd0 	bl	8000a54 <SSD1306_UpdateScreen>
				HAL_Delay(60);
 80002b4:	203c      	movs	r0, #60	; 0x3c
 80002b6:	f001 f895 	bl	80013e4 <HAL_Delay>
				children.state_machine = MENU;
 80002ba:	2301      	movs	r3, #1
 80002bc:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
			}
			break;
 80002c0:	e1a7      	b.n	8000612 <main+0x4c6>
		case MENU:
			if (HAL_GPIO_ReadPin(BUTTON_LEFT_GPIO_Port, BUTTON_LEFT_Pin) == 0) {
 80002c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002c6:	4872      	ldr	r0, [pc, #456]	; (8000490 <main+0x344>)
 80002c8:	f001 faec 	bl	80018a4 <HAL_GPIO_ReadPin>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d146      	bne.n	8000360 <main+0x214>
				SSD1306_GotoXY(10, 18);
 80002d2:	2112      	movs	r1, #18
 80002d4:	200a      	movs	r0, #10
 80002d6:	f000 fc61 	bl	8000b9c <SSD1306_GotoXY>
				SSD1306_Puts(" ", &Font_7x10, 1);
 80002da:	2201      	movs	r2, #1
 80002dc:	496e      	ldr	r1, [pc, #440]	; (8000498 <main+0x34c>)
 80002de:	4875      	ldr	r0, [pc, #468]	; (80004b4 <main+0x368>)
 80002e0:	f000 fcf2 	bl	8000cc8 <SSD1306_Puts>
				SSD1306_GotoXY(10, 28);
 80002e4:	211c      	movs	r1, #28
 80002e6:	200a      	movs	r0, #10
 80002e8:	f000 fc58 	bl	8000b9c <SSD1306_GotoXY>
				SSD1306_Puts(" ", &Font_7x10, 1);
 80002ec:	2201      	movs	r2, #1
 80002ee:	496a      	ldr	r1, [pc, #424]	; (8000498 <main+0x34c>)
 80002f0:	4870      	ldr	r0, [pc, #448]	; (80004b4 <main+0x368>)
 80002f2:	f000 fce9 	bl	8000cc8 <SSD1306_Puts>
				SSD1306_GotoXY(10, 38);
 80002f6:	2126      	movs	r1, #38	; 0x26
 80002f8:	200a      	movs	r0, #10
 80002fa:	f000 fc4f 	bl	8000b9c <SSD1306_GotoXY>
				SSD1306_Puts(" ", &Font_7x10, 1);
 80002fe:	2201      	movs	r2, #1
 8000300:	4965      	ldr	r1, [pc, #404]	; (8000498 <main+0x34c>)
 8000302:	486c      	ldr	r0, [pc, #432]	; (80004b4 <main+0x368>)
 8000304:	f000 fce0 	bl	8000cc8 <SSD1306_Puts>
				SSD1306_GotoXY(10, 48);
 8000308:	2130      	movs	r1, #48	; 0x30
 800030a:	200a      	movs	r0, #10
 800030c:	f000 fc46 	bl	8000b9c <SSD1306_GotoXY>
				SSD1306_Puts(" ", &Font_7x10, 1);
 8000310:	2201      	movs	r2, #1
 8000312:	4961      	ldr	r1, [pc, #388]	; (8000498 <main+0x34c>)
 8000314:	4867      	ldr	r0, [pc, #412]	; (80004b4 <main+0x368>)
 8000316:	f000 fcd7 	bl	8000cc8 <SSD1306_Puts>
				SSD1306_GotoXY(10, children.scrol_position);
 800031a:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800031e:	b29b      	uxth	r3, r3
 8000320:	4619      	mov	r1, r3
 8000322:	200a      	movs	r0, #10
 8000324:	f000 fc3a 	bl	8000b9c <SSD1306_GotoXY>
				SSD1306_Puts(">", &Font_7x10, 1);
 8000328:	2201      	movs	r2, #1
 800032a:	495b      	ldr	r1, [pc, #364]	; (8000498 <main+0x34c>)
 800032c:	4860      	ldr	r0, [pc, #384]	; (80004b0 <main+0x364>)
 800032e:	f000 fccb 	bl	8000cc8 <SSD1306_Puts>
				SSD1306_UpdateScreen(); //display
 8000332:	f000 fb8f 	bl	8000a54 <SSD1306_UpdateScreen>
				if (children.scrol_position >= 48) {
 8000336:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800033a:	2b2f      	cmp	r3, #47	; 0x2f
 800033c:	d903      	bls.n	8000346 <main+0x1fa>
					children.scrol_position = 18;
 800033e:	2312      	movs	r3, #18
 8000340:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 8000344:	e009      	b.n	800035a <main+0x20e>
				} else if (children.scrol_position != 48) {
 8000346:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800034a:	2b30      	cmp	r3, #48	; 0x30
 800034c:	d005      	beq.n	800035a <main+0x20e>
					children.scrol_position += 10;
 800034e:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8000352:	330a      	adds	r3, #10
 8000354:	b2db      	uxtb	r3, r3
 8000356:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
				}
				HAL_Delay(60);
 800035a:	203c      	movs	r0, #60	; 0x3c
 800035c:	f001 f842 	bl	80013e4 <HAL_Delay>
			}
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin)
 8000360:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000364:	484a      	ldr	r0, [pc, #296]	; (8000490 <main+0x344>)
 8000366:	f001 fa9d 	bl	80018a4 <HAL_GPIO_ReadPin>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	f040 8152 	bne.w	8000616 <main+0x4ca>
					== 0) {
				SSD1306_Clear();
 8000372:	f000 fe33 	bl	8000fdc <SSD1306_Clear>
				HAL_GPIO_WritePin(RGB_RED_GPIO_Port, RGB_RED_Pin, 0);
 8000376:	2200      	movs	r2, #0
 8000378:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800037c:	4844      	ldr	r0, [pc, #272]	; (8000490 <main+0x344>)
 800037e:	f001 faa8 	bl	80018d2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 0);
 8000382:	2200      	movs	r2, #0
 8000384:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000388:	4841      	ldr	r0, [pc, #260]	; (8000490 <main+0x344>)
 800038a:	f001 faa2 	bl	80018d2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 1);
 800038e:	2201      	movs	r2, #1
 8000390:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000394:	483e      	ldr	r0, [pc, #248]	; (8000490 <main+0x344>)
 8000396:	f001 fa9c 	bl	80018d2 <HAL_GPIO_WritePin>
				SSD1306_GotoXY(0, 0);
 800039a:	2100      	movs	r1, #0
 800039c:	2000      	movs	r0, #0
 800039e:	f000 fbfd 	bl	8000b9c <SSD1306_GotoXY>

				if (children.scrol_position == 28) {
 80003a2:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80003a6:	2b1c      	cmp	r3, #28
 80003a8:	d108      	bne.n	80003bc <main+0x270>
					children.state_machine = GAME_1;
 80003aa:	2302      	movs	r3, #2
 80003ac:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
					SSD1306_Puts("GAME 1", &Font_11x18, 1);
 80003b0:	2201      	movs	r2, #1
 80003b2:	4934      	ldr	r1, [pc, #208]	; (8000484 <main+0x338>)
 80003b4:	4839      	ldr	r0, [pc, #228]	; (800049c <main+0x350>)
 80003b6:	f000 fc87 	bl	8000cc8 <SSD1306_Puts>
 80003ba:	e025      	b.n	8000408 <main+0x2bc>
				} else if (children.scrol_position == 38) {
 80003bc:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80003c0:	2b26      	cmp	r3, #38	; 0x26
 80003c2:	d108      	bne.n	80003d6 <main+0x28a>
					SSD1306_Puts("GAME 2", &Font_11x18, 1);
 80003c4:	2201      	movs	r2, #1
 80003c6:	492f      	ldr	r1, [pc, #188]	; (8000484 <main+0x338>)
 80003c8:	4835      	ldr	r0, [pc, #212]	; (80004a0 <main+0x354>)
 80003ca:	f000 fc7d 	bl	8000cc8 <SSD1306_Puts>
					children.state_machine = GAME_2;
 80003ce:	2303      	movs	r3, #3
 80003d0:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 80003d4:	e018      	b.n	8000408 <main+0x2bc>
				} else if (children.scrol_position == 48) {
 80003d6:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80003da:	2b30      	cmp	r3, #48	; 0x30
 80003dc:	d108      	bne.n	80003f0 <main+0x2a4>
					SSD1306_Puts("GAME 3", &Font_11x18, 1);
 80003de:	2201      	movs	r2, #1
 80003e0:	4928      	ldr	r1, [pc, #160]	; (8000484 <main+0x338>)
 80003e2:	4830      	ldr	r0, [pc, #192]	; (80004a4 <main+0x358>)
 80003e4:	f000 fc70 	bl	8000cc8 <SSD1306_Puts>
					children.state_machine = GAME_3;
 80003e8:	2304      	movs	r3, #4
 80003ea:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 80003ee:	e00b      	b.n	8000408 <main+0x2bc>
				} else if (children.scrol_position == 18) {
 80003f0:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80003f4:	2b12      	cmp	r3, #18
 80003f6:	d107      	bne.n	8000408 <main+0x2bc>
					SSD1306_Puts("GAME 4", &Font_11x18, 1);
 80003f8:	2201      	movs	r2, #1
 80003fa:	4922      	ldr	r1, [pc, #136]	; (8000484 <main+0x338>)
 80003fc:	482a      	ldr	r0, [pc, #168]	; (80004a8 <main+0x35c>)
 80003fe:	f000 fc63 	bl	8000cc8 <SSD1306_Puts>
					children.state_machine = GAME_4;
 8000402:	2305      	movs	r3, #5
 8000404:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
				}
				SSD1306_UpdateScreen();
 8000408:	f000 fb24 	bl	8000a54 <SSD1306_UpdateScreen>
			}
			break;
 800040c:	e103      	b.n	8000616 <main+0x4ca>
		case (GAME_1):
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin)
 800040e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000412:	481f      	ldr	r0, [pc, #124]	; (8000490 <main+0x344>)
 8000414:	f001 fa46 	bl	80018a4 <HAL_GPIO_ReadPin>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	f040 80fd 	bne.w	800061a <main+0x4ce>
					== 0) {
				children.state_machine = INIT;
 8000420:	2300      	movs	r3, #0
 8000422:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
				character_draw(1);
 8000426:	2001      	movs	r0, #1
 8000428:	f000 ff28 	bl	800127c <character_draw>
				SSD1306_GotoXY(0, 0);
 800042c:	2100      	movs	r1, #0
 800042e:	2000      	movs	r0, #0
 8000430:	f000 fbb4 	bl	8000b9c <SSD1306_GotoXY>
				SSD1306_Puts("PTS:", &Font_11x18, 1);
 8000434:	2201      	movs	r2, #1
 8000436:	4913      	ldr	r1, [pc, #76]	; (8000484 <main+0x338>)
 8000438:	4813      	ldr	r0, [pc, #76]	; (8000488 <main+0x33c>)
 800043a:	f000 fc45 	bl	8000cc8 <SSD1306_Puts>
				SSD1306_GotoXY(42, 0);
 800043e:	2100      	movs	r1, #0
 8000440:	202a      	movs	r0, #42	; 0x2a
 8000442:	f000 fbab 	bl	8000b9c <SSD1306_GotoXY>
				char *numberstring[(((sizeof children.points)) + 2) / 3 + 2];
				sprintf(numberstring, "%d", children.points++);
 8000446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000448:	1c5a      	adds	r2, r3, #1
 800044a:	657a      	str	r2, [r7, #84]	; 0x54
 800044c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000450:	461a      	mov	r2, r3
 8000452:	490e      	ldr	r1, [pc, #56]	; (800048c <main+0x340>)
 8000454:	f002 fbfc 	bl	8002c50 <siprintf>
				SSD1306_Puts(numberstring, &Font_11x18, 1);
 8000458:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800045c:	2201      	movs	r2, #1
 800045e:	4909      	ldr	r1, [pc, #36]	; (8000484 <main+0x338>)
 8000460:	4618      	mov	r0, r3
 8000462:	f000 fc31 	bl	8000cc8 <SSD1306_Puts>
				SSD1306_UpdateScreen(); //display
 8000466:	f000 faf5 	bl	8000a54 <SSD1306_UpdateScreen>
				HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 0);
 800046a:	2200      	movs	r2, #0
 800046c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000470:	4807      	ldr	r0, [pc, #28]	; (8000490 <main+0x344>)
 8000472:	f001 fa2e 	bl	80018d2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 1);
 8000476:	2201      	movs	r2, #1
 8000478:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800047c:	4804      	ldr	r0, [pc, #16]	; (8000490 <main+0x344>)
 800047e:	f001 fa28 	bl	80018d2 <HAL_GPIO_WritePin>
			}
			break;
 8000482:	e0ca      	b.n	800061a <main+0x4ce>
 8000484:	20000008 	.word	0x20000008
 8000488:	0800348c 	.word	0x0800348c
 800048c:	08003494 	.word	0x08003494
 8000490:	40010c00 	.word	0x40010c00
 8000494:	080049a8 	.word	0x080049a8
 8000498:	20000000 	.word	0x20000000
 800049c:	08003498 	.word	0x08003498
 80004a0:	080034a0 	.word	0x080034a0
 80004a4:	080034a8 	.word	0x080034a8
 80004a8:	080034b0 	.word	0x080034b0
 80004ac:	080034b8 	.word	0x080034b8
 80004b0:	080034c4 	.word	0x080034c4
 80004b4:	080034c8 	.word	0x080034c8
		case (GAME_2):
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin)
 80004b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004bc:	485b      	ldr	r0, [pc, #364]	; (800062c <main+0x4e0>)
 80004be:	f001 f9f1 	bl	80018a4 <HAL_GPIO_ReadPin>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	f040 80aa 	bne.w	800061e <main+0x4d2>
					== 0) {
				children.state_machine = INIT;
 80004ca:	2300      	movs	r3, #0
 80004cc:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
				character_draw(1);
 80004d0:	2001      	movs	r0, #1
 80004d2:	f000 fed3 	bl	800127c <character_draw>
				SSD1306_GotoXY(0, 0);
 80004d6:	2100      	movs	r1, #0
 80004d8:	2000      	movs	r0, #0
 80004da:	f000 fb5f 	bl	8000b9c <SSD1306_GotoXY>
				SSD1306_Puts("PTS:", &Font_11x18, 1);
 80004de:	2201      	movs	r2, #1
 80004e0:	4953      	ldr	r1, [pc, #332]	; (8000630 <main+0x4e4>)
 80004e2:	4854      	ldr	r0, [pc, #336]	; (8000634 <main+0x4e8>)
 80004e4:	f000 fbf0 	bl	8000cc8 <SSD1306_Puts>
				SSD1306_GotoXY(42, 0);
 80004e8:	2100      	movs	r1, #0
 80004ea:	202a      	movs	r0, #42	; 0x2a
 80004ec:	f000 fb56 	bl	8000b9c <SSD1306_GotoXY>
				char *numberstring[(((sizeof children.points)) + 2) / 3 + 2];
				sprintf(numberstring, "%d", children.points++);
 80004f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80004f2:	1c5a      	adds	r2, r3, #1
 80004f4:	657a      	str	r2, [r7, #84]	; 0x54
 80004f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80004fa:	461a      	mov	r2, r3
 80004fc:	494e      	ldr	r1, [pc, #312]	; (8000638 <main+0x4ec>)
 80004fe:	f002 fba7 	bl	8002c50 <siprintf>
				SSD1306_Puts(numberstring, &Font_11x18, 1);
 8000502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000506:	2201      	movs	r2, #1
 8000508:	4949      	ldr	r1, [pc, #292]	; (8000630 <main+0x4e4>)
 800050a:	4618      	mov	r0, r3
 800050c:	f000 fbdc 	bl	8000cc8 <SSD1306_Puts>
				SSD1306_UpdateScreen(); //display
 8000510:	f000 faa0 	bl	8000a54 <SSD1306_UpdateScreen>
				HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 0);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800051a:	4844      	ldr	r0, [pc, #272]	; (800062c <main+0x4e0>)
 800051c:	f001 f9d9 	bl	80018d2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 1);
 8000520:	2201      	movs	r2, #1
 8000522:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000526:	4841      	ldr	r0, [pc, #260]	; (800062c <main+0x4e0>)
 8000528:	f001 f9d3 	bl	80018d2 <HAL_GPIO_WritePin>
			}
			break;
 800052c:	e077      	b.n	800061e <main+0x4d2>
		case (GAME_3):
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin)
 800052e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000532:	483e      	ldr	r0, [pc, #248]	; (800062c <main+0x4e0>)
 8000534:	f001 f9b6 	bl	80018a4 <HAL_GPIO_ReadPin>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d171      	bne.n	8000622 <main+0x4d6>
					== 0) {
				children.state_machine = INIT;
 800053e:	2300      	movs	r3, #0
 8000540:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
				character_draw(1);
 8000544:	2001      	movs	r0, #1
 8000546:	f000 fe99 	bl	800127c <character_draw>
				SSD1306_GotoXY(0, 0);
 800054a:	2100      	movs	r1, #0
 800054c:	2000      	movs	r0, #0
 800054e:	f000 fb25 	bl	8000b9c <SSD1306_GotoXY>
				SSD1306_Puts("PTS:", &Font_11x18, 1);
 8000552:	2201      	movs	r2, #1
 8000554:	4936      	ldr	r1, [pc, #216]	; (8000630 <main+0x4e4>)
 8000556:	4837      	ldr	r0, [pc, #220]	; (8000634 <main+0x4e8>)
 8000558:	f000 fbb6 	bl	8000cc8 <SSD1306_Puts>
				SSD1306_GotoXY(42, 0);
 800055c:	2100      	movs	r1, #0
 800055e:	202a      	movs	r0, #42	; 0x2a
 8000560:	f000 fb1c 	bl	8000b9c <SSD1306_GotoXY>
				char *numberstring[(((sizeof children.points)) + 2) / 3 + 2];
				sprintf(numberstring, "%d", children.points++);
 8000564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000566:	1c5a      	adds	r2, r3, #1
 8000568:	657a      	str	r2, [r7, #84]	; 0x54
 800056a:	f107 0014 	add.w	r0, r7, #20
 800056e:	461a      	mov	r2, r3
 8000570:	4931      	ldr	r1, [pc, #196]	; (8000638 <main+0x4ec>)
 8000572:	f002 fb6d 	bl	8002c50 <siprintf>
				SSD1306_Puts(numberstring, &Font_11x18, 1);
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	2201      	movs	r2, #1
 800057c:	492c      	ldr	r1, [pc, #176]	; (8000630 <main+0x4e4>)
 800057e:	4618      	mov	r0, r3
 8000580:	f000 fba2 	bl	8000cc8 <SSD1306_Puts>
				SSD1306_UpdateScreen(); //display
 8000584:	f000 fa66 	bl	8000a54 <SSD1306_UpdateScreen>
				HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 0);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800058e:	4827      	ldr	r0, [pc, #156]	; (800062c <main+0x4e0>)
 8000590:	f001 f99f 	bl	80018d2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 1);
 8000594:	2201      	movs	r2, #1
 8000596:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800059a:	4824      	ldr	r0, [pc, #144]	; (800062c <main+0x4e0>)
 800059c:	f001 f999 	bl	80018d2 <HAL_GPIO_WritePin>
			}
			break;
 80005a0:	e03f      	b.n	8000622 <main+0x4d6>
		case (GAME_4):
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin)
 80005a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005a6:	4821      	ldr	r0, [pc, #132]	; (800062c <main+0x4e0>)
 80005a8:	f001 f97c 	bl	80018a4 <HAL_GPIO_ReadPin>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d139      	bne.n	8000626 <main+0x4da>
					== 0) {
				children.state_machine = INIT;
 80005b2:	2300      	movs	r3, #0
 80005b4:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
				character_draw(1);
 80005b8:	2001      	movs	r0, #1
 80005ba:	f000 fe5f 	bl	800127c <character_draw>
				SSD1306_GotoXY(0, 0);
 80005be:	2100      	movs	r1, #0
 80005c0:	2000      	movs	r0, #0
 80005c2:	f000 faeb 	bl	8000b9c <SSD1306_GotoXY>
				SSD1306_Puts("PTS:", &Font_11x18, 1);
 80005c6:	2201      	movs	r2, #1
 80005c8:	4919      	ldr	r1, [pc, #100]	; (8000630 <main+0x4e4>)
 80005ca:	481a      	ldr	r0, [pc, #104]	; (8000634 <main+0x4e8>)
 80005cc:	f000 fb7c 	bl	8000cc8 <SSD1306_Puts>
				SSD1306_GotoXY(42, 0);
 80005d0:	2100      	movs	r1, #0
 80005d2:	202a      	movs	r0, #42	; 0x2a
 80005d4:	f000 fae2 	bl	8000b9c <SSD1306_GotoXY>
				char *numberstring[(((sizeof children.points)) + 2) / 3 + 2];
				sprintf(numberstring, "%d", children.points++);
 80005d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80005da:	1c5a      	adds	r2, r3, #1
 80005dc:	657a      	str	r2, [r7, #84]	; 0x54
 80005de:	1d38      	adds	r0, r7, #4
 80005e0:	461a      	mov	r2, r3
 80005e2:	4915      	ldr	r1, [pc, #84]	; (8000638 <main+0x4ec>)
 80005e4:	f002 fb34 	bl	8002c50 <siprintf>
				SSD1306_Puts(numberstring, &Font_11x18, 1);
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2201      	movs	r2, #1
 80005ec:	4910      	ldr	r1, [pc, #64]	; (8000630 <main+0x4e4>)
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 fb6a 	bl	8000cc8 <SSD1306_Puts>
				SSD1306_UpdateScreen(); //display
 80005f4:	f000 fa2e 	bl	8000a54 <SSD1306_UpdateScreen>
				HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005fe:	480b      	ldr	r0, [pc, #44]	; (800062c <main+0x4e0>)
 8000600:	f001 f967 	bl	80018d2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 1);
 8000604:	2201      	movs	r2, #1
 8000606:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800060a:	4808      	ldr	r0, [pc, #32]	; (800062c <main+0x4e0>)
 800060c:	f001 f961 	bl	80018d2 <HAL_GPIO_WritePin>
			}
			break;
 8000610:	e009      	b.n	8000626 <main+0x4da>
			break;
 8000612:	bf00      	nop
 8000614:	e5e1      	b.n	80001da <main+0x8e>
			break;
 8000616:	bf00      	nop
 8000618:	e5df      	b.n	80001da <main+0x8e>
			break;
 800061a:	bf00      	nop
 800061c:	e5dd      	b.n	80001da <main+0x8e>
			break;
 800061e:	bf00      	nop
 8000620:	e5db      	b.n	80001da <main+0x8e>
			break;
 8000622:	bf00      	nop
 8000624:	e5d9      	b.n	80001da <main+0x8e>
			break;
 8000626:	bf00      	nop
		switch (children.state_machine) {
 8000628:	e5d7      	b.n	80001da <main+0x8e>
 800062a:	bf00      	nop
 800062c:	40010c00 	.word	0x40010c00
 8000630:	20000008 	.word	0x20000008
 8000634:	0800348c 	.word	0x0800348c
 8000638:	08003494 	.word	0x08003494

0800063c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b090      	sub	sp, #64	; 0x40
 8000640:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000642:	f107 0318 	add.w	r3, r7, #24
 8000646:	2228      	movs	r2, #40	; 0x28
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f002 faf8 	bl	8002c40 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065e:	2302      	movs	r3, #2
 8000660:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000662:	2301      	movs	r3, #1
 8000664:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000666:	2310      	movs	r3, #16
 8000668:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800066a:	2300      	movs	r3, #0
 800066c:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800066e:	f107 0318 	add.w	r3, r7, #24
 8000672:	4618      	mov	r0, r3
 8000674:	f001 feb2 	bl	80023dc <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x46>
		Error_Handler();
 800067e:	f000 f8b7 	bl	80007f0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f002 f91e 	bl	80028dc <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x6e>
		Error_Handler();
 80006a6:	f000 f8a3 	bl	80007f0 <Error_Handler>
	}
}
 80006aa:	bf00      	nop
 80006ac:	3740      	adds	r7, #64	; 0x40
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_I2C1_Init+0x50>)
 80006ba:	4a13      	ldr	r2, [pc, #76]	; (8000708 <MX_I2C1_Init+0x54>)
 80006bc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_I2C1_Init+0x50>)
 80006c0:	4a12      	ldr	r2, [pc, #72]	; (800070c <MX_I2C1_Init+0x58>)
 80006c2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_I2C1_Init+0x50>)
 80006d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006d6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <MX_I2C1_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_I2C1_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <MX_I2C1_Init+0x50>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_I2C1_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80006f0:	4804      	ldr	r0, [pc, #16]	; (8000704 <MX_I2C1_Init+0x50>)
 80006f2:	f001 f907 	bl	8001904 <HAL_I2C_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80006fc:	f000 f878 	bl	80007f0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	200004b0 	.word	0x200004b0
 8000708:	40005400 	.word	0x40005400
 800070c:	00061a80 	.word	0x00061a80

08000710 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000716:	f107 0310 	add.w	r3, r7, #16
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000724:	4b2f      	ldr	r3, [pc, #188]	; (80007e4 <MX_GPIO_Init+0xd4>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a2e      	ldr	r2, [pc, #184]	; (80007e4 <MX_GPIO_Init+0xd4>)
 800072a:	f043 0310 	orr.w	r3, r3, #16
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b2c      	ldr	r3, [pc, #176]	; (80007e4 <MX_GPIO_Init+0xd4>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f003 0310 	and.w	r3, r3, #16
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800073c:	4b29      	ldr	r3, [pc, #164]	; (80007e4 <MX_GPIO_Init+0xd4>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a28      	ldr	r2, [pc, #160]	; (80007e4 <MX_GPIO_Init+0xd4>)
 8000742:	f043 0308 	orr.w	r3, r3, #8
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b26      	ldr	r3, [pc, #152]	; (80007e4 <MX_GPIO_Init+0xd4>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f003 0308 	and.w	r3, r3, #8
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000754:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <MX_GPIO_Init+0xd4>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a22      	ldr	r2, [pc, #136]	; (80007e4 <MX_GPIO_Init+0xd4>)
 800075a:	f043 0304 	orr.w	r3, r3, #4
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <MX_GPIO_Init+0xd4>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f003 0304 	and.w	r3, r3, #4
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_BUILD_GPIO_Port, LED_BUILD_Pin, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000772:	481d      	ldr	r0, [pc, #116]	; (80007e8 <MX_GPIO_Init+0xd8>)
 8000774:	f001 f8ad 	bl	80018d2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin | RGB_BLUE_Pin | RGB_GREEN_Pin,
 8000778:	2200      	movs	r2, #0
 800077a:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800077e:	481b      	ldr	r0, [pc, #108]	; (80007ec <MX_GPIO_Init+0xdc>)
 8000780:	f001 f8a7 	bl	80018d2 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : LED_BUILD_Pin */
	GPIO_InitStruct.Pin = LED_BUILD_Pin;
 8000784:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000788:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2302      	movs	r3, #2
 8000794:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_BUILD_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 0310 	add.w	r3, r7, #16
 800079a:	4619      	mov	r1, r3
 800079c:	4812      	ldr	r0, [pc, #72]	; (80007e8 <MX_GPIO_Init+0xd8>)
 800079e:	f000 ff27 	bl	80015f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : BUTTON_LEFT_Pin BUTTON_RIGHT_Pin */
	GPIO_InitStruct.Pin = BUTTON_LEFT_Pin | BUTTON_RIGHT_Pin;
 80007a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007a6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	4619      	mov	r1, r3
 80007b6:	480d      	ldr	r0, [pc, #52]	; (80007ec <MX_GPIO_Init+0xdc>)
 80007b8:	f000 ff1a 	bl	80015f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RGB_RED_Pin RGB_BLUE_Pin RGB_GREEN_Pin */
	GPIO_InitStruct.Pin = RGB_RED_Pin | RGB_BLUE_Pin | RGB_GREEN_Pin;
 80007bc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80007c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2302      	movs	r3, #2
 80007cc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ce:	f107 0310 	add.w	r3, r7, #16
 80007d2:	4619      	mov	r1, r3
 80007d4:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_GPIO_Init+0xdc>)
 80007d6:	f000 ff0b 	bl	80015f0 <HAL_GPIO_Init>
}
 80007da:	bf00      	nop
 80007dc:	3720      	adds	r7, #32
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40011000 	.word	0x40011000
 80007ec:	40010c00 	.word	0x40010c00

080007f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	60ba      	str	r2, [r7, #8]
 8000804:	461a      	mov	r2, r3
 8000806:	4603      	mov	r3, r0
 8000808:	81fb      	strh	r3, [r7, #14]
 800080a:	460b      	mov	r3, r1
 800080c:	81bb      	strh	r3, [r7, #12]
 800080e:	4613      	mov	r3, r2
 8000810:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000812:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000816:	3307      	adds	r3, #7
 8000818:	2b00      	cmp	r3, #0
 800081a:	da00      	bge.n	800081e <SSD1306_DrawBitmap+0x22>
 800081c:	3307      	adds	r3, #7
 800081e:	10db      	asrs	r3, r3, #3
 8000820:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000826:	2300      	movs	r3, #0
 8000828:	82bb      	strh	r3, [r7, #20]
 800082a:	e044      	b.n	80008b6 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 800082c:	2300      	movs	r3, #0
 800082e:	827b      	strh	r3, [r7, #18]
 8000830:	e02f      	b.n	8000892 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000832:	8a7b      	ldrh	r3, [r7, #18]
 8000834:	f003 0307 	and.w	r3, r3, #7
 8000838:	2b00      	cmp	r3, #0
 800083a:	d003      	beq.n	8000844 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 800083c:	7dfb      	ldrb	r3, [r7, #23]
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	75fb      	strb	r3, [r7, #23]
 8000842:	e012      	b.n	800086a <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000844:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000848:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800084c:	fb02 f203 	mul.w	r2, r2, r3
 8000850:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000854:	2b00      	cmp	r3, #0
 8000856:	da00      	bge.n	800085a <SSD1306_DrawBitmap+0x5e>
 8000858:	3307      	adds	r3, #7
 800085a:	10db      	asrs	r3, r3, #3
 800085c:	b21b      	sxth	r3, r3
 800085e:	4413      	add	r3, r2
 8000860:	461a      	mov	r2, r3
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800086a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800086e:	2b00      	cmp	r3, #0
 8000870:	da09      	bge.n	8000886 <SSD1306_DrawBitmap+0x8a>
 8000872:	89fa      	ldrh	r2, [r7, #14]
 8000874:	8a7b      	ldrh	r3, [r7, #18]
 8000876:	4413      	add	r3, r2
 8000878:	b29b      	uxth	r3, r3
 800087a:	89b9      	ldrh	r1, [r7, #12]
 800087c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800087e:	b2d2      	uxtb	r2, r2
 8000880:	4618      	mov	r0, r3
 8000882:	f000 f92d 	bl	8000ae0 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000886:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800088a:	b29b      	uxth	r3, r3
 800088c:	3301      	adds	r3, #1
 800088e:	b29b      	uxth	r3, r3
 8000890:	827b      	strh	r3, [r7, #18]
 8000892:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800089a:	429a      	cmp	r2, r3
 800089c:	dbc9      	blt.n	8000832 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 800089e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	3301      	adds	r3, #1
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	82bb      	strh	r3, [r7, #20]
 80008aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	3301      	adds	r3, #1
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	81bb      	strh	r3, [r7, #12]
 80008b6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80008ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80008be:	429a      	cmp	r2, r3
 80008c0:	dbb4      	blt.n	800082c <SSD1306_DrawBitmap+0x30>
        }
    }
}
 80008c2:	bf00      	nop
 80008c4:	3718      	adds	r7, #24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80008d2:	f000 fb8d 	bl	8000ff0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80008d6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80008da:	2201      	movs	r2, #1
 80008dc:	2178      	movs	r1, #120	; 0x78
 80008de:	485b      	ldr	r0, [pc, #364]	; (8000a4c <SSD1306_Init+0x180>)
 80008e0:	f001 fa46 	bl	8001d70 <HAL_I2C_IsDeviceReady>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	e0a9      	b.n	8000a42 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80008ee:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80008f2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80008f4:	e002      	b.n	80008fc <SSD1306_Init+0x30>
		p--;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	3b01      	subs	r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d1f9      	bne.n	80008f6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000902:	22ae      	movs	r2, #174	; 0xae
 8000904:	2100      	movs	r1, #0
 8000906:	2078      	movs	r0, #120	; 0x78
 8000908:	f000 fbce 	bl	80010a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800090c:	2220      	movs	r2, #32
 800090e:	2100      	movs	r1, #0
 8000910:	2078      	movs	r0, #120	; 0x78
 8000912:	f000 fbc9 	bl	80010a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000916:	2210      	movs	r2, #16
 8000918:	2100      	movs	r1, #0
 800091a:	2078      	movs	r0, #120	; 0x78
 800091c:	f000 fbc4 	bl	80010a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000920:	22b0      	movs	r2, #176	; 0xb0
 8000922:	2100      	movs	r1, #0
 8000924:	2078      	movs	r0, #120	; 0x78
 8000926:	f000 fbbf 	bl	80010a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800092a:	22c8      	movs	r2, #200	; 0xc8
 800092c:	2100      	movs	r1, #0
 800092e:	2078      	movs	r0, #120	; 0x78
 8000930:	f000 fbba 	bl	80010a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000934:	2200      	movs	r2, #0
 8000936:	2100      	movs	r1, #0
 8000938:	2078      	movs	r0, #120	; 0x78
 800093a:	f000 fbb5 	bl	80010a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800093e:	2210      	movs	r2, #16
 8000940:	2100      	movs	r1, #0
 8000942:	2078      	movs	r0, #120	; 0x78
 8000944:	f000 fbb0 	bl	80010a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000948:	2240      	movs	r2, #64	; 0x40
 800094a:	2100      	movs	r1, #0
 800094c:	2078      	movs	r0, #120	; 0x78
 800094e:	f000 fbab 	bl	80010a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000952:	2281      	movs	r2, #129	; 0x81
 8000954:	2100      	movs	r1, #0
 8000956:	2078      	movs	r0, #120	; 0x78
 8000958:	f000 fba6 	bl	80010a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800095c:	22ff      	movs	r2, #255	; 0xff
 800095e:	2100      	movs	r1, #0
 8000960:	2078      	movs	r0, #120	; 0x78
 8000962:	f000 fba1 	bl	80010a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000966:	22a1      	movs	r2, #161	; 0xa1
 8000968:	2100      	movs	r1, #0
 800096a:	2078      	movs	r0, #120	; 0x78
 800096c:	f000 fb9c 	bl	80010a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000970:	22a6      	movs	r2, #166	; 0xa6
 8000972:	2100      	movs	r1, #0
 8000974:	2078      	movs	r0, #120	; 0x78
 8000976:	f000 fb97 	bl	80010a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800097a:	22a8      	movs	r2, #168	; 0xa8
 800097c:	2100      	movs	r1, #0
 800097e:	2078      	movs	r0, #120	; 0x78
 8000980:	f000 fb92 	bl	80010a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000984:	223f      	movs	r2, #63	; 0x3f
 8000986:	2100      	movs	r1, #0
 8000988:	2078      	movs	r0, #120	; 0x78
 800098a:	f000 fb8d 	bl	80010a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800098e:	22a4      	movs	r2, #164	; 0xa4
 8000990:	2100      	movs	r1, #0
 8000992:	2078      	movs	r0, #120	; 0x78
 8000994:	f000 fb88 	bl	80010a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000998:	22d3      	movs	r2, #211	; 0xd3
 800099a:	2100      	movs	r1, #0
 800099c:	2078      	movs	r0, #120	; 0x78
 800099e:	f000 fb83 	bl	80010a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80009a2:	2200      	movs	r2, #0
 80009a4:	2100      	movs	r1, #0
 80009a6:	2078      	movs	r0, #120	; 0x78
 80009a8:	f000 fb7e 	bl	80010a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80009ac:	22d5      	movs	r2, #213	; 0xd5
 80009ae:	2100      	movs	r1, #0
 80009b0:	2078      	movs	r0, #120	; 0x78
 80009b2:	f000 fb79 	bl	80010a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80009b6:	22f0      	movs	r2, #240	; 0xf0
 80009b8:	2100      	movs	r1, #0
 80009ba:	2078      	movs	r0, #120	; 0x78
 80009bc:	f000 fb74 	bl	80010a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80009c0:	22d9      	movs	r2, #217	; 0xd9
 80009c2:	2100      	movs	r1, #0
 80009c4:	2078      	movs	r0, #120	; 0x78
 80009c6:	f000 fb6f 	bl	80010a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80009ca:	2222      	movs	r2, #34	; 0x22
 80009cc:	2100      	movs	r1, #0
 80009ce:	2078      	movs	r0, #120	; 0x78
 80009d0:	f000 fb6a 	bl	80010a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80009d4:	22da      	movs	r2, #218	; 0xda
 80009d6:	2100      	movs	r1, #0
 80009d8:	2078      	movs	r0, #120	; 0x78
 80009da:	f000 fb65 	bl	80010a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80009de:	2212      	movs	r2, #18
 80009e0:	2100      	movs	r1, #0
 80009e2:	2078      	movs	r0, #120	; 0x78
 80009e4:	f000 fb60 	bl	80010a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80009e8:	22db      	movs	r2, #219	; 0xdb
 80009ea:	2100      	movs	r1, #0
 80009ec:	2078      	movs	r0, #120	; 0x78
 80009ee:	f000 fb5b 	bl	80010a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80009f2:	2220      	movs	r2, #32
 80009f4:	2100      	movs	r1, #0
 80009f6:	2078      	movs	r0, #120	; 0x78
 80009f8:	f000 fb56 	bl	80010a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80009fc:	228d      	movs	r2, #141	; 0x8d
 80009fe:	2100      	movs	r1, #0
 8000a00:	2078      	movs	r0, #120	; 0x78
 8000a02:	f000 fb51 	bl	80010a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000a06:	2214      	movs	r2, #20
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2078      	movs	r0, #120	; 0x78
 8000a0c:	f000 fb4c 	bl	80010a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000a10:	22af      	movs	r2, #175	; 0xaf
 8000a12:	2100      	movs	r1, #0
 8000a14:	2078      	movs	r0, #120	; 0x78
 8000a16:	f000 fb47 	bl	80010a8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000a1a:	222e      	movs	r2, #46	; 0x2e
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2078      	movs	r0, #120	; 0x78
 8000a20:	f000 fb42 	bl	80010a8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000a24:	2000      	movs	r0, #0
 8000a26:	f000 f843 	bl	8000ab0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000a2a:	f000 f813 	bl	8000a54 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <SSD1306_Init+0x184>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <SSD1306_Init+0x184>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000a3a:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <SSD1306_Init+0x184>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000a40:	2301      	movs	r3, #1
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200004b0 	.word	0x200004b0
 8000a50:	2000049c 	.word	0x2000049c

08000a54 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	71fb      	strb	r3, [r7, #7]
 8000a5e:	e01d      	b.n	8000a9c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	3b50      	subs	r3, #80	; 0x50
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	461a      	mov	r2, r3
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2078      	movs	r0, #120	; 0x78
 8000a6c:	f000 fb1c 	bl	80010a8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2100      	movs	r1, #0
 8000a74:	2078      	movs	r0, #120	; 0x78
 8000a76:	f000 fb17 	bl	80010a8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000a7a:	2210      	movs	r2, #16
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2078      	movs	r0, #120	; 0x78
 8000a80:	f000 fb12 	bl	80010a8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	01db      	lsls	r3, r3, #7
 8000a88:	4a08      	ldr	r2, [pc, #32]	; (8000aac <SSD1306_UpdateScreen+0x58>)
 8000a8a:	441a      	add	r2, r3
 8000a8c:	2380      	movs	r3, #128	; 0x80
 8000a8e:	2140      	movs	r1, #64	; 0x40
 8000a90:	2078      	movs	r0, #120	; 0x78
 8000a92:	f000 fac1 	bl	8001018 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	71fb      	strb	r3, [r7, #7]
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	2b07      	cmp	r3, #7
 8000aa0:	d9de      	bls.n	8000a60 <SSD1306_UpdateScreen+0xc>
	}
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	2000009c 	.word	0x2000009c

08000ab0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d101      	bne.n	8000ac4 <SSD1306_Fill+0x14>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	e000      	b.n	8000ac6 <SSD1306_Fill+0x16>
 8000ac4:	23ff      	movs	r3, #255	; 0xff
 8000ac6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aca:	4619      	mov	r1, r3
 8000acc:	4803      	ldr	r0, [pc, #12]	; (8000adc <SSD1306_Fill+0x2c>)
 8000ace:	f002 f8b7 	bl	8002c40 <memset>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	2000009c 	.word	0x2000009c

08000ae0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	80fb      	strh	r3, [r7, #6]
 8000aea:	460b      	mov	r3, r1
 8000aec:	80bb      	strh	r3, [r7, #4]
 8000aee:	4613      	mov	r3, r2
 8000af0:	70fb      	strb	r3, [r7, #3]
	if (
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	2b7f      	cmp	r3, #127	; 0x7f
 8000af6:	d848      	bhi.n	8000b8a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000af8:	88bb      	ldrh	r3, [r7, #4]
 8000afa:	2b3f      	cmp	r3, #63	; 0x3f
 8000afc:	d845      	bhi.n	8000b8a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000afe:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <SSD1306_DrawPixel+0xb4>)
 8000b00:	791b      	ldrb	r3, [r3, #4]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d006      	beq.n	8000b14 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000b06:	78fb      	ldrb	r3, [r7, #3]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	bf0c      	ite	eq
 8000b0c:	2301      	moveq	r3, #1
 8000b0e:	2300      	movne	r3, #0
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000b14:	78fb      	ldrb	r3, [r7, #3]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d11a      	bne.n	8000b50 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000b1a:	88fa      	ldrh	r2, [r7, #6]
 8000b1c:	88bb      	ldrh	r3, [r7, #4]
 8000b1e:	08db      	lsrs	r3, r3, #3
 8000b20:	b298      	uxth	r0, r3
 8000b22:	4603      	mov	r3, r0
 8000b24:	01db      	lsls	r3, r3, #7
 8000b26:	4413      	add	r3, r2
 8000b28:	4a1b      	ldr	r2, [pc, #108]	; (8000b98 <SSD1306_DrawPixel+0xb8>)
 8000b2a:	5cd3      	ldrb	r3, [r2, r3]
 8000b2c:	b25a      	sxtb	r2, r3
 8000b2e:	88bb      	ldrh	r3, [r7, #4]
 8000b30:	f003 0307 	and.w	r3, r3, #7
 8000b34:	2101      	movs	r1, #1
 8000b36:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3a:	b25b      	sxtb	r3, r3
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	b259      	sxtb	r1, r3
 8000b40:	88fa      	ldrh	r2, [r7, #6]
 8000b42:	4603      	mov	r3, r0
 8000b44:	01db      	lsls	r3, r3, #7
 8000b46:	4413      	add	r3, r2
 8000b48:	b2c9      	uxtb	r1, r1
 8000b4a:	4a13      	ldr	r2, [pc, #76]	; (8000b98 <SSD1306_DrawPixel+0xb8>)
 8000b4c:	54d1      	strb	r1, [r2, r3]
 8000b4e:	e01d      	b.n	8000b8c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000b50:	88fa      	ldrh	r2, [r7, #6]
 8000b52:	88bb      	ldrh	r3, [r7, #4]
 8000b54:	08db      	lsrs	r3, r3, #3
 8000b56:	b298      	uxth	r0, r3
 8000b58:	4603      	mov	r3, r0
 8000b5a:	01db      	lsls	r3, r3, #7
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a0e      	ldr	r2, [pc, #56]	; (8000b98 <SSD1306_DrawPixel+0xb8>)
 8000b60:	5cd3      	ldrb	r3, [r2, r3]
 8000b62:	b25a      	sxtb	r2, r3
 8000b64:	88bb      	ldrh	r3, [r7, #4]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b70:	b25b      	sxtb	r3, r3
 8000b72:	43db      	mvns	r3, r3
 8000b74:	b25b      	sxtb	r3, r3
 8000b76:	4013      	ands	r3, r2
 8000b78:	b259      	sxtb	r1, r3
 8000b7a:	88fa      	ldrh	r2, [r7, #6]
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	01db      	lsls	r3, r3, #7
 8000b80:	4413      	add	r3, r2
 8000b82:	b2c9      	uxtb	r1, r1
 8000b84:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <SSD1306_DrawPixel+0xb8>)
 8000b86:	54d1      	strb	r1, [r2, r3]
 8000b88:	e000      	b.n	8000b8c <SSD1306_DrawPixel+0xac>
		return;
 8000b8a:	bf00      	nop
	}
}
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	2000049c 	.word	0x2000049c
 8000b98:	2000009c 	.word	0x2000009c

08000b9c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	460a      	mov	r2, r1
 8000ba6:	80fb      	strh	r3, [r7, #6]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000bac:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <SSD1306_GotoXY+0x28>)
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000bb2:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <SSD1306_GotoXY+0x28>)
 8000bb4:	88bb      	ldrh	r3, [r7, #4]
 8000bb6:	8053      	strh	r3, [r2, #2]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	2000049c 	.word	0x2000049c

08000bc8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	6039      	str	r1, [r7, #0]
 8000bd2:	71fb      	strb	r3, [r7, #7]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000bd8:	4b3a      	ldr	r3, [pc, #232]	; (8000cc4 <SSD1306_Putc+0xfc>)
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	4413      	add	r3, r2
	if (
 8000be4:	2b7f      	cmp	r3, #127	; 0x7f
 8000be6:	dc07      	bgt.n	8000bf8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000be8:	4b36      	ldr	r3, [pc, #216]	; (8000cc4 <SSD1306_Putc+0xfc>)
 8000bea:	885b      	ldrh	r3, [r3, #2]
 8000bec:	461a      	mov	r2, r3
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	785b      	ldrb	r3, [r3, #1]
 8000bf2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000bf4:	2b3f      	cmp	r3, #63	; 0x3f
 8000bf6:	dd01      	ble.n	8000bfc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	e05e      	b.n	8000cba <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	e04b      	b.n	8000c9a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685a      	ldr	r2, [r3, #4]
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	3b20      	subs	r3, #32
 8000c0a:	6839      	ldr	r1, [r7, #0]
 8000c0c:	7849      	ldrb	r1, [r1, #1]
 8000c0e:	fb01 f303 	mul.w	r3, r1, r3
 8000c12:	4619      	mov	r1, r3
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	440b      	add	r3, r1
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000c20:	2300      	movs	r3, #0
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	e030      	b.n	8000c88 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d010      	beq.n	8000c58 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000c36:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <SSD1306_Putc+0xfc>)
 8000c38:	881a      	ldrh	r2, [r3, #0]
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	4413      	add	r3, r2
 8000c40:	b298      	uxth	r0, r3
 8000c42:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <SSD1306_Putc+0xfc>)
 8000c44:	885a      	ldrh	r2, [r3, #2]
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	4413      	add	r3, r2
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	79ba      	ldrb	r2, [r7, #6]
 8000c50:	4619      	mov	r1, r3
 8000c52:	f7ff ff45 	bl	8000ae0 <SSD1306_DrawPixel>
 8000c56:	e014      	b.n	8000c82 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000c58:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <SSD1306_Putc+0xfc>)
 8000c5a:	881a      	ldrh	r2, [r3, #0]
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	4413      	add	r3, r2
 8000c62:	b298      	uxth	r0, r3
 8000c64:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <SSD1306_Putc+0xfc>)
 8000c66:	885a      	ldrh	r2, [r3, #2]
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	4413      	add	r3, r2
 8000c6e:	b299      	uxth	r1, r3
 8000c70:	79bb      	ldrb	r3, [r7, #6]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	bf0c      	ite	eq
 8000c76:	2301      	moveq	r3, #1
 8000c78:	2300      	movne	r3, #0
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	f7ff ff2f 	bl	8000ae0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	3301      	adds	r3, #1
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d3c8      	bcc.n	8000c26 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	3301      	adds	r3, #1
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	785b      	ldrb	r3, [r3, #1]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d3ad      	bcc.n	8000c02 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000ca6:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <SSD1306_Putc+0xfc>)
 8000ca8:	881a      	ldrh	r2, [r3, #0]
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	4413      	add	r3, r2
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <SSD1306_Putc+0xfc>)
 8000cb6:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	2000049c 	.word	0x2000049c

08000cc8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000cd6:	e012      	b.n	8000cfe <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	79fa      	ldrb	r2, [r7, #7]
 8000cde:	68b9      	ldr	r1, [r7, #8]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff71 	bl	8000bc8 <SSD1306_Putc>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	461a      	mov	r2, r3
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d002      	beq.n	8000cf8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	e008      	b.n	8000d0a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d1e8      	bne.n	8000cd8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	781b      	ldrb	r3, [r3, #0]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8000d12:	b590      	push	{r4, r7, lr}
 8000d14:	b087      	sub	sp, #28
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4604      	mov	r4, r0
 8000d1a:	4608      	mov	r0, r1
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4623      	mov	r3, r4
 8000d22:	80fb      	strh	r3, [r7, #6]
 8000d24:	4603      	mov	r3, r0
 8000d26:	80bb      	strh	r3, [r7, #4]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	807b      	strh	r3, [r7, #2]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8000d30:	88fb      	ldrh	r3, [r7, #6]
 8000d32:	2b7f      	cmp	r3, #127	; 0x7f
 8000d34:	d901      	bls.n	8000d3a <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8000d36:	237f      	movs	r3, #127	; 0x7f
 8000d38:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8000d3a:	887b      	ldrh	r3, [r7, #2]
 8000d3c:	2b7f      	cmp	r3, #127	; 0x7f
 8000d3e:	d901      	bls.n	8000d44 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8000d40:	237f      	movs	r3, #127	; 0x7f
 8000d42:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8000d44:	88bb      	ldrh	r3, [r7, #4]
 8000d46:	2b3f      	cmp	r3, #63	; 0x3f
 8000d48:	d901      	bls.n	8000d4e <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8000d4a:	233f      	movs	r3, #63	; 0x3f
 8000d4c:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8000d4e:	883b      	ldrh	r3, [r7, #0]
 8000d50:	2b3f      	cmp	r3, #63	; 0x3f
 8000d52:	d901      	bls.n	8000d58 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8000d54:	233f      	movs	r3, #63	; 0x3f
 8000d56:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8000d58:	88fa      	ldrh	r2, [r7, #6]
 8000d5a:	887b      	ldrh	r3, [r7, #2]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d205      	bcs.n	8000d6c <SSD1306_DrawLine+0x5a>
 8000d60:	887a      	ldrh	r2, [r7, #2]
 8000d62:	88fb      	ldrh	r3, [r7, #6]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	b21b      	sxth	r3, r3
 8000d6a:	e004      	b.n	8000d76 <SSD1306_DrawLine+0x64>
 8000d6c:	88fa      	ldrh	r2, [r7, #6]
 8000d6e:	887b      	ldrh	r3, [r7, #2]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	b21b      	sxth	r3, r3
 8000d76:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8000d78:	88ba      	ldrh	r2, [r7, #4]
 8000d7a:	883b      	ldrh	r3, [r7, #0]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d205      	bcs.n	8000d8c <SSD1306_DrawLine+0x7a>
 8000d80:	883a      	ldrh	r2, [r7, #0]
 8000d82:	88bb      	ldrh	r3, [r7, #4]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	b21b      	sxth	r3, r3
 8000d8a:	e004      	b.n	8000d96 <SSD1306_DrawLine+0x84>
 8000d8c:	88ba      	ldrh	r2, [r7, #4]
 8000d8e:	883b      	ldrh	r3, [r7, #0]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	b21b      	sxth	r3, r3
 8000d96:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8000d98:	88fa      	ldrh	r2, [r7, #6]
 8000d9a:	887b      	ldrh	r3, [r7, #2]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d201      	bcs.n	8000da4 <SSD1306_DrawLine+0x92>
 8000da0:	2301      	movs	r3, #1
 8000da2:	e001      	b.n	8000da8 <SSD1306_DrawLine+0x96>
 8000da4:	f04f 33ff 	mov.w	r3, #4294967295
 8000da8:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8000daa:	88ba      	ldrh	r2, [r7, #4]
 8000dac:	883b      	ldrh	r3, [r7, #0]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d201      	bcs.n	8000db6 <SSD1306_DrawLine+0xa4>
 8000db2:	2301      	movs	r3, #1
 8000db4:	e001      	b.n	8000dba <SSD1306_DrawLine+0xa8>
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dba:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8000dbc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000dc0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	dd06      	ble.n	8000dd6 <SSD1306_DrawLine+0xc4>
 8000dc8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000dcc:	0fda      	lsrs	r2, r3, #31
 8000dce:	4413      	add	r3, r2
 8000dd0:	105b      	asrs	r3, r3, #1
 8000dd2:	b21b      	sxth	r3, r3
 8000dd4:	e006      	b.n	8000de4 <SSD1306_DrawLine+0xd2>
 8000dd6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000dda:	425b      	negs	r3, r3
 8000ddc:	0fda      	lsrs	r2, r3, #31
 8000dde:	4413      	add	r3, r2
 8000de0:	105b      	asrs	r3, r3, #1
 8000de2:	b21b      	sxth	r3, r3
 8000de4:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8000de6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d129      	bne.n	8000e42 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8000dee:	883a      	ldrh	r2, [r7, #0]
 8000df0:	88bb      	ldrh	r3, [r7, #4]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d205      	bcs.n	8000e02 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8000df6:	883b      	ldrh	r3, [r7, #0]
 8000df8:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000dfa:	88bb      	ldrh	r3, [r7, #4]
 8000dfc:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000dfe:	893b      	ldrh	r3, [r7, #8]
 8000e00:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8000e02:	887a      	ldrh	r2, [r7, #2]
 8000e04:	88fb      	ldrh	r3, [r7, #6]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d205      	bcs.n	8000e16 <SSD1306_DrawLine+0x104>
			tmp = x1;
 8000e0a:	887b      	ldrh	r3, [r7, #2]
 8000e0c:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000e0e:	88fb      	ldrh	r3, [r7, #6]
 8000e10:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000e12:	893b      	ldrh	r3, [r7, #8]
 8000e14:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8000e16:	88bb      	ldrh	r3, [r7, #4]
 8000e18:	82bb      	strh	r3, [r7, #20]
 8000e1a:	e00c      	b.n	8000e36 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8000e1c:	8ab9      	ldrh	r1, [r7, #20]
 8000e1e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000e22:	88fb      	ldrh	r3, [r7, #6]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fe5b 	bl	8000ae0 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8000e2a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	3301      	adds	r3, #1
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	82bb      	strh	r3, [r7, #20]
 8000e36:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000e3a:	883b      	ldrh	r3, [r7, #0]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	dded      	ble.n	8000e1c <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8000e40:	e05f      	b.n	8000f02 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8000e42:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d129      	bne.n	8000e9e <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8000e4a:	883a      	ldrh	r2, [r7, #0]
 8000e4c:	88bb      	ldrh	r3, [r7, #4]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d205      	bcs.n	8000e5e <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8000e52:	883b      	ldrh	r3, [r7, #0]
 8000e54:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000e56:	88bb      	ldrh	r3, [r7, #4]
 8000e58:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000e5a:	893b      	ldrh	r3, [r7, #8]
 8000e5c:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8000e5e:	887a      	ldrh	r2, [r7, #2]
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d205      	bcs.n	8000e72 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8000e66:	887b      	ldrh	r3, [r7, #2]
 8000e68:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000e6a:	88fb      	ldrh	r3, [r7, #6]
 8000e6c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000e6e:	893b      	ldrh	r3, [r7, #8]
 8000e70:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	82bb      	strh	r3, [r7, #20]
 8000e76:	e00c      	b.n	8000e92 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8000e78:	8abb      	ldrh	r3, [r7, #20]
 8000e7a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000e7e:	88b9      	ldrh	r1, [r7, #4]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fe2d 	bl	8000ae0 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8000e86:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	82bb      	strh	r3, [r7, #20]
 8000e92:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000e96:	887b      	ldrh	r3, [r7, #2]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	dded      	ble.n	8000e78 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8000e9c:	e031      	b.n	8000f02 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8000e9e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000ea2:	88b9      	ldrh	r1, [r7, #4]
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fe1a 	bl	8000ae0 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8000eac:	88fa      	ldrh	r2, [r7, #6]
 8000eae:	887b      	ldrh	r3, [r7, #2]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d103      	bne.n	8000ebc <SSD1306_DrawLine+0x1aa>
 8000eb4:	88ba      	ldrh	r2, [r7, #4]
 8000eb6:	883b      	ldrh	r3, [r7, #0]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d021      	beq.n	8000f00 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8000ebc:	8afb      	ldrh	r3, [r7, #22]
 8000ebe:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8000ec0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ec4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ec8:	425b      	negs	r3, r3
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	dd08      	ble.n	8000ee0 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8000ece:	8afa      	ldrh	r2, [r7, #22]
 8000ed0:	8a3b      	ldrh	r3, [r7, #16]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8000ed8:	89fa      	ldrh	r2, [r7, #14]
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	4413      	add	r3, r2
 8000ede:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8000ee0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ee4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	dad8      	bge.n	8000e9e <SSD1306_DrawLine+0x18c>
			err += dx;
 8000eec:	8afa      	ldrh	r2, [r7, #22]
 8000eee:	8a7b      	ldrh	r3, [r7, #18]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8000ef6:	89ba      	ldrh	r2, [r7, #12]
 8000ef8:	88bb      	ldrh	r3, [r7, #4]
 8000efa:	4413      	add	r3, r2
 8000efc:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8000efe:	e7ce      	b.n	8000e9e <SSD1306_DrawLine+0x18c>
			break;
 8000f00:	bf00      	nop
		} 
	}
}
 8000f02:	371c      	adds	r7, #28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd90      	pop	{r4, r7, pc}

08000f08 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af02      	add	r7, sp, #8
 8000f0e:	4604      	mov	r4, r0
 8000f10:	4608      	mov	r0, r1
 8000f12:	4611      	mov	r1, r2
 8000f14:	461a      	mov	r2, r3
 8000f16:	4623      	mov	r3, r4
 8000f18:	80fb      	strh	r3, [r7, #6]
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	80bb      	strh	r3, [r7, #4]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	807b      	strh	r3, [r7, #2]
 8000f22:	4613      	mov	r3, r2
 8000f24:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	2b7f      	cmp	r3, #127	; 0x7f
 8000f2a:	d853      	bhi.n	8000fd4 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8000f2c:	88bb      	ldrh	r3, [r7, #4]
 8000f2e:	2b3f      	cmp	r3, #63	; 0x3f
 8000f30:	d850      	bhi.n	8000fd4 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8000f32:	88fa      	ldrh	r2, [r7, #6]
 8000f34:	887b      	ldrh	r3, [r7, #2]
 8000f36:	4413      	add	r3, r2
 8000f38:	2b7f      	cmp	r3, #127	; 0x7f
 8000f3a:	dd03      	ble.n	8000f44 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000f42:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8000f44:	88ba      	ldrh	r2, [r7, #4]
 8000f46:	883b      	ldrh	r3, [r7, #0]
 8000f48:	4413      	add	r3, r2
 8000f4a:	2b3f      	cmp	r3, #63	; 0x3f
 8000f4c:	dd03      	ble.n	8000f56 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8000f4e:	88bb      	ldrh	r3, [r7, #4]
 8000f50:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000f54:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8000f56:	88fa      	ldrh	r2, [r7, #6]
 8000f58:	887b      	ldrh	r3, [r7, #2]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	88bc      	ldrh	r4, [r7, #4]
 8000f60:	88b9      	ldrh	r1, [r7, #4]
 8000f62:	88f8      	ldrh	r0, [r7, #6]
 8000f64:	7e3b      	ldrb	r3, [r7, #24]
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	4623      	mov	r3, r4
 8000f6a:	f7ff fed2 	bl	8000d12 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8000f6e:	88ba      	ldrh	r2, [r7, #4]
 8000f70:	883b      	ldrh	r3, [r7, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	b299      	uxth	r1, r3
 8000f76:	88fa      	ldrh	r2, [r7, #6]
 8000f78:	887b      	ldrh	r3, [r7, #2]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	b29c      	uxth	r4, r3
 8000f7e:	88ba      	ldrh	r2, [r7, #4]
 8000f80:	883b      	ldrh	r3, [r7, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	88f8      	ldrh	r0, [r7, #6]
 8000f88:	7e3b      	ldrb	r3, [r7, #24]
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	4622      	mov	r2, r4
 8000f90:	f7ff febf 	bl	8000d12 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8000f94:	88ba      	ldrh	r2, [r7, #4]
 8000f96:	883b      	ldrh	r3, [r7, #0]
 8000f98:	4413      	add	r3, r2
 8000f9a:	b29c      	uxth	r4, r3
 8000f9c:	88fa      	ldrh	r2, [r7, #6]
 8000f9e:	88b9      	ldrh	r1, [r7, #4]
 8000fa0:	88f8      	ldrh	r0, [r7, #6]
 8000fa2:	7e3b      	ldrb	r3, [r7, #24]
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	f7ff feb3 	bl	8000d12 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8000fac:	88fa      	ldrh	r2, [r7, #6]
 8000fae:	887b      	ldrh	r3, [r7, #2]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	b298      	uxth	r0, r3
 8000fb4:	88fa      	ldrh	r2, [r7, #6]
 8000fb6:	887b      	ldrh	r3, [r7, #2]
 8000fb8:	4413      	add	r3, r2
 8000fba:	b29c      	uxth	r4, r3
 8000fbc:	88ba      	ldrh	r2, [r7, #4]
 8000fbe:	883b      	ldrh	r3, [r7, #0]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	88b9      	ldrh	r1, [r7, #4]
 8000fc6:	7e3b      	ldrb	r3, [r7, #24]
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	4622      	mov	r2, r4
 8000fce:	f7ff fea0 	bl	8000d12 <SSD1306_DrawLine>
 8000fd2:	e000      	b.n	8000fd6 <SSD1306_DrawRectangle+0xce>
		return;
 8000fd4:	bf00      	nop
}
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd90      	pop	{r4, r7, pc}

08000fdc <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f7ff fd65 	bl	8000ab0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000fe6:	f7ff fd35 	bl	8000a54 <SSD1306_UpdateScreen>
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <ssd1306_I2C_Init+0x24>)
 8000ff8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ffa:	e002      	b.n	8001002 <ssd1306_I2C_Init+0x12>
		p--;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1f9      	bne.n	8000ffc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	0003d090 	.word	0x0003d090

08001018 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b0c7      	sub	sp, #284	; 0x11c
 800101c:	af02      	add	r7, sp, #8
 800101e:	4604      	mov	r4, r0
 8001020:	4608      	mov	r0, r1
 8001022:	4639      	mov	r1, r7
 8001024:	600a      	str	r2, [r1, #0]
 8001026:	4619      	mov	r1, r3
 8001028:	1dfb      	adds	r3, r7, #7
 800102a:	4622      	mov	r2, r4
 800102c:	701a      	strb	r2, [r3, #0]
 800102e:	1dbb      	adds	r3, r7, #6
 8001030:	4602      	mov	r2, r0
 8001032:	701a      	strb	r2, [r3, #0]
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	460a      	mov	r2, r1
 8001038:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	1dba      	adds	r2, r7, #6
 8001040:	7812      	ldrb	r2, [r2, #0]
 8001042:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001044:	2300      	movs	r3, #0
 8001046:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800104a:	e010      	b.n	800106e <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 800104c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001050:	463a      	mov	r2, r7
 8001052:	6812      	ldr	r2, [r2, #0]
 8001054:	441a      	add	r2, r3
 8001056:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800105a:	3301      	adds	r3, #1
 800105c:	7811      	ldrb	r1, [r2, #0]
 800105e:	f107 020c 	add.w	r2, r7, #12
 8001062:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001064:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001068:	3301      	adds	r3, #1
 800106a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800106e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001072:	b29b      	uxth	r3, r3
 8001074:	1d3a      	adds	r2, r7, #4
 8001076:	8812      	ldrh	r2, [r2, #0]
 8001078:	429a      	cmp	r2, r3
 800107a:	d8e7      	bhi.n	800104c <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800107c:	1dfb      	adds	r3, r7, #7
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b299      	uxth	r1, r3
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	3301      	adds	r3, #1
 8001088:	b298      	uxth	r0, r3
 800108a:	f107 020c 	add.w	r2, r7, #12
 800108e:	230a      	movs	r3, #10
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	4603      	mov	r3, r0
 8001094:	4803      	ldr	r0, [pc, #12]	; (80010a4 <ssd1306_I2C_WriteMulti+0x8c>)
 8001096:	f000 fd6d 	bl	8001b74 <HAL_I2C_Master_Transmit>
}
 800109a:	bf00      	nop
 800109c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd90      	pop	{r4, r7, pc}
 80010a4:	200004b0 	.word	0x200004b0

080010a8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
 80010b2:	460b      	mov	r3, r1
 80010b4:	71bb      	strb	r3, [r7, #6]
 80010b6:	4613      	mov	r3, r2
 80010b8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80010ba:	79bb      	ldrb	r3, [r7, #6]
 80010bc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80010be:	797b      	ldrb	r3, [r7, #5]
 80010c0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	b299      	uxth	r1, r3
 80010c6:	f107 020c 	add.w	r2, r7, #12
 80010ca:	230a      	movs	r3, #10
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	2302      	movs	r3, #2
 80010d0:	4803      	ldr	r0, [pc, #12]	; (80010e0 <ssd1306_I2C_Write+0x38>)
 80010d2:	f000 fd4f 	bl	8001b74 <HAL_I2C_Master_Transmit>
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200004b0 	.word	0x200004b0

080010e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <HAL_MspInit+0x5c>)
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	4a14      	ldr	r2, [pc, #80]	; (8001140 <HAL_MspInit+0x5c>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6193      	str	r3, [r2, #24]
 80010f6:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_MspInit+0x5c>)
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <HAL_MspInit+0x5c>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <HAL_MspInit+0x5c>)
 8001108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110c:	61d3      	str	r3, [r2, #28]
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <HAL_MspInit+0x5c>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800111a:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <HAL_MspInit+0x60>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <HAL_MspInit+0x60>)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	40021000 	.word	0x40021000
 8001144:	40010000 	.word	0x40010000

08001148 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a15      	ldr	r2, [pc, #84]	; (80011b8 <HAL_I2C_MspInit+0x70>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d123      	bne.n	80011b0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <HAL_I2C_MspInit+0x74>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	4a13      	ldr	r2, [pc, #76]	; (80011bc <HAL_I2C_MspInit+0x74>)
 800116e:	f043 0308 	orr.w	r3, r3, #8
 8001172:	6193      	str	r3, [r2, #24]
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <HAL_I2C_MspInit+0x74>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f003 0308 	and.w	r3, r3, #8
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001180:	23c0      	movs	r3, #192	; 0xc0
 8001182:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001184:	2312      	movs	r3, #18
 8001186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001188:	2303      	movs	r3, #3
 800118a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	4619      	mov	r1, r3
 8001192:	480b      	ldr	r0, [pc, #44]	; (80011c0 <HAL_I2C_MspInit+0x78>)
 8001194:	f000 fa2c 	bl	80015f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <HAL_I2C_MspInit+0x74>)
 800119a:	69db      	ldr	r3, [r3, #28]
 800119c:	4a07      	ldr	r2, [pc, #28]	; (80011bc <HAL_I2C_MspInit+0x74>)
 800119e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011a2:	61d3      	str	r3, [r2, #28]
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <HAL_I2C_MspInit+0x74>)
 80011a6:	69db      	ldr	r3, [r3, #28]
 80011a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011b0:	bf00      	nop
 80011b2:	3720      	adds	r7, #32
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40005400 	.word	0x40005400
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40010c00 	.word	0x40010c00

080011c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <HardFault_Handler+0x4>

080011d6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <MemManage_Handler+0x4>

080011dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <BusFault_Handler+0x4>

080011e2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <UsageFault_Handler+0x4>

080011e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr

08001200 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001210:	f000 f8cc 	bl	80013ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}

08001218 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <_sbrk+0x50>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d102      	bne.n	800122e <_sbrk+0x16>
		heap_end = &end;
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <_sbrk+0x50>)
 800122a:	4a10      	ldr	r2, [pc, #64]	; (800126c <_sbrk+0x54>)
 800122c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <_sbrk+0x50>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <_sbrk+0x50>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4413      	add	r3, r2
 800123c:	466a      	mov	r2, sp
 800123e:	4293      	cmp	r3, r2
 8001240:	d907      	bls.n	8001252 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001242:	f001 fcd3 	bl	8002bec <__errno>
 8001246:	4602      	mov	r2, r0
 8001248:	230c      	movs	r3, #12
 800124a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800124c:	f04f 33ff 	mov.w	r3, #4294967295
 8001250:	e006      	b.n	8001260 <_sbrk+0x48>
	}

	heap_end += incr;
 8001252:	4b05      	ldr	r3, [pc, #20]	; (8001268 <_sbrk+0x50>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	4a03      	ldr	r2, [pc, #12]	; (8001268 <_sbrk+0x50>)
 800125c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800125e:	68fb      	ldr	r3, [r7, #12]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	200004a4 	.word	0x200004a4
 800126c:	20000510 	.word	0x20000510

08001270 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr

0800127c <character_draw>:
        SSD1306_UpdateScreen();
        HAL_Delay (10);
    }
}
void character_draw (uint8_t color)
{
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b087      	sub	sp, #28
 8001280:	af02      	add	r7, sp, #8
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
    uint8_t n, i, i2;

    SSD1306_Clear ();
 8001286:	f7ff fea9 	bl	8000fdc <SSD1306_Clear>

    n = min(SSD1306_WIDTH, SSD1306_HEIGHT);
 800128a:	2340      	movs	r3, #64	; 0x40
 800128c:	73bb      	strb	r3, [r7, #14]

    for (i = 2; i < 30; i += 6)
 800128e:	2302      	movs	r3, #2
 8001290:	73fb      	strb	r3, [r7, #15]
 8001292:	e018      	b.n	80012c6 <character_draw+0x4a>
    {
        i2 = i / 2;
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	085b      	lsrs	r3, r3, #1
 8001298:	737b      	strb	r3, [r7, #13]
        SSD1306_DrawRectangle((SSD1306_WIDTH/2) - i2, (SSD1306_HEIGHT/2) - i2 + 10, i, i, color);
 800129a:	7b7b      	ldrb	r3, [r7, #13]
 800129c:	b29b      	uxth	r3, r3
 800129e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80012a2:	b298      	uxth	r0, r3
 80012a4:	7b7b      	ldrb	r3, [r7, #13]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	f1c3 032a 	rsb	r3, r3, #42	; 0x2a
 80012ac:	b299      	uxth	r1, r3
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	b29c      	uxth	r4, r3
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	4623      	mov	r3, r4
 80012bc:	f7ff fe24 	bl	8000f08 <SSD1306_DrawRectangle>
    for (i = 2; i < 30; i += 6)
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	3306      	adds	r3, #6
 80012c4:	73fb      	strb	r3, [r7, #15]
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	2b1d      	cmp	r3, #29
 80012ca:	d9e3      	bls.n	8001294 <character_draw+0x18>
        //SSD1306_UpdateScreen();
        //HAL_Delay (10);
    }
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd90      	pop	{r4, r7, pc}

080012d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80012d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80012d6:	e003      	b.n	80012e0 <LoopCopyDataInit>

080012d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80012da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80012dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80012de:	3104      	adds	r1, #4

080012e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80012e0:	480a      	ldr	r0, [pc, #40]	; (800130c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80012e2:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80012e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80012e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80012e8:	d3f6      	bcc.n	80012d8 <CopyDataInit>
  ldr r2, =_sbss
 80012ea:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80012ec:	e002      	b.n	80012f4 <LoopFillZerobss>

080012ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80012f0:	f842 3b04 	str.w	r3, [r2], #4

080012f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80012f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80012f8:	d3f9      	bcc.n	80012ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012fa:	f7ff ffb9 	bl	8001270 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012fe:	f001 fc7b 	bl	8002bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001302:	f7fe ff23 	bl	800014c <main>
  bx lr
 8001306:	4770      	bx	lr
  ldr r3, =_sidata
 8001308:	08004dfc 	.word	0x08004dfc
  ldr r0, =_sdata
 800130c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001310:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 8001314:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 8001318:	2000050c 	.word	0x2000050c

0800131c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800131c:	e7fe      	b.n	800131c <ADC1_2_IRQHandler>
	...

08001320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <HAL_Init+0x28>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a07      	ldr	r2, [pc, #28]	; (8001348 <HAL_Init+0x28>)
 800132a:	f043 0310 	orr.w	r3, r3, #16
 800132e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001330:	2003      	movs	r0, #3
 8001332:	f000 f929 	bl	8001588 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001336:	2000      	movs	r0, #0
 8001338:	f000 f808 	bl	800134c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800133c:	f7ff fed2 	bl	80010e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40022000 	.word	0x40022000

0800134c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_InitTick+0x54>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_InitTick+0x58>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	4619      	mov	r1, r3
 800135e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001362:	fbb3 f3f1 	udiv	r3, r3, r1
 8001366:	fbb2 f3f3 	udiv	r3, r2, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f933 	bl	80015d6 <HAL_SYSTICK_Config>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e00e      	b.n	8001398 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b0f      	cmp	r3, #15
 800137e:	d80a      	bhi.n	8001396 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001380:	2200      	movs	r2, #0
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	f04f 30ff 	mov.w	r0, #4294967295
 8001388:	f000 f909 	bl	800159e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800138c:	4a06      	ldr	r2, [pc, #24]	; (80013a8 <HAL_InitTick+0x5c>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001392:	2300      	movs	r3, #0
 8001394:	e000      	b.n	8001398 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000010 	.word	0x20000010
 80013a4:	20000018 	.word	0x20000018
 80013a8:	20000014 	.word	0x20000014

080013ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <HAL_IncTick+0x1c>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b05      	ldr	r3, [pc, #20]	; (80013cc <HAL_IncTick+0x20>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	4a03      	ldr	r2, [pc, #12]	; (80013cc <HAL_IncTick+0x20>)
 80013be:	6013      	str	r3, [r2, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	20000018 	.word	0x20000018
 80013cc:	20000504 	.word	0x20000504

080013d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return uwTick;
 80013d4:	4b02      	ldr	r3, [pc, #8]	; (80013e0 <HAL_GetTick+0x10>)
 80013d6:	681b      	ldr	r3, [r3, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	20000504 	.word	0x20000504

080013e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013ec:	f7ff fff0 	bl	80013d0 <HAL_GetTick>
 80013f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013fc:	d005      	beq.n	800140a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_Delay+0x40>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4413      	add	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800140a:	bf00      	nop
 800140c:	f7ff ffe0 	bl	80013d0 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	429a      	cmp	r2, r3
 800141a:	d8f7      	bhi.n	800140c <HAL_Delay+0x28>
  {
  }
}
 800141c:	bf00      	nop
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000018 	.word	0x20000018

08001428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <__NVIC_SetPriorityGrouping+0x44>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001444:	4013      	ands	r3, r2
 8001446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001450:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145a:	4a04      	ldr	r2, [pc, #16]	; (800146c <__NVIC_SetPriorityGrouping+0x44>)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	60d3      	str	r3, [r2, #12]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <__NVIC_GetPriorityGrouping+0x18>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	0a1b      	lsrs	r3, r3, #8
 800147a:	f003 0307 	and.w	r3, r3, #7
}
 800147e:	4618      	mov	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149c:	2b00      	cmp	r3, #0
 800149e:	db0a      	blt.n	80014b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	490c      	ldr	r1, [pc, #48]	; (80014d8 <__NVIC_SetPriority+0x4c>)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	0112      	lsls	r2, r2, #4
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	440b      	add	r3, r1
 80014b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b4:	e00a      	b.n	80014cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4908      	ldr	r1, [pc, #32]	; (80014dc <__NVIC_SetPriority+0x50>)
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	3b04      	subs	r3, #4
 80014c4:	0112      	lsls	r2, r2, #4
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	440b      	add	r3, r1
 80014ca:	761a      	strb	r2, [r3, #24]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000e100 	.word	0xe000e100
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f1c3 0307 	rsb	r3, r3, #7
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	bf28      	it	cs
 80014fe:	2304      	movcs	r3, #4
 8001500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3304      	adds	r3, #4
 8001506:	2b06      	cmp	r3, #6
 8001508:	d902      	bls.n	8001510 <NVIC_EncodePriority+0x30>
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3b03      	subs	r3, #3
 800150e:	e000      	b.n	8001512 <NVIC_EncodePriority+0x32>
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	f04f 32ff 	mov.w	r2, #4294967295
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43da      	mvns	r2, r3
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	401a      	ands	r2, r3
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001528:	f04f 31ff 	mov.w	r1, #4294967295
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	fa01 f303 	lsl.w	r3, r1, r3
 8001532:	43d9      	mvns	r1, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	4313      	orrs	r3, r2
         );
}
 800153a:	4618      	mov	r0, r3
 800153c:	3724      	adds	r7, #36	; 0x24
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001554:	d301      	bcc.n	800155a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001556:	2301      	movs	r3, #1
 8001558:	e00f      	b.n	800157a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800155a:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <SysTick_Config+0x40>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001562:	210f      	movs	r1, #15
 8001564:	f04f 30ff 	mov.w	r0, #4294967295
 8001568:	f7ff ff90 	bl	800148c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <SysTick_Config+0x40>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001572:	4b04      	ldr	r3, [pc, #16]	; (8001584 <SysTick_Config+0x40>)
 8001574:	2207      	movs	r2, #7
 8001576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	e000e010 	.word	0xe000e010

08001588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff ff49 	bl	8001428 <__NVIC_SetPriorityGrouping>
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800159e:	b580      	push	{r7, lr}
 80015a0:	b086      	sub	sp, #24
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
 80015aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b0:	f7ff ff5e 	bl	8001470 <__NVIC_GetPriorityGrouping>
 80015b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	6978      	ldr	r0, [r7, #20]
 80015bc:	f7ff ff90 	bl	80014e0 <NVIC_EncodePriority>
 80015c0:	4602      	mov	r2, r0
 80015c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff5f 	bl	800148c <__NVIC_SetPriority>
}
 80015ce:	bf00      	nop
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ffb0 	bl	8001544 <SysTick_Config>
 80015e4:	4603      	mov	r3, r0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b08b      	sub	sp, #44	; 0x2c
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015fe:	2300      	movs	r3, #0
 8001600:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001602:	e127      	b.n	8001854 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001604:	2201      	movs	r2, #1
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	429a      	cmp	r2, r3
 800161e:	f040 8116 	bne.w	800184e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b12      	cmp	r3, #18
 8001628:	d034      	beq.n	8001694 <HAL_GPIO_Init+0xa4>
 800162a:	2b12      	cmp	r3, #18
 800162c:	d80d      	bhi.n	800164a <HAL_GPIO_Init+0x5a>
 800162e:	2b02      	cmp	r3, #2
 8001630:	d02b      	beq.n	800168a <HAL_GPIO_Init+0x9a>
 8001632:	2b02      	cmp	r3, #2
 8001634:	d804      	bhi.n	8001640 <HAL_GPIO_Init+0x50>
 8001636:	2b00      	cmp	r3, #0
 8001638:	d031      	beq.n	800169e <HAL_GPIO_Init+0xae>
 800163a:	2b01      	cmp	r3, #1
 800163c:	d01c      	beq.n	8001678 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800163e:	e048      	b.n	80016d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001640:	2b03      	cmp	r3, #3
 8001642:	d043      	beq.n	80016cc <HAL_GPIO_Init+0xdc>
 8001644:	2b11      	cmp	r3, #17
 8001646:	d01b      	beq.n	8001680 <HAL_GPIO_Init+0x90>
          break;
 8001648:	e043      	b.n	80016d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800164a:	4a89      	ldr	r2, [pc, #548]	; (8001870 <HAL_GPIO_Init+0x280>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d026      	beq.n	800169e <HAL_GPIO_Init+0xae>
 8001650:	4a87      	ldr	r2, [pc, #540]	; (8001870 <HAL_GPIO_Init+0x280>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d806      	bhi.n	8001664 <HAL_GPIO_Init+0x74>
 8001656:	4a87      	ldr	r2, [pc, #540]	; (8001874 <HAL_GPIO_Init+0x284>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d020      	beq.n	800169e <HAL_GPIO_Init+0xae>
 800165c:	4a86      	ldr	r2, [pc, #536]	; (8001878 <HAL_GPIO_Init+0x288>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d01d      	beq.n	800169e <HAL_GPIO_Init+0xae>
          break;
 8001662:	e036      	b.n	80016d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001664:	4a85      	ldr	r2, [pc, #532]	; (800187c <HAL_GPIO_Init+0x28c>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d019      	beq.n	800169e <HAL_GPIO_Init+0xae>
 800166a:	4a85      	ldr	r2, [pc, #532]	; (8001880 <HAL_GPIO_Init+0x290>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d016      	beq.n	800169e <HAL_GPIO_Init+0xae>
 8001670:	4a84      	ldr	r2, [pc, #528]	; (8001884 <HAL_GPIO_Init+0x294>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d013      	beq.n	800169e <HAL_GPIO_Init+0xae>
          break;
 8001676:	e02c      	b.n	80016d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	623b      	str	r3, [r7, #32]
          break;
 800167e:	e028      	b.n	80016d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	3304      	adds	r3, #4
 8001686:	623b      	str	r3, [r7, #32]
          break;
 8001688:	e023      	b.n	80016d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	3308      	adds	r3, #8
 8001690:	623b      	str	r3, [r7, #32]
          break;
 8001692:	e01e      	b.n	80016d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	330c      	adds	r3, #12
 800169a:	623b      	str	r3, [r7, #32]
          break;
 800169c:	e019      	b.n	80016d2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d102      	bne.n	80016ac <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016a6:	2304      	movs	r3, #4
 80016a8:	623b      	str	r3, [r7, #32]
          break;
 80016aa:	e012      	b.n	80016d2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d105      	bne.n	80016c0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016b4:	2308      	movs	r3, #8
 80016b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69fa      	ldr	r2, [r7, #28]
 80016bc:	611a      	str	r2, [r3, #16]
          break;
 80016be:	e008      	b.n	80016d2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016c0:	2308      	movs	r3, #8
 80016c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69fa      	ldr	r2, [r7, #28]
 80016c8:	615a      	str	r2, [r3, #20]
          break;
 80016ca:	e002      	b.n	80016d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016cc:	2300      	movs	r3, #0
 80016ce:	623b      	str	r3, [r7, #32]
          break;
 80016d0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	2bff      	cmp	r3, #255	; 0xff
 80016d6:	d801      	bhi.n	80016dc <HAL_GPIO_Init+0xec>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	e001      	b.n	80016e0 <HAL_GPIO_Init+0xf0>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3304      	adds	r3, #4
 80016e0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	2bff      	cmp	r3, #255	; 0xff
 80016e6:	d802      	bhi.n	80016ee <HAL_GPIO_Init+0xfe>
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	e002      	b.n	80016f4 <HAL_GPIO_Init+0x104>
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	3b08      	subs	r3, #8
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	210f      	movs	r1, #15
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	401a      	ands	r2, r3
 8001706:	6a39      	ldr	r1, [r7, #32]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	431a      	orrs	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 8096 	beq.w	800184e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001722:	4b59      	ldr	r3, [pc, #356]	; (8001888 <HAL_GPIO_Init+0x298>)
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	4a58      	ldr	r2, [pc, #352]	; (8001888 <HAL_GPIO_Init+0x298>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6193      	str	r3, [r2, #24]
 800172e:	4b56      	ldr	r3, [pc, #344]	; (8001888 <HAL_GPIO_Init+0x298>)
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800173a:	4a54      	ldr	r2, [pc, #336]	; (800188c <HAL_GPIO_Init+0x29c>)
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	089b      	lsrs	r3, r3, #2
 8001740:	3302      	adds	r3, #2
 8001742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001746:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	220f      	movs	r2, #15
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	4013      	ands	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a4b      	ldr	r2, [pc, #300]	; (8001890 <HAL_GPIO_Init+0x2a0>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d013      	beq.n	800178e <HAL_GPIO_Init+0x19e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4a      	ldr	r2, [pc, #296]	; (8001894 <HAL_GPIO_Init+0x2a4>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d00d      	beq.n	800178a <HAL_GPIO_Init+0x19a>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a49      	ldr	r2, [pc, #292]	; (8001898 <HAL_GPIO_Init+0x2a8>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d007      	beq.n	8001786 <HAL_GPIO_Init+0x196>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a48      	ldr	r2, [pc, #288]	; (800189c <HAL_GPIO_Init+0x2ac>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d101      	bne.n	8001782 <HAL_GPIO_Init+0x192>
 800177e:	2303      	movs	r3, #3
 8001780:	e006      	b.n	8001790 <HAL_GPIO_Init+0x1a0>
 8001782:	2304      	movs	r3, #4
 8001784:	e004      	b.n	8001790 <HAL_GPIO_Init+0x1a0>
 8001786:	2302      	movs	r3, #2
 8001788:	e002      	b.n	8001790 <HAL_GPIO_Init+0x1a0>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <HAL_GPIO_Init+0x1a0>
 800178e:	2300      	movs	r3, #0
 8001790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001792:	f002 0203 	and.w	r2, r2, #3
 8001796:	0092      	lsls	r2, r2, #2
 8001798:	4093      	lsls	r3, r2
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	4313      	orrs	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017a0:	493a      	ldr	r1, [pc, #232]	; (800188c <HAL_GPIO_Init+0x29c>)
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	089b      	lsrs	r3, r3, #2
 80017a6:	3302      	adds	r3, #2
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d006      	beq.n	80017c8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017ba:	4b39      	ldr	r3, [pc, #228]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	4938      	ldr	r1, [pc, #224]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	600b      	str	r3, [r1, #0]
 80017c6:	e006      	b.n	80017d6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017c8:	4b35      	ldr	r3, [pc, #212]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	4933      	ldr	r1, [pc, #204]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d006      	beq.n	80017f0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017e2:	4b2f      	ldr	r3, [pc, #188]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	492e      	ldr	r1, [pc, #184]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	604b      	str	r3, [r1, #4]
 80017ee:	e006      	b.n	80017fe <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017f0:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	43db      	mvns	r3, r3
 80017f8:	4929      	ldr	r1, [pc, #164]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 80017fa:	4013      	ands	r3, r2
 80017fc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d006      	beq.n	8001818 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800180a:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	4924      	ldr	r1, [pc, #144]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	608b      	str	r3, [r1, #8]
 8001816:	e006      	b.n	8001826 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001818:	4b21      	ldr	r3, [pc, #132]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	43db      	mvns	r3, r3
 8001820:	491f      	ldr	r1, [pc, #124]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 8001822:	4013      	ands	r3, r2
 8001824:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d006      	beq.n	8001840 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001832:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	491a      	ldr	r1, [pc, #104]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	4313      	orrs	r3, r2
 800183c:	60cb      	str	r3, [r1, #12]
 800183e:	e006      	b.n	800184e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001840:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	43db      	mvns	r3, r3
 8001848:	4915      	ldr	r1, [pc, #84]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 800184a:	4013      	ands	r3, r2
 800184c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	3301      	adds	r3, #1
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	fa22 f303 	lsr.w	r3, r2, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	f47f aed0 	bne.w	8001604 <HAL_GPIO_Init+0x14>
  }
}
 8001864:	bf00      	nop
 8001866:	372c      	adds	r7, #44	; 0x2c
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	10210000 	.word	0x10210000
 8001874:	10110000 	.word	0x10110000
 8001878:	10120000 	.word	0x10120000
 800187c:	10310000 	.word	0x10310000
 8001880:	10320000 	.word	0x10320000
 8001884:	10220000 	.word	0x10220000
 8001888:	40021000 	.word	0x40021000
 800188c:	40010000 	.word	0x40010000
 8001890:	40010800 	.word	0x40010800
 8001894:	40010c00 	.word	0x40010c00
 8001898:	40011000 	.word	0x40011000
 800189c:	40011400 	.word	0x40011400
 80018a0:	40010400 	.word	0x40010400

080018a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	887b      	ldrh	r3, [r7, #2]
 80018b6:	4013      	ands	r3, r2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d002      	beq.n	80018c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018bc:	2301      	movs	r3, #1
 80018be:	73fb      	strb	r3, [r7, #15]
 80018c0:	e001      	b.n	80018c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018c2:	2300      	movs	r3, #0
 80018c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr

080018d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	460b      	mov	r3, r1
 80018dc:	807b      	strh	r3, [r7, #2]
 80018de:	4613      	mov	r3, r2
 80018e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018e2:	787b      	ldrb	r3, [r7, #1]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018e8:	887a      	ldrh	r2, [r7, #2]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018ee:	e003      	b.n	80018f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018f0:	887b      	ldrh	r3, [r7, #2]
 80018f2:	041a      	lsls	r2, r3, #16
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	611a      	str	r2, [r3, #16]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr
	...

08001904 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e11f      	b.n	8001b56 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d106      	bne.n	8001930 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff fc0c 	bl	8001148 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2224      	movs	r2, #36	; 0x24
 8001934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0201 	bic.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001956:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001966:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001968:	f001 f90e 	bl	8002b88 <HAL_RCC_GetPCLK1Freq>
 800196c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4a7b      	ldr	r2, [pc, #492]	; (8001b60 <HAL_I2C_Init+0x25c>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d807      	bhi.n	8001988 <HAL_I2C_Init+0x84>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4a7a      	ldr	r2, [pc, #488]	; (8001b64 <HAL_I2C_Init+0x260>)
 800197c:	4293      	cmp	r3, r2
 800197e:	bf94      	ite	ls
 8001980:	2301      	movls	r3, #1
 8001982:	2300      	movhi	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	e006      	b.n	8001996 <HAL_I2C_Init+0x92>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4a77      	ldr	r2, [pc, #476]	; (8001b68 <HAL_I2C_Init+0x264>)
 800198c:	4293      	cmp	r3, r2
 800198e:	bf94      	ite	ls
 8001990:	2301      	movls	r3, #1
 8001992:	2300      	movhi	r3, #0
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e0db      	b.n	8001b56 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	4a72      	ldr	r2, [pc, #456]	; (8001b6c <HAL_I2C_Init+0x268>)
 80019a2:	fba2 2303 	umull	r2, r3, r2, r3
 80019a6:	0c9b      	lsrs	r3, r3, #18
 80019a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	4a64      	ldr	r2, [pc, #400]	; (8001b60 <HAL_I2C_Init+0x25c>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d802      	bhi.n	80019d8 <HAL_I2C_Init+0xd4>
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	3301      	adds	r3, #1
 80019d6:	e009      	b.n	80019ec <HAL_I2C_Init+0xe8>
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	4a63      	ldr	r2, [pc, #396]	; (8001b70 <HAL_I2C_Init+0x26c>)
 80019e4:	fba2 2303 	umull	r2, r3, r2, r3
 80019e8:	099b      	lsrs	r3, r3, #6
 80019ea:	3301      	adds	r3, #1
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	430b      	orrs	r3, r1
 80019f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	4956      	ldr	r1, [pc, #344]	; (8001b60 <HAL_I2C_Init+0x25c>)
 8001a08:	428b      	cmp	r3, r1
 8001a0a:	d80d      	bhi.n	8001a28 <HAL_I2C_Init+0x124>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	1e59      	subs	r1, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	bf38      	it	cc
 8001a24:	2304      	movcc	r3, #4
 8001a26:	e04f      	b.n	8001ac8 <HAL_I2C_Init+0x1c4>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d111      	bne.n	8001a54 <HAL_I2C_Init+0x150>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	1e58      	subs	r0, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6859      	ldr	r1, [r3, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	440b      	add	r3, r1
 8001a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a42:	3301      	adds	r3, #1
 8001a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	bf0c      	ite	eq
 8001a4c:	2301      	moveq	r3, #1
 8001a4e:	2300      	movne	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	e012      	b.n	8001a7a <HAL_I2C_Init+0x176>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	1e58      	subs	r0, r3, #1
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6859      	ldr	r1, [r3, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	0099      	lsls	r1, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bf0c      	ite	eq
 8001a74:	2301      	moveq	r3, #1
 8001a76:	2300      	movne	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_I2C_Init+0x17e>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e022      	b.n	8001ac8 <HAL_I2C_Init+0x1c4>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10e      	bne.n	8001aa8 <HAL_I2C_Init+0x1a4>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	1e58      	subs	r0, r3, #1
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6859      	ldr	r1, [r3, #4]
 8001a92:	460b      	mov	r3, r1
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	440b      	add	r3, r1
 8001a98:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aa6:	e00f      	b.n	8001ac8 <HAL_I2C_Init+0x1c4>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	1e58      	subs	r0, r3, #1
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6859      	ldr	r1, [r3, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	0099      	lsls	r1, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001abe:	3301      	adds	r3, #1
 8001ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	6809      	ldr	r1, [r1, #0]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69da      	ldr	r2, [r3, #28]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001af6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6911      	ldr	r1, [r2, #16]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	68d2      	ldr	r2, [r2, #12]
 8001b02:	4311      	orrs	r1, r2
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0201 	orr.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2220      	movs	r2, #32
 8001b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	000186a0 	.word	0x000186a0
 8001b64:	001e847f 	.word	0x001e847f
 8001b68:	003d08ff 	.word	0x003d08ff
 8001b6c:	431bde83 	.word	0x431bde83
 8001b70:	10624dd3 	.word	0x10624dd3

08001b74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af02      	add	r7, sp, #8
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	460b      	mov	r3, r1
 8001b82:	817b      	strh	r3, [r7, #10]
 8001b84:	4613      	mov	r3, r2
 8001b86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b88:	f7ff fc22 	bl	80013d0 <HAL_GetTick>
 8001b8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b20      	cmp	r3, #32
 8001b98:	f040 80e0 	bne.w	8001d5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2319      	movs	r3, #25
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4970      	ldr	r1, [pc, #448]	; (8001d68 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 fa92 	bl	80020d0 <I2C_WaitOnFlagUntilTimeout>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e0d3      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_I2C_Master_Transmit+0x50>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e0cc      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d007      	beq.n	8001bea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f042 0201 	orr.w	r2, r2, #1
 8001be8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bf8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2221      	movs	r2, #33	; 0x21
 8001bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2210      	movs	r2, #16
 8001c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	893a      	ldrh	r2, [r7, #8]
 8001c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4a50      	ldr	r2, [pc, #320]	; (8001d6c <HAL_I2C_Master_Transmit+0x1f8>)
 8001c2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c2c:	8979      	ldrh	r1, [r7, #10]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	6a3a      	ldr	r2, [r7, #32]
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 f9ca 	bl	8001fcc <I2C_MasterRequestWrite>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e08d      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c58:	e066      	b.n	8001d28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	6a39      	ldr	r1, [r7, #32]
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f000 fb0c 	bl	800227c <I2C_WaitOnTXEFlagUntilTimeout>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00d      	beq.n	8001c86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d107      	bne.n	8001c82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e06b      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	781a      	ldrb	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d11b      	bne.n	8001cfc <HAL_I2C_Master_Transmit+0x188>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d017      	beq.n	8001cfc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	781a      	ldrb	r2, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	1c5a      	adds	r2, r3, #1
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	6a39      	ldr	r1, [r7, #32]
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 fafc 	bl	80022fe <I2C_WaitOnBTFFlagUntilTimeout>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00d      	beq.n	8001d28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d107      	bne.n	8001d24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e01a      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d194      	bne.n	8001c5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2220      	movs	r2, #32
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e000      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d5c:	2302      	movs	r3, #2
  }
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	00100002 	.word	0x00100002
 8001d6c:	ffff0000 	.word	0xffff0000

08001d70 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08a      	sub	sp, #40	; 0x28
 8001d74:	af02      	add	r7, sp, #8
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001d80:	f7ff fb26 	bl	80013d0 <HAL_GetTick>
 8001d84:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001d86:	2301      	movs	r3, #1
 8001d88:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b20      	cmp	r3, #32
 8001d94:	f040 8111 	bne.w	8001fba <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2319      	movs	r3, #25
 8001d9e:	2201      	movs	r2, #1
 8001da0:	4988      	ldr	r1, [pc, #544]	; (8001fc4 <HAL_I2C_IsDeviceReady+0x254>)
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 f994 	bl	80020d0 <I2C_WaitOnFlagUntilTimeout>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001dae:	2302      	movs	r3, #2
 8001db0:	e104      	b.n	8001fbc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_I2C_IsDeviceReady+0x50>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e0fd      	b.n	8001fbc <HAL_I2C_IsDeviceReady+0x24c>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d007      	beq.n	8001de6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f042 0201 	orr.w	r2, r2, #1
 8001de4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001df4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2224      	movs	r2, #36	; 0x24
 8001dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4a70      	ldr	r2, [pc, #448]	; (8001fc8 <HAL_I2C_IsDeviceReady+0x258>)
 8001e08:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e18:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 f952 	bl	80020d0 <I2C_WaitOnFlagUntilTimeout>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00d      	beq.n	8001e4e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e40:	d103      	bne.n	8001e4a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e48:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e0b6      	b.n	8001fbc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e4e:	897b      	ldrh	r3, [r7, #10]
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	461a      	mov	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e5c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001e5e:	f7ff fab7 	bl	80013d0 <HAL_GetTick>
 8001e62:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	bf0c      	ite	eq
 8001e72:	2301      	moveq	r3, #1
 8001e74:	2300      	movne	r3, #0
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e88:	bf0c      	ite	eq
 8001e8a:	2301      	moveq	r3, #1
 8001e8c:	2300      	movne	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e92:	e025      	b.n	8001ee0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e94:	f7ff fa9c 	bl	80013d0 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d302      	bcc.n	8001eaa <HAL_I2C_IsDeviceReady+0x13a>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d103      	bne.n	8001eb2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	22a0      	movs	r2, #160	; 0xa0
 8001eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	bf0c      	ite	eq
 8001ec0:	2301      	moveq	r3, #1
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed6:	bf0c      	ite	eq
 8001ed8:	2301      	moveq	r3, #1
 8001eda:	2300      	movne	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2ba0      	cmp	r3, #160	; 0xa0
 8001eea:	d005      	beq.n	8001ef8 <HAL_I2C_IsDeviceReady+0x188>
 8001eec:	7dfb      	ldrb	r3, [r7, #23]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d102      	bne.n	8001ef8 <HAL_I2C_IsDeviceReady+0x188>
 8001ef2:	7dbb      	ldrb	r3, [r7, #22]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0cd      	beq.n	8001e94 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2220      	movs	r2, #32
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d129      	bne.n	8001f62 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f1c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	2319      	movs	r3, #25
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	4921      	ldr	r1, [pc, #132]	; (8001fc4 <HAL_I2C_IsDeviceReady+0x254>)
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f000 f8c6 	bl	80020d0 <I2C_WaitOnFlagUntilTimeout>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e036      	b.n	8001fbc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2220      	movs	r2, #32
 8001f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	e02c      	b.n	8001fbc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f70:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f7a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	2319      	movs	r3, #25
 8001f82:	2201      	movs	r2, #1
 8001f84:	490f      	ldr	r1, [pc, #60]	; (8001fc4 <HAL_I2C_IsDeviceReady+0x254>)
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 f8a2 	bl	80020d0 <I2C_WaitOnFlagUntilTimeout>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e012      	b.n	8001fbc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	f4ff af32 	bcc.w	8001e0a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2220      	movs	r2, #32
 8001faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001fba:	2302      	movs	r3, #2
  }
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3720      	adds	r7, #32
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	00100002 	.word	0x00100002
 8001fc8:	ffff0000 	.word	0xffff0000

08001fcc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	607a      	str	r2, [r7, #4]
 8001fd6:	603b      	str	r3, [r7, #0]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d006      	beq.n	8001ff6 <I2C_MasterRequestWrite+0x2a>
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d003      	beq.n	8001ff6 <I2C_MasterRequestWrite+0x2a>
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ff4:	d108      	bne.n	8002008 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	e00b      	b.n	8002020 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200c:	2b12      	cmp	r3, #18
 800200e:	d107      	bne.n	8002020 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800201e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 f84f 	bl	80020d0 <I2C_WaitOnFlagUntilTimeout>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00d      	beq.n	8002054 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002046:	d103      	bne.n	8002050 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800204e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e035      	b.n	80020c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800205c:	d108      	bne.n	8002070 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800205e:	897b      	ldrh	r3, [r7, #10]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	461a      	mov	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800206c:	611a      	str	r2, [r3, #16]
 800206e:	e01b      	b.n	80020a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002070:	897b      	ldrh	r3, [r7, #10]
 8002072:	11db      	asrs	r3, r3, #7
 8002074:	b2db      	uxtb	r3, r3
 8002076:	f003 0306 	and.w	r3, r3, #6
 800207a:	b2db      	uxtb	r3, r3
 800207c:	f063 030f 	orn	r3, r3, #15
 8002080:	b2da      	uxtb	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	490e      	ldr	r1, [pc, #56]	; (80020c8 <I2C_MasterRequestWrite+0xfc>)
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 f875 	bl	800217e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e010      	b.n	80020c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800209e:	897b      	ldrh	r3, [r7, #10]
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	4907      	ldr	r1, [pc, #28]	; (80020cc <I2C_MasterRequestWrite+0x100>)
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f000 f865 	bl	800217e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	00010008 	.word	0x00010008
 80020cc:	00010002 	.word	0x00010002

080020d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	4613      	mov	r3, r2
 80020de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020e0:	e025      	b.n	800212e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e8:	d021      	beq.n	800212e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ea:	f7ff f971 	bl	80013d0 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d302      	bcc.n	8002100 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d116      	bne.n	800212e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2220      	movs	r2, #32
 800210a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f043 0220 	orr.w	r2, r3, #32
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e023      	b.n	8002176 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	0c1b      	lsrs	r3, r3, #16
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b01      	cmp	r3, #1
 8002136:	d10d      	bne.n	8002154 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	43da      	mvns	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	4013      	ands	r3, r2
 8002144:	b29b      	uxth	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	bf0c      	ite	eq
 800214a:	2301      	moveq	r3, #1
 800214c:	2300      	movne	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	e00c      	b.n	800216e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	43da      	mvns	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	4013      	ands	r3, r2
 8002160:	b29b      	uxth	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	bf0c      	ite	eq
 8002166:	2301      	moveq	r3, #1
 8002168:	2300      	movne	r3, #0
 800216a:	b2db      	uxtb	r3, r3
 800216c:	461a      	mov	r2, r3
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	429a      	cmp	r2, r3
 8002172:	d0b6      	beq.n	80020e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b084      	sub	sp, #16
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
 800218a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800218c:	e051      	b.n	8002232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800219c:	d123      	bne.n	80021e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2220      	movs	r2, #32
 80021c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f043 0204 	orr.w	r2, r3, #4
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e046      	b.n	8002274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ec:	d021      	beq.n	8002232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ee:	f7ff f8ef 	bl	80013d0 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d302      	bcc.n	8002204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d116      	bne.n	8002232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2220      	movs	r2, #32
 800220e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f043 0220 	orr.w	r2, r3, #32
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e020      	b.n	8002274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	0c1b      	lsrs	r3, r3, #16
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b01      	cmp	r3, #1
 800223a:	d10c      	bne.n	8002256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	43da      	mvns	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	4013      	ands	r3, r2
 8002248:	b29b      	uxth	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	bf14      	ite	ne
 800224e:	2301      	movne	r3, #1
 8002250:	2300      	moveq	r3, #0
 8002252:	b2db      	uxtb	r3, r3
 8002254:	e00b      	b.n	800226e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	43da      	mvns	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	4013      	ands	r3, r2
 8002262:	b29b      	uxth	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	bf14      	ite	ne
 8002268:	2301      	movne	r3, #1
 800226a:	2300      	moveq	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d18d      	bne.n	800218e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002288:	e02d      	b.n	80022e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f878 	bl	8002380 <I2C_IsAcknowledgeFailed>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e02d      	b.n	80022f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a0:	d021      	beq.n	80022e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022a2:	f7ff f895 	bl	80013d0 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d302      	bcc.n	80022b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d116      	bne.n	80022e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2220      	movs	r2, #32
 80022c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f043 0220 	orr.w	r2, r3, #32
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e007      	b.n	80022f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f0:	2b80      	cmp	r3, #128	; 0x80
 80022f2:	d1ca      	bne.n	800228a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b084      	sub	sp, #16
 8002302:	af00      	add	r7, sp, #0
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800230a:	e02d      	b.n	8002368 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 f837 	bl	8002380 <I2C_IsAcknowledgeFailed>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e02d      	b.n	8002378 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002322:	d021      	beq.n	8002368 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002324:	f7ff f854 	bl	80013d0 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	429a      	cmp	r2, r3
 8002332:	d302      	bcc.n	800233a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d116      	bne.n	8002368 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	f043 0220 	orr.w	r2, r3, #32
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e007      	b.n	8002378 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b04      	cmp	r3, #4
 8002374:	d1ca      	bne.n	800230c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002396:	d11b      	bne.n	80023d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2220      	movs	r2, #32
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	f043 0204 	orr.w	r2, r3, #4
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr

080023dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e26c      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 8087 	beq.w	800250a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023fc:	4b92      	ldr	r3, [pc, #584]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 030c 	and.w	r3, r3, #12
 8002404:	2b04      	cmp	r3, #4
 8002406:	d00c      	beq.n	8002422 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002408:	4b8f      	ldr	r3, [pc, #572]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 030c 	and.w	r3, r3, #12
 8002410:	2b08      	cmp	r3, #8
 8002412:	d112      	bne.n	800243a <HAL_RCC_OscConfig+0x5e>
 8002414:	4b8c      	ldr	r3, [pc, #560]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800241c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002420:	d10b      	bne.n	800243a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002422:	4b89      	ldr	r3, [pc, #548]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d06c      	beq.n	8002508 <HAL_RCC_OscConfig+0x12c>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d168      	bne.n	8002508 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e246      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002442:	d106      	bne.n	8002452 <HAL_RCC_OscConfig+0x76>
 8002444:	4b80      	ldr	r3, [pc, #512]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a7f      	ldr	r2, [pc, #508]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 800244a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	e02e      	b.n	80024b0 <HAL_RCC_OscConfig+0xd4>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10c      	bne.n	8002474 <HAL_RCC_OscConfig+0x98>
 800245a:	4b7b      	ldr	r3, [pc, #492]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a7a      	ldr	r2, [pc, #488]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	4b78      	ldr	r3, [pc, #480]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a77      	ldr	r2, [pc, #476]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 800246c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	e01d      	b.n	80024b0 <HAL_RCC_OscConfig+0xd4>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800247c:	d10c      	bne.n	8002498 <HAL_RCC_OscConfig+0xbc>
 800247e:	4b72      	ldr	r3, [pc, #456]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a71      	ldr	r2, [pc, #452]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	4b6f      	ldr	r3, [pc, #444]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a6e      	ldr	r2, [pc, #440]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	e00b      	b.n	80024b0 <HAL_RCC_OscConfig+0xd4>
 8002498:	4b6b      	ldr	r3, [pc, #428]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a6a      	ldr	r2, [pc, #424]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 800249e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	4b68      	ldr	r3, [pc, #416]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a67      	ldr	r2, [pc, #412]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 80024aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d013      	beq.n	80024e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7fe ff8a 	bl	80013d0 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c0:	f7fe ff86 	bl	80013d0 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b64      	cmp	r3, #100	; 0x64
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e1fa      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	4b5d      	ldr	r3, [pc, #372]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0f0      	beq.n	80024c0 <HAL_RCC_OscConfig+0xe4>
 80024de:	e014      	b.n	800250a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7fe ff76 	bl	80013d0 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e8:	f7fe ff72 	bl	80013d0 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	; 0x64
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e1e6      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fa:	4b53      	ldr	r3, [pc, #332]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x10c>
 8002506:	e000      	b.n	800250a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d063      	beq.n	80025de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002516:	4b4c      	ldr	r3, [pc, #304]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00b      	beq.n	800253a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002522:	4b49      	ldr	r3, [pc, #292]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b08      	cmp	r3, #8
 800252c:	d11c      	bne.n	8002568 <HAL_RCC_OscConfig+0x18c>
 800252e:	4b46      	ldr	r3, [pc, #280]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d116      	bne.n	8002568 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253a:	4b43      	ldr	r3, [pc, #268]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d005      	beq.n	8002552 <HAL_RCC_OscConfig+0x176>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d001      	beq.n	8002552 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e1ba      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002552:	4b3d      	ldr	r3, [pc, #244]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4939      	ldr	r1, [pc, #228]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002562:	4313      	orrs	r3, r2
 8002564:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002566:	e03a      	b.n	80025de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d020      	beq.n	80025b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002570:	4b36      	ldr	r3, [pc, #216]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002572:	2201      	movs	r2, #1
 8002574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002576:	f7fe ff2b 	bl	80013d0 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800257e:	f7fe ff27 	bl	80013d0 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e19b      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002590:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259c:	4b2a      	ldr	r3, [pc, #168]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4927      	ldr	r1, [pc, #156]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	600b      	str	r3, [r1, #0]
 80025b0:	e015      	b.n	80025de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025b2:	4b26      	ldr	r3, [pc, #152]	; (800264c <HAL_RCC_OscConfig+0x270>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7fe ff0a 	bl	80013d0 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c0:	f7fe ff06 	bl	80013d0 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e17a      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d2:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d03a      	beq.n	8002660 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d019      	beq.n	8002626 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025f2:	4b17      	ldr	r3, [pc, #92]	; (8002650 <HAL_RCC_OscConfig+0x274>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f8:	f7fe feea 	bl	80013d0 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002600:	f7fe fee6 	bl	80013d0 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e15a      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002612:	4b0d      	ldr	r3, [pc, #52]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800261e:	2001      	movs	r0, #1
 8002620:	f000 fac6 	bl	8002bb0 <RCC_Delay>
 8002624:	e01c      	b.n	8002660 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002626:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <HAL_RCC_OscConfig+0x274>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262c:	f7fe fed0 	bl	80013d0 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002632:	e00f      	b.n	8002654 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002634:	f7fe fecc 	bl	80013d0 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d908      	bls.n	8002654 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e140      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
 8002646:	bf00      	nop
 8002648:	40021000 	.word	0x40021000
 800264c:	42420000 	.word	0x42420000
 8002650:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002654:	4b9e      	ldr	r3, [pc, #632]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1e9      	bne.n	8002634 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 80a6 	beq.w	80027ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800266e:	2300      	movs	r3, #0
 8002670:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002672:	4b97      	ldr	r3, [pc, #604]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10d      	bne.n	800269a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800267e:	4b94      	ldr	r3, [pc, #592]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	4a93      	ldr	r2, [pc, #588]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002688:	61d3      	str	r3, [r2, #28]
 800268a:	4b91      	ldr	r3, [pc, #580]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002696:	2301      	movs	r3, #1
 8002698:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269a:	4b8e      	ldr	r3, [pc, #568]	; (80028d4 <HAL_RCC_OscConfig+0x4f8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d118      	bne.n	80026d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026a6:	4b8b      	ldr	r3, [pc, #556]	; (80028d4 <HAL_RCC_OscConfig+0x4f8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a8a      	ldr	r2, [pc, #552]	; (80028d4 <HAL_RCC_OscConfig+0x4f8>)
 80026ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026b2:	f7fe fe8d 	bl	80013d0 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ba:	f7fe fe89 	bl	80013d0 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b64      	cmp	r3, #100	; 0x64
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e0fd      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026cc:	4b81      	ldr	r3, [pc, #516]	; (80028d4 <HAL_RCC_OscConfig+0x4f8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d106      	bne.n	80026ee <HAL_RCC_OscConfig+0x312>
 80026e0:	4b7b      	ldr	r3, [pc, #492]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	4a7a      	ldr	r2, [pc, #488]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	6213      	str	r3, [r2, #32]
 80026ec:	e02d      	b.n	800274a <HAL_RCC_OscConfig+0x36e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10c      	bne.n	8002710 <HAL_RCC_OscConfig+0x334>
 80026f6:	4b76      	ldr	r3, [pc, #472]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	4a75      	ldr	r2, [pc, #468]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 80026fc:	f023 0301 	bic.w	r3, r3, #1
 8002700:	6213      	str	r3, [r2, #32]
 8002702:	4b73      	ldr	r3, [pc, #460]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	4a72      	ldr	r2, [pc, #456]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002708:	f023 0304 	bic.w	r3, r3, #4
 800270c:	6213      	str	r3, [r2, #32]
 800270e:	e01c      	b.n	800274a <HAL_RCC_OscConfig+0x36e>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	2b05      	cmp	r3, #5
 8002716:	d10c      	bne.n	8002732 <HAL_RCC_OscConfig+0x356>
 8002718:	4b6d      	ldr	r3, [pc, #436]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	4a6c      	ldr	r2, [pc, #432]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 800271e:	f043 0304 	orr.w	r3, r3, #4
 8002722:	6213      	str	r3, [r2, #32]
 8002724:	4b6a      	ldr	r3, [pc, #424]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	4a69      	ldr	r2, [pc, #420]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	6213      	str	r3, [r2, #32]
 8002730:	e00b      	b.n	800274a <HAL_RCC_OscConfig+0x36e>
 8002732:	4b67      	ldr	r3, [pc, #412]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	4a66      	ldr	r2, [pc, #408]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002738:	f023 0301 	bic.w	r3, r3, #1
 800273c:	6213      	str	r3, [r2, #32]
 800273e:	4b64      	ldr	r3, [pc, #400]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	4a63      	ldr	r2, [pc, #396]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002744:	f023 0304 	bic.w	r3, r3, #4
 8002748:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d015      	beq.n	800277e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002752:	f7fe fe3d 	bl	80013d0 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002758:	e00a      	b.n	8002770 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275a:	f7fe fe39 	bl	80013d0 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	f241 3288 	movw	r2, #5000	; 0x1388
 8002768:	4293      	cmp	r3, r2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e0ab      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002770:	4b57      	ldr	r3, [pc, #348]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0ee      	beq.n	800275a <HAL_RCC_OscConfig+0x37e>
 800277c:	e014      	b.n	80027a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277e:	f7fe fe27 	bl	80013d0 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002784:	e00a      	b.n	800279c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002786:	f7fe fe23 	bl	80013d0 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	f241 3288 	movw	r2, #5000	; 0x1388
 8002794:	4293      	cmp	r3, r2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e095      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279c:	4b4c      	ldr	r3, [pc, #304]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1ee      	bne.n	8002786 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027a8:	7dfb      	ldrb	r3, [r7, #23]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d105      	bne.n	80027ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ae:	4b48      	ldr	r3, [pc, #288]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	4a47      	ldr	r2, [pc, #284]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 80027b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 8081 	beq.w	80028c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027c4:	4b42      	ldr	r3, [pc, #264]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 030c 	and.w	r3, r3, #12
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	d061      	beq.n	8002894 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d146      	bne.n	8002866 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d8:	4b3f      	ldr	r3, [pc, #252]	; (80028d8 <HAL_RCC_OscConfig+0x4fc>)
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027de:	f7fe fdf7 	bl	80013d0 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e6:	f7fe fdf3 	bl	80013d0 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e067      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f8:	4b35      	ldr	r3, [pc, #212]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1f0      	bne.n	80027e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800280c:	d108      	bne.n	8002820 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800280e:	4b30      	ldr	r3, [pc, #192]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	492d      	ldr	r1, [pc, #180]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 800281c:	4313      	orrs	r3, r2
 800281e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002820:	4b2b      	ldr	r3, [pc, #172]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a19      	ldr	r1, [r3, #32]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	430b      	orrs	r3, r1
 8002832:	4927      	ldr	r1, [pc, #156]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002834:	4313      	orrs	r3, r2
 8002836:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002838:	4b27      	ldr	r3, [pc, #156]	; (80028d8 <HAL_RCC_OscConfig+0x4fc>)
 800283a:	2201      	movs	r2, #1
 800283c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283e:	f7fe fdc7 	bl	80013d0 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002846:	f7fe fdc3 	bl	80013d0 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e037      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002858:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_OscConfig+0x46a>
 8002864:	e02f      	b.n	80028c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002866:	4b1c      	ldr	r3, [pc, #112]	; (80028d8 <HAL_RCC_OscConfig+0x4fc>)
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7fe fdb0 	bl	80013d0 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002874:	f7fe fdac 	bl	80013d0 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e020      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x498>
 8002892:	e018      	b.n	80028c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e013      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d106      	bne.n	80028c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028be:	429a      	cmp	r2, r3
 80028c0:	d001      	beq.n	80028c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40007000 	.word	0x40007000
 80028d8:	42420060 	.word	0x42420060

080028dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0d0      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028f0:	4b6a      	ldr	r3, [pc, #424]	; (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d910      	bls.n	8002920 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fe:	4b67      	ldr	r3, [pc, #412]	; (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f023 0207 	bic.w	r2, r3, #7
 8002906:	4965      	ldr	r1, [pc, #404]	; (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800290e:	4b63      	ldr	r3, [pc, #396]	; (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	429a      	cmp	r2, r3
 800291a:	d001      	beq.n	8002920 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0b8      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d020      	beq.n	800296e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002938:	4b59      	ldr	r3, [pc, #356]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	4a58      	ldr	r2, [pc, #352]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002942:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002950:	4b53      	ldr	r3, [pc, #332]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	4a52      	ldr	r2, [pc, #328]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002956:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800295a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800295c:	4b50      	ldr	r3, [pc, #320]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	494d      	ldr	r1, [pc, #308]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800296a:	4313      	orrs	r3, r2
 800296c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d040      	beq.n	80029fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002982:	4b47      	ldr	r3, [pc, #284]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d115      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e07f      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d107      	bne.n	80029aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299a:	4b41      	ldr	r3, [pc, #260]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d109      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e073      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029aa:	4b3d      	ldr	r3, [pc, #244]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e06b      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ba:	4b39      	ldr	r3, [pc, #228]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f023 0203 	bic.w	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4936      	ldr	r1, [pc, #216]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029cc:	f7fe fd00 	bl	80013d0 <HAL_GetTick>
 80029d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d4:	f7fe fcfc 	bl	80013d0 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e053      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ea:	4b2d      	ldr	r3, [pc, #180]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 020c 	and.w	r2, r3, #12
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d1eb      	bne.n	80029d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029fc:	4b27      	ldr	r3, [pc, #156]	; (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d210      	bcs.n	8002a2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0a:	4b24      	ldr	r3, [pc, #144]	; (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 0207 	bic.w	r2, r3, #7
 8002a12:	4922      	ldr	r1, [pc, #136]	; (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1a:	4b20      	ldr	r3, [pc, #128]	; (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e032      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a38:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	4916      	ldr	r1, [pc, #88]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a56:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	490e      	ldr	r1, [pc, #56]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a6a:	f000 f821 	bl	8002ab0 <HAL_RCC_GetSysClockFreq>
 8002a6e:	4601      	mov	r1, r0
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a7c:	5cd3      	ldrb	r3, [r2, r3]
 8002a7e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a82:	4a09      	ldr	r2, [pc, #36]	; (8002aa8 <HAL_RCC_ClockConfig+0x1cc>)
 8002a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <HAL_RCC_ClockConfig+0x1d0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fe fc5e 	bl	800134c <HAL_InitTick>

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40022000 	.word	0x40022000
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	08004da8 	.word	0x08004da8
 8002aa8:	20000010 	.word	0x20000010
 8002aac:	20000014 	.word	0x20000014

08002ab0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab0:	b490      	push	{r4, r7}
 8002ab2:	b08a      	sub	sp, #40	; 0x28
 8002ab4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ab6:	4b2a      	ldr	r3, [pc, #168]	; (8002b60 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ab8:	1d3c      	adds	r4, r7, #4
 8002aba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002abc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ac0:	4b28      	ldr	r3, [pc, #160]	; (8002b64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	2300      	movs	r3, #0
 8002acc:	61bb      	str	r3, [r7, #24]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ada:	4b23      	ldr	r3, [pc, #140]	; (8002b68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d002      	beq.n	8002af0 <HAL_RCC_GetSysClockFreq+0x40>
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d003      	beq.n	8002af6 <HAL_RCC_GetSysClockFreq+0x46>
 8002aee:	e02d      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002af0:	4b1e      	ldr	r3, [pc, #120]	; (8002b6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002af2:	623b      	str	r3, [r7, #32]
      break;
 8002af4:	e02d      	b.n	8002b52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	0c9b      	lsrs	r3, r3, #18
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b02:	4413      	add	r3, r2
 8002b04:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b08:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d013      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b14:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	0c5b      	lsrs	r3, r3, #17
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b22:	4413      	add	r3, r2
 8002b24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b28:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	4a0f      	ldr	r2, [pc, #60]	; (8002b6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b2e:	fb02 f203 	mul.w	r2, r2, r3
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
 8002b3a:	e004      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	4a0c      	ldr	r2, [pc, #48]	; (8002b70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b40:	fb02 f303 	mul.w	r3, r2, r3
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	623b      	str	r3, [r7, #32]
      break;
 8002b4a:	e002      	b.n	8002b52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b4c:	4b07      	ldr	r3, [pc, #28]	; (8002b6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b4e:	623b      	str	r3, [r7, #32]
      break;
 8002b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b52:	6a3b      	ldr	r3, [r7, #32]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3728      	adds	r7, #40	; 0x28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc90      	pop	{r4, r7}
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	080034cc 	.word	0x080034cc
 8002b64:	080034dc 	.word	0x080034dc
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	007a1200 	.word	0x007a1200
 8002b70:	003d0900 	.word	0x003d0900

08002b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b78:	4b02      	ldr	r3, [pc, #8]	; (8002b84 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr
 8002b84:	20000010 	.word	0x20000010

08002b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b8c:	f7ff fff2 	bl	8002b74 <HAL_RCC_GetHCLKFreq>
 8002b90:	4601      	mov	r1, r0
 8002b92:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	0a1b      	lsrs	r3, r3, #8
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	4a03      	ldr	r2, [pc, #12]	; (8002bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b9e:	5cd3      	ldrb	r3, [r2, r3]
 8002ba0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	08004db8 	.word	0x08004db8

08002bb0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bb8:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <RCC_Delay+0x34>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a0a      	ldr	r2, [pc, #40]	; (8002be8 <RCC_Delay+0x38>)
 8002bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc2:	0a5b      	lsrs	r3, r3, #9
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	fb02 f303 	mul.w	r3, r2, r3
 8002bca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bcc:	bf00      	nop
  }
  while (Delay --);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1e5a      	subs	r2, r3, #1
 8002bd2:	60fa      	str	r2, [r7, #12]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f9      	bne.n	8002bcc <RCC_Delay+0x1c>
}
 8002bd8:	bf00      	nop
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	20000010 	.word	0x20000010
 8002be8:	10624dd3 	.word	0x10624dd3

08002bec <__errno>:
 8002bec:	4b01      	ldr	r3, [pc, #4]	; (8002bf4 <__errno+0x8>)
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	2000001c 	.word	0x2000001c

08002bf8 <__libc_init_array>:
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	2500      	movs	r5, #0
 8002bfc:	4e0c      	ldr	r6, [pc, #48]	; (8002c30 <__libc_init_array+0x38>)
 8002bfe:	4c0d      	ldr	r4, [pc, #52]	; (8002c34 <__libc_init_array+0x3c>)
 8002c00:	1ba4      	subs	r4, r4, r6
 8002c02:	10a4      	asrs	r4, r4, #2
 8002c04:	42a5      	cmp	r5, r4
 8002c06:	d109      	bne.n	8002c1c <__libc_init_array+0x24>
 8002c08:	f000 fc34 	bl	8003474 <_init>
 8002c0c:	2500      	movs	r5, #0
 8002c0e:	4e0a      	ldr	r6, [pc, #40]	; (8002c38 <__libc_init_array+0x40>)
 8002c10:	4c0a      	ldr	r4, [pc, #40]	; (8002c3c <__libc_init_array+0x44>)
 8002c12:	1ba4      	subs	r4, r4, r6
 8002c14:	10a4      	asrs	r4, r4, #2
 8002c16:	42a5      	cmp	r5, r4
 8002c18:	d105      	bne.n	8002c26 <__libc_init_array+0x2e>
 8002c1a:	bd70      	pop	{r4, r5, r6, pc}
 8002c1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c20:	4798      	blx	r3
 8002c22:	3501      	adds	r5, #1
 8002c24:	e7ee      	b.n	8002c04 <__libc_init_array+0xc>
 8002c26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c2a:	4798      	blx	r3
 8002c2c:	3501      	adds	r5, #1
 8002c2e:	e7f2      	b.n	8002c16 <__libc_init_array+0x1e>
 8002c30:	08004df4 	.word	0x08004df4
 8002c34:	08004df4 	.word	0x08004df4
 8002c38:	08004df4 	.word	0x08004df4
 8002c3c:	08004df8 	.word	0x08004df8

08002c40 <memset>:
 8002c40:	4603      	mov	r3, r0
 8002c42:	4402      	add	r2, r0
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d100      	bne.n	8002c4a <memset+0xa>
 8002c48:	4770      	bx	lr
 8002c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c4e:	e7f9      	b.n	8002c44 <memset+0x4>

08002c50 <siprintf>:
 8002c50:	b40e      	push	{r1, r2, r3}
 8002c52:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c56:	b500      	push	{lr}
 8002c58:	b09c      	sub	sp, #112	; 0x70
 8002c5a:	ab1d      	add	r3, sp, #116	; 0x74
 8002c5c:	9002      	str	r0, [sp, #8]
 8002c5e:	9006      	str	r0, [sp, #24]
 8002c60:	9107      	str	r1, [sp, #28]
 8002c62:	9104      	str	r1, [sp, #16]
 8002c64:	4808      	ldr	r0, [pc, #32]	; (8002c88 <siprintf+0x38>)
 8002c66:	4909      	ldr	r1, [pc, #36]	; (8002c8c <siprintf+0x3c>)
 8002c68:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c6c:	9105      	str	r1, [sp, #20]
 8002c6e:	6800      	ldr	r0, [r0, #0]
 8002c70:	a902      	add	r1, sp, #8
 8002c72:	9301      	str	r3, [sp, #4]
 8002c74:	f000 f866 	bl	8002d44 <_svfiprintf_r>
 8002c78:	2200      	movs	r2, #0
 8002c7a:	9b02      	ldr	r3, [sp, #8]
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	b01c      	add	sp, #112	; 0x70
 8002c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c84:	b003      	add	sp, #12
 8002c86:	4770      	bx	lr
 8002c88:	2000001c 	.word	0x2000001c
 8002c8c:	ffff0208 	.word	0xffff0208

08002c90 <__ssputs_r>:
 8002c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c94:	688e      	ldr	r6, [r1, #8]
 8002c96:	4682      	mov	sl, r0
 8002c98:	429e      	cmp	r6, r3
 8002c9a:	460c      	mov	r4, r1
 8002c9c:	4690      	mov	r8, r2
 8002c9e:	4699      	mov	r9, r3
 8002ca0:	d837      	bhi.n	8002d12 <__ssputs_r+0x82>
 8002ca2:	898a      	ldrh	r2, [r1, #12]
 8002ca4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002ca8:	d031      	beq.n	8002d0e <__ssputs_r+0x7e>
 8002caa:	2302      	movs	r3, #2
 8002cac:	6825      	ldr	r5, [r4, #0]
 8002cae:	6909      	ldr	r1, [r1, #16]
 8002cb0:	1a6f      	subs	r7, r5, r1
 8002cb2:	6965      	ldr	r5, [r4, #20]
 8002cb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002cb8:	fb95 f5f3 	sdiv	r5, r5, r3
 8002cbc:	f109 0301 	add.w	r3, r9, #1
 8002cc0:	443b      	add	r3, r7
 8002cc2:	429d      	cmp	r5, r3
 8002cc4:	bf38      	it	cc
 8002cc6:	461d      	movcc	r5, r3
 8002cc8:	0553      	lsls	r3, r2, #21
 8002cca:	d530      	bpl.n	8002d2e <__ssputs_r+0x9e>
 8002ccc:	4629      	mov	r1, r5
 8002cce:	f000 fb37 	bl	8003340 <_malloc_r>
 8002cd2:	4606      	mov	r6, r0
 8002cd4:	b950      	cbnz	r0, 8002cec <__ssputs_r+0x5c>
 8002cd6:	230c      	movs	r3, #12
 8002cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cdc:	f8ca 3000 	str.w	r3, [sl]
 8002ce0:	89a3      	ldrh	r3, [r4, #12]
 8002ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ce6:	81a3      	strh	r3, [r4, #12]
 8002ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cec:	463a      	mov	r2, r7
 8002cee:	6921      	ldr	r1, [r4, #16]
 8002cf0:	f000 fab6 	bl	8003260 <memcpy>
 8002cf4:	89a3      	ldrh	r3, [r4, #12]
 8002cf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cfe:	81a3      	strh	r3, [r4, #12]
 8002d00:	6126      	str	r6, [r4, #16]
 8002d02:	443e      	add	r6, r7
 8002d04:	6026      	str	r6, [r4, #0]
 8002d06:	464e      	mov	r6, r9
 8002d08:	6165      	str	r5, [r4, #20]
 8002d0a:	1bed      	subs	r5, r5, r7
 8002d0c:	60a5      	str	r5, [r4, #8]
 8002d0e:	454e      	cmp	r6, r9
 8002d10:	d900      	bls.n	8002d14 <__ssputs_r+0x84>
 8002d12:	464e      	mov	r6, r9
 8002d14:	4632      	mov	r2, r6
 8002d16:	4641      	mov	r1, r8
 8002d18:	6820      	ldr	r0, [r4, #0]
 8002d1a:	f000 faac 	bl	8003276 <memmove>
 8002d1e:	68a3      	ldr	r3, [r4, #8]
 8002d20:	2000      	movs	r0, #0
 8002d22:	1b9b      	subs	r3, r3, r6
 8002d24:	60a3      	str	r3, [r4, #8]
 8002d26:	6823      	ldr	r3, [r4, #0]
 8002d28:	441e      	add	r6, r3
 8002d2a:	6026      	str	r6, [r4, #0]
 8002d2c:	e7dc      	b.n	8002ce8 <__ssputs_r+0x58>
 8002d2e:	462a      	mov	r2, r5
 8002d30:	f000 fb60 	bl	80033f4 <_realloc_r>
 8002d34:	4606      	mov	r6, r0
 8002d36:	2800      	cmp	r0, #0
 8002d38:	d1e2      	bne.n	8002d00 <__ssputs_r+0x70>
 8002d3a:	6921      	ldr	r1, [r4, #16]
 8002d3c:	4650      	mov	r0, sl
 8002d3e:	f000 fab3 	bl	80032a8 <_free_r>
 8002d42:	e7c8      	b.n	8002cd6 <__ssputs_r+0x46>

08002d44 <_svfiprintf_r>:
 8002d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d48:	461d      	mov	r5, r3
 8002d4a:	898b      	ldrh	r3, [r1, #12]
 8002d4c:	b09d      	sub	sp, #116	; 0x74
 8002d4e:	061f      	lsls	r7, r3, #24
 8002d50:	4680      	mov	r8, r0
 8002d52:	460c      	mov	r4, r1
 8002d54:	4616      	mov	r6, r2
 8002d56:	d50f      	bpl.n	8002d78 <_svfiprintf_r+0x34>
 8002d58:	690b      	ldr	r3, [r1, #16]
 8002d5a:	b96b      	cbnz	r3, 8002d78 <_svfiprintf_r+0x34>
 8002d5c:	2140      	movs	r1, #64	; 0x40
 8002d5e:	f000 faef 	bl	8003340 <_malloc_r>
 8002d62:	6020      	str	r0, [r4, #0]
 8002d64:	6120      	str	r0, [r4, #16]
 8002d66:	b928      	cbnz	r0, 8002d74 <_svfiprintf_r+0x30>
 8002d68:	230c      	movs	r3, #12
 8002d6a:	f8c8 3000 	str.w	r3, [r8]
 8002d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8002d72:	e0c8      	b.n	8002f06 <_svfiprintf_r+0x1c2>
 8002d74:	2340      	movs	r3, #64	; 0x40
 8002d76:	6163      	str	r3, [r4, #20]
 8002d78:	2300      	movs	r3, #0
 8002d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8002d7c:	2320      	movs	r3, #32
 8002d7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d82:	2330      	movs	r3, #48	; 0x30
 8002d84:	f04f 0b01 	mov.w	fp, #1
 8002d88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d8c:	9503      	str	r5, [sp, #12]
 8002d8e:	4637      	mov	r7, r6
 8002d90:	463d      	mov	r5, r7
 8002d92:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002d96:	b10b      	cbz	r3, 8002d9c <_svfiprintf_r+0x58>
 8002d98:	2b25      	cmp	r3, #37	; 0x25
 8002d9a:	d13e      	bne.n	8002e1a <_svfiprintf_r+0xd6>
 8002d9c:	ebb7 0a06 	subs.w	sl, r7, r6
 8002da0:	d00b      	beq.n	8002dba <_svfiprintf_r+0x76>
 8002da2:	4653      	mov	r3, sl
 8002da4:	4632      	mov	r2, r6
 8002da6:	4621      	mov	r1, r4
 8002da8:	4640      	mov	r0, r8
 8002daa:	f7ff ff71 	bl	8002c90 <__ssputs_r>
 8002dae:	3001      	adds	r0, #1
 8002db0:	f000 80a4 	beq.w	8002efc <_svfiprintf_r+0x1b8>
 8002db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002db6:	4453      	add	r3, sl
 8002db8:	9309      	str	r3, [sp, #36]	; 0x24
 8002dba:	783b      	ldrb	r3, [r7, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 809d 	beq.w	8002efc <_svfiprintf_r+0x1b8>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002dcc:	9304      	str	r3, [sp, #16]
 8002dce:	9307      	str	r3, [sp, #28]
 8002dd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002dd4:	931a      	str	r3, [sp, #104]	; 0x68
 8002dd6:	462f      	mov	r7, r5
 8002dd8:	2205      	movs	r2, #5
 8002dda:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002dde:	4850      	ldr	r0, [pc, #320]	; (8002f20 <_svfiprintf_r+0x1dc>)
 8002de0:	f000 fa30 	bl	8003244 <memchr>
 8002de4:	9b04      	ldr	r3, [sp, #16]
 8002de6:	b9d0      	cbnz	r0, 8002e1e <_svfiprintf_r+0xda>
 8002de8:	06d9      	lsls	r1, r3, #27
 8002dea:	bf44      	itt	mi
 8002dec:	2220      	movmi	r2, #32
 8002dee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002df2:	071a      	lsls	r2, r3, #28
 8002df4:	bf44      	itt	mi
 8002df6:	222b      	movmi	r2, #43	; 0x2b
 8002df8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002dfc:	782a      	ldrb	r2, [r5, #0]
 8002dfe:	2a2a      	cmp	r2, #42	; 0x2a
 8002e00:	d015      	beq.n	8002e2e <_svfiprintf_r+0xea>
 8002e02:	462f      	mov	r7, r5
 8002e04:	2000      	movs	r0, #0
 8002e06:	250a      	movs	r5, #10
 8002e08:	9a07      	ldr	r2, [sp, #28]
 8002e0a:	4639      	mov	r1, r7
 8002e0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e10:	3b30      	subs	r3, #48	; 0x30
 8002e12:	2b09      	cmp	r3, #9
 8002e14:	d94d      	bls.n	8002eb2 <_svfiprintf_r+0x16e>
 8002e16:	b1b8      	cbz	r0, 8002e48 <_svfiprintf_r+0x104>
 8002e18:	e00f      	b.n	8002e3a <_svfiprintf_r+0xf6>
 8002e1a:	462f      	mov	r7, r5
 8002e1c:	e7b8      	b.n	8002d90 <_svfiprintf_r+0x4c>
 8002e1e:	4a40      	ldr	r2, [pc, #256]	; (8002f20 <_svfiprintf_r+0x1dc>)
 8002e20:	463d      	mov	r5, r7
 8002e22:	1a80      	subs	r0, r0, r2
 8002e24:	fa0b f000 	lsl.w	r0, fp, r0
 8002e28:	4318      	orrs	r0, r3
 8002e2a:	9004      	str	r0, [sp, #16]
 8002e2c:	e7d3      	b.n	8002dd6 <_svfiprintf_r+0x92>
 8002e2e:	9a03      	ldr	r2, [sp, #12]
 8002e30:	1d11      	adds	r1, r2, #4
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	9103      	str	r1, [sp, #12]
 8002e36:	2a00      	cmp	r2, #0
 8002e38:	db01      	blt.n	8002e3e <_svfiprintf_r+0xfa>
 8002e3a:	9207      	str	r2, [sp, #28]
 8002e3c:	e004      	b.n	8002e48 <_svfiprintf_r+0x104>
 8002e3e:	4252      	negs	r2, r2
 8002e40:	f043 0302 	orr.w	r3, r3, #2
 8002e44:	9207      	str	r2, [sp, #28]
 8002e46:	9304      	str	r3, [sp, #16]
 8002e48:	783b      	ldrb	r3, [r7, #0]
 8002e4a:	2b2e      	cmp	r3, #46	; 0x2e
 8002e4c:	d10c      	bne.n	8002e68 <_svfiprintf_r+0x124>
 8002e4e:	787b      	ldrb	r3, [r7, #1]
 8002e50:	2b2a      	cmp	r3, #42	; 0x2a
 8002e52:	d133      	bne.n	8002ebc <_svfiprintf_r+0x178>
 8002e54:	9b03      	ldr	r3, [sp, #12]
 8002e56:	3702      	adds	r7, #2
 8002e58:	1d1a      	adds	r2, r3, #4
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	9203      	str	r2, [sp, #12]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	bfb8      	it	lt
 8002e62:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e66:	9305      	str	r3, [sp, #20]
 8002e68:	4d2e      	ldr	r5, [pc, #184]	; (8002f24 <_svfiprintf_r+0x1e0>)
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	7839      	ldrb	r1, [r7, #0]
 8002e6e:	4628      	mov	r0, r5
 8002e70:	f000 f9e8 	bl	8003244 <memchr>
 8002e74:	b138      	cbz	r0, 8002e86 <_svfiprintf_r+0x142>
 8002e76:	2340      	movs	r3, #64	; 0x40
 8002e78:	1b40      	subs	r0, r0, r5
 8002e7a:	fa03 f000 	lsl.w	r0, r3, r0
 8002e7e:	9b04      	ldr	r3, [sp, #16]
 8002e80:	3701      	adds	r7, #1
 8002e82:	4303      	orrs	r3, r0
 8002e84:	9304      	str	r3, [sp, #16]
 8002e86:	7839      	ldrb	r1, [r7, #0]
 8002e88:	2206      	movs	r2, #6
 8002e8a:	4827      	ldr	r0, [pc, #156]	; (8002f28 <_svfiprintf_r+0x1e4>)
 8002e8c:	1c7e      	adds	r6, r7, #1
 8002e8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e92:	f000 f9d7 	bl	8003244 <memchr>
 8002e96:	2800      	cmp	r0, #0
 8002e98:	d038      	beq.n	8002f0c <_svfiprintf_r+0x1c8>
 8002e9a:	4b24      	ldr	r3, [pc, #144]	; (8002f2c <_svfiprintf_r+0x1e8>)
 8002e9c:	bb13      	cbnz	r3, 8002ee4 <_svfiprintf_r+0x1a0>
 8002e9e:	9b03      	ldr	r3, [sp, #12]
 8002ea0:	3307      	adds	r3, #7
 8002ea2:	f023 0307 	bic.w	r3, r3, #7
 8002ea6:	3308      	adds	r3, #8
 8002ea8:	9303      	str	r3, [sp, #12]
 8002eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002eac:	444b      	add	r3, r9
 8002eae:	9309      	str	r3, [sp, #36]	; 0x24
 8002eb0:	e76d      	b.n	8002d8e <_svfiprintf_r+0x4a>
 8002eb2:	fb05 3202 	mla	r2, r5, r2, r3
 8002eb6:	2001      	movs	r0, #1
 8002eb8:	460f      	mov	r7, r1
 8002eba:	e7a6      	b.n	8002e0a <_svfiprintf_r+0xc6>
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	250a      	movs	r5, #10
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	3701      	adds	r7, #1
 8002ec4:	9305      	str	r3, [sp, #20]
 8002ec6:	4638      	mov	r0, r7
 8002ec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ecc:	3a30      	subs	r2, #48	; 0x30
 8002ece:	2a09      	cmp	r2, #9
 8002ed0:	d903      	bls.n	8002eda <_svfiprintf_r+0x196>
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0c8      	beq.n	8002e68 <_svfiprintf_r+0x124>
 8002ed6:	9105      	str	r1, [sp, #20]
 8002ed8:	e7c6      	b.n	8002e68 <_svfiprintf_r+0x124>
 8002eda:	fb05 2101 	mla	r1, r5, r1, r2
 8002ede:	2301      	movs	r3, #1
 8002ee0:	4607      	mov	r7, r0
 8002ee2:	e7f0      	b.n	8002ec6 <_svfiprintf_r+0x182>
 8002ee4:	ab03      	add	r3, sp, #12
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	4622      	mov	r2, r4
 8002eea:	4b11      	ldr	r3, [pc, #68]	; (8002f30 <_svfiprintf_r+0x1ec>)
 8002eec:	a904      	add	r1, sp, #16
 8002eee:	4640      	mov	r0, r8
 8002ef0:	f3af 8000 	nop.w
 8002ef4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002ef8:	4681      	mov	r9, r0
 8002efa:	d1d6      	bne.n	8002eaa <_svfiprintf_r+0x166>
 8002efc:	89a3      	ldrh	r3, [r4, #12]
 8002efe:	065b      	lsls	r3, r3, #25
 8002f00:	f53f af35 	bmi.w	8002d6e <_svfiprintf_r+0x2a>
 8002f04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f06:	b01d      	add	sp, #116	; 0x74
 8002f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f0c:	ab03      	add	r3, sp, #12
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	4622      	mov	r2, r4
 8002f12:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <_svfiprintf_r+0x1ec>)
 8002f14:	a904      	add	r1, sp, #16
 8002f16:	4640      	mov	r0, r8
 8002f18:	f000 f882 	bl	8003020 <_printf_i>
 8002f1c:	e7ea      	b.n	8002ef4 <_svfiprintf_r+0x1b0>
 8002f1e:	bf00      	nop
 8002f20:	08004dc0 	.word	0x08004dc0
 8002f24:	08004dc6 	.word	0x08004dc6
 8002f28:	08004dca 	.word	0x08004dca
 8002f2c:	00000000 	.word	0x00000000
 8002f30:	08002c91 	.word	0x08002c91

08002f34 <_printf_common>:
 8002f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f38:	4691      	mov	r9, r2
 8002f3a:	461f      	mov	r7, r3
 8002f3c:	688a      	ldr	r2, [r1, #8]
 8002f3e:	690b      	ldr	r3, [r1, #16]
 8002f40:	4606      	mov	r6, r0
 8002f42:	4293      	cmp	r3, r2
 8002f44:	bfb8      	it	lt
 8002f46:	4613      	movlt	r3, r2
 8002f48:	f8c9 3000 	str.w	r3, [r9]
 8002f4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f50:	460c      	mov	r4, r1
 8002f52:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f56:	b112      	cbz	r2, 8002f5e <_printf_common+0x2a>
 8002f58:	3301      	adds	r3, #1
 8002f5a:	f8c9 3000 	str.w	r3, [r9]
 8002f5e:	6823      	ldr	r3, [r4, #0]
 8002f60:	0699      	lsls	r1, r3, #26
 8002f62:	bf42      	ittt	mi
 8002f64:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002f68:	3302      	addmi	r3, #2
 8002f6a:	f8c9 3000 	strmi.w	r3, [r9]
 8002f6e:	6825      	ldr	r5, [r4, #0]
 8002f70:	f015 0506 	ands.w	r5, r5, #6
 8002f74:	d107      	bne.n	8002f86 <_printf_common+0x52>
 8002f76:	f104 0a19 	add.w	sl, r4, #25
 8002f7a:	68e3      	ldr	r3, [r4, #12]
 8002f7c:	f8d9 2000 	ldr.w	r2, [r9]
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	42ab      	cmp	r3, r5
 8002f84:	dc29      	bgt.n	8002fda <_printf_common+0xa6>
 8002f86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002f8a:	6822      	ldr	r2, [r4, #0]
 8002f8c:	3300      	adds	r3, #0
 8002f8e:	bf18      	it	ne
 8002f90:	2301      	movne	r3, #1
 8002f92:	0692      	lsls	r2, r2, #26
 8002f94:	d42e      	bmi.n	8002ff4 <_printf_common+0xc0>
 8002f96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f9a:	4639      	mov	r1, r7
 8002f9c:	4630      	mov	r0, r6
 8002f9e:	47c0      	blx	r8
 8002fa0:	3001      	adds	r0, #1
 8002fa2:	d021      	beq.n	8002fe8 <_printf_common+0xb4>
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	68e5      	ldr	r5, [r4, #12]
 8002fa8:	f003 0306 	and.w	r3, r3, #6
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	bf18      	it	ne
 8002fb0:	2500      	movne	r5, #0
 8002fb2:	f8d9 2000 	ldr.w	r2, [r9]
 8002fb6:	f04f 0900 	mov.w	r9, #0
 8002fba:	bf08      	it	eq
 8002fbc:	1aad      	subeq	r5, r5, r2
 8002fbe:	68a3      	ldr	r3, [r4, #8]
 8002fc0:	6922      	ldr	r2, [r4, #16]
 8002fc2:	bf08      	it	eq
 8002fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	bfc4      	itt	gt
 8002fcc:	1a9b      	subgt	r3, r3, r2
 8002fce:	18ed      	addgt	r5, r5, r3
 8002fd0:	341a      	adds	r4, #26
 8002fd2:	454d      	cmp	r5, r9
 8002fd4:	d11a      	bne.n	800300c <_printf_common+0xd8>
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	e008      	b.n	8002fec <_printf_common+0xb8>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	4652      	mov	r2, sl
 8002fde:	4639      	mov	r1, r7
 8002fe0:	4630      	mov	r0, r6
 8002fe2:	47c0      	blx	r8
 8002fe4:	3001      	adds	r0, #1
 8002fe6:	d103      	bne.n	8002ff0 <_printf_common+0xbc>
 8002fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ff0:	3501      	adds	r5, #1
 8002ff2:	e7c2      	b.n	8002f7a <_printf_common+0x46>
 8002ff4:	2030      	movs	r0, #48	; 0x30
 8002ff6:	18e1      	adds	r1, r4, r3
 8002ff8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003002:	4422      	add	r2, r4
 8003004:	3302      	adds	r3, #2
 8003006:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800300a:	e7c4      	b.n	8002f96 <_printf_common+0x62>
 800300c:	2301      	movs	r3, #1
 800300e:	4622      	mov	r2, r4
 8003010:	4639      	mov	r1, r7
 8003012:	4630      	mov	r0, r6
 8003014:	47c0      	blx	r8
 8003016:	3001      	adds	r0, #1
 8003018:	d0e6      	beq.n	8002fe8 <_printf_common+0xb4>
 800301a:	f109 0901 	add.w	r9, r9, #1
 800301e:	e7d8      	b.n	8002fd2 <_printf_common+0x9e>

08003020 <_printf_i>:
 8003020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003024:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003028:	460c      	mov	r4, r1
 800302a:	7e09      	ldrb	r1, [r1, #24]
 800302c:	b085      	sub	sp, #20
 800302e:	296e      	cmp	r1, #110	; 0x6e
 8003030:	4617      	mov	r7, r2
 8003032:	4606      	mov	r6, r0
 8003034:	4698      	mov	r8, r3
 8003036:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003038:	f000 80b3 	beq.w	80031a2 <_printf_i+0x182>
 800303c:	d822      	bhi.n	8003084 <_printf_i+0x64>
 800303e:	2963      	cmp	r1, #99	; 0x63
 8003040:	d036      	beq.n	80030b0 <_printf_i+0x90>
 8003042:	d80a      	bhi.n	800305a <_printf_i+0x3a>
 8003044:	2900      	cmp	r1, #0
 8003046:	f000 80b9 	beq.w	80031bc <_printf_i+0x19c>
 800304a:	2958      	cmp	r1, #88	; 0x58
 800304c:	f000 8083 	beq.w	8003156 <_printf_i+0x136>
 8003050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003054:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003058:	e032      	b.n	80030c0 <_printf_i+0xa0>
 800305a:	2964      	cmp	r1, #100	; 0x64
 800305c:	d001      	beq.n	8003062 <_printf_i+0x42>
 800305e:	2969      	cmp	r1, #105	; 0x69
 8003060:	d1f6      	bne.n	8003050 <_printf_i+0x30>
 8003062:	6820      	ldr	r0, [r4, #0]
 8003064:	6813      	ldr	r3, [r2, #0]
 8003066:	0605      	lsls	r5, r0, #24
 8003068:	f103 0104 	add.w	r1, r3, #4
 800306c:	d52a      	bpl.n	80030c4 <_printf_i+0xa4>
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6011      	str	r1, [r2, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	da03      	bge.n	800307e <_printf_i+0x5e>
 8003076:	222d      	movs	r2, #45	; 0x2d
 8003078:	425b      	negs	r3, r3
 800307a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800307e:	486f      	ldr	r0, [pc, #444]	; (800323c <_printf_i+0x21c>)
 8003080:	220a      	movs	r2, #10
 8003082:	e039      	b.n	80030f8 <_printf_i+0xd8>
 8003084:	2973      	cmp	r1, #115	; 0x73
 8003086:	f000 809d 	beq.w	80031c4 <_printf_i+0x1a4>
 800308a:	d808      	bhi.n	800309e <_printf_i+0x7e>
 800308c:	296f      	cmp	r1, #111	; 0x6f
 800308e:	d020      	beq.n	80030d2 <_printf_i+0xb2>
 8003090:	2970      	cmp	r1, #112	; 0x70
 8003092:	d1dd      	bne.n	8003050 <_printf_i+0x30>
 8003094:	6823      	ldr	r3, [r4, #0]
 8003096:	f043 0320 	orr.w	r3, r3, #32
 800309a:	6023      	str	r3, [r4, #0]
 800309c:	e003      	b.n	80030a6 <_printf_i+0x86>
 800309e:	2975      	cmp	r1, #117	; 0x75
 80030a0:	d017      	beq.n	80030d2 <_printf_i+0xb2>
 80030a2:	2978      	cmp	r1, #120	; 0x78
 80030a4:	d1d4      	bne.n	8003050 <_printf_i+0x30>
 80030a6:	2378      	movs	r3, #120	; 0x78
 80030a8:	4865      	ldr	r0, [pc, #404]	; (8003240 <_printf_i+0x220>)
 80030aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80030ae:	e055      	b.n	800315c <_printf_i+0x13c>
 80030b0:	6813      	ldr	r3, [r2, #0]
 80030b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030b6:	1d19      	adds	r1, r3, #4
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6011      	str	r1, [r2, #0]
 80030bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030c0:	2301      	movs	r3, #1
 80030c2:	e08c      	b.n	80031de <_printf_i+0x1be>
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80030ca:	6011      	str	r1, [r2, #0]
 80030cc:	bf18      	it	ne
 80030ce:	b21b      	sxthne	r3, r3
 80030d0:	e7cf      	b.n	8003072 <_printf_i+0x52>
 80030d2:	6813      	ldr	r3, [r2, #0]
 80030d4:	6825      	ldr	r5, [r4, #0]
 80030d6:	1d18      	adds	r0, r3, #4
 80030d8:	6010      	str	r0, [r2, #0]
 80030da:	0628      	lsls	r0, r5, #24
 80030dc:	d501      	bpl.n	80030e2 <_printf_i+0xc2>
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	e002      	b.n	80030e8 <_printf_i+0xc8>
 80030e2:	0668      	lsls	r0, r5, #25
 80030e4:	d5fb      	bpl.n	80030de <_printf_i+0xbe>
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	296f      	cmp	r1, #111	; 0x6f
 80030ea:	bf14      	ite	ne
 80030ec:	220a      	movne	r2, #10
 80030ee:	2208      	moveq	r2, #8
 80030f0:	4852      	ldr	r0, [pc, #328]	; (800323c <_printf_i+0x21c>)
 80030f2:	2100      	movs	r1, #0
 80030f4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030f8:	6865      	ldr	r5, [r4, #4]
 80030fa:	2d00      	cmp	r5, #0
 80030fc:	60a5      	str	r5, [r4, #8]
 80030fe:	f2c0 8095 	blt.w	800322c <_printf_i+0x20c>
 8003102:	6821      	ldr	r1, [r4, #0]
 8003104:	f021 0104 	bic.w	r1, r1, #4
 8003108:	6021      	str	r1, [r4, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d13d      	bne.n	800318a <_printf_i+0x16a>
 800310e:	2d00      	cmp	r5, #0
 8003110:	f040 808e 	bne.w	8003230 <_printf_i+0x210>
 8003114:	4665      	mov	r5, ip
 8003116:	2a08      	cmp	r2, #8
 8003118:	d10b      	bne.n	8003132 <_printf_i+0x112>
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	07db      	lsls	r3, r3, #31
 800311e:	d508      	bpl.n	8003132 <_printf_i+0x112>
 8003120:	6923      	ldr	r3, [r4, #16]
 8003122:	6862      	ldr	r2, [r4, #4]
 8003124:	429a      	cmp	r2, r3
 8003126:	bfde      	ittt	le
 8003128:	2330      	movle	r3, #48	; 0x30
 800312a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800312e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003132:	ebac 0305 	sub.w	r3, ip, r5
 8003136:	6123      	str	r3, [r4, #16]
 8003138:	f8cd 8000 	str.w	r8, [sp]
 800313c:	463b      	mov	r3, r7
 800313e:	aa03      	add	r2, sp, #12
 8003140:	4621      	mov	r1, r4
 8003142:	4630      	mov	r0, r6
 8003144:	f7ff fef6 	bl	8002f34 <_printf_common>
 8003148:	3001      	adds	r0, #1
 800314a:	d14d      	bne.n	80031e8 <_printf_i+0x1c8>
 800314c:	f04f 30ff 	mov.w	r0, #4294967295
 8003150:	b005      	add	sp, #20
 8003152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003156:	4839      	ldr	r0, [pc, #228]	; (800323c <_printf_i+0x21c>)
 8003158:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800315c:	6813      	ldr	r3, [r2, #0]
 800315e:	6821      	ldr	r1, [r4, #0]
 8003160:	1d1d      	adds	r5, r3, #4
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6015      	str	r5, [r2, #0]
 8003166:	060a      	lsls	r2, r1, #24
 8003168:	d50b      	bpl.n	8003182 <_printf_i+0x162>
 800316a:	07ca      	lsls	r2, r1, #31
 800316c:	bf44      	itt	mi
 800316e:	f041 0120 	orrmi.w	r1, r1, #32
 8003172:	6021      	strmi	r1, [r4, #0]
 8003174:	b91b      	cbnz	r3, 800317e <_printf_i+0x15e>
 8003176:	6822      	ldr	r2, [r4, #0]
 8003178:	f022 0220 	bic.w	r2, r2, #32
 800317c:	6022      	str	r2, [r4, #0]
 800317e:	2210      	movs	r2, #16
 8003180:	e7b7      	b.n	80030f2 <_printf_i+0xd2>
 8003182:	064d      	lsls	r5, r1, #25
 8003184:	bf48      	it	mi
 8003186:	b29b      	uxthmi	r3, r3
 8003188:	e7ef      	b.n	800316a <_printf_i+0x14a>
 800318a:	4665      	mov	r5, ip
 800318c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003190:	fb02 3311 	mls	r3, r2, r1, r3
 8003194:	5cc3      	ldrb	r3, [r0, r3]
 8003196:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800319a:	460b      	mov	r3, r1
 800319c:	2900      	cmp	r1, #0
 800319e:	d1f5      	bne.n	800318c <_printf_i+0x16c>
 80031a0:	e7b9      	b.n	8003116 <_printf_i+0xf6>
 80031a2:	6813      	ldr	r3, [r2, #0]
 80031a4:	6825      	ldr	r5, [r4, #0]
 80031a6:	1d18      	adds	r0, r3, #4
 80031a8:	6961      	ldr	r1, [r4, #20]
 80031aa:	6010      	str	r0, [r2, #0]
 80031ac:	0628      	lsls	r0, r5, #24
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	d501      	bpl.n	80031b6 <_printf_i+0x196>
 80031b2:	6019      	str	r1, [r3, #0]
 80031b4:	e002      	b.n	80031bc <_printf_i+0x19c>
 80031b6:	066a      	lsls	r2, r5, #25
 80031b8:	d5fb      	bpl.n	80031b2 <_printf_i+0x192>
 80031ba:	8019      	strh	r1, [r3, #0]
 80031bc:	2300      	movs	r3, #0
 80031be:	4665      	mov	r5, ip
 80031c0:	6123      	str	r3, [r4, #16]
 80031c2:	e7b9      	b.n	8003138 <_printf_i+0x118>
 80031c4:	6813      	ldr	r3, [r2, #0]
 80031c6:	1d19      	adds	r1, r3, #4
 80031c8:	6011      	str	r1, [r2, #0]
 80031ca:	681d      	ldr	r5, [r3, #0]
 80031cc:	6862      	ldr	r2, [r4, #4]
 80031ce:	2100      	movs	r1, #0
 80031d0:	4628      	mov	r0, r5
 80031d2:	f000 f837 	bl	8003244 <memchr>
 80031d6:	b108      	cbz	r0, 80031dc <_printf_i+0x1bc>
 80031d8:	1b40      	subs	r0, r0, r5
 80031da:	6060      	str	r0, [r4, #4]
 80031dc:	6863      	ldr	r3, [r4, #4]
 80031de:	6123      	str	r3, [r4, #16]
 80031e0:	2300      	movs	r3, #0
 80031e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031e6:	e7a7      	b.n	8003138 <_printf_i+0x118>
 80031e8:	6923      	ldr	r3, [r4, #16]
 80031ea:	462a      	mov	r2, r5
 80031ec:	4639      	mov	r1, r7
 80031ee:	4630      	mov	r0, r6
 80031f0:	47c0      	blx	r8
 80031f2:	3001      	adds	r0, #1
 80031f4:	d0aa      	beq.n	800314c <_printf_i+0x12c>
 80031f6:	6823      	ldr	r3, [r4, #0]
 80031f8:	079b      	lsls	r3, r3, #30
 80031fa:	d413      	bmi.n	8003224 <_printf_i+0x204>
 80031fc:	68e0      	ldr	r0, [r4, #12]
 80031fe:	9b03      	ldr	r3, [sp, #12]
 8003200:	4298      	cmp	r0, r3
 8003202:	bfb8      	it	lt
 8003204:	4618      	movlt	r0, r3
 8003206:	e7a3      	b.n	8003150 <_printf_i+0x130>
 8003208:	2301      	movs	r3, #1
 800320a:	464a      	mov	r2, r9
 800320c:	4639      	mov	r1, r7
 800320e:	4630      	mov	r0, r6
 8003210:	47c0      	blx	r8
 8003212:	3001      	adds	r0, #1
 8003214:	d09a      	beq.n	800314c <_printf_i+0x12c>
 8003216:	3501      	adds	r5, #1
 8003218:	68e3      	ldr	r3, [r4, #12]
 800321a:	9a03      	ldr	r2, [sp, #12]
 800321c:	1a9b      	subs	r3, r3, r2
 800321e:	42ab      	cmp	r3, r5
 8003220:	dcf2      	bgt.n	8003208 <_printf_i+0x1e8>
 8003222:	e7eb      	b.n	80031fc <_printf_i+0x1dc>
 8003224:	2500      	movs	r5, #0
 8003226:	f104 0919 	add.w	r9, r4, #25
 800322a:	e7f5      	b.n	8003218 <_printf_i+0x1f8>
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1ac      	bne.n	800318a <_printf_i+0x16a>
 8003230:	7803      	ldrb	r3, [r0, #0]
 8003232:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003236:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800323a:	e76c      	b.n	8003116 <_printf_i+0xf6>
 800323c:	08004dd1 	.word	0x08004dd1
 8003240:	08004de2 	.word	0x08004de2

08003244 <memchr>:
 8003244:	b510      	push	{r4, lr}
 8003246:	b2c9      	uxtb	r1, r1
 8003248:	4402      	add	r2, r0
 800324a:	4290      	cmp	r0, r2
 800324c:	4603      	mov	r3, r0
 800324e:	d101      	bne.n	8003254 <memchr+0x10>
 8003250:	2300      	movs	r3, #0
 8003252:	e003      	b.n	800325c <memchr+0x18>
 8003254:	781c      	ldrb	r4, [r3, #0]
 8003256:	3001      	adds	r0, #1
 8003258:	428c      	cmp	r4, r1
 800325a:	d1f6      	bne.n	800324a <memchr+0x6>
 800325c:	4618      	mov	r0, r3
 800325e:	bd10      	pop	{r4, pc}

08003260 <memcpy>:
 8003260:	b510      	push	{r4, lr}
 8003262:	1e43      	subs	r3, r0, #1
 8003264:	440a      	add	r2, r1
 8003266:	4291      	cmp	r1, r2
 8003268:	d100      	bne.n	800326c <memcpy+0xc>
 800326a:	bd10      	pop	{r4, pc}
 800326c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003270:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003274:	e7f7      	b.n	8003266 <memcpy+0x6>

08003276 <memmove>:
 8003276:	4288      	cmp	r0, r1
 8003278:	b510      	push	{r4, lr}
 800327a:	eb01 0302 	add.w	r3, r1, r2
 800327e:	d807      	bhi.n	8003290 <memmove+0x1a>
 8003280:	1e42      	subs	r2, r0, #1
 8003282:	4299      	cmp	r1, r3
 8003284:	d00a      	beq.n	800329c <memmove+0x26>
 8003286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800328a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800328e:	e7f8      	b.n	8003282 <memmove+0xc>
 8003290:	4283      	cmp	r3, r0
 8003292:	d9f5      	bls.n	8003280 <memmove+0xa>
 8003294:	1881      	adds	r1, r0, r2
 8003296:	1ad2      	subs	r2, r2, r3
 8003298:	42d3      	cmn	r3, r2
 800329a:	d100      	bne.n	800329e <memmove+0x28>
 800329c:	bd10      	pop	{r4, pc}
 800329e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80032a2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80032a6:	e7f7      	b.n	8003298 <memmove+0x22>

080032a8 <_free_r>:
 80032a8:	b538      	push	{r3, r4, r5, lr}
 80032aa:	4605      	mov	r5, r0
 80032ac:	2900      	cmp	r1, #0
 80032ae:	d043      	beq.n	8003338 <_free_r+0x90>
 80032b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032b4:	1f0c      	subs	r4, r1, #4
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	bfb8      	it	lt
 80032ba:	18e4      	addlt	r4, r4, r3
 80032bc:	f000 f8d0 	bl	8003460 <__malloc_lock>
 80032c0:	4a1e      	ldr	r2, [pc, #120]	; (800333c <_free_r+0x94>)
 80032c2:	6813      	ldr	r3, [r2, #0]
 80032c4:	4610      	mov	r0, r2
 80032c6:	b933      	cbnz	r3, 80032d6 <_free_r+0x2e>
 80032c8:	6063      	str	r3, [r4, #4]
 80032ca:	6014      	str	r4, [r2, #0]
 80032cc:	4628      	mov	r0, r5
 80032ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032d2:	f000 b8c6 	b.w	8003462 <__malloc_unlock>
 80032d6:	42a3      	cmp	r3, r4
 80032d8:	d90b      	bls.n	80032f2 <_free_r+0x4a>
 80032da:	6821      	ldr	r1, [r4, #0]
 80032dc:	1862      	adds	r2, r4, r1
 80032de:	4293      	cmp	r3, r2
 80032e0:	bf01      	itttt	eq
 80032e2:	681a      	ldreq	r2, [r3, #0]
 80032e4:	685b      	ldreq	r3, [r3, #4]
 80032e6:	1852      	addeq	r2, r2, r1
 80032e8:	6022      	streq	r2, [r4, #0]
 80032ea:	6063      	str	r3, [r4, #4]
 80032ec:	6004      	str	r4, [r0, #0]
 80032ee:	e7ed      	b.n	80032cc <_free_r+0x24>
 80032f0:	4613      	mov	r3, r2
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	b10a      	cbz	r2, 80032fa <_free_r+0x52>
 80032f6:	42a2      	cmp	r2, r4
 80032f8:	d9fa      	bls.n	80032f0 <_free_r+0x48>
 80032fa:	6819      	ldr	r1, [r3, #0]
 80032fc:	1858      	adds	r0, r3, r1
 80032fe:	42a0      	cmp	r0, r4
 8003300:	d10b      	bne.n	800331a <_free_r+0x72>
 8003302:	6820      	ldr	r0, [r4, #0]
 8003304:	4401      	add	r1, r0
 8003306:	1858      	adds	r0, r3, r1
 8003308:	4282      	cmp	r2, r0
 800330a:	6019      	str	r1, [r3, #0]
 800330c:	d1de      	bne.n	80032cc <_free_r+0x24>
 800330e:	6810      	ldr	r0, [r2, #0]
 8003310:	6852      	ldr	r2, [r2, #4]
 8003312:	4401      	add	r1, r0
 8003314:	6019      	str	r1, [r3, #0]
 8003316:	605a      	str	r2, [r3, #4]
 8003318:	e7d8      	b.n	80032cc <_free_r+0x24>
 800331a:	d902      	bls.n	8003322 <_free_r+0x7a>
 800331c:	230c      	movs	r3, #12
 800331e:	602b      	str	r3, [r5, #0]
 8003320:	e7d4      	b.n	80032cc <_free_r+0x24>
 8003322:	6820      	ldr	r0, [r4, #0]
 8003324:	1821      	adds	r1, r4, r0
 8003326:	428a      	cmp	r2, r1
 8003328:	bf01      	itttt	eq
 800332a:	6811      	ldreq	r1, [r2, #0]
 800332c:	6852      	ldreq	r2, [r2, #4]
 800332e:	1809      	addeq	r1, r1, r0
 8003330:	6021      	streq	r1, [r4, #0]
 8003332:	6062      	str	r2, [r4, #4]
 8003334:	605c      	str	r4, [r3, #4]
 8003336:	e7c9      	b.n	80032cc <_free_r+0x24>
 8003338:	bd38      	pop	{r3, r4, r5, pc}
 800333a:	bf00      	nop
 800333c:	200004a8 	.word	0x200004a8

08003340 <_malloc_r>:
 8003340:	b570      	push	{r4, r5, r6, lr}
 8003342:	1ccd      	adds	r5, r1, #3
 8003344:	f025 0503 	bic.w	r5, r5, #3
 8003348:	3508      	adds	r5, #8
 800334a:	2d0c      	cmp	r5, #12
 800334c:	bf38      	it	cc
 800334e:	250c      	movcc	r5, #12
 8003350:	2d00      	cmp	r5, #0
 8003352:	4606      	mov	r6, r0
 8003354:	db01      	blt.n	800335a <_malloc_r+0x1a>
 8003356:	42a9      	cmp	r1, r5
 8003358:	d903      	bls.n	8003362 <_malloc_r+0x22>
 800335a:	230c      	movs	r3, #12
 800335c:	6033      	str	r3, [r6, #0]
 800335e:	2000      	movs	r0, #0
 8003360:	bd70      	pop	{r4, r5, r6, pc}
 8003362:	f000 f87d 	bl	8003460 <__malloc_lock>
 8003366:	4a21      	ldr	r2, [pc, #132]	; (80033ec <_malloc_r+0xac>)
 8003368:	6814      	ldr	r4, [r2, #0]
 800336a:	4621      	mov	r1, r4
 800336c:	b991      	cbnz	r1, 8003394 <_malloc_r+0x54>
 800336e:	4c20      	ldr	r4, [pc, #128]	; (80033f0 <_malloc_r+0xb0>)
 8003370:	6823      	ldr	r3, [r4, #0]
 8003372:	b91b      	cbnz	r3, 800337c <_malloc_r+0x3c>
 8003374:	4630      	mov	r0, r6
 8003376:	f000 f863 	bl	8003440 <_sbrk_r>
 800337a:	6020      	str	r0, [r4, #0]
 800337c:	4629      	mov	r1, r5
 800337e:	4630      	mov	r0, r6
 8003380:	f000 f85e 	bl	8003440 <_sbrk_r>
 8003384:	1c43      	adds	r3, r0, #1
 8003386:	d124      	bne.n	80033d2 <_malloc_r+0x92>
 8003388:	230c      	movs	r3, #12
 800338a:	4630      	mov	r0, r6
 800338c:	6033      	str	r3, [r6, #0]
 800338e:	f000 f868 	bl	8003462 <__malloc_unlock>
 8003392:	e7e4      	b.n	800335e <_malloc_r+0x1e>
 8003394:	680b      	ldr	r3, [r1, #0]
 8003396:	1b5b      	subs	r3, r3, r5
 8003398:	d418      	bmi.n	80033cc <_malloc_r+0x8c>
 800339a:	2b0b      	cmp	r3, #11
 800339c:	d90f      	bls.n	80033be <_malloc_r+0x7e>
 800339e:	600b      	str	r3, [r1, #0]
 80033a0:	18cc      	adds	r4, r1, r3
 80033a2:	50cd      	str	r5, [r1, r3]
 80033a4:	4630      	mov	r0, r6
 80033a6:	f000 f85c 	bl	8003462 <__malloc_unlock>
 80033aa:	f104 000b 	add.w	r0, r4, #11
 80033ae:	1d23      	adds	r3, r4, #4
 80033b0:	f020 0007 	bic.w	r0, r0, #7
 80033b4:	1ac3      	subs	r3, r0, r3
 80033b6:	d0d3      	beq.n	8003360 <_malloc_r+0x20>
 80033b8:	425a      	negs	r2, r3
 80033ba:	50e2      	str	r2, [r4, r3]
 80033bc:	e7d0      	b.n	8003360 <_malloc_r+0x20>
 80033be:	684b      	ldr	r3, [r1, #4]
 80033c0:	428c      	cmp	r4, r1
 80033c2:	bf16      	itet	ne
 80033c4:	6063      	strne	r3, [r4, #4]
 80033c6:	6013      	streq	r3, [r2, #0]
 80033c8:	460c      	movne	r4, r1
 80033ca:	e7eb      	b.n	80033a4 <_malloc_r+0x64>
 80033cc:	460c      	mov	r4, r1
 80033ce:	6849      	ldr	r1, [r1, #4]
 80033d0:	e7cc      	b.n	800336c <_malloc_r+0x2c>
 80033d2:	1cc4      	adds	r4, r0, #3
 80033d4:	f024 0403 	bic.w	r4, r4, #3
 80033d8:	42a0      	cmp	r0, r4
 80033da:	d005      	beq.n	80033e8 <_malloc_r+0xa8>
 80033dc:	1a21      	subs	r1, r4, r0
 80033de:	4630      	mov	r0, r6
 80033e0:	f000 f82e 	bl	8003440 <_sbrk_r>
 80033e4:	3001      	adds	r0, #1
 80033e6:	d0cf      	beq.n	8003388 <_malloc_r+0x48>
 80033e8:	6025      	str	r5, [r4, #0]
 80033ea:	e7db      	b.n	80033a4 <_malloc_r+0x64>
 80033ec:	200004a8 	.word	0x200004a8
 80033f0:	200004ac 	.word	0x200004ac

080033f4 <_realloc_r>:
 80033f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f6:	4607      	mov	r7, r0
 80033f8:	4614      	mov	r4, r2
 80033fa:	460e      	mov	r6, r1
 80033fc:	b921      	cbnz	r1, 8003408 <_realloc_r+0x14>
 80033fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003402:	4611      	mov	r1, r2
 8003404:	f7ff bf9c 	b.w	8003340 <_malloc_r>
 8003408:	b922      	cbnz	r2, 8003414 <_realloc_r+0x20>
 800340a:	f7ff ff4d 	bl	80032a8 <_free_r>
 800340e:	4625      	mov	r5, r4
 8003410:	4628      	mov	r0, r5
 8003412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003414:	f000 f826 	bl	8003464 <_malloc_usable_size_r>
 8003418:	42a0      	cmp	r0, r4
 800341a:	d20f      	bcs.n	800343c <_realloc_r+0x48>
 800341c:	4621      	mov	r1, r4
 800341e:	4638      	mov	r0, r7
 8003420:	f7ff ff8e 	bl	8003340 <_malloc_r>
 8003424:	4605      	mov	r5, r0
 8003426:	2800      	cmp	r0, #0
 8003428:	d0f2      	beq.n	8003410 <_realloc_r+0x1c>
 800342a:	4631      	mov	r1, r6
 800342c:	4622      	mov	r2, r4
 800342e:	f7ff ff17 	bl	8003260 <memcpy>
 8003432:	4631      	mov	r1, r6
 8003434:	4638      	mov	r0, r7
 8003436:	f7ff ff37 	bl	80032a8 <_free_r>
 800343a:	e7e9      	b.n	8003410 <_realloc_r+0x1c>
 800343c:	4635      	mov	r5, r6
 800343e:	e7e7      	b.n	8003410 <_realloc_r+0x1c>

08003440 <_sbrk_r>:
 8003440:	b538      	push	{r3, r4, r5, lr}
 8003442:	2300      	movs	r3, #0
 8003444:	4c05      	ldr	r4, [pc, #20]	; (800345c <_sbrk_r+0x1c>)
 8003446:	4605      	mov	r5, r0
 8003448:	4608      	mov	r0, r1
 800344a:	6023      	str	r3, [r4, #0]
 800344c:	f7fd fee4 	bl	8001218 <_sbrk>
 8003450:	1c43      	adds	r3, r0, #1
 8003452:	d102      	bne.n	800345a <_sbrk_r+0x1a>
 8003454:	6823      	ldr	r3, [r4, #0]
 8003456:	b103      	cbz	r3, 800345a <_sbrk_r+0x1a>
 8003458:	602b      	str	r3, [r5, #0]
 800345a:	bd38      	pop	{r3, r4, r5, pc}
 800345c:	20000508 	.word	0x20000508

08003460 <__malloc_lock>:
 8003460:	4770      	bx	lr

08003462 <__malloc_unlock>:
 8003462:	4770      	bx	lr

08003464 <_malloc_usable_size_r>:
 8003464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003468:	1f18      	subs	r0, r3, #4
 800346a:	2b00      	cmp	r3, #0
 800346c:	bfbc      	itt	lt
 800346e:	580b      	ldrlt	r3, [r1, r0]
 8003470:	18c0      	addlt	r0, r0, r3
 8003472:	4770      	bx	lr

08003474 <_init>:
 8003474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003476:	bf00      	nop
 8003478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800347a:	bc08      	pop	{r3}
 800347c:	469e      	mov	lr, r3
 800347e:	4770      	bx	lr

08003480 <_fini>:
 8003480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003482:	bf00      	nop
 8003484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003486:	bc08      	pop	{r3}
 8003488:	469e      	mov	lr, r3
 800348a:	4770      	bx	lr
