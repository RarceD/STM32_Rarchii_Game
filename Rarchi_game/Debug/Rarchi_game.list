
Rarchi_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003390  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016e8  0800349c  0800349c  0001349c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b84  08004b84  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08004b84  08004b84  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b84  08004b84  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b84  08004b84  00014b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b88  08004b88  00014b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004b8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  20000080  08004c0c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  08004c0c  0002050c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a186  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019a0  00000000  00000000  0002a22f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000810  00000000  00000000  0002bbd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000760  00000000  00000000  0002c3e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000171c1  00000000  00000000  0002cb40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007e51  00000000  00000000  00043d01  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082d66  00000000  00000000  0004bb52  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ce8b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000230c  00000000  00000000  000ce934  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08003484 	.word	0x08003484

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08003484 	.word	0x08003484

0800014c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b09a      	sub	sp, #104	; 0x68
 8000150:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	Player children;
	children.points = 33;
 8000152:	2321      	movs	r3, #33	; 0x21
 8000154:	657b      	str	r3, [r7, #84]	; 0x54
	children.state_machine = INIT;
 8000156:	2300      	movs	r3, #0
 8000158:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	children.scrol_position = 18;
 800015c:	2312      	movs	r3, #18
 800015e:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000162:	f001 f8e5 	bl	8001330 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000166:	f000 fa71 	bl	800064c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800016a:	f000 fad9 	bl	8000720 <MX_GPIO_Init>
	MX_I2C1_Init();
 800016e:	f000 faa9 	bl	80006c4 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	SSD1306_Init(); // initialise
 8000172:	f000 fbb3 	bl	80008dc <SSD1306_Init>

	character_draw(1);
 8000176:	2001      	movs	r0, #1
 8000178:	f001 f888 	bl	800128c <character_draw>
	SSD1306_GotoXY(0, 0);
 800017c:	2100      	movs	r1, #0
 800017e:	2000      	movs	r0, #0
 8000180:	f000 fd14 	bl	8000bac <SSD1306_GotoXY>
	SSD1306_Puts("PTS:", &Font_11x18, 1);
 8000184:	2201      	movs	r2, #1
 8000186:	49c3      	ldr	r1, [pc, #780]	; (8000494 <main+0x348>)
 8000188:	48c3      	ldr	r0, [pc, #780]	; (8000498 <main+0x34c>)
 800018a:	f000 fda5 	bl	8000cd8 <SSD1306_Puts>
	SSD1306_GotoXY(42, 0);
 800018e:	2100      	movs	r1, #0
 8000190:	202a      	movs	r0, #42	; 0x2a
 8000192:	f000 fd0b 	bl	8000bac <SSD1306_GotoXY>
	char *numberstring[(((sizeof children.points)) + 2) / 3 + 2];
	sprintf(numberstring, "%d", children.points++);
 8000196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000198:	1c5a      	adds	r2, r3, #1
 800019a:	657a      	str	r2, [r7, #84]	; 0x54
 800019c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80001a0:	461a      	mov	r2, r3
 80001a2:	49be      	ldr	r1, [pc, #760]	; (800049c <main+0x350>)
 80001a4:	f002 fd5c 	bl	8002c60 <siprintf>
	SSD1306_Puts(numberstring, &Font_11x18, 1);
 80001a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80001ac:	2201      	movs	r2, #1
 80001ae:	49b9      	ldr	r1, [pc, #740]	; (8000494 <main+0x348>)
 80001b0:	4618      	mov	r0, r3
 80001b2:	f000 fd91 	bl	8000cd8 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 80001b6:	f000 fc55 	bl	8000a64 <SSD1306_UpdateScreen>
	HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 1);
 80001ba:	2201      	movs	r2, #1
 80001bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001c0:	48b7      	ldr	r0, [pc, #732]	; (80004a0 <main+0x354>)
 80001c2:	f001 fb8e 	bl	80018e2 <HAL_GPIO_WritePin>

	uint8_t update_screen = 0;
 80001c6:	2300      	movs	r3, #0
 80001c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	  SSD1306_Clear();
 80001cc:	f000 ff0e 	bl	8000fec <SSD1306_Clear>
	  SSD1306_DrawBitmap(10,10,triangleBitmaps,78,68,1);
 80001d0:	2301      	movs	r3, #1
 80001d2:	9301      	str	r3, [sp, #4]
 80001d4:	2344      	movs	r3, #68	; 0x44
 80001d6:	9300      	str	r3, [sp, #0]
 80001d8:	234e      	movs	r3, #78	; 0x4e
 80001da:	4ab2      	ldr	r2, [pc, #712]	; (80004a4 <main+0x358>)
 80001dc:	210a      	movs	r1, #10
 80001de:	200a      	movs	r0, #10
 80001e0:	f000 fb14 	bl	800080c <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80001e4:	f000 fc3e 	bl	8000a64 <SSD1306_UpdateScreen>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		switch (children.state_machine) {
 80001e8:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80001ec:	2b05      	cmp	r3, #5
 80001ee:	d8fb      	bhi.n	80001e8 <main+0x9c>
 80001f0:	a201      	add	r2, pc, #4	; (adr r2, 80001f8 <main+0xac>)
 80001f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f6:	bf00      	nop
 80001f8:	08000211 	.word	0x08000211
 80001fc:	080002d3 	.word	0x080002d3
 8000200:	0800041f 	.word	0x0800041f
 8000204:	080004c9 	.word	0x080004c9
 8000208:	0800053f 	.word	0x0800053f
 800020c:	080005b3 	.word	0x080005b3
		case INIT:
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin) == 0
 8000210:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000214:	48a2      	ldr	r0, [pc, #648]	; (80004a0 <main+0x354>)
 8000216:	f001 fb4d 	bl	80018b4 <HAL_GPIO_ReadPin>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d008      	beq.n	8000232 <main+0xe6>
					|| HAL_GPIO_ReadPin(BUTTON_LEFT_GPIO_Port, BUTTON_LEFT_Pin)
 8000220:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000224:	489e      	ldr	r0, [pc, #632]	; (80004a0 <main+0x354>)
 8000226:	f001 fb45 	bl	80018b4 <HAL_GPIO_ReadPin>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	f040 81f8 	bne.w	8000622 <main+0x4d6>
							== 0) {
				HAL_GPIO_WritePin(RGB_RED_GPIO_Port, RGB_RED_Pin, 1);
 8000232:	2201      	movs	r2, #1
 8000234:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000238:	4899      	ldr	r0, [pc, #612]	; (80004a0 <main+0x354>)
 800023a:	f001 fb52 	bl	80018e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 0);
 800023e:	2200      	movs	r2, #0
 8000240:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000244:	4896      	ldr	r0, [pc, #600]	; (80004a0 <main+0x354>)
 8000246:	f001 fb4c 	bl	80018e2 <HAL_GPIO_WritePin>
				//I update the screen
				SSD1306_Clear();
 800024a:	f000 fecf 	bl	8000fec <SSD1306_Clear>
				SSD1306_GotoXY(20, 18);
 800024e:	2112      	movs	r1, #18
 8000250:	2014      	movs	r0, #20
 8000252:	f000 fcab 	bl	8000bac <SSD1306_GotoXY>
				SSD1306_Puts("GAME 1", &Font_7x10, 1);
 8000256:	2201      	movs	r2, #1
 8000258:	4993      	ldr	r1, [pc, #588]	; (80004a8 <main+0x35c>)
 800025a:	4894      	ldr	r0, [pc, #592]	; (80004ac <main+0x360>)
 800025c:	f000 fd3c 	bl	8000cd8 <SSD1306_Puts>
				SSD1306_GotoXY(20, 28);
 8000260:	211c      	movs	r1, #28
 8000262:	2014      	movs	r0, #20
 8000264:	f000 fca2 	bl	8000bac <SSD1306_GotoXY>
				SSD1306_Puts("GAME 2", &Font_7x10, 1);
 8000268:	2201      	movs	r2, #1
 800026a:	498f      	ldr	r1, [pc, #572]	; (80004a8 <main+0x35c>)
 800026c:	4890      	ldr	r0, [pc, #576]	; (80004b0 <main+0x364>)
 800026e:	f000 fd33 	bl	8000cd8 <SSD1306_Puts>
				SSD1306_GotoXY(20, 38);
 8000272:	2126      	movs	r1, #38	; 0x26
 8000274:	2014      	movs	r0, #20
 8000276:	f000 fc99 	bl	8000bac <SSD1306_GotoXY>
				SSD1306_Puts("GAME 3", &Font_7x10, 1);
 800027a:	2201      	movs	r2, #1
 800027c:	498a      	ldr	r1, [pc, #552]	; (80004a8 <main+0x35c>)
 800027e:	488d      	ldr	r0, [pc, #564]	; (80004b4 <main+0x368>)
 8000280:	f000 fd2a 	bl	8000cd8 <SSD1306_Puts>
				SSD1306_GotoXY(20, 48);
 8000284:	2130      	movs	r1, #48	; 0x30
 8000286:	2014      	movs	r0, #20
 8000288:	f000 fc90 	bl	8000bac <SSD1306_GotoXY>
				SSD1306_Puts("GAME 4", &Font_7x10, 1);
 800028c:	2201      	movs	r2, #1
 800028e:	4986      	ldr	r1, [pc, #536]	; (80004a8 <main+0x35c>)
 8000290:	4889      	ldr	r0, [pc, #548]	; (80004b8 <main+0x36c>)
 8000292:	f000 fd21 	bl	8000cd8 <SSD1306_Puts>
				SSD1306_GotoXY(50, 0);
 8000296:	2100      	movs	r1, #0
 8000298:	2032      	movs	r0, #50	; 0x32
 800029a:	f000 fc87 	bl	8000bac <SSD1306_GotoXY>
				SSD1306_Puts("Select game", &Font_7x10, 1);
 800029e:	2201      	movs	r2, #1
 80002a0:	4981      	ldr	r1, [pc, #516]	; (80004a8 <main+0x35c>)
 80002a2:	4886      	ldr	r0, [pc, #536]	; (80004bc <main+0x370>)
 80002a4:	f000 fd18 	bl	8000cd8 <SSD1306_Puts>
				children.scrol_position = 28;
 80002a8:	231c      	movs	r3, #28
 80002aa:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
				SSD1306_GotoXY(10, 18);
 80002ae:	2112      	movs	r1, #18
 80002b0:	200a      	movs	r0, #10
 80002b2:	f000 fc7b 	bl	8000bac <SSD1306_GotoXY>
				SSD1306_Puts(">", &Font_7x10, 1);
 80002b6:	2201      	movs	r2, #1
 80002b8:	497b      	ldr	r1, [pc, #492]	; (80004a8 <main+0x35c>)
 80002ba:	4881      	ldr	r0, [pc, #516]	; (80004c0 <main+0x374>)
 80002bc:	f000 fd0c 	bl	8000cd8 <SSD1306_Puts>
				SSD1306_UpdateScreen(); //display
 80002c0:	f000 fbd0 	bl	8000a64 <SSD1306_UpdateScreen>
				HAL_Delay(60);
 80002c4:	203c      	movs	r0, #60	; 0x3c
 80002c6:	f001 f895 	bl	80013f4 <HAL_Delay>
				children.state_machine = MENU;
 80002ca:	2301      	movs	r3, #1
 80002cc:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
			}
			break;
 80002d0:	e1a7      	b.n	8000622 <main+0x4d6>
		case MENU:
			if (HAL_GPIO_ReadPin(BUTTON_LEFT_GPIO_Port, BUTTON_LEFT_Pin) == 0) {
 80002d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002d6:	4872      	ldr	r0, [pc, #456]	; (80004a0 <main+0x354>)
 80002d8:	f001 faec 	bl	80018b4 <HAL_GPIO_ReadPin>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d146      	bne.n	8000370 <main+0x224>
				SSD1306_GotoXY(10, 18);
 80002e2:	2112      	movs	r1, #18
 80002e4:	200a      	movs	r0, #10
 80002e6:	f000 fc61 	bl	8000bac <SSD1306_GotoXY>
				SSD1306_Puts(" ", &Font_7x10, 1);
 80002ea:	2201      	movs	r2, #1
 80002ec:	496e      	ldr	r1, [pc, #440]	; (80004a8 <main+0x35c>)
 80002ee:	4875      	ldr	r0, [pc, #468]	; (80004c4 <main+0x378>)
 80002f0:	f000 fcf2 	bl	8000cd8 <SSD1306_Puts>
				SSD1306_GotoXY(10, 28);
 80002f4:	211c      	movs	r1, #28
 80002f6:	200a      	movs	r0, #10
 80002f8:	f000 fc58 	bl	8000bac <SSD1306_GotoXY>
				SSD1306_Puts(" ", &Font_7x10, 1);
 80002fc:	2201      	movs	r2, #1
 80002fe:	496a      	ldr	r1, [pc, #424]	; (80004a8 <main+0x35c>)
 8000300:	4870      	ldr	r0, [pc, #448]	; (80004c4 <main+0x378>)
 8000302:	f000 fce9 	bl	8000cd8 <SSD1306_Puts>
				SSD1306_GotoXY(10, 38);
 8000306:	2126      	movs	r1, #38	; 0x26
 8000308:	200a      	movs	r0, #10
 800030a:	f000 fc4f 	bl	8000bac <SSD1306_GotoXY>
				SSD1306_Puts(" ", &Font_7x10, 1);
 800030e:	2201      	movs	r2, #1
 8000310:	4965      	ldr	r1, [pc, #404]	; (80004a8 <main+0x35c>)
 8000312:	486c      	ldr	r0, [pc, #432]	; (80004c4 <main+0x378>)
 8000314:	f000 fce0 	bl	8000cd8 <SSD1306_Puts>
				SSD1306_GotoXY(10, 48);
 8000318:	2130      	movs	r1, #48	; 0x30
 800031a:	200a      	movs	r0, #10
 800031c:	f000 fc46 	bl	8000bac <SSD1306_GotoXY>
				SSD1306_Puts(" ", &Font_7x10, 1);
 8000320:	2201      	movs	r2, #1
 8000322:	4961      	ldr	r1, [pc, #388]	; (80004a8 <main+0x35c>)
 8000324:	4867      	ldr	r0, [pc, #412]	; (80004c4 <main+0x378>)
 8000326:	f000 fcd7 	bl	8000cd8 <SSD1306_Puts>
				SSD1306_GotoXY(10, children.scrol_position);
 800032a:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800032e:	b29b      	uxth	r3, r3
 8000330:	4619      	mov	r1, r3
 8000332:	200a      	movs	r0, #10
 8000334:	f000 fc3a 	bl	8000bac <SSD1306_GotoXY>
				SSD1306_Puts(">", &Font_7x10, 1);
 8000338:	2201      	movs	r2, #1
 800033a:	495b      	ldr	r1, [pc, #364]	; (80004a8 <main+0x35c>)
 800033c:	4860      	ldr	r0, [pc, #384]	; (80004c0 <main+0x374>)
 800033e:	f000 fccb 	bl	8000cd8 <SSD1306_Puts>
				SSD1306_UpdateScreen(); //display
 8000342:	f000 fb8f 	bl	8000a64 <SSD1306_UpdateScreen>
				if (children.scrol_position >= 48) {
 8000346:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800034a:	2b2f      	cmp	r3, #47	; 0x2f
 800034c:	d903      	bls.n	8000356 <main+0x20a>
					children.scrol_position = 18;
 800034e:	2312      	movs	r3, #18
 8000350:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 8000354:	e009      	b.n	800036a <main+0x21e>
				} else if (children.scrol_position != 48) {
 8000356:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800035a:	2b30      	cmp	r3, #48	; 0x30
 800035c:	d005      	beq.n	800036a <main+0x21e>
					children.scrol_position += 10;
 800035e:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8000362:	330a      	adds	r3, #10
 8000364:	b2db      	uxtb	r3, r3
 8000366:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
				}
				HAL_Delay(60);
 800036a:	203c      	movs	r0, #60	; 0x3c
 800036c:	f001 f842 	bl	80013f4 <HAL_Delay>
			}
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin)
 8000370:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000374:	484a      	ldr	r0, [pc, #296]	; (80004a0 <main+0x354>)
 8000376:	f001 fa9d 	bl	80018b4 <HAL_GPIO_ReadPin>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	f040 8152 	bne.w	8000626 <main+0x4da>
					== 0) {
				SSD1306_Clear();
 8000382:	f000 fe33 	bl	8000fec <SSD1306_Clear>
				HAL_GPIO_WritePin(RGB_RED_GPIO_Port, RGB_RED_Pin, 0);
 8000386:	2200      	movs	r2, #0
 8000388:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800038c:	4844      	ldr	r0, [pc, #272]	; (80004a0 <main+0x354>)
 800038e:	f001 faa8 	bl	80018e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 0);
 8000392:	2200      	movs	r2, #0
 8000394:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000398:	4841      	ldr	r0, [pc, #260]	; (80004a0 <main+0x354>)
 800039a:	f001 faa2 	bl	80018e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 1);
 800039e:	2201      	movs	r2, #1
 80003a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003a4:	483e      	ldr	r0, [pc, #248]	; (80004a0 <main+0x354>)
 80003a6:	f001 fa9c 	bl	80018e2 <HAL_GPIO_WritePin>
				SSD1306_GotoXY(0, 0);
 80003aa:	2100      	movs	r1, #0
 80003ac:	2000      	movs	r0, #0
 80003ae:	f000 fbfd 	bl	8000bac <SSD1306_GotoXY>

				if (children.scrol_position == 28) {
 80003b2:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80003b6:	2b1c      	cmp	r3, #28
 80003b8:	d108      	bne.n	80003cc <main+0x280>
					children.state_machine = GAME_1;
 80003ba:	2302      	movs	r3, #2
 80003bc:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
					SSD1306_Puts("GAME 1", &Font_11x18, 1);
 80003c0:	2201      	movs	r2, #1
 80003c2:	4934      	ldr	r1, [pc, #208]	; (8000494 <main+0x348>)
 80003c4:	4839      	ldr	r0, [pc, #228]	; (80004ac <main+0x360>)
 80003c6:	f000 fc87 	bl	8000cd8 <SSD1306_Puts>
 80003ca:	e025      	b.n	8000418 <main+0x2cc>
				} else if (children.scrol_position == 38) {
 80003cc:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80003d0:	2b26      	cmp	r3, #38	; 0x26
 80003d2:	d108      	bne.n	80003e6 <main+0x29a>
					SSD1306_Puts("GAME 2", &Font_11x18, 1);
 80003d4:	2201      	movs	r2, #1
 80003d6:	492f      	ldr	r1, [pc, #188]	; (8000494 <main+0x348>)
 80003d8:	4835      	ldr	r0, [pc, #212]	; (80004b0 <main+0x364>)
 80003da:	f000 fc7d 	bl	8000cd8 <SSD1306_Puts>
					children.state_machine = GAME_2;
 80003de:	2303      	movs	r3, #3
 80003e0:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 80003e4:	e018      	b.n	8000418 <main+0x2cc>
				} else if (children.scrol_position == 48) {
 80003e6:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80003ea:	2b30      	cmp	r3, #48	; 0x30
 80003ec:	d108      	bne.n	8000400 <main+0x2b4>
					SSD1306_Puts("GAME 3", &Font_11x18, 1);
 80003ee:	2201      	movs	r2, #1
 80003f0:	4928      	ldr	r1, [pc, #160]	; (8000494 <main+0x348>)
 80003f2:	4830      	ldr	r0, [pc, #192]	; (80004b4 <main+0x368>)
 80003f4:	f000 fc70 	bl	8000cd8 <SSD1306_Puts>
					children.state_machine = GAME_3;
 80003f8:	2304      	movs	r3, #4
 80003fa:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 80003fe:	e00b      	b.n	8000418 <main+0x2cc>
				} else if (children.scrol_position == 18) {
 8000400:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8000404:	2b12      	cmp	r3, #18
 8000406:	d107      	bne.n	8000418 <main+0x2cc>
					SSD1306_Puts("GAME 4", &Font_11x18, 1);
 8000408:	2201      	movs	r2, #1
 800040a:	4922      	ldr	r1, [pc, #136]	; (8000494 <main+0x348>)
 800040c:	482a      	ldr	r0, [pc, #168]	; (80004b8 <main+0x36c>)
 800040e:	f000 fc63 	bl	8000cd8 <SSD1306_Puts>
					children.state_machine = GAME_4;
 8000412:	2305      	movs	r3, #5
 8000414:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
				}
				SSD1306_UpdateScreen();
 8000418:	f000 fb24 	bl	8000a64 <SSD1306_UpdateScreen>
			}
			break;
 800041c:	e103      	b.n	8000626 <main+0x4da>
		case (GAME_1):
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin)
 800041e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000422:	481f      	ldr	r0, [pc, #124]	; (80004a0 <main+0x354>)
 8000424:	f001 fa46 	bl	80018b4 <HAL_GPIO_ReadPin>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	f040 80fd 	bne.w	800062a <main+0x4de>
					== 0) {
				children.state_machine = INIT;
 8000430:	2300      	movs	r3, #0
 8000432:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
				character_draw(1);
 8000436:	2001      	movs	r0, #1
 8000438:	f000 ff28 	bl	800128c <character_draw>
				SSD1306_GotoXY(0, 0);
 800043c:	2100      	movs	r1, #0
 800043e:	2000      	movs	r0, #0
 8000440:	f000 fbb4 	bl	8000bac <SSD1306_GotoXY>
				SSD1306_Puts("PTS:", &Font_11x18, 1);
 8000444:	2201      	movs	r2, #1
 8000446:	4913      	ldr	r1, [pc, #76]	; (8000494 <main+0x348>)
 8000448:	4813      	ldr	r0, [pc, #76]	; (8000498 <main+0x34c>)
 800044a:	f000 fc45 	bl	8000cd8 <SSD1306_Puts>
				SSD1306_GotoXY(42, 0);
 800044e:	2100      	movs	r1, #0
 8000450:	202a      	movs	r0, #42	; 0x2a
 8000452:	f000 fbab 	bl	8000bac <SSD1306_GotoXY>
				char *numberstring[(((sizeof children.points)) + 2) / 3 + 2];
				sprintf(numberstring, "%d", children.points++);
 8000456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000458:	1c5a      	adds	r2, r3, #1
 800045a:	657a      	str	r2, [r7, #84]	; 0x54
 800045c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000460:	461a      	mov	r2, r3
 8000462:	490e      	ldr	r1, [pc, #56]	; (800049c <main+0x350>)
 8000464:	f002 fbfc 	bl	8002c60 <siprintf>
				SSD1306_Puts(numberstring, &Font_11x18, 1);
 8000468:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800046c:	2201      	movs	r2, #1
 800046e:	4909      	ldr	r1, [pc, #36]	; (8000494 <main+0x348>)
 8000470:	4618      	mov	r0, r3
 8000472:	f000 fc31 	bl	8000cd8 <SSD1306_Puts>
				SSD1306_UpdateScreen(); //display
 8000476:	f000 faf5 	bl	8000a64 <SSD1306_UpdateScreen>
				HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000480:	4807      	ldr	r0, [pc, #28]	; (80004a0 <main+0x354>)
 8000482:	f001 fa2e 	bl	80018e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 1);
 8000486:	2201      	movs	r2, #1
 8000488:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800048c:	4804      	ldr	r0, [pc, #16]	; (80004a0 <main+0x354>)
 800048e:	f001 fa28 	bl	80018e2 <HAL_GPIO_WritePin>
			}
			break;
 8000492:	e0ca      	b.n	800062a <main+0x4de>
 8000494:	20000008 	.word	0x20000008
 8000498:	0800349c 	.word	0x0800349c
 800049c:	080034a4 	.word	0x080034a4
 80004a0:	40010c00 	.word	0x40010c00
 80004a4:	080049b8 	.word	0x080049b8
 80004a8:	20000000 	.word	0x20000000
 80004ac:	080034a8 	.word	0x080034a8
 80004b0:	080034b0 	.word	0x080034b0
 80004b4:	080034b8 	.word	0x080034b8
 80004b8:	080034c0 	.word	0x080034c0
 80004bc:	080034c8 	.word	0x080034c8
 80004c0:	080034d4 	.word	0x080034d4
 80004c4:	080034d8 	.word	0x080034d8
		case (GAME_2):
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin)
 80004c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004cc:	485b      	ldr	r0, [pc, #364]	; (800063c <main+0x4f0>)
 80004ce:	f001 f9f1 	bl	80018b4 <HAL_GPIO_ReadPin>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	f040 80aa 	bne.w	800062e <main+0x4e2>
					== 0) {
				children.state_machine = INIT;
 80004da:	2300      	movs	r3, #0
 80004dc:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
				character_draw(1);
 80004e0:	2001      	movs	r0, #1
 80004e2:	f000 fed3 	bl	800128c <character_draw>
				SSD1306_GotoXY(0, 0);
 80004e6:	2100      	movs	r1, #0
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 fb5f 	bl	8000bac <SSD1306_GotoXY>
				SSD1306_Puts("PTS:", &Font_11x18, 1);
 80004ee:	2201      	movs	r2, #1
 80004f0:	4953      	ldr	r1, [pc, #332]	; (8000640 <main+0x4f4>)
 80004f2:	4854      	ldr	r0, [pc, #336]	; (8000644 <main+0x4f8>)
 80004f4:	f000 fbf0 	bl	8000cd8 <SSD1306_Puts>
				SSD1306_GotoXY(42, 0);
 80004f8:	2100      	movs	r1, #0
 80004fa:	202a      	movs	r0, #42	; 0x2a
 80004fc:	f000 fb56 	bl	8000bac <SSD1306_GotoXY>
				char *numberstring[(((sizeof children.points)) + 2) / 3 + 2];
				sprintf(numberstring, "%d", children.points++);
 8000500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000502:	1c5a      	adds	r2, r3, #1
 8000504:	657a      	str	r2, [r7, #84]	; 0x54
 8000506:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800050a:	461a      	mov	r2, r3
 800050c:	494e      	ldr	r1, [pc, #312]	; (8000648 <main+0x4fc>)
 800050e:	f002 fba7 	bl	8002c60 <siprintf>
				SSD1306_Puts(numberstring, &Font_11x18, 1);
 8000512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000516:	2201      	movs	r2, #1
 8000518:	4949      	ldr	r1, [pc, #292]	; (8000640 <main+0x4f4>)
 800051a:	4618      	mov	r0, r3
 800051c:	f000 fbdc 	bl	8000cd8 <SSD1306_Puts>
				SSD1306_UpdateScreen(); //display
 8000520:	f000 faa0 	bl	8000a64 <SSD1306_UpdateScreen>
				HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 0);
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052a:	4844      	ldr	r0, [pc, #272]	; (800063c <main+0x4f0>)
 800052c:	f001 f9d9 	bl	80018e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 1);
 8000530:	2201      	movs	r2, #1
 8000532:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000536:	4841      	ldr	r0, [pc, #260]	; (800063c <main+0x4f0>)
 8000538:	f001 f9d3 	bl	80018e2 <HAL_GPIO_WritePin>
			}
			break;
 800053c:	e077      	b.n	800062e <main+0x4e2>
		case (GAME_3):
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin)
 800053e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000542:	483e      	ldr	r0, [pc, #248]	; (800063c <main+0x4f0>)
 8000544:	f001 f9b6 	bl	80018b4 <HAL_GPIO_ReadPin>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d171      	bne.n	8000632 <main+0x4e6>
					== 0) {
				children.state_machine = INIT;
 800054e:	2300      	movs	r3, #0
 8000550:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
				character_draw(1);
 8000554:	2001      	movs	r0, #1
 8000556:	f000 fe99 	bl	800128c <character_draw>
				SSD1306_GotoXY(0, 0);
 800055a:	2100      	movs	r1, #0
 800055c:	2000      	movs	r0, #0
 800055e:	f000 fb25 	bl	8000bac <SSD1306_GotoXY>
				SSD1306_Puts("PTS:", &Font_11x18, 1);
 8000562:	2201      	movs	r2, #1
 8000564:	4936      	ldr	r1, [pc, #216]	; (8000640 <main+0x4f4>)
 8000566:	4837      	ldr	r0, [pc, #220]	; (8000644 <main+0x4f8>)
 8000568:	f000 fbb6 	bl	8000cd8 <SSD1306_Puts>
				SSD1306_GotoXY(42, 0);
 800056c:	2100      	movs	r1, #0
 800056e:	202a      	movs	r0, #42	; 0x2a
 8000570:	f000 fb1c 	bl	8000bac <SSD1306_GotoXY>
				char *numberstring[(((sizeof children.points)) + 2) / 3 + 2];
				sprintf(numberstring, "%d", children.points++);
 8000574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000576:	1c5a      	adds	r2, r3, #1
 8000578:	657a      	str	r2, [r7, #84]	; 0x54
 800057a:	f107 0014 	add.w	r0, r7, #20
 800057e:	461a      	mov	r2, r3
 8000580:	4931      	ldr	r1, [pc, #196]	; (8000648 <main+0x4fc>)
 8000582:	f002 fb6d 	bl	8002c60 <siprintf>
				SSD1306_Puts(numberstring, &Font_11x18, 1);
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	2201      	movs	r2, #1
 800058c:	492c      	ldr	r1, [pc, #176]	; (8000640 <main+0x4f4>)
 800058e:	4618      	mov	r0, r3
 8000590:	f000 fba2 	bl	8000cd8 <SSD1306_Puts>
				SSD1306_UpdateScreen(); //display
 8000594:	f000 fa66 	bl	8000a64 <SSD1306_UpdateScreen>
				HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059e:	4827      	ldr	r0, [pc, #156]	; (800063c <main+0x4f0>)
 80005a0:	f001 f99f 	bl	80018e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 1);
 80005a4:	2201      	movs	r2, #1
 80005a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005aa:	4824      	ldr	r0, [pc, #144]	; (800063c <main+0x4f0>)
 80005ac:	f001 f999 	bl	80018e2 <HAL_GPIO_WritePin>
			}
			break;
 80005b0:	e03f      	b.n	8000632 <main+0x4e6>
		case (GAME_4):
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin)
 80005b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005b6:	4821      	ldr	r0, [pc, #132]	; (800063c <main+0x4f0>)
 80005b8:	f001 f97c 	bl	80018b4 <HAL_GPIO_ReadPin>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d139      	bne.n	8000636 <main+0x4ea>
					== 0) {
				children.state_machine = INIT;
 80005c2:	2300      	movs	r3, #0
 80005c4:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
				character_draw(1);
 80005c8:	2001      	movs	r0, #1
 80005ca:	f000 fe5f 	bl	800128c <character_draw>
				SSD1306_GotoXY(0, 0);
 80005ce:	2100      	movs	r1, #0
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 faeb 	bl	8000bac <SSD1306_GotoXY>
				SSD1306_Puts("PTS:", &Font_11x18, 1);
 80005d6:	2201      	movs	r2, #1
 80005d8:	4919      	ldr	r1, [pc, #100]	; (8000640 <main+0x4f4>)
 80005da:	481a      	ldr	r0, [pc, #104]	; (8000644 <main+0x4f8>)
 80005dc:	f000 fb7c 	bl	8000cd8 <SSD1306_Puts>
				SSD1306_GotoXY(42, 0);
 80005e0:	2100      	movs	r1, #0
 80005e2:	202a      	movs	r0, #42	; 0x2a
 80005e4:	f000 fae2 	bl	8000bac <SSD1306_GotoXY>
				char *numberstring[(((sizeof children.points)) + 2) / 3 + 2];
				sprintf(numberstring, "%d", children.points++);
 80005e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80005ea:	1c5a      	adds	r2, r3, #1
 80005ec:	657a      	str	r2, [r7, #84]	; 0x54
 80005ee:	1d38      	adds	r0, r7, #4
 80005f0:	461a      	mov	r2, r3
 80005f2:	4915      	ldr	r1, [pc, #84]	; (8000648 <main+0x4fc>)
 80005f4:	f002 fb34 	bl	8002c60 <siprintf>
				SSD1306_Puts(numberstring, &Font_11x18, 1);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2201      	movs	r2, #1
 80005fc:	4910      	ldr	r1, [pc, #64]	; (8000640 <main+0x4f4>)
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fb6a 	bl	8000cd8 <SSD1306_Puts>
				SSD1306_UpdateScreen(); //display
 8000604:	f000 fa2e 	bl	8000a64 <SSD1306_UpdateScreen>
				HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 0);
 8000608:	2200      	movs	r2, #0
 800060a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800060e:	480b      	ldr	r0, [pc, #44]	; (800063c <main+0x4f0>)
 8000610:	f001 f967 	bl	80018e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 1);
 8000614:	2201      	movs	r2, #1
 8000616:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800061a:	4808      	ldr	r0, [pc, #32]	; (800063c <main+0x4f0>)
 800061c:	f001 f961 	bl	80018e2 <HAL_GPIO_WritePin>
			}
			break;
 8000620:	e009      	b.n	8000636 <main+0x4ea>
			break;
 8000622:	bf00      	nop
 8000624:	e5e0      	b.n	80001e8 <main+0x9c>
			break;
 8000626:	bf00      	nop
 8000628:	e5de      	b.n	80001e8 <main+0x9c>
			break;
 800062a:	bf00      	nop
 800062c:	e5dc      	b.n	80001e8 <main+0x9c>
			break;
 800062e:	bf00      	nop
 8000630:	e5da      	b.n	80001e8 <main+0x9c>
			break;
 8000632:	bf00      	nop
 8000634:	e5d8      	b.n	80001e8 <main+0x9c>
			break;
 8000636:	bf00      	nop
		switch (children.state_machine) {
 8000638:	e5d6      	b.n	80001e8 <main+0x9c>
 800063a:	bf00      	nop
 800063c:	40010c00 	.word	0x40010c00
 8000640:	20000008 	.word	0x20000008
 8000644:	0800349c 	.word	0x0800349c
 8000648:	080034a4 	.word	0x080034a4

0800064c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b090      	sub	sp, #64	; 0x40
 8000650:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000652:	f107 0318 	add.w	r3, r7, #24
 8000656:	2228      	movs	r2, #40	; 0x28
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f002 faf8 	bl	8002c50 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066e:	2302      	movs	r3, #2
 8000670:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000672:	2301      	movs	r3, #1
 8000674:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000676:	2310      	movs	r3, #16
 8000678:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800067a:	2300      	movs	r3, #0
 800067c:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800067e:	f107 0318 	add.w	r3, r7, #24
 8000682:	4618      	mov	r0, r3
 8000684:	f001 feb2 	bl	80023ec <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x46>
		Error_Handler();
 800068e:	f000 f8b7 	bl	8000800 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000692:	230f      	movs	r3, #15
 8000694:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000696:	2300      	movs	r3, #0
 8000698:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f002 f91e 	bl	80028ec <HAL_RCC_ClockConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x6e>
		Error_Handler();
 80006b6:	f000 f8a3 	bl	8000800 <Error_Handler>
	}
}
 80006ba:	bf00      	nop
 80006bc:	3740      	adds	r7, #64	; 0x40
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_I2C1_Init+0x50>)
 80006ca:	4a13      	ldr	r2, [pc, #76]	; (8000718 <MX_I2C1_Init+0x54>)
 80006cc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_I2C1_Init+0x50>)
 80006d0:	4a12      	ldr	r2, [pc, #72]	; (800071c <MX_I2C1_Init+0x58>)
 80006d2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_I2C1_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_I2C1_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_I2C1_Init+0x50>)
 80006e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006e6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <MX_I2C1_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_I2C1_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <MX_I2C1_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_I2C1_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_I2C1_Init+0x50>)
 8000702:	f001 f907 	bl	8001914 <HAL_I2C_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800070c:	f000 f878 	bl	8000800 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200004b0 	.word	0x200004b0
 8000718:	40005400 	.word	0x40005400
 800071c:	00061a80 	.word	0x00061a80

08000720 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000726:	f107 0310 	add.w	r3, r7, #16
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000734:	4b2f      	ldr	r3, [pc, #188]	; (80007f4 <MX_GPIO_Init+0xd4>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a2e      	ldr	r2, [pc, #184]	; (80007f4 <MX_GPIO_Init+0xd4>)
 800073a:	f043 0310 	orr.w	r3, r3, #16
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b2c      	ldr	r3, [pc, #176]	; (80007f4 <MX_GPIO_Init+0xd4>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f003 0310 	and.w	r3, r3, #16
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800074c:	4b29      	ldr	r3, [pc, #164]	; (80007f4 <MX_GPIO_Init+0xd4>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a28      	ldr	r2, [pc, #160]	; (80007f4 <MX_GPIO_Init+0xd4>)
 8000752:	f043 0308 	orr.w	r3, r3, #8
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b26      	ldr	r3, [pc, #152]	; (80007f4 <MX_GPIO_Init+0xd4>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f003 0308 	and.w	r3, r3, #8
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000764:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <MX_GPIO_Init+0xd4>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a22      	ldr	r2, [pc, #136]	; (80007f4 <MX_GPIO_Init+0xd4>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <MX_GPIO_Init+0xd4>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f003 0304 	and.w	r3, r3, #4
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_BUILD_GPIO_Port, LED_BUILD_Pin, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000782:	481d      	ldr	r0, [pc, #116]	; (80007f8 <MX_GPIO_Init+0xd8>)
 8000784:	f001 f8ad 	bl	80018e2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin | RGB_BLUE_Pin | RGB_GREEN_Pin,
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800078e:	481b      	ldr	r0, [pc, #108]	; (80007fc <MX_GPIO_Init+0xdc>)
 8000790:	f001 f8a7 	bl	80018e2 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : LED_BUILD_Pin */
	GPIO_InitStruct.Pin = LED_BUILD_Pin;
 8000794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000798:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2302      	movs	r3, #2
 80007a4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_BUILD_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 0310 	add.w	r3, r7, #16
 80007aa:	4619      	mov	r1, r3
 80007ac:	4812      	ldr	r0, [pc, #72]	; (80007f8 <MX_GPIO_Init+0xd8>)
 80007ae:	f000 ff27 	bl	8001600 <HAL_GPIO_Init>

	/*Configure GPIO pins : BUTTON_LEFT_Pin BUTTON_RIGHT_Pin */
	GPIO_InitStruct.Pin = BUTTON_LEFT_Pin | BUTTON_RIGHT_Pin;
 80007b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007b6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007bc:	2301      	movs	r3, #1
 80007be:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	4619      	mov	r1, r3
 80007c6:	480d      	ldr	r0, [pc, #52]	; (80007fc <MX_GPIO_Init+0xdc>)
 80007c8:	f000 ff1a 	bl	8001600 <HAL_GPIO_Init>

	/*Configure GPIO pins : RGB_RED_Pin RGB_BLUE_Pin RGB_GREEN_Pin */
	GPIO_InitStruct.Pin = RGB_RED_Pin | RGB_BLUE_Pin | RGB_GREEN_Pin;
 80007cc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80007d0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2302      	movs	r3, #2
 80007dc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	4619      	mov	r1, r3
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_GPIO_Init+0xdc>)
 80007e6:	f000 ff0b 	bl	8001600 <HAL_GPIO_Init>
}
 80007ea:	bf00      	nop
 80007ec:	3720      	adds	r7, #32
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40011000 	.word	0x40011000
 80007fc:	40010c00 	.word	0x40010c00

08000800 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr

0800080c <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60ba      	str	r2, [r7, #8]
 8000814:	461a      	mov	r2, r3
 8000816:	4603      	mov	r3, r0
 8000818:	81fb      	strh	r3, [r7, #14]
 800081a:	460b      	mov	r3, r1
 800081c:	81bb      	strh	r3, [r7, #12]
 800081e:	4613      	mov	r3, r2
 8000820:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000822:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000826:	3307      	adds	r3, #7
 8000828:	2b00      	cmp	r3, #0
 800082a:	da00      	bge.n	800082e <SSD1306_DrawBitmap+0x22>
 800082c:	3307      	adds	r3, #7
 800082e:	10db      	asrs	r3, r3, #3
 8000830:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000836:	2300      	movs	r3, #0
 8000838:	82bb      	strh	r3, [r7, #20]
 800083a:	e044      	b.n	80008c6 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 800083c:	2300      	movs	r3, #0
 800083e:	827b      	strh	r3, [r7, #18]
 8000840:	e02f      	b.n	80008a2 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000842:	8a7b      	ldrh	r3, [r7, #18]
 8000844:	f003 0307 	and.w	r3, r3, #7
 8000848:	2b00      	cmp	r3, #0
 800084a:	d003      	beq.n	8000854 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 800084c:	7dfb      	ldrb	r3, [r7, #23]
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	75fb      	strb	r3, [r7, #23]
 8000852:	e012      	b.n	800087a <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000854:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000858:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800085c:	fb02 f203 	mul.w	r2, r2, r3
 8000860:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000864:	2b00      	cmp	r3, #0
 8000866:	da00      	bge.n	800086a <SSD1306_DrawBitmap+0x5e>
 8000868:	3307      	adds	r3, #7
 800086a:	10db      	asrs	r3, r3, #3
 800086c:	b21b      	sxth	r3, r3
 800086e:	4413      	add	r3, r2
 8000870:	461a      	mov	r2, r3
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	4413      	add	r3, r2
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800087a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800087e:	2b00      	cmp	r3, #0
 8000880:	da09      	bge.n	8000896 <SSD1306_DrawBitmap+0x8a>
 8000882:	89fa      	ldrh	r2, [r7, #14]
 8000884:	8a7b      	ldrh	r3, [r7, #18]
 8000886:	4413      	add	r3, r2
 8000888:	b29b      	uxth	r3, r3
 800088a:	89b9      	ldrh	r1, [r7, #12]
 800088c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800088e:	b2d2      	uxtb	r2, r2
 8000890:	4618      	mov	r0, r3
 8000892:	f000 f92d 	bl	8000af0 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000896:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800089a:	b29b      	uxth	r3, r3
 800089c:	3301      	adds	r3, #1
 800089e:	b29b      	uxth	r3, r3
 80008a0:	827b      	strh	r3, [r7, #18]
 80008a2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80008a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	dbc9      	blt.n	8000842 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80008ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	3301      	adds	r3, #1
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	82bb      	strh	r3, [r7, #20]
 80008ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80008be:	b29b      	uxth	r3, r3
 80008c0:	3301      	adds	r3, #1
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	81bb      	strh	r3, [r7, #12]
 80008c6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80008ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	dbb4      	blt.n	800083c <SSD1306_DrawBitmap+0x30>
        }
    }
}
 80008d2:	bf00      	nop
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80008e2:	f000 fb8d 	bl	8001000 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80008e6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80008ea:	2201      	movs	r2, #1
 80008ec:	2178      	movs	r1, #120	; 0x78
 80008ee:	485b      	ldr	r0, [pc, #364]	; (8000a5c <SSD1306_Init+0x180>)
 80008f0:	f001 fa46 	bl	8001d80 <HAL_I2C_IsDeviceReady>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	e0a9      	b.n	8000a52 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80008fe:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000902:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000904:	e002      	b.n	800090c <SSD1306_Init+0x30>
		p--;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	3b01      	subs	r3, #1
 800090a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d1f9      	bne.n	8000906 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000912:	22ae      	movs	r2, #174	; 0xae
 8000914:	2100      	movs	r1, #0
 8000916:	2078      	movs	r0, #120	; 0x78
 8000918:	f000 fbce 	bl	80010b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800091c:	2220      	movs	r2, #32
 800091e:	2100      	movs	r1, #0
 8000920:	2078      	movs	r0, #120	; 0x78
 8000922:	f000 fbc9 	bl	80010b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000926:	2210      	movs	r2, #16
 8000928:	2100      	movs	r1, #0
 800092a:	2078      	movs	r0, #120	; 0x78
 800092c:	f000 fbc4 	bl	80010b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000930:	22b0      	movs	r2, #176	; 0xb0
 8000932:	2100      	movs	r1, #0
 8000934:	2078      	movs	r0, #120	; 0x78
 8000936:	f000 fbbf 	bl	80010b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800093a:	22c8      	movs	r2, #200	; 0xc8
 800093c:	2100      	movs	r1, #0
 800093e:	2078      	movs	r0, #120	; 0x78
 8000940:	f000 fbba 	bl	80010b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000944:	2200      	movs	r2, #0
 8000946:	2100      	movs	r1, #0
 8000948:	2078      	movs	r0, #120	; 0x78
 800094a:	f000 fbb5 	bl	80010b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800094e:	2210      	movs	r2, #16
 8000950:	2100      	movs	r1, #0
 8000952:	2078      	movs	r0, #120	; 0x78
 8000954:	f000 fbb0 	bl	80010b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000958:	2240      	movs	r2, #64	; 0x40
 800095a:	2100      	movs	r1, #0
 800095c:	2078      	movs	r0, #120	; 0x78
 800095e:	f000 fbab 	bl	80010b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000962:	2281      	movs	r2, #129	; 0x81
 8000964:	2100      	movs	r1, #0
 8000966:	2078      	movs	r0, #120	; 0x78
 8000968:	f000 fba6 	bl	80010b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800096c:	22ff      	movs	r2, #255	; 0xff
 800096e:	2100      	movs	r1, #0
 8000970:	2078      	movs	r0, #120	; 0x78
 8000972:	f000 fba1 	bl	80010b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000976:	22a1      	movs	r2, #161	; 0xa1
 8000978:	2100      	movs	r1, #0
 800097a:	2078      	movs	r0, #120	; 0x78
 800097c:	f000 fb9c 	bl	80010b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000980:	22a6      	movs	r2, #166	; 0xa6
 8000982:	2100      	movs	r1, #0
 8000984:	2078      	movs	r0, #120	; 0x78
 8000986:	f000 fb97 	bl	80010b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800098a:	22a8      	movs	r2, #168	; 0xa8
 800098c:	2100      	movs	r1, #0
 800098e:	2078      	movs	r0, #120	; 0x78
 8000990:	f000 fb92 	bl	80010b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000994:	223f      	movs	r2, #63	; 0x3f
 8000996:	2100      	movs	r1, #0
 8000998:	2078      	movs	r0, #120	; 0x78
 800099a:	f000 fb8d 	bl	80010b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800099e:	22a4      	movs	r2, #164	; 0xa4
 80009a0:	2100      	movs	r1, #0
 80009a2:	2078      	movs	r0, #120	; 0x78
 80009a4:	f000 fb88 	bl	80010b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80009a8:	22d3      	movs	r2, #211	; 0xd3
 80009aa:	2100      	movs	r1, #0
 80009ac:	2078      	movs	r0, #120	; 0x78
 80009ae:	f000 fb83 	bl	80010b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	2078      	movs	r0, #120	; 0x78
 80009b8:	f000 fb7e 	bl	80010b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80009bc:	22d5      	movs	r2, #213	; 0xd5
 80009be:	2100      	movs	r1, #0
 80009c0:	2078      	movs	r0, #120	; 0x78
 80009c2:	f000 fb79 	bl	80010b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80009c6:	22f0      	movs	r2, #240	; 0xf0
 80009c8:	2100      	movs	r1, #0
 80009ca:	2078      	movs	r0, #120	; 0x78
 80009cc:	f000 fb74 	bl	80010b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80009d0:	22d9      	movs	r2, #217	; 0xd9
 80009d2:	2100      	movs	r1, #0
 80009d4:	2078      	movs	r0, #120	; 0x78
 80009d6:	f000 fb6f 	bl	80010b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80009da:	2222      	movs	r2, #34	; 0x22
 80009dc:	2100      	movs	r1, #0
 80009de:	2078      	movs	r0, #120	; 0x78
 80009e0:	f000 fb6a 	bl	80010b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80009e4:	22da      	movs	r2, #218	; 0xda
 80009e6:	2100      	movs	r1, #0
 80009e8:	2078      	movs	r0, #120	; 0x78
 80009ea:	f000 fb65 	bl	80010b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80009ee:	2212      	movs	r2, #18
 80009f0:	2100      	movs	r1, #0
 80009f2:	2078      	movs	r0, #120	; 0x78
 80009f4:	f000 fb60 	bl	80010b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80009f8:	22db      	movs	r2, #219	; 0xdb
 80009fa:	2100      	movs	r1, #0
 80009fc:	2078      	movs	r0, #120	; 0x78
 80009fe:	f000 fb5b 	bl	80010b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000a02:	2220      	movs	r2, #32
 8000a04:	2100      	movs	r1, #0
 8000a06:	2078      	movs	r0, #120	; 0x78
 8000a08:	f000 fb56 	bl	80010b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000a0c:	228d      	movs	r2, #141	; 0x8d
 8000a0e:	2100      	movs	r1, #0
 8000a10:	2078      	movs	r0, #120	; 0x78
 8000a12:	f000 fb51 	bl	80010b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000a16:	2214      	movs	r2, #20
 8000a18:	2100      	movs	r1, #0
 8000a1a:	2078      	movs	r0, #120	; 0x78
 8000a1c:	f000 fb4c 	bl	80010b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000a20:	22af      	movs	r2, #175	; 0xaf
 8000a22:	2100      	movs	r1, #0
 8000a24:	2078      	movs	r0, #120	; 0x78
 8000a26:	f000 fb47 	bl	80010b8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000a2a:	222e      	movs	r2, #46	; 0x2e
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2078      	movs	r0, #120	; 0x78
 8000a30:	f000 fb42 	bl	80010b8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000a34:	2000      	movs	r0, #0
 8000a36:	f000 f843 	bl	8000ac0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000a3a:	f000 f813 	bl	8000a64 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000a3e:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <SSD1306_Init+0x184>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <SSD1306_Init+0x184>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <SSD1306_Init+0x184>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000a50:	2301      	movs	r3, #1
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200004b0 	.word	0x200004b0
 8000a60:	2000049c 	.word	0x2000049c

08000a64 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	71fb      	strb	r3, [r7, #7]
 8000a6e:	e01d      	b.n	8000aac <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	3b50      	subs	r3, #80	; 0x50
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	461a      	mov	r2, r3
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2078      	movs	r0, #120	; 0x78
 8000a7c:	f000 fb1c 	bl	80010b8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2100      	movs	r1, #0
 8000a84:	2078      	movs	r0, #120	; 0x78
 8000a86:	f000 fb17 	bl	80010b8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000a8a:	2210      	movs	r2, #16
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2078      	movs	r0, #120	; 0x78
 8000a90:	f000 fb12 	bl	80010b8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	01db      	lsls	r3, r3, #7
 8000a98:	4a08      	ldr	r2, [pc, #32]	; (8000abc <SSD1306_UpdateScreen+0x58>)
 8000a9a:	441a      	add	r2, r3
 8000a9c:	2380      	movs	r3, #128	; 0x80
 8000a9e:	2140      	movs	r1, #64	; 0x40
 8000aa0:	2078      	movs	r0, #120	; 0x78
 8000aa2:	f000 fac1 	bl	8001028 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	71fb      	strb	r3, [r7, #7]
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	2b07      	cmp	r3, #7
 8000ab0:	d9de      	bls.n	8000a70 <SSD1306_UpdateScreen+0xc>
	}
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	2000009c 	.word	0x2000009c

08000ac0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d101      	bne.n	8000ad4 <SSD1306_Fill+0x14>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e000      	b.n	8000ad6 <SSD1306_Fill+0x16>
 8000ad4:	23ff      	movs	r3, #255	; 0xff
 8000ad6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ada:	4619      	mov	r1, r3
 8000adc:	4803      	ldr	r0, [pc, #12]	; (8000aec <SSD1306_Fill+0x2c>)
 8000ade:	f002 f8b7 	bl	8002c50 <memset>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	2000009c 	.word	0x2000009c

08000af0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	80fb      	strh	r3, [r7, #6]
 8000afa:	460b      	mov	r3, r1
 8000afc:	80bb      	strh	r3, [r7, #4]
 8000afe:	4613      	mov	r3, r2
 8000b00:	70fb      	strb	r3, [r7, #3]
	if (
 8000b02:	88fb      	ldrh	r3, [r7, #6]
 8000b04:	2b7f      	cmp	r3, #127	; 0x7f
 8000b06:	d848      	bhi.n	8000b9a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000b08:	88bb      	ldrh	r3, [r7, #4]
 8000b0a:	2b3f      	cmp	r3, #63	; 0x3f
 8000b0c:	d845      	bhi.n	8000b9a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000b0e:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <SSD1306_DrawPixel+0xb4>)
 8000b10:	791b      	ldrb	r3, [r3, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d006      	beq.n	8000b24 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000b16:	78fb      	ldrb	r3, [r7, #3]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	bf0c      	ite	eq
 8000b1c:	2301      	moveq	r3, #1
 8000b1e:	2300      	movne	r3, #0
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000b24:	78fb      	ldrb	r3, [r7, #3]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d11a      	bne.n	8000b60 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000b2a:	88fa      	ldrh	r2, [r7, #6]
 8000b2c:	88bb      	ldrh	r3, [r7, #4]
 8000b2e:	08db      	lsrs	r3, r3, #3
 8000b30:	b298      	uxth	r0, r3
 8000b32:	4603      	mov	r3, r0
 8000b34:	01db      	lsls	r3, r3, #7
 8000b36:	4413      	add	r3, r2
 8000b38:	4a1b      	ldr	r2, [pc, #108]	; (8000ba8 <SSD1306_DrawPixel+0xb8>)
 8000b3a:	5cd3      	ldrb	r3, [r2, r3]
 8000b3c:	b25a      	sxtb	r2, r3
 8000b3e:	88bb      	ldrh	r3, [r7, #4]
 8000b40:	f003 0307 	and.w	r3, r3, #7
 8000b44:	2101      	movs	r1, #1
 8000b46:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4a:	b25b      	sxtb	r3, r3
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	b259      	sxtb	r1, r3
 8000b50:	88fa      	ldrh	r2, [r7, #6]
 8000b52:	4603      	mov	r3, r0
 8000b54:	01db      	lsls	r3, r3, #7
 8000b56:	4413      	add	r3, r2
 8000b58:	b2c9      	uxtb	r1, r1
 8000b5a:	4a13      	ldr	r2, [pc, #76]	; (8000ba8 <SSD1306_DrawPixel+0xb8>)
 8000b5c:	54d1      	strb	r1, [r2, r3]
 8000b5e:	e01d      	b.n	8000b9c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000b60:	88fa      	ldrh	r2, [r7, #6]
 8000b62:	88bb      	ldrh	r3, [r7, #4]
 8000b64:	08db      	lsrs	r3, r3, #3
 8000b66:	b298      	uxth	r0, r3
 8000b68:	4603      	mov	r3, r0
 8000b6a:	01db      	lsls	r3, r3, #7
 8000b6c:	4413      	add	r3, r2
 8000b6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ba8 <SSD1306_DrawPixel+0xb8>)
 8000b70:	5cd3      	ldrb	r3, [r2, r3]
 8000b72:	b25a      	sxtb	r2, r3
 8000b74:	88bb      	ldrh	r3, [r7, #4]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b80:	b25b      	sxtb	r3, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	b25b      	sxtb	r3, r3
 8000b86:	4013      	ands	r3, r2
 8000b88:	b259      	sxtb	r1, r3
 8000b8a:	88fa      	ldrh	r2, [r7, #6]
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	01db      	lsls	r3, r3, #7
 8000b90:	4413      	add	r3, r2
 8000b92:	b2c9      	uxtb	r1, r1
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <SSD1306_DrawPixel+0xb8>)
 8000b96:	54d1      	strb	r1, [r2, r3]
 8000b98:	e000      	b.n	8000b9c <SSD1306_DrawPixel+0xac>
		return;
 8000b9a:	bf00      	nop
	}
}
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr
 8000ba4:	2000049c 	.word	0x2000049c
 8000ba8:	2000009c 	.word	0x2000009c

08000bac <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	460a      	mov	r2, r1
 8000bb6:	80fb      	strh	r3, [r7, #6]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000bbc:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <SSD1306_GotoXY+0x28>)
 8000bbe:	88fb      	ldrh	r3, [r7, #6]
 8000bc0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000bc2:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <SSD1306_GotoXY+0x28>)
 8000bc4:	88bb      	ldrh	r3, [r7, #4]
 8000bc6:	8053      	strh	r3, [r2, #2]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	2000049c 	.word	0x2000049c

08000bd8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	71fb      	strb	r3, [r7, #7]
 8000be4:	4613      	mov	r3, r2
 8000be6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000be8:	4b3a      	ldr	r3, [pc, #232]	; (8000cd4 <SSD1306_Putc+0xfc>)
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	4413      	add	r3, r2
	if (
 8000bf4:	2b7f      	cmp	r3, #127	; 0x7f
 8000bf6:	dc07      	bgt.n	8000c08 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000bf8:	4b36      	ldr	r3, [pc, #216]	; (8000cd4 <SSD1306_Putc+0xfc>)
 8000bfa:	885b      	ldrh	r3, [r3, #2]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	785b      	ldrb	r3, [r3, #1]
 8000c02:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000c04:	2b3f      	cmp	r3, #63	; 0x3f
 8000c06:	dd01      	ble.n	8000c0c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	e05e      	b.n	8000cca <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	e04b      	b.n	8000caa <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	3b20      	subs	r3, #32
 8000c1a:	6839      	ldr	r1, [r7, #0]
 8000c1c:	7849      	ldrb	r1, [r1, #1]
 8000c1e:	fb01 f303 	mul.w	r3, r1, r3
 8000c22:	4619      	mov	r1, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	440b      	add	r3, r1
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	4413      	add	r3, r2
 8000c2c:	881b      	ldrh	r3, [r3, #0]
 8000c2e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000c30:	2300      	movs	r3, #0
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	e030      	b.n	8000c98 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d010      	beq.n	8000c68 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000c46:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <SSD1306_Putc+0xfc>)
 8000c48:	881a      	ldrh	r2, [r3, #0]
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	4413      	add	r3, r2
 8000c50:	b298      	uxth	r0, r3
 8000c52:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <SSD1306_Putc+0xfc>)
 8000c54:	885a      	ldrh	r2, [r3, #2]
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	4413      	add	r3, r2
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	79ba      	ldrb	r2, [r7, #6]
 8000c60:	4619      	mov	r1, r3
 8000c62:	f7ff ff45 	bl	8000af0 <SSD1306_DrawPixel>
 8000c66:	e014      	b.n	8000c92 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000c68:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <SSD1306_Putc+0xfc>)
 8000c6a:	881a      	ldrh	r2, [r3, #0]
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	4413      	add	r3, r2
 8000c72:	b298      	uxth	r0, r3
 8000c74:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <SSD1306_Putc+0xfc>)
 8000c76:	885a      	ldrh	r2, [r3, #2]
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	4413      	add	r3, r2
 8000c7e:	b299      	uxth	r1, r3
 8000c80:	79bb      	ldrb	r3, [r7, #6]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	bf0c      	ite	eq
 8000c86:	2301      	moveq	r3, #1
 8000c88:	2300      	movne	r3, #0
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	f7ff ff2f 	bl	8000af0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	3301      	adds	r3, #1
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d3c8      	bcc.n	8000c36 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	785b      	ldrb	r3, [r3, #1]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d3ad      	bcc.n	8000c12 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000cb6:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <SSD1306_Putc+0xfc>)
 8000cb8:	881a      	ldrh	r2, [r3, #0]
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	4413      	add	r3, r2
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <SSD1306_Putc+0xfc>)
 8000cc6:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	2000049c 	.word	0x2000049c

08000cd8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000ce6:	e012      	b.n	8000d0e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	79fa      	ldrb	r2, [r7, #7]
 8000cee:	68b9      	ldr	r1, [r7, #8]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff71 	bl	8000bd8 <SSD1306_Putc>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d002      	beq.n	8000d08 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	e008      	b.n	8000d1a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d1e8      	bne.n	8000ce8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	781b      	ldrb	r3, [r3, #0]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8000d22:	b590      	push	{r4, r7, lr}
 8000d24:	b087      	sub	sp, #28
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4604      	mov	r4, r0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	461a      	mov	r2, r3
 8000d30:	4623      	mov	r3, r4
 8000d32:	80fb      	strh	r3, [r7, #6]
 8000d34:	4603      	mov	r3, r0
 8000d36:	80bb      	strh	r3, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	807b      	strh	r3, [r7, #2]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	2b7f      	cmp	r3, #127	; 0x7f
 8000d44:	d901      	bls.n	8000d4a <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8000d46:	237f      	movs	r3, #127	; 0x7f
 8000d48:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8000d4a:	887b      	ldrh	r3, [r7, #2]
 8000d4c:	2b7f      	cmp	r3, #127	; 0x7f
 8000d4e:	d901      	bls.n	8000d54 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8000d50:	237f      	movs	r3, #127	; 0x7f
 8000d52:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8000d54:	88bb      	ldrh	r3, [r7, #4]
 8000d56:	2b3f      	cmp	r3, #63	; 0x3f
 8000d58:	d901      	bls.n	8000d5e <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8000d5a:	233f      	movs	r3, #63	; 0x3f
 8000d5c:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8000d5e:	883b      	ldrh	r3, [r7, #0]
 8000d60:	2b3f      	cmp	r3, #63	; 0x3f
 8000d62:	d901      	bls.n	8000d68 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8000d64:	233f      	movs	r3, #63	; 0x3f
 8000d66:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8000d68:	88fa      	ldrh	r2, [r7, #6]
 8000d6a:	887b      	ldrh	r3, [r7, #2]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d205      	bcs.n	8000d7c <SSD1306_DrawLine+0x5a>
 8000d70:	887a      	ldrh	r2, [r7, #2]
 8000d72:	88fb      	ldrh	r3, [r7, #6]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	b21b      	sxth	r3, r3
 8000d7a:	e004      	b.n	8000d86 <SSD1306_DrawLine+0x64>
 8000d7c:	88fa      	ldrh	r2, [r7, #6]
 8000d7e:	887b      	ldrh	r3, [r7, #2]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	b21b      	sxth	r3, r3
 8000d86:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8000d88:	88ba      	ldrh	r2, [r7, #4]
 8000d8a:	883b      	ldrh	r3, [r7, #0]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d205      	bcs.n	8000d9c <SSD1306_DrawLine+0x7a>
 8000d90:	883a      	ldrh	r2, [r7, #0]
 8000d92:	88bb      	ldrh	r3, [r7, #4]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	b21b      	sxth	r3, r3
 8000d9a:	e004      	b.n	8000da6 <SSD1306_DrawLine+0x84>
 8000d9c:	88ba      	ldrh	r2, [r7, #4]
 8000d9e:	883b      	ldrh	r3, [r7, #0]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	b21b      	sxth	r3, r3
 8000da6:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8000da8:	88fa      	ldrh	r2, [r7, #6]
 8000daa:	887b      	ldrh	r3, [r7, #2]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d201      	bcs.n	8000db4 <SSD1306_DrawLine+0x92>
 8000db0:	2301      	movs	r3, #1
 8000db2:	e001      	b.n	8000db8 <SSD1306_DrawLine+0x96>
 8000db4:	f04f 33ff 	mov.w	r3, #4294967295
 8000db8:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8000dba:	88ba      	ldrh	r2, [r7, #4]
 8000dbc:	883b      	ldrh	r3, [r7, #0]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d201      	bcs.n	8000dc6 <SSD1306_DrawLine+0xa4>
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e001      	b.n	8000dca <SSD1306_DrawLine+0xa8>
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8000dcc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000dd0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	dd06      	ble.n	8000de6 <SSD1306_DrawLine+0xc4>
 8000dd8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ddc:	0fda      	lsrs	r2, r3, #31
 8000dde:	4413      	add	r3, r2
 8000de0:	105b      	asrs	r3, r3, #1
 8000de2:	b21b      	sxth	r3, r3
 8000de4:	e006      	b.n	8000df4 <SSD1306_DrawLine+0xd2>
 8000de6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000dea:	425b      	negs	r3, r3
 8000dec:	0fda      	lsrs	r2, r3, #31
 8000dee:	4413      	add	r3, r2
 8000df0:	105b      	asrs	r3, r3, #1
 8000df2:	b21b      	sxth	r3, r3
 8000df4:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8000df6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d129      	bne.n	8000e52 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8000dfe:	883a      	ldrh	r2, [r7, #0]
 8000e00:	88bb      	ldrh	r3, [r7, #4]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d205      	bcs.n	8000e12 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8000e06:	883b      	ldrh	r3, [r7, #0]
 8000e08:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000e0a:	88bb      	ldrh	r3, [r7, #4]
 8000e0c:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000e0e:	893b      	ldrh	r3, [r7, #8]
 8000e10:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8000e12:	887a      	ldrh	r2, [r7, #2]
 8000e14:	88fb      	ldrh	r3, [r7, #6]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d205      	bcs.n	8000e26 <SSD1306_DrawLine+0x104>
			tmp = x1;
 8000e1a:	887b      	ldrh	r3, [r7, #2]
 8000e1c:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000e1e:	88fb      	ldrh	r3, [r7, #6]
 8000e20:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000e22:	893b      	ldrh	r3, [r7, #8]
 8000e24:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8000e26:	88bb      	ldrh	r3, [r7, #4]
 8000e28:	82bb      	strh	r3, [r7, #20]
 8000e2a:	e00c      	b.n	8000e46 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8000e2c:	8ab9      	ldrh	r1, [r7, #20]
 8000e2e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fe5b 	bl	8000af0 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8000e3a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	3301      	adds	r3, #1
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	82bb      	strh	r3, [r7, #20]
 8000e46:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000e4a:	883b      	ldrh	r3, [r7, #0]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	dded      	ble.n	8000e2c <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8000e50:	e05f      	b.n	8000f12 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8000e52:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d129      	bne.n	8000eae <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8000e5a:	883a      	ldrh	r2, [r7, #0]
 8000e5c:	88bb      	ldrh	r3, [r7, #4]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d205      	bcs.n	8000e6e <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8000e62:	883b      	ldrh	r3, [r7, #0]
 8000e64:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000e66:	88bb      	ldrh	r3, [r7, #4]
 8000e68:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000e6a:	893b      	ldrh	r3, [r7, #8]
 8000e6c:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8000e6e:	887a      	ldrh	r2, [r7, #2]
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d205      	bcs.n	8000e82 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8000e76:	887b      	ldrh	r3, [r7, #2]
 8000e78:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000e7e:	893b      	ldrh	r3, [r7, #8]
 8000e80:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	82bb      	strh	r3, [r7, #20]
 8000e86:	e00c      	b.n	8000ea2 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8000e88:	8abb      	ldrh	r3, [r7, #20]
 8000e8a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000e8e:	88b9      	ldrh	r1, [r7, #4]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fe2d 	bl	8000af0 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8000e96:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	82bb      	strh	r3, [r7, #20]
 8000ea2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000ea6:	887b      	ldrh	r3, [r7, #2]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	dded      	ble.n	8000e88 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8000eac:	e031      	b.n	8000f12 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8000eae:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000eb2:	88b9      	ldrh	r1, [r7, #4]
 8000eb4:	88fb      	ldrh	r3, [r7, #6]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fe1a 	bl	8000af0 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8000ebc:	88fa      	ldrh	r2, [r7, #6]
 8000ebe:	887b      	ldrh	r3, [r7, #2]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d103      	bne.n	8000ecc <SSD1306_DrawLine+0x1aa>
 8000ec4:	88ba      	ldrh	r2, [r7, #4]
 8000ec6:	883b      	ldrh	r3, [r7, #0]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d021      	beq.n	8000f10 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8000ecc:	8afb      	ldrh	r3, [r7, #22]
 8000ece:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8000ed0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ed4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ed8:	425b      	negs	r3, r3
 8000eda:	429a      	cmp	r2, r3
 8000edc:	dd08      	ble.n	8000ef0 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8000ede:	8afa      	ldrh	r2, [r7, #22]
 8000ee0:	8a3b      	ldrh	r3, [r7, #16]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8000ee8:	89fa      	ldrh	r2, [r7, #14]
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	4413      	add	r3, r2
 8000eee:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8000ef0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ef4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	dad8      	bge.n	8000eae <SSD1306_DrawLine+0x18c>
			err += dx;
 8000efc:	8afa      	ldrh	r2, [r7, #22]
 8000efe:	8a7b      	ldrh	r3, [r7, #18]
 8000f00:	4413      	add	r3, r2
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8000f06:	89ba      	ldrh	r2, [r7, #12]
 8000f08:	88bb      	ldrh	r3, [r7, #4]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8000f0e:	e7ce      	b.n	8000eae <SSD1306_DrawLine+0x18c>
			break;
 8000f10:	bf00      	nop
		} 
	}
}
 8000f12:	371c      	adds	r7, #28
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd90      	pop	{r4, r7, pc}

08000f18 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af02      	add	r7, sp, #8
 8000f1e:	4604      	mov	r4, r0
 8000f20:	4608      	mov	r0, r1
 8000f22:	4611      	mov	r1, r2
 8000f24:	461a      	mov	r2, r3
 8000f26:	4623      	mov	r3, r4
 8000f28:	80fb      	strh	r3, [r7, #6]
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	80bb      	strh	r3, [r7, #4]
 8000f2e:	460b      	mov	r3, r1
 8000f30:	807b      	strh	r3, [r7, #2]
 8000f32:	4613      	mov	r3, r2
 8000f34:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	2b7f      	cmp	r3, #127	; 0x7f
 8000f3a:	d853      	bhi.n	8000fe4 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8000f3c:	88bb      	ldrh	r3, [r7, #4]
 8000f3e:	2b3f      	cmp	r3, #63	; 0x3f
 8000f40:	d850      	bhi.n	8000fe4 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8000f42:	88fa      	ldrh	r2, [r7, #6]
 8000f44:	887b      	ldrh	r3, [r7, #2]
 8000f46:	4413      	add	r3, r2
 8000f48:	2b7f      	cmp	r3, #127	; 0x7f
 8000f4a:	dd03      	ble.n	8000f54 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000f52:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8000f54:	88ba      	ldrh	r2, [r7, #4]
 8000f56:	883b      	ldrh	r3, [r7, #0]
 8000f58:	4413      	add	r3, r2
 8000f5a:	2b3f      	cmp	r3, #63	; 0x3f
 8000f5c:	dd03      	ble.n	8000f66 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8000f5e:	88bb      	ldrh	r3, [r7, #4]
 8000f60:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000f64:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8000f66:	88fa      	ldrh	r2, [r7, #6]
 8000f68:	887b      	ldrh	r3, [r7, #2]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	88bc      	ldrh	r4, [r7, #4]
 8000f70:	88b9      	ldrh	r1, [r7, #4]
 8000f72:	88f8      	ldrh	r0, [r7, #6]
 8000f74:	7e3b      	ldrb	r3, [r7, #24]
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	4623      	mov	r3, r4
 8000f7a:	f7ff fed2 	bl	8000d22 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8000f7e:	88ba      	ldrh	r2, [r7, #4]
 8000f80:	883b      	ldrh	r3, [r7, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	b299      	uxth	r1, r3
 8000f86:	88fa      	ldrh	r2, [r7, #6]
 8000f88:	887b      	ldrh	r3, [r7, #2]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	b29c      	uxth	r4, r3
 8000f8e:	88ba      	ldrh	r2, [r7, #4]
 8000f90:	883b      	ldrh	r3, [r7, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	88f8      	ldrh	r0, [r7, #6]
 8000f98:	7e3b      	ldrb	r3, [r7, #24]
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	4622      	mov	r2, r4
 8000fa0:	f7ff febf 	bl	8000d22 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8000fa4:	88ba      	ldrh	r2, [r7, #4]
 8000fa6:	883b      	ldrh	r3, [r7, #0]
 8000fa8:	4413      	add	r3, r2
 8000faa:	b29c      	uxth	r4, r3
 8000fac:	88fa      	ldrh	r2, [r7, #6]
 8000fae:	88b9      	ldrh	r1, [r7, #4]
 8000fb0:	88f8      	ldrh	r0, [r7, #6]
 8000fb2:	7e3b      	ldrb	r3, [r7, #24]
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	4623      	mov	r3, r4
 8000fb8:	f7ff feb3 	bl	8000d22 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8000fbc:	88fa      	ldrh	r2, [r7, #6]
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b298      	uxth	r0, r3
 8000fc4:	88fa      	ldrh	r2, [r7, #6]
 8000fc6:	887b      	ldrh	r3, [r7, #2]
 8000fc8:	4413      	add	r3, r2
 8000fca:	b29c      	uxth	r4, r3
 8000fcc:	88ba      	ldrh	r2, [r7, #4]
 8000fce:	883b      	ldrh	r3, [r7, #0]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	88b9      	ldrh	r1, [r7, #4]
 8000fd6:	7e3b      	ldrb	r3, [r7, #24]
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	4622      	mov	r2, r4
 8000fde:	f7ff fea0 	bl	8000d22 <SSD1306_DrawLine>
 8000fe2:	e000      	b.n	8000fe6 <SSD1306_DrawRectangle+0xce>
		return;
 8000fe4:	bf00      	nop
}
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd90      	pop	{r4, r7, pc}

08000fec <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f7ff fd65 	bl	8000ac0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000ff6:	f7ff fd35 	bl	8000a64 <SSD1306_UpdateScreen>
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <ssd1306_I2C_Init+0x24>)
 8001008:	607b      	str	r3, [r7, #4]
	while(p>0)
 800100a:	e002      	b.n	8001012 <ssd1306_I2C_Init+0x12>
		p--;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3b01      	subs	r3, #1
 8001010:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1f9      	bne.n	800100c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	0003d090 	.word	0x0003d090

08001028 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b0c7      	sub	sp, #284	; 0x11c
 800102c:	af02      	add	r7, sp, #8
 800102e:	4604      	mov	r4, r0
 8001030:	4608      	mov	r0, r1
 8001032:	4639      	mov	r1, r7
 8001034:	600a      	str	r2, [r1, #0]
 8001036:	4619      	mov	r1, r3
 8001038:	1dfb      	adds	r3, r7, #7
 800103a:	4622      	mov	r2, r4
 800103c:	701a      	strb	r2, [r3, #0]
 800103e:	1dbb      	adds	r3, r7, #6
 8001040:	4602      	mov	r2, r0
 8001042:	701a      	strb	r2, [r3, #0]
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	460a      	mov	r2, r1
 8001048:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800104a:	f107 030c 	add.w	r3, r7, #12
 800104e:	1dba      	adds	r2, r7, #6
 8001050:	7812      	ldrb	r2, [r2, #0]
 8001052:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001054:	2300      	movs	r3, #0
 8001056:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800105a:	e010      	b.n	800107e <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 800105c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001060:	463a      	mov	r2, r7
 8001062:	6812      	ldr	r2, [r2, #0]
 8001064:	441a      	add	r2, r3
 8001066:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800106a:	3301      	adds	r3, #1
 800106c:	7811      	ldrb	r1, [r2, #0]
 800106e:	f107 020c 	add.w	r2, r7, #12
 8001072:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001074:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001078:	3301      	adds	r3, #1
 800107a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800107e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001082:	b29b      	uxth	r3, r3
 8001084:	1d3a      	adds	r2, r7, #4
 8001086:	8812      	ldrh	r2, [r2, #0]
 8001088:	429a      	cmp	r2, r3
 800108a:	d8e7      	bhi.n	800105c <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800108c:	1dfb      	adds	r3, r7, #7
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	b299      	uxth	r1, r3
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	3301      	adds	r3, #1
 8001098:	b298      	uxth	r0, r3
 800109a:	f107 020c 	add.w	r2, r7, #12
 800109e:	230a      	movs	r3, #10
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	4603      	mov	r3, r0
 80010a4:	4803      	ldr	r0, [pc, #12]	; (80010b4 <ssd1306_I2C_WriteMulti+0x8c>)
 80010a6:	f000 fd6d 	bl	8001b84 <HAL_I2C_Master_Transmit>
}
 80010aa:	bf00      	nop
 80010ac:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd90      	pop	{r4, r7, pc}
 80010b4:	200004b0 	.word	0x200004b0

080010b8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af02      	add	r7, sp, #8
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
 80010c2:	460b      	mov	r3, r1
 80010c4:	71bb      	strb	r3, [r7, #6]
 80010c6:	4613      	mov	r3, r2
 80010c8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80010ca:	79bb      	ldrb	r3, [r7, #6]
 80010cc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80010ce:	797b      	ldrb	r3, [r7, #5]
 80010d0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	b299      	uxth	r1, r3
 80010d6:	f107 020c 	add.w	r2, r7, #12
 80010da:	230a      	movs	r3, #10
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2302      	movs	r3, #2
 80010e0:	4803      	ldr	r0, [pc, #12]	; (80010f0 <ssd1306_I2C_Write+0x38>)
 80010e2:	f000 fd4f 	bl	8001b84 <HAL_I2C_Master_Transmit>
}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200004b0 	.word	0x200004b0

080010f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_MspInit+0x5c>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	4a14      	ldr	r2, [pc, #80]	; (8001150 <HAL_MspInit+0x5c>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6193      	str	r3, [r2, #24]
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_MspInit+0x5c>)
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <HAL_MspInit+0x5c>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <HAL_MspInit+0x5c>)
 8001118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111c:	61d3      	str	r3, [r2, #28]
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <HAL_MspInit+0x5c>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <HAL_MspInit+0x60>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <HAL_MspInit+0x60>)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001146:	bf00      	nop
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	40021000 	.word	0x40021000
 8001154:	40010000 	.word	0x40010000

08001158 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a15      	ldr	r2, [pc, #84]	; (80011c8 <HAL_I2C_MspInit+0x70>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d123      	bne.n	80011c0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001178:	4b14      	ldr	r3, [pc, #80]	; (80011cc <HAL_I2C_MspInit+0x74>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a13      	ldr	r2, [pc, #76]	; (80011cc <HAL_I2C_MspInit+0x74>)
 800117e:	f043 0308 	orr.w	r3, r3, #8
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HAL_I2C_MspInit+0x74>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f003 0308 	and.w	r3, r3, #8
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001190:	23c0      	movs	r3, #192	; 0xc0
 8001192:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001194:	2312      	movs	r3, #18
 8001196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001198:	2303      	movs	r3, #3
 800119a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	4619      	mov	r1, r3
 80011a2:	480b      	ldr	r0, [pc, #44]	; (80011d0 <HAL_I2C_MspInit+0x78>)
 80011a4:	f000 fa2c 	bl	8001600 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <HAL_I2C_MspInit+0x74>)
 80011aa:	69db      	ldr	r3, [r3, #28]
 80011ac:	4a07      	ldr	r2, [pc, #28]	; (80011cc <HAL_I2C_MspInit+0x74>)
 80011ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011b2:	61d3      	str	r3, [r2, #28]
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <HAL_I2C_MspInit+0x74>)
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011c0:	bf00      	nop
 80011c2:	3720      	adds	r7, #32
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40005400 	.word	0x40005400
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40010c00 	.word	0x40010c00

080011d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr

080011e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <HardFault_Handler+0x4>

080011e6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <MemManage_Handler+0x4>

080011ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <BusFault_Handler+0x4>

080011f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <UsageFault_Handler+0x4>

080011f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr

08001204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001220:	f000 f8cc 	bl	80013bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}

08001228 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <_sbrk+0x50>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <_sbrk+0x16>
		heap_end = &end;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <_sbrk+0x50>)
 800123a:	4a10      	ldr	r2, [pc, #64]	; (800127c <_sbrk+0x54>)
 800123c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <_sbrk+0x50>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <_sbrk+0x50>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	466a      	mov	r2, sp
 800124e:	4293      	cmp	r3, r2
 8001250:	d907      	bls.n	8001262 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001252:	f001 fcd3 	bl	8002bfc <__errno>
 8001256:	4602      	mov	r2, r0
 8001258:	230c      	movs	r3, #12
 800125a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800125c:	f04f 33ff 	mov.w	r3, #4294967295
 8001260:	e006      	b.n	8001270 <_sbrk+0x48>
	}

	heap_end += incr;
 8001262:	4b05      	ldr	r3, [pc, #20]	; (8001278 <_sbrk+0x50>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	4a03      	ldr	r2, [pc, #12]	; (8001278 <_sbrk+0x50>)
 800126c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800126e:	68fb      	ldr	r3, [r7, #12]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	200004a4 	.word	0x200004a4
 800127c:	20000510 	.word	0x20000510

08001280 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr

0800128c <character_draw>:
        SSD1306_UpdateScreen();
        HAL_Delay (10);
    }
}
void character_draw (uint8_t color)
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b087      	sub	sp, #28
 8001290:	af02      	add	r7, sp, #8
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
    uint8_t n, i, i2;

    SSD1306_Clear ();
 8001296:	f7ff fea9 	bl	8000fec <SSD1306_Clear>

    n = min(SSD1306_WIDTH, SSD1306_HEIGHT);
 800129a:	2340      	movs	r3, #64	; 0x40
 800129c:	73bb      	strb	r3, [r7, #14]

    for (i = 2; i < 30; i += 6)
 800129e:	2302      	movs	r3, #2
 80012a0:	73fb      	strb	r3, [r7, #15]
 80012a2:	e018      	b.n	80012d6 <character_draw+0x4a>
    {
        i2 = i / 2;
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	085b      	lsrs	r3, r3, #1
 80012a8:	737b      	strb	r3, [r7, #13]
        SSD1306_DrawRectangle((SSD1306_WIDTH/2) - i2, (SSD1306_HEIGHT/2) - i2 + 10, i, i, color);
 80012aa:	7b7b      	ldrb	r3, [r7, #13]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80012b2:	b298      	uxth	r0, r3
 80012b4:	7b7b      	ldrb	r3, [r7, #13]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	f1c3 032a 	rsb	r3, r3, #42	; 0x2a
 80012bc:	b299      	uxth	r1, r3
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	b29c      	uxth	r4, r3
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	4623      	mov	r3, r4
 80012cc:	f7ff fe24 	bl	8000f18 <SSD1306_DrawRectangle>
    for (i = 2; i < 30; i += 6)
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	3306      	adds	r3, #6
 80012d4:	73fb      	strb	r3, [r7, #15]
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	2b1d      	cmp	r3, #29
 80012da:	d9e3      	bls.n	80012a4 <character_draw+0x18>
        //SSD1306_UpdateScreen();
        //HAL_Delay (10);
    }
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd90      	pop	{r4, r7, pc}

080012e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80012e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80012e6:	e003      	b.n	80012f0 <LoopCopyDataInit>

080012e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80012ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80012ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80012ee:	3104      	adds	r1, #4

080012f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80012f0:	480a      	ldr	r0, [pc, #40]	; (800131c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80012f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80012f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80012f8:	d3f6      	bcc.n	80012e8 <CopyDataInit>
  ldr r2, =_sbss
 80012fa:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80012fc:	e002      	b.n	8001304 <LoopFillZerobss>

080012fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001300:	f842 3b04 	str.w	r3, [r2], #4

08001304 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001306:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001308:	d3f9      	bcc.n	80012fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800130a:	f7ff ffb9 	bl	8001280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800130e:	f001 fc7b 	bl	8002c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001312:	f7fe ff1b 	bl	800014c <main>
  bx lr
 8001316:	4770      	bx	lr
  ldr r3, =_sidata
 8001318:	08004b8c 	.word	0x08004b8c
  ldr r0, =_sdata
 800131c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001320:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 8001324:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 8001328:	2000050c 	.word	0x2000050c

0800132c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800132c:	e7fe      	b.n	800132c <ADC1_2_IRQHandler>
	...

08001330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HAL_Init+0x28>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a07      	ldr	r2, [pc, #28]	; (8001358 <HAL_Init+0x28>)
 800133a:	f043 0310 	orr.w	r3, r3, #16
 800133e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001340:	2003      	movs	r0, #3
 8001342:	f000 f929 	bl	8001598 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001346:	2000      	movs	r0, #0
 8001348:	f000 f808 	bl	800135c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800134c:	f7ff fed2 	bl	80010f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40022000 	.word	0x40022000

0800135c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_InitTick+0x54>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_InitTick+0x58>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001372:	fbb3 f3f1 	udiv	r3, r3, r1
 8001376:	fbb2 f3f3 	udiv	r3, r2, r3
 800137a:	4618      	mov	r0, r3
 800137c:	f000 f933 	bl	80015e6 <HAL_SYSTICK_Config>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e00e      	b.n	80013a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b0f      	cmp	r3, #15
 800138e:	d80a      	bhi.n	80013a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001390:	2200      	movs	r2, #0
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	f04f 30ff 	mov.w	r0, #4294967295
 8001398:	f000 f909 	bl	80015ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800139c:	4a06      	ldr	r2, [pc, #24]	; (80013b8 <HAL_InitTick+0x5c>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
 80013a4:	e000      	b.n	80013a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000010 	.word	0x20000010
 80013b4:	20000018 	.word	0x20000018
 80013b8:	20000014 	.word	0x20000014

080013bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_IncTick+0x1c>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_IncTick+0x20>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4413      	add	r3, r2
 80013cc:	4a03      	ldr	r2, [pc, #12]	; (80013dc <HAL_IncTick+0x20>)
 80013ce:	6013      	str	r3, [r2, #0]
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	20000018 	.word	0x20000018
 80013dc:	20000504 	.word	0x20000504

080013e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return uwTick;
 80013e4:	4b02      	ldr	r3, [pc, #8]	; (80013f0 <HAL_GetTick+0x10>)
 80013e6:	681b      	ldr	r3, [r3, #0]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	20000504 	.word	0x20000504

080013f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013fc:	f7ff fff0 	bl	80013e0 <HAL_GetTick>
 8001400:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800140c:	d005      	beq.n	800141a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <HAL_Delay+0x40>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4413      	add	r3, r2
 8001418:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800141a:	bf00      	nop
 800141c:	f7ff ffe0 	bl	80013e0 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	429a      	cmp	r2, r3
 800142a:	d8f7      	bhi.n	800141c <HAL_Delay+0x28>
  {
  }
}
 800142c:	bf00      	nop
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000018 	.word	0x20000018

08001438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001454:	4013      	ands	r3, r2
 8001456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001460:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146a:	4a04      	ldr	r2, [pc, #16]	; (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	60d3      	str	r3, [r2, #12]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <__NVIC_GetPriorityGrouping+0x18>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	0a1b      	lsrs	r3, r3, #8
 800148a:	f003 0307 	and.w	r3, r3, #7
}
 800148e:	4618      	mov	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	db0a      	blt.n	80014c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	490c      	ldr	r1, [pc, #48]	; (80014e8 <__NVIC_SetPriority+0x4c>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	0112      	lsls	r2, r2, #4
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	440b      	add	r3, r1
 80014c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c4:	e00a      	b.n	80014dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4908      	ldr	r1, [pc, #32]	; (80014ec <__NVIC_SetPriority+0x50>)
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	3b04      	subs	r3, #4
 80014d4:	0112      	lsls	r2, r2, #4
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	440b      	add	r3, r1
 80014da:	761a      	strb	r2, [r3, #24]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000e100 	.word	0xe000e100
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b089      	sub	sp, #36	; 0x24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f1c3 0307 	rsb	r3, r3, #7
 800150a:	2b04      	cmp	r3, #4
 800150c:	bf28      	it	cs
 800150e:	2304      	movcs	r3, #4
 8001510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3304      	adds	r3, #4
 8001516:	2b06      	cmp	r3, #6
 8001518:	d902      	bls.n	8001520 <NVIC_EncodePriority+0x30>
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3b03      	subs	r3, #3
 800151e:	e000      	b.n	8001522 <NVIC_EncodePriority+0x32>
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	f04f 32ff 	mov.w	r2, #4294967295
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43da      	mvns	r2, r3
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	401a      	ands	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001538:	f04f 31ff 	mov.w	r1, #4294967295
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	fa01 f303 	lsl.w	r3, r1, r3
 8001542:	43d9      	mvns	r1, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	4313      	orrs	r3, r2
         );
}
 800154a:	4618      	mov	r0, r3
 800154c:	3724      	adds	r7, #36	; 0x24
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001564:	d301      	bcc.n	800156a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001566:	2301      	movs	r3, #1
 8001568:	e00f      	b.n	800158a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <SysTick_Config+0x40>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001572:	210f      	movs	r1, #15
 8001574:	f04f 30ff 	mov.w	r0, #4294967295
 8001578:	f7ff ff90 	bl	800149c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <SysTick_Config+0x40>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <SysTick_Config+0x40>)
 8001584:	2207      	movs	r2, #7
 8001586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	e000e010 	.word	0xe000e010

08001598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff49 	bl	8001438 <__NVIC_SetPriorityGrouping>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c0:	f7ff ff5e 	bl	8001480 <__NVIC_GetPriorityGrouping>
 80015c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	6978      	ldr	r0, [r7, #20]
 80015cc:	f7ff ff90 	bl	80014f0 <NVIC_EncodePriority>
 80015d0:	4602      	mov	r2, r0
 80015d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff5f 	bl	800149c <__NVIC_SetPriority>
}
 80015de:	bf00      	nop
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff ffb0 	bl	8001554 <SysTick_Config>
 80015f4:	4603      	mov	r3, r0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001600:	b480      	push	{r7}
 8001602:	b08b      	sub	sp, #44	; 0x2c
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001612:	e127      	b.n	8001864 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001614:	2201      	movs	r2, #1
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	69fa      	ldr	r2, [r7, #28]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	429a      	cmp	r2, r3
 800162e:	f040 8116 	bne.w	800185e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b12      	cmp	r3, #18
 8001638:	d034      	beq.n	80016a4 <HAL_GPIO_Init+0xa4>
 800163a:	2b12      	cmp	r3, #18
 800163c:	d80d      	bhi.n	800165a <HAL_GPIO_Init+0x5a>
 800163e:	2b02      	cmp	r3, #2
 8001640:	d02b      	beq.n	800169a <HAL_GPIO_Init+0x9a>
 8001642:	2b02      	cmp	r3, #2
 8001644:	d804      	bhi.n	8001650 <HAL_GPIO_Init+0x50>
 8001646:	2b00      	cmp	r3, #0
 8001648:	d031      	beq.n	80016ae <HAL_GPIO_Init+0xae>
 800164a:	2b01      	cmp	r3, #1
 800164c:	d01c      	beq.n	8001688 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800164e:	e048      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001650:	2b03      	cmp	r3, #3
 8001652:	d043      	beq.n	80016dc <HAL_GPIO_Init+0xdc>
 8001654:	2b11      	cmp	r3, #17
 8001656:	d01b      	beq.n	8001690 <HAL_GPIO_Init+0x90>
          break;
 8001658:	e043      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800165a:	4a89      	ldr	r2, [pc, #548]	; (8001880 <HAL_GPIO_Init+0x280>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d026      	beq.n	80016ae <HAL_GPIO_Init+0xae>
 8001660:	4a87      	ldr	r2, [pc, #540]	; (8001880 <HAL_GPIO_Init+0x280>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d806      	bhi.n	8001674 <HAL_GPIO_Init+0x74>
 8001666:	4a87      	ldr	r2, [pc, #540]	; (8001884 <HAL_GPIO_Init+0x284>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d020      	beq.n	80016ae <HAL_GPIO_Init+0xae>
 800166c:	4a86      	ldr	r2, [pc, #536]	; (8001888 <HAL_GPIO_Init+0x288>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d01d      	beq.n	80016ae <HAL_GPIO_Init+0xae>
          break;
 8001672:	e036      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001674:	4a85      	ldr	r2, [pc, #532]	; (800188c <HAL_GPIO_Init+0x28c>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d019      	beq.n	80016ae <HAL_GPIO_Init+0xae>
 800167a:	4a85      	ldr	r2, [pc, #532]	; (8001890 <HAL_GPIO_Init+0x290>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d016      	beq.n	80016ae <HAL_GPIO_Init+0xae>
 8001680:	4a84      	ldr	r2, [pc, #528]	; (8001894 <HAL_GPIO_Init+0x294>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d013      	beq.n	80016ae <HAL_GPIO_Init+0xae>
          break;
 8001686:	e02c      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	623b      	str	r3, [r7, #32]
          break;
 800168e:	e028      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	3304      	adds	r3, #4
 8001696:	623b      	str	r3, [r7, #32]
          break;
 8001698:	e023      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	3308      	adds	r3, #8
 80016a0:	623b      	str	r3, [r7, #32]
          break;
 80016a2:	e01e      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	330c      	adds	r3, #12
 80016aa:	623b      	str	r3, [r7, #32]
          break;
 80016ac:	e019      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d102      	bne.n	80016bc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016b6:	2304      	movs	r3, #4
 80016b8:	623b      	str	r3, [r7, #32]
          break;
 80016ba:	e012      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d105      	bne.n	80016d0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016c4:	2308      	movs	r3, #8
 80016c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69fa      	ldr	r2, [r7, #28]
 80016cc:	611a      	str	r2, [r3, #16]
          break;
 80016ce:	e008      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d0:	2308      	movs	r3, #8
 80016d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	615a      	str	r2, [r3, #20]
          break;
 80016da:	e002      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
          break;
 80016e0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	2bff      	cmp	r3, #255	; 0xff
 80016e6:	d801      	bhi.n	80016ec <HAL_GPIO_Init+0xec>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	e001      	b.n	80016f0 <HAL_GPIO_Init+0xf0>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3304      	adds	r3, #4
 80016f0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	2bff      	cmp	r3, #255	; 0xff
 80016f6:	d802      	bhi.n	80016fe <HAL_GPIO_Init+0xfe>
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	e002      	b.n	8001704 <HAL_GPIO_Init+0x104>
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	3b08      	subs	r3, #8
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	210f      	movs	r1, #15
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	401a      	ands	r2, r3
 8001716:	6a39      	ldr	r1, [r7, #32]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	431a      	orrs	r2, r3
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 8096 	beq.w	800185e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001732:	4b59      	ldr	r3, [pc, #356]	; (8001898 <HAL_GPIO_Init+0x298>)
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	4a58      	ldr	r2, [pc, #352]	; (8001898 <HAL_GPIO_Init+0x298>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6193      	str	r3, [r2, #24]
 800173e:	4b56      	ldr	r3, [pc, #344]	; (8001898 <HAL_GPIO_Init+0x298>)
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800174a:	4a54      	ldr	r2, [pc, #336]	; (800189c <HAL_GPIO_Init+0x29c>)
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	3302      	adds	r3, #2
 8001752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001756:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	220f      	movs	r2, #15
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	4013      	ands	r3, r2
 800176c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4b      	ldr	r2, [pc, #300]	; (80018a0 <HAL_GPIO_Init+0x2a0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d013      	beq.n	800179e <HAL_GPIO_Init+0x19e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4a      	ldr	r2, [pc, #296]	; (80018a4 <HAL_GPIO_Init+0x2a4>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d00d      	beq.n	800179a <HAL_GPIO_Init+0x19a>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a49      	ldr	r2, [pc, #292]	; (80018a8 <HAL_GPIO_Init+0x2a8>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d007      	beq.n	8001796 <HAL_GPIO_Init+0x196>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a48      	ldr	r2, [pc, #288]	; (80018ac <HAL_GPIO_Init+0x2ac>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d101      	bne.n	8001792 <HAL_GPIO_Init+0x192>
 800178e:	2303      	movs	r3, #3
 8001790:	e006      	b.n	80017a0 <HAL_GPIO_Init+0x1a0>
 8001792:	2304      	movs	r3, #4
 8001794:	e004      	b.n	80017a0 <HAL_GPIO_Init+0x1a0>
 8001796:	2302      	movs	r3, #2
 8001798:	e002      	b.n	80017a0 <HAL_GPIO_Init+0x1a0>
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <HAL_GPIO_Init+0x1a0>
 800179e:	2300      	movs	r3, #0
 80017a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017a2:	f002 0203 	and.w	r2, r2, #3
 80017a6:	0092      	lsls	r2, r2, #2
 80017a8:	4093      	lsls	r3, r2
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017b0:	493a      	ldr	r1, [pc, #232]	; (800189c <HAL_GPIO_Init+0x29c>)
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	089b      	lsrs	r3, r3, #2
 80017b6:	3302      	adds	r3, #2
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d006      	beq.n	80017d8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017ca:	4b39      	ldr	r3, [pc, #228]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4938      	ldr	r1, [pc, #224]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]
 80017d6:	e006      	b.n	80017e6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017d8:	4b35      	ldr	r3, [pc, #212]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	43db      	mvns	r3, r3
 80017e0:	4933      	ldr	r1, [pc, #204]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 80017e2:	4013      	ands	r3, r2
 80017e4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d006      	beq.n	8001800 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017f2:	4b2f      	ldr	r3, [pc, #188]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	492e      	ldr	r1, [pc, #184]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	604b      	str	r3, [r1, #4]
 80017fe:	e006      	b.n	800180e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001800:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	43db      	mvns	r3, r3
 8001808:	4929      	ldr	r1, [pc, #164]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 800180a:	4013      	ands	r3, r2
 800180c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d006      	beq.n	8001828 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800181a:	4b25      	ldr	r3, [pc, #148]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	4924      	ldr	r1, [pc, #144]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	4313      	orrs	r3, r2
 8001824:	608b      	str	r3, [r1, #8]
 8001826:	e006      	b.n	8001836 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001828:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	43db      	mvns	r3, r3
 8001830:	491f      	ldr	r1, [pc, #124]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 8001832:	4013      	ands	r3, r2
 8001834:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d006      	beq.n	8001850 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001842:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	491a      	ldr	r1, [pc, #104]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	60cb      	str	r3, [r1, #12]
 800184e:	e006      	b.n	800185e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	43db      	mvns	r3, r3
 8001858:	4915      	ldr	r1, [pc, #84]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 800185a:	4013      	ands	r3, r2
 800185c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	3301      	adds	r3, #1
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	fa22 f303 	lsr.w	r3, r2, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	f47f aed0 	bne.w	8001614 <HAL_GPIO_Init+0x14>
  }
}
 8001874:	bf00      	nop
 8001876:	372c      	adds	r7, #44	; 0x2c
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	10210000 	.word	0x10210000
 8001884:	10110000 	.word	0x10110000
 8001888:	10120000 	.word	0x10120000
 800188c:	10310000 	.word	0x10310000
 8001890:	10320000 	.word	0x10320000
 8001894:	10220000 	.word	0x10220000
 8001898:	40021000 	.word	0x40021000
 800189c:	40010000 	.word	0x40010000
 80018a0:	40010800 	.word	0x40010800
 80018a4:	40010c00 	.word	0x40010c00
 80018a8:	40011000 	.word	0x40011000
 80018ac:	40011400 	.word	0x40011400
 80018b0:	40010400 	.word	0x40010400

080018b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	887b      	ldrh	r3, [r7, #2]
 80018c6:	4013      	ands	r3, r2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d002      	beq.n	80018d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018cc:	2301      	movs	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
 80018d0:	e001      	b.n	80018d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr

080018e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	460b      	mov	r3, r1
 80018ec:	807b      	strh	r3, [r7, #2]
 80018ee:	4613      	mov	r3, r2
 80018f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018f2:	787b      	ldrb	r3, [r7, #1]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018f8:	887a      	ldrh	r2, [r7, #2]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018fe:	e003      	b.n	8001908 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001900:	887b      	ldrh	r3, [r7, #2]
 8001902:	041a      	lsls	r2, r3, #16
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	611a      	str	r2, [r3, #16]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
	...

08001914 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e11f      	b.n	8001b66 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d106      	bne.n	8001940 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff fc0c 	bl	8001158 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2224      	movs	r2, #36	; 0x24
 8001944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0201 	bic.w	r2, r2, #1
 8001956:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001966:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001976:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001978:	f001 f90e 	bl	8002b98 <HAL_RCC_GetPCLK1Freq>
 800197c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	4a7b      	ldr	r2, [pc, #492]	; (8001b70 <HAL_I2C_Init+0x25c>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d807      	bhi.n	8001998 <HAL_I2C_Init+0x84>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4a7a      	ldr	r2, [pc, #488]	; (8001b74 <HAL_I2C_Init+0x260>)
 800198c:	4293      	cmp	r3, r2
 800198e:	bf94      	ite	ls
 8001990:	2301      	movls	r3, #1
 8001992:	2300      	movhi	r3, #0
 8001994:	b2db      	uxtb	r3, r3
 8001996:	e006      	b.n	80019a6 <HAL_I2C_Init+0x92>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4a77      	ldr	r2, [pc, #476]	; (8001b78 <HAL_I2C_Init+0x264>)
 800199c:	4293      	cmp	r3, r2
 800199e:	bf94      	ite	ls
 80019a0:	2301      	movls	r3, #1
 80019a2:	2300      	movhi	r3, #0
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e0db      	b.n	8001b66 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4a72      	ldr	r2, [pc, #456]	; (8001b7c <HAL_I2C_Init+0x268>)
 80019b2:	fba2 2303 	umull	r2, r3, r2, r3
 80019b6:	0c9b      	lsrs	r3, r3, #18
 80019b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68ba      	ldr	r2, [r7, #8]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	4a64      	ldr	r2, [pc, #400]	; (8001b70 <HAL_I2C_Init+0x25c>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d802      	bhi.n	80019e8 <HAL_I2C_Init+0xd4>
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	3301      	adds	r3, #1
 80019e6:	e009      	b.n	80019fc <HAL_I2C_Init+0xe8>
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019ee:	fb02 f303 	mul.w	r3, r2, r3
 80019f2:	4a63      	ldr	r2, [pc, #396]	; (8001b80 <HAL_I2C_Init+0x26c>)
 80019f4:	fba2 2303 	umull	r2, r3, r2, r3
 80019f8:	099b      	lsrs	r3, r3, #6
 80019fa:	3301      	adds	r3, #1
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6812      	ldr	r2, [r2, #0]
 8001a00:	430b      	orrs	r3, r1
 8001a02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	4956      	ldr	r1, [pc, #344]	; (8001b70 <HAL_I2C_Init+0x25c>)
 8001a18:	428b      	cmp	r3, r1
 8001a1a:	d80d      	bhi.n	8001a38 <HAL_I2C_Init+0x124>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	1e59      	subs	r1, r3, #1
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	bf38      	it	cc
 8001a34:	2304      	movcc	r3, #4
 8001a36:	e04f      	b.n	8001ad8 <HAL_I2C_Init+0x1c4>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d111      	bne.n	8001a64 <HAL_I2C_Init+0x150>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	1e58      	subs	r0, r3, #1
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6859      	ldr	r1, [r3, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	440b      	add	r3, r1
 8001a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a52:	3301      	adds	r3, #1
 8001a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	bf0c      	ite	eq
 8001a5c:	2301      	moveq	r3, #1
 8001a5e:	2300      	movne	r3, #0
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	e012      	b.n	8001a8a <HAL_I2C_Init+0x176>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	1e58      	subs	r0, r3, #1
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6859      	ldr	r1, [r3, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	0099      	lsls	r1, r3, #2
 8001a74:	440b      	add	r3, r1
 8001a76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	bf0c      	ite	eq
 8001a84:	2301      	moveq	r3, #1
 8001a86:	2300      	movne	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_I2C_Init+0x17e>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e022      	b.n	8001ad8 <HAL_I2C_Init+0x1c4>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10e      	bne.n	8001ab8 <HAL_I2C_Init+0x1a4>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1e58      	subs	r0, r3, #1
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6859      	ldr	r1, [r3, #4]
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	440b      	add	r3, r1
 8001aa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aac:	3301      	adds	r3, #1
 8001aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ab6:	e00f      	b.n	8001ad8 <HAL_I2C_Init+0x1c4>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	1e58      	subs	r0, r3, #1
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6859      	ldr	r1, [r3, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	0099      	lsls	r1, r3, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ace:	3301      	adds	r3, #1
 8001ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ad4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	6809      	ldr	r1, [r1, #0]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69da      	ldr	r2, [r3, #28]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6911      	ldr	r1, [r2, #16]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	68d2      	ldr	r2, [r2, #12]
 8001b12:	4311      	orrs	r1, r2
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	430b      	orrs	r3, r1
 8001b1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695a      	ldr	r2, [r3, #20]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 0201 	orr.w	r2, r2, #1
 8001b46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2220      	movs	r2, #32
 8001b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	000186a0 	.word	0x000186a0
 8001b74:	001e847f 	.word	0x001e847f
 8001b78:	003d08ff 	.word	0x003d08ff
 8001b7c:	431bde83 	.word	0x431bde83
 8001b80:	10624dd3 	.word	0x10624dd3

08001b84 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af02      	add	r7, sp, #8
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	607a      	str	r2, [r7, #4]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	460b      	mov	r3, r1
 8001b92:	817b      	strh	r3, [r7, #10]
 8001b94:	4613      	mov	r3, r2
 8001b96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b98:	f7ff fc22 	bl	80013e0 <HAL_GetTick>
 8001b9c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b20      	cmp	r3, #32
 8001ba8:	f040 80e0 	bne.w	8001d6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	2319      	movs	r3, #25
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	4970      	ldr	r1, [pc, #448]	; (8001d78 <HAL_I2C_Master_Transmit+0x1f4>)
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f000 fa92 	bl	80020e0 <I2C_WaitOnFlagUntilTimeout>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	e0d3      	b.n	8001d6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_I2C_Master_Transmit+0x50>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e0cc      	b.n	8001d6e <HAL_I2C_Master_Transmit+0x1ea>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d007      	beq.n	8001bfa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f042 0201 	orr.w	r2, r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2221      	movs	r2, #33	; 0x21
 8001c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2210      	movs	r2, #16
 8001c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	893a      	ldrh	r2, [r7, #8]
 8001c2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	4a50      	ldr	r2, [pc, #320]	; (8001d7c <HAL_I2C_Master_Transmit+0x1f8>)
 8001c3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c3c:	8979      	ldrh	r1, [r7, #10]
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	6a3a      	ldr	r2, [r7, #32]
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 f9ca 	bl	8001fdc <I2C_MasterRequestWrite>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e08d      	b.n	8001d6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c68:	e066      	b.n	8001d38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	6a39      	ldr	r1, [r7, #32]
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 fb0c 	bl	800228c <I2C_WaitOnTXEFlagUntilTimeout>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00d      	beq.n	8001c96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d107      	bne.n	8001c92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e06b      	b.n	8001d6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	781a      	ldrb	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d11b      	bne.n	8001d0c <HAL_I2C_Master_Transmit+0x188>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d017      	beq.n	8001d0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	781a      	ldrb	r2, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	6a39      	ldr	r1, [r7, #32]
 8001d10:	68f8      	ldr	r0, [r7, #12]
 8001d12:	f000 fafc 	bl	800230e <I2C_WaitOnBTFFlagUntilTimeout>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00d      	beq.n	8001d38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d107      	bne.n	8001d34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e01a      	b.n	8001d6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d194      	bne.n	8001c6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2220      	movs	r2, #32
 8001d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	e000      	b.n	8001d6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d6c:	2302      	movs	r3, #2
  }
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	00100002 	.word	0x00100002
 8001d7c:	ffff0000 	.word	0xffff0000

08001d80 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	; 0x28
 8001d84:	af02      	add	r7, sp, #8
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001d90:	f7ff fb26 	bl	80013e0 <HAL_GetTick>
 8001d94:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001d96:	2301      	movs	r3, #1
 8001d98:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b20      	cmp	r3, #32
 8001da4:	f040 8111 	bne.w	8001fca <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	2319      	movs	r3, #25
 8001dae:	2201      	movs	r2, #1
 8001db0:	4988      	ldr	r1, [pc, #544]	; (8001fd4 <HAL_I2C_IsDeviceReady+0x254>)
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 f994 	bl	80020e0 <I2C_WaitOnFlagUntilTimeout>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e104      	b.n	8001fcc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d101      	bne.n	8001dd0 <HAL_I2C_IsDeviceReady+0x50>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e0fd      	b.n	8001fcc <HAL_I2C_IsDeviceReady+0x24c>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d007      	beq.n	8001df6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f042 0201 	orr.w	r2, r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2224      	movs	r2, #36	; 0x24
 8001e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4a70      	ldr	r2, [pc, #448]	; (8001fd8 <HAL_I2C_IsDeviceReady+0x258>)
 8001e18:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e28:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 f952 	bl	80020e0 <I2C_WaitOnFlagUntilTimeout>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00d      	beq.n	8001e5e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e50:	d103      	bne.n	8001e5a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e58:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e0b6      	b.n	8001fcc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e5e:	897b      	ldrh	r3, [r7, #10]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	461a      	mov	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e6c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001e6e:	f7ff fab7 	bl	80013e0 <HAL_GetTick>
 8001e72:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	bf0c      	ite	eq
 8001e82:	2301      	moveq	r3, #1
 8001e84:	2300      	movne	r3, #0
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e98:	bf0c      	ite	eq
 8001e9a:	2301      	moveq	r3, #1
 8001e9c:	2300      	movne	r3, #0
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ea2:	e025      	b.n	8001ef0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ea4:	f7ff fa9c 	bl	80013e0 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d302      	bcc.n	8001eba <HAL_I2C_IsDeviceReady+0x13a>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d103      	bne.n	8001ec2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	22a0      	movs	r2, #160	; 0xa0
 8001ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	bf0c      	ite	eq
 8001ed0:	2301      	moveq	r3, #1
 8001ed2:	2300      	movne	r3, #0
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ee6:	bf0c      	ite	eq
 8001ee8:	2301      	moveq	r3, #1
 8001eea:	2300      	movne	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2ba0      	cmp	r3, #160	; 0xa0
 8001efa:	d005      	beq.n	8001f08 <HAL_I2C_IsDeviceReady+0x188>
 8001efc:	7dfb      	ldrb	r3, [r7, #23]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d102      	bne.n	8001f08 <HAL_I2C_IsDeviceReady+0x188>
 8001f02:	7dbb      	ldrb	r3, [r7, #22]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0cd      	beq.n	8001ea4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d129      	bne.n	8001f72 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f2c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	2319      	movs	r3, #25
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	4921      	ldr	r1, [pc, #132]	; (8001fd4 <HAL_I2C_IsDeviceReady+0x254>)
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 f8c6 	bl	80020e0 <I2C_WaitOnFlagUntilTimeout>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e036      	b.n	8001fcc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2220      	movs	r2, #32
 8001f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	e02c      	b.n	8001fcc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f80:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f8a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2319      	movs	r3, #25
 8001f92:	2201      	movs	r2, #1
 8001f94:	490f      	ldr	r1, [pc, #60]	; (8001fd4 <HAL_I2C_IsDeviceReady+0x254>)
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 f8a2 	bl	80020e0 <I2C_WaitOnFlagUntilTimeout>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e012      	b.n	8001fcc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	f4ff af32 	bcc.w	8001e1a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001fca:	2302      	movs	r3, #2
  }
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3720      	adds	r7, #32
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	00100002 	.word	0x00100002
 8001fd8:	ffff0000 	.word	0xffff0000

08001fdc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af02      	add	r7, sp, #8
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	607a      	str	r2, [r7, #4]
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d006      	beq.n	8002006 <I2C_MasterRequestWrite+0x2a>
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d003      	beq.n	8002006 <I2C_MasterRequestWrite+0x2a>
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002004:	d108      	bne.n	8002018 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	e00b      	b.n	8002030 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201c:	2b12      	cmp	r3, #18
 800201e:	d107      	bne.n	8002030 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800202e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 f84f 	bl	80020e0 <I2C_WaitOnFlagUntilTimeout>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00d      	beq.n	8002064 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002056:	d103      	bne.n	8002060 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800205e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e035      	b.n	80020d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800206c:	d108      	bne.n	8002080 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800206e:	897b      	ldrh	r3, [r7, #10]
 8002070:	b2db      	uxtb	r3, r3
 8002072:	461a      	mov	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800207c:	611a      	str	r2, [r3, #16]
 800207e:	e01b      	b.n	80020b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002080:	897b      	ldrh	r3, [r7, #10]
 8002082:	11db      	asrs	r3, r3, #7
 8002084:	b2db      	uxtb	r3, r3
 8002086:	f003 0306 	and.w	r3, r3, #6
 800208a:	b2db      	uxtb	r3, r3
 800208c:	f063 030f 	orn	r3, r3, #15
 8002090:	b2da      	uxtb	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	490e      	ldr	r1, [pc, #56]	; (80020d8 <I2C_MasterRequestWrite+0xfc>)
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 f875 	bl	800218e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e010      	b.n	80020d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020ae:	897b      	ldrh	r3, [r7, #10]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	4907      	ldr	r1, [pc, #28]	; (80020dc <I2C_MasterRequestWrite+0x100>)
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f000 f865 	bl	800218e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	00010008 	.word	0x00010008
 80020dc:	00010002 	.word	0x00010002

080020e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	4613      	mov	r3, r2
 80020ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020f0:	e025      	b.n	800213e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f8:	d021      	beq.n	800213e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020fa:	f7ff f971 	bl	80013e0 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d302      	bcc.n	8002110 <I2C_WaitOnFlagUntilTimeout+0x30>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d116      	bne.n	800213e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2220      	movs	r2, #32
 800211a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f043 0220 	orr.w	r2, r3, #32
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e023      	b.n	8002186 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	0c1b      	lsrs	r3, r3, #16
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b01      	cmp	r3, #1
 8002146:	d10d      	bne.n	8002164 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	43da      	mvns	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	4013      	ands	r3, r2
 8002154:	b29b      	uxth	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	bf0c      	ite	eq
 800215a:	2301      	moveq	r3, #1
 800215c:	2300      	movne	r3, #0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	461a      	mov	r2, r3
 8002162:	e00c      	b.n	800217e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	43da      	mvns	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	4013      	ands	r3, r2
 8002170:	b29b      	uxth	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	bf0c      	ite	eq
 8002176:	2301      	moveq	r3, #1
 8002178:	2300      	movne	r3, #0
 800217a:	b2db      	uxtb	r3, r3
 800217c:	461a      	mov	r2, r3
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	429a      	cmp	r2, r3
 8002182:	d0b6      	beq.n	80020f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b084      	sub	sp, #16
 8002192:	af00      	add	r7, sp, #0
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
 800219a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800219c:	e051      	b.n	8002242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ac:	d123      	bne.n	80021f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2220      	movs	r2, #32
 80021d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f043 0204 	orr.w	r2, r3, #4
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e046      	b.n	8002284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fc:	d021      	beq.n	8002242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021fe:	f7ff f8ef 	bl	80013e0 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	429a      	cmp	r2, r3
 800220c:	d302      	bcc.n	8002214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d116      	bne.n	8002242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2220      	movs	r2, #32
 800221e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	f043 0220 	orr.w	r2, r3, #32
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e020      	b.n	8002284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	0c1b      	lsrs	r3, r3, #16
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b01      	cmp	r3, #1
 800224a:	d10c      	bne.n	8002266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	43da      	mvns	r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	4013      	ands	r3, r2
 8002258:	b29b      	uxth	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	bf14      	ite	ne
 800225e:	2301      	movne	r3, #1
 8002260:	2300      	moveq	r3, #0
 8002262:	b2db      	uxtb	r3, r3
 8002264:	e00b      	b.n	800227e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	43da      	mvns	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	4013      	ands	r3, r2
 8002272:	b29b      	uxth	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	bf14      	ite	ne
 8002278:	2301      	movne	r3, #1
 800227a:	2300      	moveq	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d18d      	bne.n	800219e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002298:	e02d      	b.n	80022f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 f878 	bl	8002390 <I2C_IsAcknowledgeFailed>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e02d      	b.n	8002306 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b0:	d021      	beq.n	80022f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022b2:	f7ff f895 	bl	80013e0 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d302      	bcc.n	80022c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d116      	bne.n	80022f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2220      	movs	r2, #32
 80022d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f043 0220 	orr.w	r2, r3, #32
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e007      	b.n	8002306 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002300:	2b80      	cmp	r3, #128	; 0x80
 8002302:	d1ca      	bne.n	800229a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b084      	sub	sp, #16
 8002312:	af00      	add	r7, sp, #0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800231a:	e02d      	b.n	8002378 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 f837 	bl	8002390 <I2C_IsAcknowledgeFailed>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e02d      	b.n	8002388 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002332:	d021      	beq.n	8002378 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002334:	f7ff f854 	bl	80013e0 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	429a      	cmp	r2, r3
 8002342:	d302      	bcc.n	800234a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d116      	bne.n	8002378 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2220      	movs	r2, #32
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	f043 0220 	orr.w	r2, r3, #32
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e007      	b.n	8002388 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	2b04      	cmp	r3, #4
 8002384:	d1ca      	bne.n	800231c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023a6:	d11b      	bne.n	80023e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2220      	movs	r2, #32
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	f043 0204 	orr.w	r2, r3, #4
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e000      	b.n	80023e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e26c      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 8087 	beq.w	800251a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800240c:	4b92      	ldr	r3, [pc, #584]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 030c 	and.w	r3, r3, #12
 8002414:	2b04      	cmp	r3, #4
 8002416:	d00c      	beq.n	8002432 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002418:	4b8f      	ldr	r3, [pc, #572]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 030c 	and.w	r3, r3, #12
 8002420:	2b08      	cmp	r3, #8
 8002422:	d112      	bne.n	800244a <HAL_RCC_OscConfig+0x5e>
 8002424:	4b8c      	ldr	r3, [pc, #560]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002430:	d10b      	bne.n	800244a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002432:	4b89      	ldr	r3, [pc, #548]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d06c      	beq.n	8002518 <HAL_RCC_OscConfig+0x12c>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d168      	bne.n	8002518 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e246      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002452:	d106      	bne.n	8002462 <HAL_RCC_OscConfig+0x76>
 8002454:	4b80      	ldr	r3, [pc, #512]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a7f      	ldr	r2, [pc, #508]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 800245a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	e02e      	b.n	80024c0 <HAL_RCC_OscConfig+0xd4>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10c      	bne.n	8002484 <HAL_RCC_OscConfig+0x98>
 800246a:	4b7b      	ldr	r3, [pc, #492]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a7a      	ldr	r2, [pc, #488]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	4b78      	ldr	r3, [pc, #480]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a77      	ldr	r2, [pc, #476]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 800247c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e01d      	b.n	80024c0 <HAL_RCC_OscConfig+0xd4>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800248c:	d10c      	bne.n	80024a8 <HAL_RCC_OscConfig+0xbc>
 800248e:	4b72      	ldr	r3, [pc, #456]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a71      	ldr	r2, [pc, #452]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	4b6f      	ldr	r3, [pc, #444]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a6e      	ldr	r2, [pc, #440]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80024a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e00b      	b.n	80024c0 <HAL_RCC_OscConfig+0xd4>
 80024a8:	4b6b      	ldr	r3, [pc, #428]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a6a      	ldr	r2, [pc, #424]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80024ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	4b68      	ldr	r3, [pc, #416]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a67      	ldr	r2, [pc, #412]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80024ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d013      	beq.n	80024f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c8:	f7fe ff8a 	bl	80013e0 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d0:	f7fe ff86 	bl	80013e0 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	; 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e1fa      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e2:	4b5d      	ldr	r3, [pc, #372]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0xe4>
 80024ee:	e014      	b.n	800251a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7fe ff76 	bl	80013e0 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f8:	f7fe ff72 	bl	80013e0 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	; 0x64
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e1e6      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250a:	4b53      	ldr	r3, [pc, #332]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x10c>
 8002516:	e000      	b.n	800251a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d063      	beq.n	80025ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002526:	4b4c      	ldr	r3, [pc, #304]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 030c 	and.w	r3, r3, #12
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00b      	beq.n	800254a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002532:	4b49      	ldr	r3, [pc, #292]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b08      	cmp	r3, #8
 800253c:	d11c      	bne.n	8002578 <HAL_RCC_OscConfig+0x18c>
 800253e:	4b46      	ldr	r3, [pc, #280]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d116      	bne.n	8002578 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254a:	4b43      	ldr	r3, [pc, #268]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d005      	beq.n	8002562 <HAL_RCC_OscConfig+0x176>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d001      	beq.n	8002562 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e1ba      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002562:	4b3d      	ldr	r3, [pc, #244]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4939      	ldr	r1, [pc, #228]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002572:	4313      	orrs	r3, r2
 8002574:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002576:	e03a      	b.n	80025ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d020      	beq.n	80025c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002580:	4b36      	ldr	r3, [pc, #216]	; (800265c <HAL_RCC_OscConfig+0x270>)
 8002582:	2201      	movs	r2, #1
 8002584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002586:	f7fe ff2b 	bl	80013e0 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800258e:	f7fe ff27 	bl	80013e0 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e19b      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a0:	4b2d      	ldr	r3, [pc, #180]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0f0      	beq.n	800258e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ac:	4b2a      	ldr	r3, [pc, #168]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	4927      	ldr	r1, [pc, #156]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	600b      	str	r3, [r1, #0]
 80025c0:	e015      	b.n	80025ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c2:	4b26      	ldr	r3, [pc, #152]	; (800265c <HAL_RCC_OscConfig+0x270>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c8:	f7fe ff0a 	bl	80013e0 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d0:	f7fe ff06 	bl	80013e0 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e17a      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e2:	4b1d      	ldr	r3, [pc, #116]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d03a      	beq.n	8002670 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d019      	beq.n	8002636 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002602:	4b17      	ldr	r3, [pc, #92]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 8002604:	2201      	movs	r2, #1
 8002606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002608:	f7fe feea 	bl	80013e0 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002610:	f7fe fee6 	bl	80013e0 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e15a      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002622:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f0      	beq.n	8002610 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800262e:	2001      	movs	r0, #1
 8002630:	f000 fac6 	bl	8002bc0 <RCC_Delay>
 8002634:	e01c      	b.n	8002670 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002636:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263c:	f7fe fed0 	bl	80013e0 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002642:	e00f      	b.n	8002664 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002644:	f7fe fecc 	bl	80013e0 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d908      	bls.n	8002664 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e140      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
 8002656:	bf00      	nop
 8002658:	40021000 	.word	0x40021000
 800265c:	42420000 	.word	0x42420000
 8002660:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002664:	4b9e      	ldr	r3, [pc, #632]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1e9      	bne.n	8002644 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 80a6 	beq.w	80027ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800267e:	2300      	movs	r3, #0
 8002680:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002682:	4b97      	ldr	r3, [pc, #604]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10d      	bne.n	80026aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800268e:	4b94      	ldr	r3, [pc, #592]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	4a93      	ldr	r2, [pc, #588]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002698:	61d3      	str	r3, [r2, #28]
 800269a:	4b91      	ldr	r3, [pc, #580]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026a6:	2301      	movs	r3, #1
 80026a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026aa:	4b8e      	ldr	r3, [pc, #568]	; (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d118      	bne.n	80026e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026b6:	4b8b      	ldr	r3, [pc, #556]	; (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a8a      	ldr	r2, [pc, #552]	; (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 80026bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c2:	f7fe fe8d 	bl	80013e0 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ca:	f7fe fe89 	bl	80013e0 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b64      	cmp	r3, #100	; 0x64
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e0fd      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026dc:	4b81      	ldr	r3, [pc, #516]	; (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0f0      	beq.n	80026ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d106      	bne.n	80026fe <HAL_RCC_OscConfig+0x312>
 80026f0:	4b7b      	ldr	r3, [pc, #492]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	4a7a      	ldr	r2, [pc, #488]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6213      	str	r3, [r2, #32]
 80026fc:	e02d      	b.n	800275a <HAL_RCC_OscConfig+0x36e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10c      	bne.n	8002720 <HAL_RCC_OscConfig+0x334>
 8002706:	4b76      	ldr	r3, [pc, #472]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	4a75      	ldr	r2, [pc, #468]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800270c:	f023 0301 	bic.w	r3, r3, #1
 8002710:	6213      	str	r3, [r2, #32]
 8002712:	4b73      	ldr	r3, [pc, #460]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	4a72      	ldr	r2, [pc, #456]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002718:	f023 0304 	bic.w	r3, r3, #4
 800271c:	6213      	str	r3, [r2, #32]
 800271e:	e01c      	b.n	800275a <HAL_RCC_OscConfig+0x36e>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	2b05      	cmp	r3, #5
 8002726:	d10c      	bne.n	8002742 <HAL_RCC_OscConfig+0x356>
 8002728:	4b6d      	ldr	r3, [pc, #436]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	4a6c      	ldr	r2, [pc, #432]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800272e:	f043 0304 	orr.w	r3, r3, #4
 8002732:	6213      	str	r3, [r2, #32]
 8002734:	4b6a      	ldr	r3, [pc, #424]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	4a69      	ldr	r2, [pc, #420]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	6213      	str	r3, [r2, #32]
 8002740:	e00b      	b.n	800275a <HAL_RCC_OscConfig+0x36e>
 8002742:	4b67      	ldr	r3, [pc, #412]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	4a66      	ldr	r2, [pc, #408]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002748:	f023 0301 	bic.w	r3, r3, #1
 800274c:	6213      	str	r3, [r2, #32]
 800274e:	4b64      	ldr	r3, [pc, #400]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	4a63      	ldr	r2, [pc, #396]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002754:	f023 0304 	bic.w	r3, r3, #4
 8002758:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d015      	beq.n	800278e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002762:	f7fe fe3d 	bl	80013e0 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002768:	e00a      	b.n	8002780 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276a:	f7fe fe39 	bl	80013e0 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	f241 3288 	movw	r2, #5000	; 0x1388
 8002778:	4293      	cmp	r3, r2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e0ab      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002780:	4b57      	ldr	r3, [pc, #348]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0ee      	beq.n	800276a <HAL_RCC_OscConfig+0x37e>
 800278c:	e014      	b.n	80027b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800278e:	f7fe fe27 	bl	80013e0 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002794:	e00a      	b.n	80027ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002796:	f7fe fe23 	bl	80013e0 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e095      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ac:	4b4c      	ldr	r3, [pc, #304]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1ee      	bne.n	8002796 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027b8:	7dfb      	ldrb	r3, [r7, #23]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d105      	bne.n	80027ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027be:	4b48      	ldr	r3, [pc, #288]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	4a47      	ldr	r2, [pc, #284]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80027c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 8081 	beq.w	80028d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027d4:	4b42      	ldr	r3, [pc, #264]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 030c 	and.w	r3, r3, #12
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d061      	beq.n	80028a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d146      	bne.n	8002876 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e8:	4b3f      	ldr	r3, [pc, #252]	; (80028e8 <HAL_RCC_OscConfig+0x4fc>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ee:	f7fe fdf7 	bl	80013e0 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f6:	f7fe fdf3 	bl	80013e0 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e067      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002808:	4b35      	ldr	r3, [pc, #212]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1f0      	bne.n	80027f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800281c:	d108      	bne.n	8002830 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800281e:	4b30      	ldr	r3, [pc, #192]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	492d      	ldr	r1, [pc, #180]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002830:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a19      	ldr	r1, [r3, #32]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	430b      	orrs	r3, r1
 8002842:	4927      	ldr	r1, [pc, #156]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002844:	4313      	orrs	r3, r2
 8002846:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002848:	4b27      	ldr	r3, [pc, #156]	; (80028e8 <HAL_RCC_OscConfig+0x4fc>)
 800284a:	2201      	movs	r2, #1
 800284c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284e:	f7fe fdc7 	bl	80013e0 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002856:	f7fe fdc3 	bl	80013e0 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e037      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002868:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0f0      	beq.n	8002856 <HAL_RCC_OscConfig+0x46a>
 8002874:	e02f      	b.n	80028d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002876:	4b1c      	ldr	r3, [pc, #112]	; (80028e8 <HAL_RCC_OscConfig+0x4fc>)
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287c:	f7fe fdb0 	bl	80013e0 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002884:	f7fe fdac 	bl	80013e0 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e020      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002896:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0x498>
 80028a2:	e018      	b.n	80028d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e013      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d106      	bne.n	80028d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d001      	beq.n	80028d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40007000 	.word	0x40007000
 80028e8:	42420060 	.word	0x42420060

080028ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0d0      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002900:	4b6a      	ldr	r3, [pc, #424]	; (8002aac <HAL_RCC_ClockConfig+0x1c0>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d910      	bls.n	8002930 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290e:	4b67      	ldr	r3, [pc, #412]	; (8002aac <HAL_RCC_ClockConfig+0x1c0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 0207 	bic.w	r2, r3, #7
 8002916:	4965      	ldr	r1, [pc, #404]	; (8002aac <HAL_RCC_ClockConfig+0x1c0>)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	4313      	orrs	r3, r2
 800291c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291e:	4b63      	ldr	r3, [pc, #396]	; (8002aac <HAL_RCC_ClockConfig+0x1c0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d001      	beq.n	8002930 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e0b8      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d020      	beq.n	800297e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002948:	4b59      	ldr	r3, [pc, #356]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	4a58      	ldr	r2, [pc, #352]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800294e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002952:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0308 	and.w	r3, r3, #8
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002960:	4b53      	ldr	r3, [pc, #332]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	4a52      	ldr	r2, [pc, #328]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002966:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800296a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800296c:	4b50      	ldr	r3, [pc, #320]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	494d      	ldr	r1, [pc, #308]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	4313      	orrs	r3, r2
 800297c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d040      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d107      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002992:	4b47      	ldr	r3, [pc, #284]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d115      	bne.n	80029ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e07f      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d107      	bne.n	80029ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029aa:	4b41      	ldr	r3, [pc, #260]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d109      	bne.n	80029ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e073      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ba:	4b3d      	ldr	r3, [pc, #244]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e06b      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ca:	4b39      	ldr	r3, [pc, #228]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f023 0203 	bic.w	r2, r3, #3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	4936      	ldr	r1, [pc, #216]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029dc:	f7fe fd00 	bl	80013e0 <HAL_GetTick>
 80029e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e2:	e00a      	b.n	80029fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e4:	f7fe fcfc 	bl	80013e0 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e053      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fa:	4b2d      	ldr	r3, [pc, #180]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 020c 	and.w	r2, r3, #12
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d1eb      	bne.n	80029e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a0c:	4b27      	ldr	r3, [pc, #156]	; (8002aac <HAL_RCC_ClockConfig+0x1c0>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d210      	bcs.n	8002a3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1a:	4b24      	ldr	r3, [pc, #144]	; (8002aac <HAL_RCC_ClockConfig+0x1c0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 0207 	bic.w	r2, r3, #7
 8002a22:	4922      	ldr	r1, [pc, #136]	; (8002aac <HAL_RCC_ClockConfig+0x1c0>)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2a:	4b20      	ldr	r3, [pc, #128]	; (8002aac <HAL_RCC_ClockConfig+0x1c0>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d001      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e032      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a48:	4b19      	ldr	r3, [pc, #100]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4916      	ldr	r1, [pc, #88]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d009      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a66:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	490e      	ldr	r1, [pc, #56]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a7a:	f000 f821 	bl	8002ac0 <HAL_RCC_GetSysClockFreq>
 8002a7e:	4601      	mov	r1, r0
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	091b      	lsrs	r3, r3, #4
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a8c:	5cd3      	ldrb	r3, [r2, r3]
 8002a8e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a92:	4a09      	ldr	r2, [pc, #36]	; (8002ab8 <HAL_RCC_ClockConfig+0x1cc>)
 8002a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a96:	4b09      	ldr	r3, [pc, #36]	; (8002abc <HAL_RCC_ClockConfig+0x1d0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe fc5e 	bl	800135c <HAL_InitTick>

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40022000 	.word	0x40022000
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	08004b38 	.word	0x08004b38
 8002ab8:	20000010 	.word	0x20000010
 8002abc:	20000014 	.word	0x20000014

08002ac0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac0:	b490      	push	{r4, r7}
 8002ac2:	b08a      	sub	sp, #40	; 0x28
 8002ac4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ac6:	4b2a      	ldr	r3, [pc, #168]	; (8002b70 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ac8:	1d3c      	adds	r4, r7, #4
 8002aca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002acc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ad0:	4b28      	ldr	r3, [pc, #160]	; (8002b74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	2300      	movs	r3, #0
 8002adc:	61bb      	str	r3, [r7, #24]
 8002ade:	2300      	movs	r3, #0
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002aea:	4b23      	ldr	r3, [pc, #140]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f003 030c 	and.w	r3, r3, #12
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d002      	beq.n	8002b00 <HAL_RCC_GetSysClockFreq+0x40>
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d003      	beq.n	8002b06 <HAL_RCC_GetSysClockFreq+0x46>
 8002afe:	e02d      	b.n	8002b5c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b00:	4b1e      	ldr	r3, [pc, #120]	; (8002b7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b02:	623b      	str	r3, [r7, #32]
      break;
 8002b04:	e02d      	b.n	8002b62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	0c9b      	lsrs	r3, r3, #18
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b12:	4413      	add	r3, r2
 8002b14:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b18:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d013      	beq.n	8002b4c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b24:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	0c5b      	lsrs	r3, r3, #17
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b32:	4413      	add	r3, r2
 8002b34:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b38:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	4a0f      	ldr	r2, [pc, #60]	; (8002b7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b3e:	fb02 f203 	mul.w	r2, r2, r3
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4a:	e004      	b.n	8002b56 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	4a0c      	ldr	r2, [pc, #48]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b50:	fb02 f303 	mul.w	r3, r2, r3
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	623b      	str	r3, [r7, #32]
      break;
 8002b5a:	e002      	b.n	8002b62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b5c:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b5e:	623b      	str	r3, [r7, #32]
      break;
 8002b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b62:	6a3b      	ldr	r3, [r7, #32]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3728      	adds	r7, #40	; 0x28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc90      	pop	{r4, r7}
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	080034dc 	.word	0x080034dc
 8002b74:	080034ec 	.word	0x080034ec
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	007a1200 	.word	0x007a1200
 8002b80:	003d0900 	.word	0x003d0900

08002b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b88:	4b02      	ldr	r3, [pc, #8]	; (8002b94 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr
 8002b94:	20000010 	.word	0x20000010

08002b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b9c:	f7ff fff2 	bl	8002b84 <HAL_RCC_GetHCLKFreq>
 8002ba0:	4601      	mov	r1, r0
 8002ba2:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	0a1b      	lsrs	r3, r3, #8
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	4a03      	ldr	r2, [pc, #12]	; (8002bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bae:	5cd3      	ldrb	r3, [r2, r3]
 8002bb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	08004b48 	.word	0x08004b48

08002bc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bc8:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <RCC_Delay+0x34>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a0a      	ldr	r2, [pc, #40]	; (8002bf8 <RCC_Delay+0x38>)
 8002bce:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd2:	0a5b      	lsrs	r3, r3, #9
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	fb02 f303 	mul.w	r3, r2, r3
 8002bda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bdc:	bf00      	nop
  }
  while (Delay --);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1e5a      	subs	r2, r3, #1
 8002be2:	60fa      	str	r2, [r7, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1f9      	bne.n	8002bdc <RCC_Delay+0x1c>
}
 8002be8:	bf00      	nop
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	20000010 	.word	0x20000010
 8002bf8:	10624dd3 	.word	0x10624dd3

08002bfc <__errno>:
 8002bfc:	4b01      	ldr	r3, [pc, #4]	; (8002c04 <__errno+0x8>)
 8002bfe:	6818      	ldr	r0, [r3, #0]
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	2000001c 	.word	0x2000001c

08002c08 <__libc_init_array>:
 8002c08:	b570      	push	{r4, r5, r6, lr}
 8002c0a:	2500      	movs	r5, #0
 8002c0c:	4e0c      	ldr	r6, [pc, #48]	; (8002c40 <__libc_init_array+0x38>)
 8002c0e:	4c0d      	ldr	r4, [pc, #52]	; (8002c44 <__libc_init_array+0x3c>)
 8002c10:	1ba4      	subs	r4, r4, r6
 8002c12:	10a4      	asrs	r4, r4, #2
 8002c14:	42a5      	cmp	r5, r4
 8002c16:	d109      	bne.n	8002c2c <__libc_init_array+0x24>
 8002c18:	f000 fc34 	bl	8003484 <_init>
 8002c1c:	2500      	movs	r5, #0
 8002c1e:	4e0a      	ldr	r6, [pc, #40]	; (8002c48 <__libc_init_array+0x40>)
 8002c20:	4c0a      	ldr	r4, [pc, #40]	; (8002c4c <__libc_init_array+0x44>)
 8002c22:	1ba4      	subs	r4, r4, r6
 8002c24:	10a4      	asrs	r4, r4, #2
 8002c26:	42a5      	cmp	r5, r4
 8002c28:	d105      	bne.n	8002c36 <__libc_init_array+0x2e>
 8002c2a:	bd70      	pop	{r4, r5, r6, pc}
 8002c2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c30:	4798      	blx	r3
 8002c32:	3501      	adds	r5, #1
 8002c34:	e7ee      	b.n	8002c14 <__libc_init_array+0xc>
 8002c36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c3a:	4798      	blx	r3
 8002c3c:	3501      	adds	r5, #1
 8002c3e:	e7f2      	b.n	8002c26 <__libc_init_array+0x1e>
 8002c40:	08004b84 	.word	0x08004b84
 8002c44:	08004b84 	.word	0x08004b84
 8002c48:	08004b84 	.word	0x08004b84
 8002c4c:	08004b88 	.word	0x08004b88

08002c50 <memset>:
 8002c50:	4603      	mov	r3, r0
 8002c52:	4402      	add	r2, r0
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d100      	bne.n	8002c5a <memset+0xa>
 8002c58:	4770      	bx	lr
 8002c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c5e:	e7f9      	b.n	8002c54 <memset+0x4>

08002c60 <siprintf>:
 8002c60:	b40e      	push	{r1, r2, r3}
 8002c62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c66:	b500      	push	{lr}
 8002c68:	b09c      	sub	sp, #112	; 0x70
 8002c6a:	ab1d      	add	r3, sp, #116	; 0x74
 8002c6c:	9002      	str	r0, [sp, #8]
 8002c6e:	9006      	str	r0, [sp, #24]
 8002c70:	9107      	str	r1, [sp, #28]
 8002c72:	9104      	str	r1, [sp, #16]
 8002c74:	4808      	ldr	r0, [pc, #32]	; (8002c98 <siprintf+0x38>)
 8002c76:	4909      	ldr	r1, [pc, #36]	; (8002c9c <siprintf+0x3c>)
 8002c78:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c7c:	9105      	str	r1, [sp, #20]
 8002c7e:	6800      	ldr	r0, [r0, #0]
 8002c80:	a902      	add	r1, sp, #8
 8002c82:	9301      	str	r3, [sp, #4]
 8002c84:	f000 f866 	bl	8002d54 <_svfiprintf_r>
 8002c88:	2200      	movs	r2, #0
 8002c8a:	9b02      	ldr	r3, [sp, #8]
 8002c8c:	701a      	strb	r2, [r3, #0]
 8002c8e:	b01c      	add	sp, #112	; 0x70
 8002c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c94:	b003      	add	sp, #12
 8002c96:	4770      	bx	lr
 8002c98:	2000001c 	.word	0x2000001c
 8002c9c:	ffff0208 	.word	0xffff0208

08002ca0 <__ssputs_r>:
 8002ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ca4:	688e      	ldr	r6, [r1, #8]
 8002ca6:	4682      	mov	sl, r0
 8002ca8:	429e      	cmp	r6, r3
 8002caa:	460c      	mov	r4, r1
 8002cac:	4690      	mov	r8, r2
 8002cae:	4699      	mov	r9, r3
 8002cb0:	d837      	bhi.n	8002d22 <__ssputs_r+0x82>
 8002cb2:	898a      	ldrh	r2, [r1, #12]
 8002cb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002cb8:	d031      	beq.n	8002d1e <__ssputs_r+0x7e>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	6825      	ldr	r5, [r4, #0]
 8002cbe:	6909      	ldr	r1, [r1, #16]
 8002cc0:	1a6f      	subs	r7, r5, r1
 8002cc2:	6965      	ldr	r5, [r4, #20]
 8002cc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002cc8:	fb95 f5f3 	sdiv	r5, r5, r3
 8002ccc:	f109 0301 	add.w	r3, r9, #1
 8002cd0:	443b      	add	r3, r7
 8002cd2:	429d      	cmp	r5, r3
 8002cd4:	bf38      	it	cc
 8002cd6:	461d      	movcc	r5, r3
 8002cd8:	0553      	lsls	r3, r2, #21
 8002cda:	d530      	bpl.n	8002d3e <__ssputs_r+0x9e>
 8002cdc:	4629      	mov	r1, r5
 8002cde:	f000 fb37 	bl	8003350 <_malloc_r>
 8002ce2:	4606      	mov	r6, r0
 8002ce4:	b950      	cbnz	r0, 8002cfc <__ssputs_r+0x5c>
 8002ce6:	230c      	movs	r3, #12
 8002ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cec:	f8ca 3000 	str.w	r3, [sl]
 8002cf0:	89a3      	ldrh	r3, [r4, #12]
 8002cf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cf6:	81a3      	strh	r3, [r4, #12]
 8002cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cfc:	463a      	mov	r2, r7
 8002cfe:	6921      	ldr	r1, [r4, #16]
 8002d00:	f000 fab6 	bl	8003270 <memcpy>
 8002d04:	89a3      	ldrh	r3, [r4, #12]
 8002d06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d0e:	81a3      	strh	r3, [r4, #12]
 8002d10:	6126      	str	r6, [r4, #16]
 8002d12:	443e      	add	r6, r7
 8002d14:	6026      	str	r6, [r4, #0]
 8002d16:	464e      	mov	r6, r9
 8002d18:	6165      	str	r5, [r4, #20]
 8002d1a:	1bed      	subs	r5, r5, r7
 8002d1c:	60a5      	str	r5, [r4, #8]
 8002d1e:	454e      	cmp	r6, r9
 8002d20:	d900      	bls.n	8002d24 <__ssputs_r+0x84>
 8002d22:	464e      	mov	r6, r9
 8002d24:	4632      	mov	r2, r6
 8002d26:	4641      	mov	r1, r8
 8002d28:	6820      	ldr	r0, [r4, #0]
 8002d2a:	f000 faac 	bl	8003286 <memmove>
 8002d2e:	68a3      	ldr	r3, [r4, #8]
 8002d30:	2000      	movs	r0, #0
 8002d32:	1b9b      	subs	r3, r3, r6
 8002d34:	60a3      	str	r3, [r4, #8]
 8002d36:	6823      	ldr	r3, [r4, #0]
 8002d38:	441e      	add	r6, r3
 8002d3a:	6026      	str	r6, [r4, #0]
 8002d3c:	e7dc      	b.n	8002cf8 <__ssputs_r+0x58>
 8002d3e:	462a      	mov	r2, r5
 8002d40:	f000 fb60 	bl	8003404 <_realloc_r>
 8002d44:	4606      	mov	r6, r0
 8002d46:	2800      	cmp	r0, #0
 8002d48:	d1e2      	bne.n	8002d10 <__ssputs_r+0x70>
 8002d4a:	6921      	ldr	r1, [r4, #16]
 8002d4c:	4650      	mov	r0, sl
 8002d4e:	f000 fab3 	bl	80032b8 <_free_r>
 8002d52:	e7c8      	b.n	8002ce6 <__ssputs_r+0x46>

08002d54 <_svfiprintf_r>:
 8002d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d58:	461d      	mov	r5, r3
 8002d5a:	898b      	ldrh	r3, [r1, #12]
 8002d5c:	b09d      	sub	sp, #116	; 0x74
 8002d5e:	061f      	lsls	r7, r3, #24
 8002d60:	4680      	mov	r8, r0
 8002d62:	460c      	mov	r4, r1
 8002d64:	4616      	mov	r6, r2
 8002d66:	d50f      	bpl.n	8002d88 <_svfiprintf_r+0x34>
 8002d68:	690b      	ldr	r3, [r1, #16]
 8002d6a:	b96b      	cbnz	r3, 8002d88 <_svfiprintf_r+0x34>
 8002d6c:	2140      	movs	r1, #64	; 0x40
 8002d6e:	f000 faef 	bl	8003350 <_malloc_r>
 8002d72:	6020      	str	r0, [r4, #0]
 8002d74:	6120      	str	r0, [r4, #16]
 8002d76:	b928      	cbnz	r0, 8002d84 <_svfiprintf_r+0x30>
 8002d78:	230c      	movs	r3, #12
 8002d7a:	f8c8 3000 	str.w	r3, [r8]
 8002d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8002d82:	e0c8      	b.n	8002f16 <_svfiprintf_r+0x1c2>
 8002d84:	2340      	movs	r3, #64	; 0x40
 8002d86:	6163      	str	r3, [r4, #20]
 8002d88:	2300      	movs	r3, #0
 8002d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8002d8c:	2320      	movs	r3, #32
 8002d8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d92:	2330      	movs	r3, #48	; 0x30
 8002d94:	f04f 0b01 	mov.w	fp, #1
 8002d98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d9c:	9503      	str	r5, [sp, #12]
 8002d9e:	4637      	mov	r7, r6
 8002da0:	463d      	mov	r5, r7
 8002da2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002da6:	b10b      	cbz	r3, 8002dac <_svfiprintf_r+0x58>
 8002da8:	2b25      	cmp	r3, #37	; 0x25
 8002daa:	d13e      	bne.n	8002e2a <_svfiprintf_r+0xd6>
 8002dac:	ebb7 0a06 	subs.w	sl, r7, r6
 8002db0:	d00b      	beq.n	8002dca <_svfiprintf_r+0x76>
 8002db2:	4653      	mov	r3, sl
 8002db4:	4632      	mov	r2, r6
 8002db6:	4621      	mov	r1, r4
 8002db8:	4640      	mov	r0, r8
 8002dba:	f7ff ff71 	bl	8002ca0 <__ssputs_r>
 8002dbe:	3001      	adds	r0, #1
 8002dc0:	f000 80a4 	beq.w	8002f0c <_svfiprintf_r+0x1b8>
 8002dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dc6:	4453      	add	r3, sl
 8002dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8002dca:	783b      	ldrb	r3, [r7, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 809d 	beq.w	8002f0c <_svfiprintf_r+0x1b8>
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ddc:	9304      	str	r3, [sp, #16]
 8002dde:	9307      	str	r3, [sp, #28]
 8002de0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002de4:	931a      	str	r3, [sp, #104]	; 0x68
 8002de6:	462f      	mov	r7, r5
 8002de8:	2205      	movs	r2, #5
 8002dea:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002dee:	4850      	ldr	r0, [pc, #320]	; (8002f30 <_svfiprintf_r+0x1dc>)
 8002df0:	f000 fa30 	bl	8003254 <memchr>
 8002df4:	9b04      	ldr	r3, [sp, #16]
 8002df6:	b9d0      	cbnz	r0, 8002e2e <_svfiprintf_r+0xda>
 8002df8:	06d9      	lsls	r1, r3, #27
 8002dfa:	bf44      	itt	mi
 8002dfc:	2220      	movmi	r2, #32
 8002dfe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002e02:	071a      	lsls	r2, r3, #28
 8002e04:	bf44      	itt	mi
 8002e06:	222b      	movmi	r2, #43	; 0x2b
 8002e08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002e0c:	782a      	ldrb	r2, [r5, #0]
 8002e0e:	2a2a      	cmp	r2, #42	; 0x2a
 8002e10:	d015      	beq.n	8002e3e <_svfiprintf_r+0xea>
 8002e12:	462f      	mov	r7, r5
 8002e14:	2000      	movs	r0, #0
 8002e16:	250a      	movs	r5, #10
 8002e18:	9a07      	ldr	r2, [sp, #28]
 8002e1a:	4639      	mov	r1, r7
 8002e1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e20:	3b30      	subs	r3, #48	; 0x30
 8002e22:	2b09      	cmp	r3, #9
 8002e24:	d94d      	bls.n	8002ec2 <_svfiprintf_r+0x16e>
 8002e26:	b1b8      	cbz	r0, 8002e58 <_svfiprintf_r+0x104>
 8002e28:	e00f      	b.n	8002e4a <_svfiprintf_r+0xf6>
 8002e2a:	462f      	mov	r7, r5
 8002e2c:	e7b8      	b.n	8002da0 <_svfiprintf_r+0x4c>
 8002e2e:	4a40      	ldr	r2, [pc, #256]	; (8002f30 <_svfiprintf_r+0x1dc>)
 8002e30:	463d      	mov	r5, r7
 8002e32:	1a80      	subs	r0, r0, r2
 8002e34:	fa0b f000 	lsl.w	r0, fp, r0
 8002e38:	4318      	orrs	r0, r3
 8002e3a:	9004      	str	r0, [sp, #16]
 8002e3c:	e7d3      	b.n	8002de6 <_svfiprintf_r+0x92>
 8002e3e:	9a03      	ldr	r2, [sp, #12]
 8002e40:	1d11      	adds	r1, r2, #4
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	9103      	str	r1, [sp, #12]
 8002e46:	2a00      	cmp	r2, #0
 8002e48:	db01      	blt.n	8002e4e <_svfiprintf_r+0xfa>
 8002e4a:	9207      	str	r2, [sp, #28]
 8002e4c:	e004      	b.n	8002e58 <_svfiprintf_r+0x104>
 8002e4e:	4252      	negs	r2, r2
 8002e50:	f043 0302 	orr.w	r3, r3, #2
 8002e54:	9207      	str	r2, [sp, #28]
 8002e56:	9304      	str	r3, [sp, #16]
 8002e58:	783b      	ldrb	r3, [r7, #0]
 8002e5a:	2b2e      	cmp	r3, #46	; 0x2e
 8002e5c:	d10c      	bne.n	8002e78 <_svfiprintf_r+0x124>
 8002e5e:	787b      	ldrb	r3, [r7, #1]
 8002e60:	2b2a      	cmp	r3, #42	; 0x2a
 8002e62:	d133      	bne.n	8002ecc <_svfiprintf_r+0x178>
 8002e64:	9b03      	ldr	r3, [sp, #12]
 8002e66:	3702      	adds	r7, #2
 8002e68:	1d1a      	adds	r2, r3, #4
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	9203      	str	r2, [sp, #12]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	bfb8      	it	lt
 8002e72:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e76:	9305      	str	r3, [sp, #20]
 8002e78:	4d2e      	ldr	r5, [pc, #184]	; (8002f34 <_svfiprintf_r+0x1e0>)
 8002e7a:	2203      	movs	r2, #3
 8002e7c:	7839      	ldrb	r1, [r7, #0]
 8002e7e:	4628      	mov	r0, r5
 8002e80:	f000 f9e8 	bl	8003254 <memchr>
 8002e84:	b138      	cbz	r0, 8002e96 <_svfiprintf_r+0x142>
 8002e86:	2340      	movs	r3, #64	; 0x40
 8002e88:	1b40      	subs	r0, r0, r5
 8002e8a:	fa03 f000 	lsl.w	r0, r3, r0
 8002e8e:	9b04      	ldr	r3, [sp, #16]
 8002e90:	3701      	adds	r7, #1
 8002e92:	4303      	orrs	r3, r0
 8002e94:	9304      	str	r3, [sp, #16]
 8002e96:	7839      	ldrb	r1, [r7, #0]
 8002e98:	2206      	movs	r2, #6
 8002e9a:	4827      	ldr	r0, [pc, #156]	; (8002f38 <_svfiprintf_r+0x1e4>)
 8002e9c:	1c7e      	adds	r6, r7, #1
 8002e9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ea2:	f000 f9d7 	bl	8003254 <memchr>
 8002ea6:	2800      	cmp	r0, #0
 8002ea8:	d038      	beq.n	8002f1c <_svfiprintf_r+0x1c8>
 8002eaa:	4b24      	ldr	r3, [pc, #144]	; (8002f3c <_svfiprintf_r+0x1e8>)
 8002eac:	bb13      	cbnz	r3, 8002ef4 <_svfiprintf_r+0x1a0>
 8002eae:	9b03      	ldr	r3, [sp, #12]
 8002eb0:	3307      	adds	r3, #7
 8002eb2:	f023 0307 	bic.w	r3, r3, #7
 8002eb6:	3308      	adds	r3, #8
 8002eb8:	9303      	str	r3, [sp, #12]
 8002eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ebc:	444b      	add	r3, r9
 8002ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8002ec0:	e76d      	b.n	8002d9e <_svfiprintf_r+0x4a>
 8002ec2:	fb05 3202 	mla	r2, r5, r2, r3
 8002ec6:	2001      	movs	r0, #1
 8002ec8:	460f      	mov	r7, r1
 8002eca:	e7a6      	b.n	8002e1a <_svfiprintf_r+0xc6>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	250a      	movs	r5, #10
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	3701      	adds	r7, #1
 8002ed4:	9305      	str	r3, [sp, #20]
 8002ed6:	4638      	mov	r0, r7
 8002ed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002edc:	3a30      	subs	r2, #48	; 0x30
 8002ede:	2a09      	cmp	r2, #9
 8002ee0:	d903      	bls.n	8002eea <_svfiprintf_r+0x196>
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0c8      	beq.n	8002e78 <_svfiprintf_r+0x124>
 8002ee6:	9105      	str	r1, [sp, #20]
 8002ee8:	e7c6      	b.n	8002e78 <_svfiprintf_r+0x124>
 8002eea:	fb05 2101 	mla	r1, r5, r1, r2
 8002eee:	2301      	movs	r3, #1
 8002ef0:	4607      	mov	r7, r0
 8002ef2:	e7f0      	b.n	8002ed6 <_svfiprintf_r+0x182>
 8002ef4:	ab03      	add	r3, sp, #12
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	4622      	mov	r2, r4
 8002efa:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <_svfiprintf_r+0x1ec>)
 8002efc:	a904      	add	r1, sp, #16
 8002efe:	4640      	mov	r0, r8
 8002f00:	f3af 8000 	nop.w
 8002f04:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002f08:	4681      	mov	r9, r0
 8002f0a:	d1d6      	bne.n	8002eba <_svfiprintf_r+0x166>
 8002f0c:	89a3      	ldrh	r3, [r4, #12]
 8002f0e:	065b      	lsls	r3, r3, #25
 8002f10:	f53f af35 	bmi.w	8002d7e <_svfiprintf_r+0x2a>
 8002f14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f16:	b01d      	add	sp, #116	; 0x74
 8002f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f1c:	ab03      	add	r3, sp, #12
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	4622      	mov	r2, r4
 8002f22:	4b07      	ldr	r3, [pc, #28]	; (8002f40 <_svfiprintf_r+0x1ec>)
 8002f24:	a904      	add	r1, sp, #16
 8002f26:	4640      	mov	r0, r8
 8002f28:	f000 f882 	bl	8003030 <_printf_i>
 8002f2c:	e7ea      	b.n	8002f04 <_svfiprintf_r+0x1b0>
 8002f2e:	bf00      	nop
 8002f30:	08004b50 	.word	0x08004b50
 8002f34:	08004b56 	.word	0x08004b56
 8002f38:	08004b5a 	.word	0x08004b5a
 8002f3c:	00000000 	.word	0x00000000
 8002f40:	08002ca1 	.word	0x08002ca1

08002f44 <_printf_common>:
 8002f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f48:	4691      	mov	r9, r2
 8002f4a:	461f      	mov	r7, r3
 8002f4c:	688a      	ldr	r2, [r1, #8]
 8002f4e:	690b      	ldr	r3, [r1, #16]
 8002f50:	4606      	mov	r6, r0
 8002f52:	4293      	cmp	r3, r2
 8002f54:	bfb8      	it	lt
 8002f56:	4613      	movlt	r3, r2
 8002f58:	f8c9 3000 	str.w	r3, [r9]
 8002f5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f60:	460c      	mov	r4, r1
 8002f62:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f66:	b112      	cbz	r2, 8002f6e <_printf_common+0x2a>
 8002f68:	3301      	adds	r3, #1
 8002f6a:	f8c9 3000 	str.w	r3, [r9]
 8002f6e:	6823      	ldr	r3, [r4, #0]
 8002f70:	0699      	lsls	r1, r3, #26
 8002f72:	bf42      	ittt	mi
 8002f74:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002f78:	3302      	addmi	r3, #2
 8002f7a:	f8c9 3000 	strmi.w	r3, [r9]
 8002f7e:	6825      	ldr	r5, [r4, #0]
 8002f80:	f015 0506 	ands.w	r5, r5, #6
 8002f84:	d107      	bne.n	8002f96 <_printf_common+0x52>
 8002f86:	f104 0a19 	add.w	sl, r4, #25
 8002f8a:	68e3      	ldr	r3, [r4, #12]
 8002f8c:	f8d9 2000 	ldr.w	r2, [r9]
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	42ab      	cmp	r3, r5
 8002f94:	dc29      	bgt.n	8002fea <_printf_common+0xa6>
 8002f96:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002f9a:	6822      	ldr	r2, [r4, #0]
 8002f9c:	3300      	adds	r3, #0
 8002f9e:	bf18      	it	ne
 8002fa0:	2301      	movne	r3, #1
 8002fa2:	0692      	lsls	r2, r2, #26
 8002fa4:	d42e      	bmi.n	8003004 <_printf_common+0xc0>
 8002fa6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002faa:	4639      	mov	r1, r7
 8002fac:	4630      	mov	r0, r6
 8002fae:	47c0      	blx	r8
 8002fb0:	3001      	adds	r0, #1
 8002fb2:	d021      	beq.n	8002ff8 <_printf_common+0xb4>
 8002fb4:	6823      	ldr	r3, [r4, #0]
 8002fb6:	68e5      	ldr	r5, [r4, #12]
 8002fb8:	f003 0306 	and.w	r3, r3, #6
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	bf18      	it	ne
 8002fc0:	2500      	movne	r5, #0
 8002fc2:	f8d9 2000 	ldr.w	r2, [r9]
 8002fc6:	f04f 0900 	mov.w	r9, #0
 8002fca:	bf08      	it	eq
 8002fcc:	1aad      	subeq	r5, r5, r2
 8002fce:	68a3      	ldr	r3, [r4, #8]
 8002fd0:	6922      	ldr	r2, [r4, #16]
 8002fd2:	bf08      	it	eq
 8002fd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	bfc4      	itt	gt
 8002fdc:	1a9b      	subgt	r3, r3, r2
 8002fde:	18ed      	addgt	r5, r5, r3
 8002fe0:	341a      	adds	r4, #26
 8002fe2:	454d      	cmp	r5, r9
 8002fe4:	d11a      	bne.n	800301c <_printf_common+0xd8>
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	e008      	b.n	8002ffc <_printf_common+0xb8>
 8002fea:	2301      	movs	r3, #1
 8002fec:	4652      	mov	r2, sl
 8002fee:	4639      	mov	r1, r7
 8002ff0:	4630      	mov	r0, r6
 8002ff2:	47c0      	blx	r8
 8002ff4:	3001      	adds	r0, #1
 8002ff6:	d103      	bne.n	8003000 <_printf_common+0xbc>
 8002ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003000:	3501      	adds	r5, #1
 8003002:	e7c2      	b.n	8002f8a <_printf_common+0x46>
 8003004:	2030      	movs	r0, #48	; 0x30
 8003006:	18e1      	adds	r1, r4, r3
 8003008:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003012:	4422      	add	r2, r4
 8003014:	3302      	adds	r3, #2
 8003016:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800301a:	e7c4      	b.n	8002fa6 <_printf_common+0x62>
 800301c:	2301      	movs	r3, #1
 800301e:	4622      	mov	r2, r4
 8003020:	4639      	mov	r1, r7
 8003022:	4630      	mov	r0, r6
 8003024:	47c0      	blx	r8
 8003026:	3001      	adds	r0, #1
 8003028:	d0e6      	beq.n	8002ff8 <_printf_common+0xb4>
 800302a:	f109 0901 	add.w	r9, r9, #1
 800302e:	e7d8      	b.n	8002fe2 <_printf_common+0x9e>

08003030 <_printf_i>:
 8003030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003034:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003038:	460c      	mov	r4, r1
 800303a:	7e09      	ldrb	r1, [r1, #24]
 800303c:	b085      	sub	sp, #20
 800303e:	296e      	cmp	r1, #110	; 0x6e
 8003040:	4617      	mov	r7, r2
 8003042:	4606      	mov	r6, r0
 8003044:	4698      	mov	r8, r3
 8003046:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003048:	f000 80b3 	beq.w	80031b2 <_printf_i+0x182>
 800304c:	d822      	bhi.n	8003094 <_printf_i+0x64>
 800304e:	2963      	cmp	r1, #99	; 0x63
 8003050:	d036      	beq.n	80030c0 <_printf_i+0x90>
 8003052:	d80a      	bhi.n	800306a <_printf_i+0x3a>
 8003054:	2900      	cmp	r1, #0
 8003056:	f000 80b9 	beq.w	80031cc <_printf_i+0x19c>
 800305a:	2958      	cmp	r1, #88	; 0x58
 800305c:	f000 8083 	beq.w	8003166 <_printf_i+0x136>
 8003060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003064:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003068:	e032      	b.n	80030d0 <_printf_i+0xa0>
 800306a:	2964      	cmp	r1, #100	; 0x64
 800306c:	d001      	beq.n	8003072 <_printf_i+0x42>
 800306e:	2969      	cmp	r1, #105	; 0x69
 8003070:	d1f6      	bne.n	8003060 <_printf_i+0x30>
 8003072:	6820      	ldr	r0, [r4, #0]
 8003074:	6813      	ldr	r3, [r2, #0]
 8003076:	0605      	lsls	r5, r0, #24
 8003078:	f103 0104 	add.w	r1, r3, #4
 800307c:	d52a      	bpl.n	80030d4 <_printf_i+0xa4>
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6011      	str	r1, [r2, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	da03      	bge.n	800308e <_printf_i+0x5e>
 8003086:	222d      	movs	r2, #45	; 0x2d
 8003088:	425b      	negs	r3, r3
 800308a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800308e:	486f      	ldr	r0, [pc, #444]	; (800324c <_printf_i+0x21c>)
 8003090:	220a      	movs	r2, #10
 8003092:	e039      	b.n	8003108 <_printf_i+0xd8>
 8003094:	2973      	cmp	r1, #115	; 0x73
 8003096:	f000 809d 	beq.w	80031d4 <_printf_i+0x1a4>
 800309a:	d808      	bhi.n	80030ae <_printf_i+0x7e>
 800309c:	296f      	cmp	r1, #111	; 0x6f
 800309e:	d020      	beq.n	80030e2 <_printf_i+0xb2>
 80030a0:	2970      	cmp	r1, #112	; 0x70
 80030a2:	d1dd      	bne.n	8003060 <_printf_i+0x30>
 80030a4:	6823      	ldr	r3, [r4, #0]
 80030a6:	f043 0320 	orr.w	r3, r3, #32
 80030aa:	6023      	str	r3, [r4, #0]
 80030ac:	e003      	b.n	80030b6 <_printf_i+0x86>
 80030ae:	2975      	cmp	r1, #117	; 0x75
 80030b0:	d017      	beq.n	80030e2 <_printf_i+0xb2>
 80030b2:	2978      	cmp	r1, #120	; 0x78
 80030b4:	d1d4      	bne.n	8003060 <_printf_i+0x30>
 80030b6:	2378      	movs	r3, #120	; 0x78
 80030b8:	4865      	ldr	r0, [pc, #404]	; (8003250 <_printf_i+0x220>)
 80030ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80030be:	e055      	b.n	800316c <_printf_i+0x13c>
 80030c0:	6813      	ldr	r3, [r2, #0]
 80030c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030c6:	1d19      	adds	r1, r3, #4
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6011      	str	r1, [r2, #0]
 80030cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030d0:	2301      	movs	r3, #1
 80030d2:	e08c      	b.n	80031ee <_printf_i+0x1be>
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80030da:	6011      	str	r1, [r2, #0]
 80030dc:	bf18      	it	ne
 80030de:	b21b      	sxthne	r3, r3
 80030e0:	e7cf      	b.n	8003082 <_printf_i+0x52>
 80030e2:	6813      	ldr	r3, [r2, #0]
 80030e4:	6825      	ldr	r5, [r4, #0]
 80030e6:	1d18      	adds	r0, r3, #4
 80030e8:	6010      	str	r0, [r2, #0]
 80030ea:	0628      	lsls	r0, r5, #24
 80030ec:	d501      	bpl.n	80030f2 <_printf_i+0xc2>
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	e002      	b.n	80030f8 <_printf_i+0xc8>
 80030f2:	0668      	lsls	r0, r5, #25
 80030f4:	d5fb      	bpl.n	80030ee <_printf_i+0xbe>
 80030f6:	881b      	ldrh	r3, [r3, #0]
 80030f8:	296f      	cmp	r1, #111	; 0x6f
 80030fa:	bf14      	ite	ne
 80030fc:	220a      	movne	r2, #10
 80030fe:	2208      	moveq	r2, #8
 8003100:	4852      	ldr	r0, [pc, #328]	; (800324c <_printf_i+0x21c>)
 8003102:	2100      	movs	r1, #0
 8003104:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003108:	6865      	ldr	r5, [r4, #4]
 800310a:	2d00      	cmp	r5, #0
 800310c:	60a5      	str	r5, [r4, #8]
 800310e:	f2c0 8095 	blt.w	800323c <_printf_i+0x20c>
 8003112:	6821      	ldr	r1, [r4, #0]
 8003114:	f021 0104 	bic.w	r1, r1, #4
 8003118:	6021      	str	r1, [r4, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d13d      	bne.n	800319a <_printf_i+0x16a>
 800311e:	2d00      	cmp	r5, #0
 8003120:	f040 808e 	bne.w	8003240 <_printf_i+0x210>
 8003124:	4665      	mov	r5, ip
 8003126:	2a08      	cmp	r2, #8
 8003128:	d10b      	bne.n	8003142 <_printf_i+0x112>
 800312a:	6823      	ldr	r3, [r4, #0]
 800312c:	07db      	lsls	r3, r3, #31
 800312e:	d508      	bpl.n	8003142 <_printf_i+0x112>
 8003130:	6923      	ldr	r3, [r4, #16]
 8003132:	6862      	ldr	r2, [r4, #4]
 8003134:	429a      	cmp	r2, r3
 8003136:	bfde      	ittt	le
 8003138:	2330      	movle	r3, #48	; 0x30
 800313a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800313e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003142:	ebac 0305 	sub.w	r3, ip, r5
 8003146:	6123      	str	r3, [r4, #16]
 8003148:	f8cd 8000 	str.w	r8, [sp]
 800314c:	463b      	mov	r3, r7
 800314e:	aa03      	add	r2, sp, #12
 8003150:	4621      	mov	r1, r4
 8003152:	4630      	mov	r0, r6
 8003154:	f7ff fef6 	bl	8002f44 <_printf_common>
 8003158:	3001      	adds	r0, #1
 800315a:	d14d      	bne.n	80031f8 <_printf_i+0x1c8>
 800315c:	f04f 30ff 	mov.w	r0, #4294967295
 8003160:	b005      	add	sp, #20
 8003162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003166:	4839      	ldr	r0, [pc, #228]	; (800324c <_printf_i+0x21c>)
 8003168:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800316c:	6813      	ldr	r3, [r2, #0]
 800316e:	6821      	ldr	r1, [r4, #0]
 8003170:	1d1d      	adds	r5, r3, #4
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6015      	str	r5, [r2, #0]
 8003176:	060a      	lsls	r2, r1, #24
 8003178:	d50b      	bpl.n	8003192 <_printf_i+0x162>
 800317a:	07ca      	lsls	r2, r1, #31
 800317c:	bf44      	itt	mi
 800317e:	f041 0120 	orrmi.w	r1, r1, #32
 8003182:	6021      	strmi	r1, [r4, #0]
 8003184:	b91b      	cbnz	r3, 800318e <_printf_i+0x15e>
 8003186:	6822      	ldr	r2, [r4, #0]
 8003188:	f022 0220 	bic.w	r2, r2, #32
 800318c:	6022      	str	r2, [r4, #0]
 800318e:	2210      	movs	r2, #16
 8003190:	e7b7      	b.n	8003102 <_printf_i+0xd2>
 8003192:	064d      	lsls	r5, r1, #25
 8003194:	bf48      	it	mi
 8003196:	b29b      	uxthmi	r3, r3
 8003198:	e7ef      	b.n	800317a <_printf_i+0x14a>
 800319a:	4665      	mov	r5, ip
 800319c:	fbb3 f1f2 	udiv	r1, r3, r2
 80031a0:	fb02 3311 	mls	r3, r2, r1, r3
 80031a4:	5cc3      	ldrb	r3, [r0, r3]
 80031a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80031aa:	460b      	mov	r3, r1
 80031ac:	2900      	cmp	r1, #0
 80031ae:	d1f5      	bne.n	800319c <_printf_i+0x16c>
 80031b0:	e7b9      	b.n	8003126 <_printf_i+0xf6>
 80031b2:	6813      	ldr	r3, [r2, #0]
 80031b4:	6825      	ldr	r5, [r4, #0]
 80031b6:	1d18      	adds	r0, r3, #4
 80031b8:	6961      	ldr	r1, [r4, #20]
 80031ba:	6010      	str	r0, [r2, #0]
 80031bc:	0628      	lsls	r0, r5, #24
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	d501      	bpl.n	80031c6 <_printf_i+0x196>
 80031c2:	6019      	str	r1, [r3, #0]
 80031c4:	e002      	b.n	80031cc <_printf_i+0x19c>
 80031c6:	066a      	lsls	r2, r5, #25
 80031c8:	d5fb      	bpl.n	80031c2 <_printf_i+0x192>
 80031ca:	8019      	strh	r1, [r3, #0]
 80031cc:	2300      	movs	r3, #0
 80031ce:	4665      	mov	r5, ip
 80031d0:	6123      	str	r3, [r4, #16]
 80031d2:	e7b9      	b.n	8003148 <_printf_i+0x118>
 80031d4:	6813      	ldr	r3, [r2, #0]
 80031d6:	1d19      	adds	r1, r3, #4
 80031d8:	6011      	str	r1, [r2, #0]
 80031da:	681d      	ldr	r5, [r3, #0]
 80031dc:	6862      	ldr	r2, [r4, #4]
 80031de:	2100      	movs	r1, #0
 80031e0:	4628      	mov	r0, r5
 80031e2:	f000 f837 	bl	8003254 <memchr>
 80031e6:	b108      	cbz	r0, 80031ec <_printf_i+0x1bc>
 80031e8:	1b40      	subs	r0, r0, r5
 80031ea:	6060      	str	r0, [r4, #4]
 80031ec:	6863      	ldr	r3, [r4, #4]
 80031ee:	6123      	str	r3, [r4, #16]
 80031f0:	2300      	movs	r3, #0
 80031f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031f6:	e7a7      	b.n	8003148 <_printf_i+0x118>
 80031f8:	6923      	ldr	r3, [r4, #16]
 80031fa:	462a      	mov	r2, r5
 80031fc:	4639      	mov	r1, r7
 80031fe:	4630      	mov	r0, r6
 8003200:	47c0      	blx	r8
 8003202:	3001      	adds	r0, #1
 8003204:	d0aa      	beq.n	800315c <_printf_i+0x12c>
 8003206:	6823      	ldr	r3, [r4, #0]
 8003208:	079b      	lsls	r3, r3, #30
 800320a:	d413      	bmi.n	8003234 <_printf_i+0x204>
 800320c:	68e0      	ldr	r0, [r4, #12]
 800320e:	9b03      	ldr	r3, [sp, #12]
 8003210:	4298      	cmp	r0, r3
 8003212:	bfb8      	it	lt
 8003214:	4618      	movlt	r0, r3
 8003216:	e7a3      	b.n	8003160 <_printf_i+0x130>
 8003218:	2301      	movs	r3, #1
 800321a:	464a      	mov	r2, r9
 800321c:	4639      	mov	r1, r7
 800321e:	4630      	mov	r0, r6
 8003220:	47c0      	blx	r8
 8003222:	3001      	adds	r0, #1
 8003224:	d09a      	beq.n	800315c <_printf_i+0x12c>
 8003226:	3501      	adds	r5, #1
 8003228:	68e3      	ldr	r3, [r4, #12]
 800322a:	9a03      	ldr	r2, [sp, #12]
 800322c:	1a9b      	subs	r3, r3, r2
 800322e:	42ab      	cmp	r3, r5
 8003230:	dcf2      	bgt.n	8003218 <_printf_i+0x1e8>
 8003232:	e7eb      	b.n	800320c <_printf_i+0x1dc>
 8003234:	2500      	movs	r5, #0
 8003236:	f104 0919 	add.w	r9, r4, #25
 800323a:	e7f5      	b.n	8003228 <_printf_i+0x1f8>
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1ac      	bne.n	800319a <_printf_i+0x16a>
 8003240:	7803      	ldrb	r3, [r0, #0]
 8003242:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003246:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800324a:	e76c      	b.n	8003126 <_printf_i+0xf6>
 800324c:	08004b61 	.word	0x08004b61
 8003250:	08004b72 	.word	0x08004b72

08003254 <memchr>:
 8003254:	b510      	push	{r4, lr}
 8003256:	b2c9      	uxtb	r1, r1
 8003258:	4402      	add	r2, r0
 800325a:	4290      	cmp	r0, r2
 800325c:	4603      	mov	r3, r0
 800325e:	d101      	bne.n	8003264 <memchr+0x10>
 8003260:	2300      	movs	r3, #0
 8003262:	e003      	b.n	800326c <memchr+0x18>
 8003264:	781c      	ldrb	r4, [r3, #0]
 8003266:	3001      	adds	r0, #1
 8003268:	428c      	cmp	r4, r1
 800326a:	d1f6      	bne.n	800325a <memchr+0x6>
 800326c:	4618      	mov	r0, r3
 800326e:	bd10      	pop	{r4, pc}

08003270 <memcpy>:
 8003270:	b510      	push	{r4, lr}
 8003272:	1e43      	subs	r3, r0, #1
 8003274:	440a      	add	r2, r1
 8003276:	4291      	cmp	r1, r2
 8003278:	d100      	bne.n	800327c <memcpy+0xc>
 800327a:	bd10      	pop	{r4, pc}
 800327c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003280:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003284:	e7f7      	b.n	8003276 <memcpy+0x6>

08003286 <memmove>:
 8003286:	4288      	cmp	r0, r1
 8003288:	b510      	push	{r4, lr}
 800328a:	eb01 0302 	add.w	r3, r1, r2
 800328e:	d807      	bhi.n	80032a0 <memmove+0x1a>
 8003290:	1e42      	subs	r2, r0, #1
 8003292:	4299      	cmp	r1, r3
 8003294:	d00a      	beq.n	80032ac <memmove+0x26>
 8003296:	f811 4b01 	ldrb.w	r4, [r1], #1
 800329a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800329e:	e7f8      	b.n	8003292 <memmove+0xc>
 80032a0:	4283      	cmp	r3, r0
 80032a2:	d9f5      	bls.n	8003290 <memmove+0xa>
 80032a4:	1881      	adds	r1, r0, r2
 80032a6:	1ad2      	subs	r2, r2, r3
 80032a8:	42d3      	cmn	r3, r2
 80032aa:	d100      	bne.n	80032ae <memmove+0x28>
 80032ac:	bd10      	pop	{r4, pc}
 80032ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80032b2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80032b6:	e7f7      	b.n	80032a8 <memmove+0x22>

080032b8 <_free_r>:
 80032b8:	b538      	push	{r3, r4, r5, lr}
 80032ba:	4605      	mov	r5, r0
 80032bc:	2900      	cmp	r1, #0
 80032be:	d043      	beq.n	8003348 <_free_r+0x90>
 80032c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032c4:	1f0c      	subs	r4, r1, #4
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	bfb8      	it	lt
 80032ca:	18e4      	addlt	r4, r4, r3
 80032cc:	f000 f8d0 	bl	8003470 <__malloc_lock>
 80032d0:	4a1e      	ldr	r2, [pc, #120]	; (800334c <_free_r+0x94>)
 80032d2:	6813      	ldr	r3, [r2, #0]
 80032d4:	4610      	mov	r0, r2
 80032d6:	b933      	cbnz	r3, 80032e6 <_free_r+0x2e>
 80032d8:	6063      	str	r3, [r4, #4]
 80032da:	6014      	str	r4, [r2, #0]
 80032dc:	4628      	mov	r0, r5
 80032de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032e2:	f000 b8c6 	b.w	8003472 <__malloc_unlock>
 80032e6:	42a3      	cmp	r3, r4
 80032e8:	d90b      	bls.n	8003302 <_free_r+0x4a>
 80032ea:	6821      	ldr	r1, [r4, #0]
 80032ec:	1862      	adds	r2, r4, r1
 80032ee:	4293      	cmp	r3, r2
 80032f0:	bf01      	itttt	eq
 80032f2:	681a      	ldreq	r2, [r3, #0]
 80032f4:	685b      	ldreq	r3, [r3, #4]
 80032f6:	1852      	addeq	r2, r2, r1
 80032f8:	6022      	streq	r2, [r4, #0]
 80032fa:	6063      	str	r3, [r4, #4]
 80032fc:	6004      	str	r4, [r0, #0]
 80032fe:	e7ed      	b.n	80032dc <_free_r+0x24>
 8003300:	4613      	mov	r3, r2
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	b10a      	cbz	r2, 800330a <_free_r+0x52>
 8003306:	42a2      	cmp	r2, r4
 8003308:	d9fa      	bls.n	8003300 <_free_r+0x48>
 800330a:	6819      	ldr	r1, [r3, #0]
 800330c:	1858      	adds	r0, r3, r1
 800330e:	42a0      	cmp	r0, r4
 8003310:	d10b      	bne.n	800332a <_free_r+0x72>
 8003312:	6820      	ldr	r0, [r4, #0]
 8003314:	4401      	add	r1, r0
 8003316:	1858      	adds	r0, r3, r1
 8003318:	4282      	cmp	r2, r0
 800331a:	6019      	str	r1, [r3, #0]
 800331c:	d1de      	bne.n	80032dc <_free_r+0x24>
 800331e:	6810      	ldr	r0, [r2, #0]
 8003320:	6852      	ldr	r2, [r2, #4]
 8003322:	4401      	add	r1, r0
 8003324:	6019      	str	r1, [r3, #0]
 8003326:	605a      	str	r2, [r3, #4]
 8003328:	e7d8      	b.n	80032dc <_free_r+0x24>
 800332a:	d902      	bls.n	8003332 <_free_r+0x7a>
 800332c:	230c      	movs	r3, #12
 800332e:	602b      	str	r3, [r5, #0]
 8003330:	e7d4      	b.n	80032dc <_free_r+0x24>
 8003332:	6820      	ldr	r0, [r4, #0]
 8003334:	1821      	adds	r1, r4, r0
 8003336:	428a      	cmp	r2, r1
 8003338:	bf01      	itttt	eq
 800333a:	6811      	ldreq	r1, [r2, #0]
 800333c:	6852      	ldreq	r2, [r2, #4]
 800333e:	1809      	addeq	r1, r1, r0
 8003340:	6021      	streq	r1, [r4, #0]
 8003342:	6062      	str	r2, [r4, #4]
 8003344:	605c      	str	r4, [r3, #4]
 8003346:	e7c9      	b.n	80032dc <_free_r+0x24>
 8003348:	bd38      	pop	{r3, r4, r5, pc}
 800334a:	bf00      	nop
 800334c:	200004a8 	.word	0x200004a8

08003350 <_malloc_r>:
 8003350:	b570      	push	{r4, r5, r6, lr}
 8003352:	1ccd      	adds	r5, r1, #3
 8003354:	f025 0503 	bic.w	r5, r5, #3
 8003358:	3508      	adds	r5, #8
 800335a:	2d0c      	cmp	r5, #12
 800335c:	bf38      	it	cc
 800335e:	250c      	movcc	r5, #12
 8003360:	2d00      	cmp	r5, #0
 8003362:	4606      	mov	r6, r0
 8003364:	db01      	blt.n	800336a <_malloc_r+0x1a>
 8003366:	42a9      	cmp	r1, r5
 8003368:	d903      	bls.n	8003372 <_malloc_r+0x22>
 800336a:	230c      	movs	r3, #12
 800336c:	6033      	str	r3, [r6, #0]
 800336e:	2000      	movs	r0, #0
 8003370:	bd70      	pop	{r4, r5, r6, pc}
 8003372:	f000 f87d 	bl	8003470 <__malloc_lock>
 8003376:	4a21      	ldr	r2, [pc, #132]	; (80033fc <_malloc_r+0xac>)
 8003378:	6814      	ldr	r4, [r2, #0]
 800337a:	4621      	mov	r1, r4
 800337c:	b991      	cbnz	r1, 80033a4 <_malloc_r+0x54>
 800337e:	4c20      	ldr	r4, [pc, #128]	; (8003400 <_malloc_r+0xb0>)
 8003380:	6823      	ldr	r3, [r4, #0]
 8003382:	b91b      	cbnz	r3, 800338c <_malloc_r+0x3c>
 8003384:	4630      	mov	r0, r6
 8003386:	f000 f863 	bl	8003450 <_sbrk_r>
 800338a:	6020      	str	r0, [r4, #0]
 800338c:	4629      	mov	r1, r5
 800338e:	4630      	mov	r0, r6
 8003390:	f000 f85e 	bl	8003450 <_sbrk_r>
 8003394:	1c43      	adds	r3, r0, #1
 8003396:	d124      	bne.n	80033e2 <_malloc_r+0x92>
 8003398:	230c      	movs	r3, #12
 800339a:	4630      	mov	r0, r6
 800339c:	6033      	str	r3, [r6, #0]
 800339e:	f000 f868 	bl	8003472 <__malloc_unlock>
 80033a2:	e7e4      	b.n	800336e <_malloc_r+0x1e>
 80033a4:	680b      	ldr	r3, [r1, #0]
 80033a6:	1b5b      	subs	r3, r3, r5
 80033a8:	d418      	bmi.n	80033dc <_malloc_r+0x8c>
 80033aa:	2b0b      	cmp	r3, #11
 80033ac:	d90f      	bls.n	80033ce <_malloc_r+0x7e>
 80033ae:	600b      	str	r3, [r1, #0]
 80033b0:	18cc      	adds	r4, r1, r3
 80033b2:	50cd      	str	r5, [r1, r3]
 80033b4:	4630      	mov	r0, r6
 80033b6:	f000 f85c 	bl	8003472 <__malloc_unlock>
 80033ba:	f104 000b 	add.w	r0, r4, #11
 80033be:	1d23      	adds	r3, r4, #4
 80033c0:	f020 0007 	bic.w	r0, r0, #7
 80033c4:	1ac3      	subs	r3, r0, r3
 80033c6:	d0d3      	beq.n	8003370 <_malloc_r+0x20>
 80033c8:	425a      	negs	r2, r3
 80033ca:	50e2      	str	r2, [r4, r3]
 80033cc:	e7d0      	b.n	8003370 <_malloc_r+0x20>
 80033ce:	684b      	ldr	r3, [r1, #4]
 80033d0:	428c      	cmp	r4, r1
 80033d2:	bf16      	itet	ne
 80033d4:	6063      	strne	r3, [r4, #4]
 80033d6:	6013      	streq	r3, [r2, #0]
 80033d8:	460c      	movne	r4, r1
 80033da:	e7eb      	b.n	80033b4 <_malloc_r+0x64>
 80033dc:	460c      	mov	r4, r1
 80033de:	6849      	ldr	r1, [r1, #4]
 80033e0:	e7cc      	b.n	800337c <_malloc_r+0x2c>
 80033e2:	1cc4      	adds	r4, r0, #3
 80033e4:	f024 0403 	bic.w	r4, r4, #3
 80033e8:	42a0      	cmp	r0, r4
 80033ea:	d005      	beq.n	80033f8 <_malloc_r+0xa8>
 80033ec:	1a21      	subs	r1, r4, r0
 80033ee:	4630      	mov	r0, r6
 80033f0:	f000 f82e 	bl	8003450 <_sbrk_r>
 80033f4:	3001      	adds	r0, #1
 80033f6:	d0cf      	beq.n	8003398 <_malloc_r+0x48>
 80033f8:	6025      	str	r5, [r4, #0]
 80033fa:	e7db      	b.n	80033b4 <_malloc_r+0x64>
 80033fc:	200004a8 	.word	0x200004a8
 8003400:	200004ac 	.word	0x200004ac

08003404 <_realloc_r>:
 8003404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003406:	4607      	mov	r7, r0
 8003408:	4614      	mov	r4, r2
 800340a:	460e      	mov	r6, r1
 800340c:	b921      	cbnz	r1, 8003418 <_realloc_r+0x14>
 800340e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003412:	4611      	mov	r1, r2
 8003414:	f7ff bf9c 	b.w	8003350 <_malloc_r>
 8003418:	b922      	cbnz	r2, 8003424 <_realloc_r+0x20>
 800341a:	f7ff ff4d 	bl	80032b8 <_free_r>
 800341e:	4625      	mov	r5, r4
 8003420:	4628      	mov	r0, r5
 8003422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003424:	f000 f826 	bl	8003474 <_malloc_usable_size_r>
 8003428:	42a0      	cmp	r0, r4
 800342a:	d20f      	bcs.n	800344c <_realloc_r+0x48>
 800342c:	4621      	mov	r1, r4
 800342e:	4638      	mov	r0, r7
 8003430:	f7ff ff8e 	bl	8003350 <_malloc_r>
 8003434:	4605      	mov	r5, r0
 8003436:	2800      	cmp	r0, #0
 8003438:	d0f2      	beq.n	8003420 <_realloc_r+0x1c>
 800343a:	4631      	mov	r1, r6
 800343c:	4622      	mov	r2, r4
 800343e:	f7ff ff17 	bl	8003270 <memcpy>
 8003442:	4631      	mov	r1, r6
 8003444:	4638      	mov	r0, r7
 8003446:	f7ff ff37 	bl	80032b8 <_free_r>
 800344a:	e7e9      	b.n	8003420 <_realloc_r+0x1c>
 800344c:	4635      	mov	r5, r6
 800344e:	e7e7      	b.n	8003420 <_realloc_r+0x1c>

08003450 <_sbrk_r>:
 8003450:	b538      	push	{r3, r4, r5, lr}
 8003452:	2300      	movs	r3, #0
 8003454:	4c05      	ldr	r4, [pc, #20]	; (800346c <_sbrk_r+0x1c>)
 8003456:	4605      	mov	r5, r0
 8003458:	4608      	mov	r0, r1
 800345a:	6023      	str	r3, [r4, #0]
 800345c:	f7fd fee4 	bl	8001228 <_sbrk>
 8003460:	1c43      	adds	r3, r0, #1
 8003462:	d102      	bne.n	800346a <_sbrk_r+0x1a>
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	b103      	cbz	r3, 800346a <_sbrk_r+0x1a>
 8003468:	602b      	str	r3, [r5, #0]
 800346a:	bd38      	pop	{r3, r4, r5, pc}
 800346c:	20000508 	.word	0x20000508

08003470 <__malloc_lock>:
 8003470:	4770      	bx	lr

08003472 <__malloc_unlock>:
 8003472:	4770      	bx	lr

08003474 <_malloc_usable_size_r>:
 8003474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003478:	1f18      	subs	r0, r3, #4
 800347a:	2b00      	cmp	r3, #0
 800347c:	bfbc      	itt	lt
 800347e:	580b      	ldrlt	r3, [r1, r0]
 8003480:	18c0      	addlt	r0, r0, r3
 8003482:	4770      	bx	lr

08003484 <_init>:
 8003484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003486:	bf00      	nop
 8003488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800348a:	bc08      	pop	{r3}
 800348c:	469e      	mov	lr, r3
 800348e:	4770      	bx	lr

08003490 <_fini>:
 8003490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003492:	bf00      	nop
 8003494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003496:	bc08      	pop	{r3}
 8003498:	469e      	mov	lr, r3
 800349a:	4770      	bx	lr
