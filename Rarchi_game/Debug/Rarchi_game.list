
Rarchi_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ed0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001554  08002fdc  08002fdc  00012fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004530  08004530  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08004530  08004530  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004530  08004530  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004530  08004530  00014530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004534  08004534  00014534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  20000080  080045b8  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  080045b8  0002050c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0f1  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001991  00000000  00000000  0002a19a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000810  00000000  00000000  0002bb30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000760  00000000  00000000  0002c340  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000171c1  00000000  00000000  0002caa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007de2  00000000  00000000  00043c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082d47  00000000  00000000  0004ba43  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ce78a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000230c  00000000  00000000  000ce808  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fc4 	.word	0x08002fc4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08002fc4 	.word	0x08002fc4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08c      	sub	sp, #48	; 0x30
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	Player children;
	children.points = 1;
 8000152:	2301      	movs	r3, #1
 8000154:	627b      	str	r3, [r7, #36]	; 0x24
	children.state_machine = INIT;
 8000156:	2300      	movs	r3, #0
 8000158:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800015c:	f000 feaa 	bl	8000eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000160:	f000 f89e 	bl	80002a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000164:	f000 f906 	bl	8000374 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000168:	f000 f8d6 	bl	8000318 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init(); // initialise
 800016c:	f000 f978 	bl	8000460 <SSD1306_Init>

  character_draw(1);
 8000170:	2001      	movs	r0, #1
 8000172:	f000 fe4d 	bl	8000e10 <character_draw>
  SSD1306_GotoXY(0, 0);
 8000176:	2100      	movs	r1, #0
 8000178:	2000      	movs	r0, #0
 800017a:	f000 fad9 	bl	8000730 <SSD1306_GotoXY>
  SSD1306_Puts("PTS:", &Font_11x18, 1);
 800017e:	2201      	movs	r2, #1
 8000180:	493e      	ldr	r1, [pc, #248]	; (800027c <main+0x130>)
 8000182:	483f      	ldr	r0, [pc, #252]	; (8000280 <main+0x134>)
 8000184:	f000 fb6a 	bl	800085c <SSD1306_Puts>
  SSD1306_GotoXY(42, 0);
 8000188:	2100      	movs	r1, #0
 800018a:	202a      	movs	r0, #42	; 0x2a
 800018c:	f000 fad0 	bl	8000730 <SSD1306_GotoXY>
  char* numberstring[(((sizeof children.points)) + 2)/3 + 2];
  sprintf(numberstring, "%d", children.points++);
 8000190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000192:	1c5a      	adds	r2, r3, #1
 8000194:	627a      	str	r2, [r7, #36]	; 0x24
 8000196:	f107 0014 	add.w	r0, r7, #20
 800019a:	461a      	mov	r2, r3
 800019c:	4939      	ldr	r1, [pc, #228]	; (8000284 <main+0x138>)
 800019e:	f002 faff 	bl	80027a0 <siprintf>
  SSD1306_Puts(numberstring, &Font_11x18, 1);
 80001a2:	f107 0314 	add.w	r3, r7, #20
 80001a6:	2201      	movs	r2, #1
 80001a8:	4934      	ldr	r1, [pc, #208]	; (800027c <main+0x130>)
 80001aa:	4618      	mov	r0, r3
 80001ac:	f000 fb56 	bl	800085c <SSD1306_Puts>
  SSD1306_UpdateScreen(); //display
 80001b0:	f000 fa1a 	bl	80005e8 <SSD1306_UpdateScreen>
  HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 1);
 80001b4:	2201      	movs	r2, #1
 80001b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001ba:	4833      	ldr	r0, [pc, #204]	; (8000288 <main+0x13c>)
 80001bc:	f001 f931 	bl	8001422 <HAL_GPIO_WritePin>

  uint8_t update_screen = 0;
 80001c0:	2300      	movs	r3, #0
 80001c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  while (1)
  {
   // HAL_GPIO_TogglePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin);
    //HAL_GPIO_TogglePin(LED_BUILD_GPIO_Port, LED_BUILD_Pin);

    if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin)==0){
 80001c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001ca:	482f      	ldr	r0, [pc, #188]	; (8000288 <main+0x13c>)
 80001cc:	f001 f912 	bl	80013f4 <HAL_GPIO_ReadPin>
 80001d0:	4603      	mov	r3, r0
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d109      	bne.n	80001ea <main+0x9e>
    	HAL_GPIO_WritePin(RGB_RED_GPIO_Port, RGB_RED_Pin, 1);
 80001d6:	2201      	movs	r2, #1
 80001d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001dc:	482a      	ldr	r0, [pc, #168]	; (8000288 <main+0x13c>)
 80001de:	f001 f920 	bl	8001422 <HAL_GPIO_WritePin>
    	update_screen = 1;
 80001e2:	2301      	movs	r3, #1
 80001e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80001e8:	e005      	b.n	80001f6 <main+0xaa>
    }else {
    	HAL_GPIO_WritePin(RGB_RED_GPIO_Port, RGB_RED_Pin, 0);
 80001ea:	2200      	movs	r2, #0
 80001ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001f0:	4825      	ldr	r0, [pc, #148]	; (8000288 <main+0x13c>)
 80001f2:	f001 f916 	bl	8001422 <HAL_GPIO_WritePin>
    }

    if (update_screen){
 80001f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d0e3      	beq.n	80001c6 <main+0x7a>
  	  SSD1306_Clear(); //display
 80001fe:	f000 fcb7 	bl	8000b70 <SSD1306_Clear>
    	  SSD1306_GotoXY(20, 18);
 8000202:	2112      	movs	r1, #18
 8000204:	2014      	movs	r0, #20
 8000206:	f000 fa93 	bl	8000730 <SSD1306_GotoXY>
    	  SSD1306_Puts("GAME 1", &Font_7x10, 1);
 800020a:	2201      	movs	r2, #1
 800020c:	491f      	ldr	r1, [pc, #124]	; (800028c <main+0x140>)
 800020e:	4820      	ldr	r0, [pc, #128]	; (8000290 <main+0x144>)
 8000210:	f000 fb24 	bl	800085c <SSD1306_Puts>
    	  SSD1306_GotoXY(20, 28);
 8000214:	211c      	movs	r1, #28
 8000216:	2014      	movs	r0, #20
 8000218:	f000 fa8a 	bl	8000730 <SSD1306_GotoXY>
    	  SSD1306_Puts("GAME 2", &Font_7x10, 1);
 800021c:	2201      	movs	r2, #1
 800021e:	491b      	ldr	r1, [pc, #108]	; (800028c <main+0x140>)
 8000220:	481c      	ldr	r0, [pc, #112]	; (8000294 <main+0x148>)
 8000222:	f000 fb1b 	bl	800085c <SSD1306_Puts>
    	  SSD1306_GotoXY(20, 38);
 8000226:	2126      	movs	r1, #38	; 0x26
 8000228:	2014      	movs	r0, #20
 800022a:	f000 fa81 	bl	8000730 <SSD1306_GotoXY>
    	  SSD1306_Puts("GAME 3", &Font_7x10, 1);
 800022e:	2201      	movs	r2, #1
 8000230:	4916      	ldr	r1, [pc, #88]	; (800028c <main+0x140>)
 8000232:	4819      	ldr	r0, [pc, #100]	; (8000298 <main+0x14c>)
 8000234:	f000 fb12 	bl	800085c <SSD1306_Puts>
    	  SSD1306_GotoXY(20, 48);
 8000238:	2130      	movs	r1, #48	; 0x30
 800023a:	2014      	movs	r0, #20
 800023c:	f000 fa78 	bl	8000730 <SSD1306_GotoXY>
    	  SSD1306_Puts("GAME 4", &Font_7x10, 1);
 8000240:	2201      	movs	r2, #1
 8000242:	4912      	ldr	r1, [pc, #72]	; (800028c <main+0x140>)
 8000244:	4815      	ldr	r0, [pc, #84]	; (800029c <main+0x150>)
 8000246:	f000 fb09 	bl	800085c <SSD1306_Puts>

    	  SSD1306_GotoXY(42, 0);
 800024a:	2100      	movs	r1, #0
 800024c:	202a      	movs	r0, #42	; 0x2a
 800024e:	f000 fa6f 	bl	8000730 <SSD1306_GotoXY>
    	  char* numberstring[(((sizeof children.points)) + 2)/3 + 2];
    	  sprintf(numberstring, "%d", children.points++);
 8000252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000254:	1c5a      	adds	r2, r3, #1
 8000256:	627a      	str	r2, [r7, #36]	; 0x24
 8000258:	1d38      	adds	r0, r7, #4
 800025a:	461a      	mov	r2, r3
 800025c:	4909      	ldr	r1, [pc, #36]	; (8000284 <main+0x138>)
 800025e:	f002 fa9f 	bl	80027a0 <siprintf>
    	  SSD1306_Puts(numberstring, &Font_11x18, 1);
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	2201      	movs	r2, #1
 8000266:	4905      	ldr	r1, [pc, #20]	; (800027c <main+0x130>)
 8000268:	4618      	mov	r0, r3
 800026a:	f000 faf7 	bl	800085c <SSD1306_Puts>
    	  SSD1306_UpdateScreen(); //display
 800026e:	f000 f9bb 	bl	80005e8 <SSD1306_UpdateScreen>
    	  update_screen = 0;
 8000272:	2300      	movs	r3, #0
 8000274:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin)==0){
 8000278:	e7a5      	b.n	80001c6 <main+0x7a>
 800027a:	bf00      	nop
 800027c:	20000008 	.word	0x20000008
 8000280:	08002fdc 	.word	0x08002fdc
 8000284:	08002fe4 	.word	0x08002fe4
 8000288:	40010c00 	.word	0x40010c00
 800028c:	20000000 	.word	0x20000000
 8000290:	08002fe8 	.word	0x08002fe8
 8000294:	08002ff0 	.word	0x08002ff0
 8000298:	08002ff8 	.word	0x08002ff8
 800029c:	08003000 	.word	0x08003000

080002a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b090      	sub	sp, #64	; 0x40
 80002a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a6:	f107 0318 	add.w	r3, r7, #24
 80002aa:	2228      	movs	r2, #40	; 0x28
 80002ac:	2100      	movs	r1, #0
 80002ae:	4618      	mov	r0, r3
 80002b0:	f002 fa6e 	bl	8002790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
 80002c0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c2:	2302      	movs	r3, #2
 80002c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c6:	2301      	movs	r3, #1
 80002c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ca:	2310      	movs	r3, #16
 80002cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ce:	2300      	movs	r3, #0
 80002d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d2:	f107 0318 	add.w	r3, r7, #24
 80002d6:	4618      	mov	r0, r3
 80002d8:	f001 fe28 	bl	8001f2c <HAL_RCC_OscConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002e2:	f000 f8b7 	bl	8000454 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80002e6:	230f      	movs	r3, #15
 80002e8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ea:	2300      	movs	r3, #0
 80002ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f002 f894 	bl	800242c <HAL_RCC_ClockConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800030a:	f000 f8a3 	bl	8000454 <Error_Handler>
  }
}
 800030e:	bf00      	nop
 8000310:	3740      	adds	r7, #64	; 0x40
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
	...

08000318 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800031c:	4b12      	ldr	r3, [pc, #72]	; (8000368 <MX_I2C1_Init+0x50>)
 800031e:	4a13      	ldr	r2, [pc, #76]	; (800036c <MX_I2C1_Init+0x54>)
 8000320:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000322:	4b11      	ldr	r3, [pc, #68]	; (8000368 <MX_I2C1_Init+0x50>)
 8000324:	4a12      	ldr	r2, [pc, #72]	; (8000370 <MX_I2C1_Init+0x58>)
 8000326:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000328:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <MX_I2C1_Init+0x50>)
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800032e:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <MX_I2C1_Init+0x50>)
 8000330:	2200      	movs	r2, #0
 8000332:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000334:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <MX_I2C1_Init+0x50>)
 8000336:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800033a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800033c:	4b0a      	ldr	r3, [pc, #40]	; (8000368 <MX_I2C1_Init+0x50>)
 800033e:	2200      	movs	r2, #0
 8000340:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000342:	4b09      	ldr	r3, [pc, #36]	; (8000368 <MX_I2C1_Init+0x50>)
 8000344:	2200      	movs	r2, #0
 8000346:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000348:	4b07      	ldr	r3, [pc, #28]	; (8000368 <MX_I2C1_Init+0x50>)
 800034a:	2200      	movs	r2, #0
 800034c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800034e:	4b06      	ldr	r3, [pc, #24]	; (8000368 <MX_I2C1_Init+0x50>)
 8000350:	2200      	movs	r2, #0
 8000352:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000354:	4804      	ldr	r0, [pc, #16]	; (8000368 <MX_I2C1_Init+0x50>)
 8000356:	f001 f87d 	bl	8001454 <HAL_I2C_Init>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000360:	f000 f878 	bl	8000454 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8000364:	bf00      	nop
 8000366:	bd80      	pop	{r7, pc}
 8000368:	200004b0 	.word	0x200004b0
 800036c:	40005400 	.word	0x40005400
 8000370:	00061a80 	.word	0x00061a80

08000374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b088      	sub	sp, #32
 8000378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037a:	f107 0310 	add.w	r3, r7, #16
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000388:	4b2f      	ldr	r3, [pc, #188]	; (8000448 <MX_GPIO_Init+0xd4>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a2e      	ldr	r2, [pc, #184]	; (8000448 <MX_GPIO_Init+0xd4>)
 800038e:	f043 0310 	orr.w	r3, r3, #16
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b2c      	ldr	r3, [pc, #176]	; (8000448 <MX_GPIO_Init+0xd4>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0310 	and.w	r3, r3, #16
 800039c:	60fb      	str	r3, [r7, #12]
 800039e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a0:	4b29      	ldr	r3, [pc, #164]	; (8000448 <MX_GPIO_Init+0xd4>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a28      	ldr	r2, [pc, #160]	; (8000448 <MX_GPIO_Init+0xd4>)
 80003a6:	f043 0308 	orr.w	r3, r3, #8
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b26      	ldr	r3, [pc, #152]	; (8000448 <MX_GPIO_Init+0xd4>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0308 	and.w	r3, r3, #8
 80003b4:	60bb      	str	r3, [r7, #8]
 80003b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b8:	4b23      	ldr	r3, [pc, #140]	; (8000448 <MX_GPIO_Init+0xd4>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a22      	ldr	r2, [pc, #136]	; (8000448 <MX_GPIO_Init+0xd4>)
 80003be:	f043 0304 	orr.w	r3, r3, #4
 80003c2:	6193      	str	r3, [r2, #24]
 80003c4:	4b20      	ldr	r3, [pc, #128]	; (8000448 <MX_GPIO_Init+0xd4>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	f003 0304 	and.w	r3, r3, #4
 80003cc:	607b      	str	r3, [r7, #4]
 80003ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILD_GPIO_Port, LED_BUILD_Pin, GPIO_PIN_RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d6:	481d      	ldr	r0, [pc, #116]	; (800044c <MX_GPIO_Init+0xd8>)
 80003d8:	f001 f823 	bl	8001422 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin | RGB_BLUE_Pin | RGB_GREEN_Pin, GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80003e2:	481b      	ldr	r0, [pc, #108]	; (8000450 <MX_GPIO_Init+0xdc>)
 80003e4:	f001 f81d 	bl	8001422 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUILD_Pin */
  GPIO_InitStruct.Pin = LED_BUILD_Pin;
 80003e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ee:	2301      	movs	r3, #1
 80003f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f2:	2300      	movs	r3, #0
 80003f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f6:	2302      	movs	r3, #2
 80003f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BUILD_GPIO_Port, &GPIO_InitStruct);
 80003fa:	f107 0310 	add.w	r3, r7, #16
 80003fe:	4619      	mov	r1, r3
 8000400:	4812      	ldr	r0, [pc, #72]	; (800044c <MX_GPIO_Init+0xd8>)
 8000402:	f000 fe9d 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_LEFT_Pin BUTTON_RIGHT_Pin */
  GPIO_InitStruct.Pin = BUTTON_LEFT_Pin | BUTTON_RIGHT_Pin;
 8000406:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800040a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800040c:	2300      	movs	r3, #0
 800040e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000410:	2301      	movs	r3, #1
 8000412:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000414:	f107 0310 	add.w	r3, r7, #16
 8000418:	4619      	mov	r1, r3
 800041a:	480d      	ldr	r0, [pc, #52]	; (8000450 <MX_GPIO_Init+0xdc>)
 800041c:	f000 fe90 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pins : RGB_RED_Pin RGB_BLUE_Pin RGB_GREEN_Pin */
  GPIO_InitStruct.Pin = RGB_RED_Pin | RGB_BLUE_Pin | RGB_GREEN_Pin;
 8000420:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000424:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000426:	2301      	movs	r3, #1
 8000428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042a:	2300      	movs	r3, #0
 800042c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042e:	2302      	movs	r3, #2
 8000430:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000432:	f107 0310 	add.w	r3, r7, #16
 8000436:	4619      	mov	r1, r3
 8000438:	4805      	ldr	r0, [pc, #20]	; (8000450 <MX_GPIO_Init+0xdc>)
 800043a:	f000 fe81 	bl	8001140 <HAL_GPIO_Init>
}
 800043e:	bf00      	nop
 8000440:	3720      	adds	r7, #32
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	40021000 	.word	0x40021000
 800044c:	40011000 	.word	0x40011000
 8000450:	40010c00 	.word	0x40010c00

08000454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr

08000460 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000466:	f000 fb8d 	bl	8000b84 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800046a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800046e:	2201      	movs	r2, #1
 8000470:	2178      	movs	r1, #120	; 0x78
 8000472:	485b      	ldr	r0, [pc, #364]	; (80005e0 <SSD1306_Init+0x180>)
 8000474:	f001 fa24 	bl	80018c0 <HAL_I2C_IsDeviceReady>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800047e:	2300      	movs	r3, #0
 8000480:	e0a9      	b.n	80005d6 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000482:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000486:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000488:	e002      	b.n	8000490 <SSD1306_Init+0x30>
		p--;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	3b01      	subs	r3, #1
 800048e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d1f9      	bne.n	800048a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000496:	22ae      	movs	r2, #174	; 0xae
 8000498:	2100      	movs	r1, #0
 800049a:	2078      	movs	r0, #120	; 0x78
 800049c:	f000 fbce 	bl	8000c3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80004a0:	2220      	movs	r2, #32
 80004a2:	2100      	movs	r1, #0
 80004a4:	2078      	movs	r0, #120	; 0x78
 80004a6:	f000 fbc9 	bl	8000c3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80004aa:	2210      	movs	r2, #16
 80004ac:	2100      	movs	r1, #0
 80004ae:	2078      	movs	r0, #120	; 0x78
 80004b0:	f000 fbc4 	bl	8000c3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80004b4:	22b0      	movs	r2, #176	; 0xb0
 80004b6:	2100      	movs	r1, #0
 80004b8:	2078      	movs	r0, #120	; 0x78
 80004ba:	f000 fbbf 	bl	8000c3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80004be:	22c8      	movs	r2, #200	; 0xc8
 80004c0:	2100      	movs	r1, #0
 80004c2:	2078      	movs	r0, #120	; 0x78
 80004c4:	f000 fbba 	bl	8000c3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80004c8:	2200      	movs	r2, #0
 80004ca:	2100      	movs	r1, #0
 80004cc:	2078      	movs	r0, #120	; 0x78
 80004ce:	f000 fbb5 	bl	8000c3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80004d2:	2210      	movs	r2, #16
 80004d4:	2100      	movs	r1, #0
 80004d6:	2078      	movs	r0, #120	; 0x78
 80004d8:	f000 fbb0 	bl	8000c3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80004dc:	2240      	movs	r2, #64	; 0x40
 80004de:	2100      	movs	r1, #0
 80004e0:	2078      	movs	r0, #120	; 0x78
 80004e2:	f000 fbab 	bl	8000c3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80004e6:	2281      	movs	r2, #129	; 0x81
 80004e8:	2100      	movs	r1, #0
 80004ea:	2078      	movs	r0, #120	; 0x78
 80004ec:	f000 fba6 	bl	8000c3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80004f0:	22ff      	movs	r2, #255	; 0xff
 80004f2:	2100      	movs	r1, #0
 80004f4:	2078      	movs	r0, #120	; 0x78
 80004f6:	f000 fba1 	bl	8000c3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80004fa:	22a1      	movs	r2, #161	; 0xa1
 80004fc:	2100      	movs	r1, #0
 80004fe:	2078      	movs	r0, #120	; 0x78
 8000500:	f000 fb9c 	bl	8000c3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000504:	22a6      	movs	r2, #166	; 0xa6
 8000506:	2100      	movs	r1, #0
 8000508:	2078      	movs	r0, #120	; 0x78
 800050a:	f000 fb97 	bl	8000c3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800050e:	22a8      	movs	r2, #168	; 0xa8
 8000510:	2100      	movs	r1, #0
 8000512:	2078      	movs	r0, #120	; 0x78
 8000514:	f000 fb92 	bl	8000c3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000518:	223f      	movs	r2, #63	; 0x3f
 800051a:	2100      	movs	r1, #0
 800051c:	2078      	movs	r0, #120	; 0x78
 800051e:	f000 fb8d 	bl	8000c3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000522:	22a4      	movs	r2, #164	; 0xa4
 8000524:	2100      	movs	r1, #0
 8000526:	2078      	movs	r0, #120	; 0x78
 8000528:	f000 fb88 	bl	8000c3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800052c:	22d3      	movs	r2, #211	; 0xd3
 800052e:	2100      	movs	r1, #0
 8000530:	2078      	movs	r0, #120	; 0x78
 8000532:	f000 fb83 	bl	8000c3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000536:	2200      	movs	r2, #0
 8000538:	2100      	movs	r1, #0
 800053a:	2078      	movs	r0, #120	; 0x78
 800053c:	f000 fb7e 	bl	8000c3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000540:	22d5      	movs	r2, #213	; 0xd5
 8000542:	2100      	movs	r1, #0
 8000544:	2078      	movs	r0, #120	; 0x78
 8000546:	f000 fb79 	bl	8000c3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800054a:	22f0      	movs	r2, #240	; 0xf0
 800054c:	2100      	movs	r1, #0
 800054e:	2078      	movs	r0, #120	; 0x78
 8000550:	f000 fb74 	bl	8000c3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000554:	22d9      	movs	r2, #217	; 0xd9
 8000556:	2100      	movs	r1, #0
 8000558:	2078      	movs	r0, #120	; 0x78
 800055a:	f000 fb6f 	bl	8000c3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800055e:	2222      	movs	r2, #34	; 0x22
 8000560:	2100      	movs	r1, #0
 8000562:	2078      	movs	r0, #120	; 0x78
 8000564:	f000 fb6a 	bl	8000c3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000568:	22da      	movs	r2, #218	; 0xda
 800056a:	2100      	movs	r1, #0
 800056c:	2078      	movs	r0, #120	; 0x78
 800056e:	f000 fb65 	bl	8000c3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000572:	2212      	movs	r2, #18
 8000574:	2100      	movs	r1, #0
 8000576:	2078      	movs	r0, #120	; 0x78
 8000578:	f000 fb60 	bl	8000c3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800057c:	22db      	movs	r2, #219	; 0xdb
 800057e:	2100      	movs	r1, #0
 8000580:	2078      	movs	r0, #120	; 0x78
 8000582:	f000 fb5b 	bl	8000c3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000586:	2220      	movs	r2, #32
 8000588:	2100      	movs	r1, #0
 800058a:	2078      	movs	r0, #120	; 0x78
 800058c:	f000 fb56 	bl	8000c3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000590:	228d      	movs	r2, #141	; 0x8d
 8000592:	2100      	movs	r1, #0
 8000594:	2078      	movs	r0, #120	; 0x78
 8000596:	f000 fb51 	bl	8000c3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800059a:	2214      	movs	r2, #20
 800059c:	2100      	movs	r1, #0
 800059e:	2078      	movs	r0, #120	; 0x78
 80005a0:	f000 fb4c 	bl	8000c3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80005a4:	22af      	movs	r2, #175	; 0xaf
 80005a6:	2100      	movs	r1, #0
 80005a8:	2078      	movs	r0, #120	; 0x78
 80005aa:	f000 fb47 	bl	8000c3c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80005ae:	222e      	movs	r2, #46	; 0x2e
 80005b0:	2100      	movs	r1, #0
 80005b2:	2078      	movs	r0, #120	; 0x78
 80005b4:	f000 fb42 	bl	8000c3c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80005b8:	2000      	movs	r0, #0
 80005ba:	f000 f843 	bl	8000644 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80005be:	f000 f813 	bl	80005e8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80005c2:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <SSD1306_Init+0x184>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <SSD1306_Init+0x184>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80005ce:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <SSD1306_Init+0x184>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80005d4:	2301      	movs	r3, #1
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200004b0 	.word	0x200004b0
 80005e4:	2000049c 	.word	0x2000049c

080005e8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80005ee:	2300      	movs	r3, #0
 80005f0:	71fb      	strb	r3, [r7, #7]
 80005f2:	e01d      	b.n	8000630 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	3b50      	subs	r3, #80	; 0x50
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	461a      	mov	r2, r3
 80005fc:	2100      	movs	r1, #0
 80005fe:	2078      	movs	r0, #120	; 0x78
 8000600:	f000 fb1c 	bl	8000c3c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000604:	2200      	movs	r2, #0
 8000606:	2100      	movs	r1, #0
 8000608:	2078      	movs	r0, #120	; 0x78
 800060a:	f000 fb17 	bl	8000c3c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800060e:	2210      	movs	r2, #16
 8000610:	2100      	movs	r1, #0
 8000612:	2078      	movs	r0, #120	; 0x78
 8000614:	f000 fb12 	bl	8000c3c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	01db      	lsls	r3, r3, #7
 800061c:	4a08      	ldr	r2, [pc, #32]	; (8000640 <SSD1306_UpdateScreen+0x58>)
 800061e:	441a      	add	r2, r3
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	2140      	movs	r1, #64	; 0x40
 8000624:	2078      	movs	r0, #120	; 0x78
 8000626:	f000 fac1 	bl	8000bac <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	3301      	adds	r3, #1
 800062e:	71fb      	strb	r3, [r7, #7]
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	2b07      	cmp	r3, #7
 8000634:	d9de      	bls.n	80005f4 <SSD1306_UpdateScreen+0xc>
	}
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	2000009c 	.word	0x2000009c

08000644 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d101      	bne.n	8000658 <SSD1306_Fill+0x14>
 8000654:	2300      	movs	r3, #0
 8000656:	e000      	b.n	800065a <SSD1306_Fill+0x16>
 8000658:	23ff      	movs	r3, #255	; 0xff
 800065a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800065e:	4619      	mov	r1, r3
 8000660:	4803      	ldr	r0, [pc, #12]	; (8000670 <SSD1306_Fill+0x2c>)
 8000662:	f002 f895 	bl	8002790 <memset>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000009c 	.word	0x2000009c

08000674 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	80fb      	strh	r3, [r7, #6]
 800067e:	460b      	mov	r3, r1
 8000680:	80bb      	strh	r3, [r7, #4]
 8000682:	4613      	mov	r3, r2
 8000684:	70fb      	strb	r3, [r7, #3]
	if (
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	2b7f      	cmp	r3, #127	; 0x7f
 800068a:	d848      	bhi.n	800071e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800068c:	88bb      	ldrh	r3, [r7, #4]
 800068e:	2b3f      	cmp	r3, #63	; 0x3f
 8000690:	d845      	bhi.n	800071e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000692:	4b25      	ldr	r3, [pc, #148]	; (8000728 <SSD1306_DrawPixel+0xb4>)
 8000694:	791b      	ldrb	r3, [r3, #4]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d006      	beq.n	80006a8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800069a:	78fb      	ldrb	r3, [r7, #3]
 800069c:	2b00      	cmp	r3, #0
 800069e:	bf0c      	ite	eq
 80006a0:	2301      	moveq	r3, #1
 80006a2:	2300      	movne	r3, #0
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80006a8:	78fb      	ldrb	r3, [r7, #3]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d11a      	bne.n	80006e4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80006ae:	88fa      	ldrh	r2, [r7, #6]
 80006b0:	88bb      	ldrh	r3, [r7, #4]
 80006b2:	08db      	lsrs	r3, r3, #3
 80006b4:	b298      	uxth	r0, r3
 80006b6:	4603      	mov	r3, r0
 80006b8:	01db      	lsls	r3, r3, #7
 80006ba:	4413      	add	r3, r2
 80006bc:	4a1b      	ldr	r2, [pc, #108]	; (800072c <SSD1306_DrawPixel+0xb8>)
 80006be:	5cd3      	ldrb	r3, [r2, r3]
 80006c0:	b25a      	sxtb	r2, r3
 80006c2:	88bb      	ldrh	r3, [r7, #4]
 80006c4:	f003 0307 	and.w	r3, r3, #7
 80006c8:	2101      	movs	r1, #1
 80006ca:	fa01 f303 	lsl.w	r3, r1, r3
 80006ce:	b25b      	sxtb	r3, r3
 80006d0:	4313      	orrs	r3, r2
 80006d2:	b259      	sxtb	r1, r3
 80006d4:	88fa      	ldrh	r2, [r7, #6]
 80006d6:	4603      	mov	r3, r0
 80006d8:	01db      	lsls	r3, r3, #7
 80006da:	4413      	add	r3, r2
 80006dc:	b2c9      	uxtb	r1, r1
 80006de:	4a13      	ldr	r2, [pc, #76]	; (800072c <SSD1306_DrawPixel+0xb8>)
 80006e0:	54d1      	strb	r1, [r2, r3]
 80006e2:	e01d      	b.n	8000720 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80006e4:	88fa      	ldrh	r2, [r7, #6]
 80006e6:	88bb      	ldrh	r3, [r7, #4]
 80006e8:	08db      	lsrs	r3, r3, #3
 80006ea:	b298      	uxth	r0, r3
 80006ec:	4603      	mov	r3, r0
 80006ee:	01db      	lsls	r3, r3, #7
 80006f0:	4413      	add	r3, r2
 80006f2:	4a0e      	ldr	r2, [pc, #56]	; (800072c <SSD1306_DrawPixel+0xb8>)
 80006f4:	5cd3      	ldrb	r3, [r2, r3]
 80006f6:	b25a      	sxtb	r2, r3
 80006f8:	88bb      	ldrh	r3, [r7, #4]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	2101      	movs	r1, #1
 8000700:	fa01 f303 	lsl.w	r3, r1, r3
 8000704:	b25b      	sxtb	r3, r3
 8000706:	43db      	mvns	r3, r3
 8000708:	b25b      	sxtb	r3, r3
 800070a:	4013      	ands	r3, r2
 800070c:	b259      	sxtb	r1, r3
 800070e:	88fa      	ldrh	r2, [r7, #6]
 8000710:	4603      	mov	r3, r0
 8000712:	01db      	lsls	r3, r3, #7
 8000714:	4413      	add	r3, r2
 8000716:	b2c9      	uxtb	r1, r1
 8000718:	4a04      	ldr	r2, [pc, #16]	; (800072c <SSD1306_DrawPixel+0xb8>)
 800071a:	54d1      	strb	r1, [r2, r3]
 800071c:	e000      	b.n	8000720 <SSD1306_DrawPixel+0xac>
		return;
 800071e:	bf00      	nop
	}
}
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr
 8000728:	2000049c 	.word	0x2000049c
 800072c:	2000009c 	.word	0x2000009c

08000730 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	460a      	mov	r2, r1
 800073a:	80fb      	strh	r3, [r7, #6]
 800073c:	4613      	mov	r3, r2
 800073e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000740:	4a05      	ldr	r2, [pc, #20]	; (8000758 <SSD1306_GotoXY+0x28>)
 8000742:	88fb      	ldrh	r3, [r7, #6]
 8000744:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000746:	4a04      	ldr	r2, [pc, #16]	; (8000758 <SSD1306_GotoXY+0x28>)
 8000748:	88bb      	ldrh	r3, [r7, #4]
 800074a:	8053      	strh	r3, [r2, #2]
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	2000049c 	.word	0x2000049c

0800075c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	6039      	str	r1, [r7, #0]
 8000766:	71fb      	strb	r3, [r7, #7]
 8000768:	4613      	mov	r3, r2
 800076a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800076c:	4b3a      	ldr	r3, [pc, #232]	; (8000858 <SSD1306_Putc+0xfc>)
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	4413      	add	r3, r2
	if (
 8000778:	2b7f      	cmp	r3, #127	; 0x7f
 800077a:	dc07      	bgt.n	800078c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800077c:	4b36      	ldr	r3, [pc, #216]	; (8000858 <SSD1306_Putc+0xfc>)
 800077e:	885b      	ldrh	r3, [r3, #2]
 8000780:	461a      	mov	r2, r3
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	785b      	ldrb	r3, [r3, #1]
 8000786:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000788:	2b3f      	cmp	r3, #63	; 0x3f
 800078a:	dd01      	ble.n	8000790 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800078c:	2300      	movs	r3, #0
 800078e:	e05e      	b.n	800084e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	e04b      	b.n	800082e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	685a      	ldr	r2, [r3, #4]
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	3b20      	subs	r3, #32
 800079e:	6839      	ldr	r1, [r7, #0]
 80007a0:	7849      	ldrb	r1, [r1, #1]
 80007a2:	fb01 f303 	mul.w	r3, r1, r3
 80007a6:	4619      	mov	r1, r3
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	440b      	add	r3, r1
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	4413      	add	r3, r2
 80007b0:	881b      	ldrh	r3, [r3, #0]
 80007b2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80007b4:	2300      	movs	r3, #0
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	e030      	b.n	800081c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80007ba:	68fa      	ldr	r2, [r7, #12]
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	fa02 f303 	lsl.w	r3, r2, r3
 80007c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d010      	beq.n	80007ec <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80007ca:	4b23      	ldr	r3, [pc, #140]	; (8000858 <SSD1306_Putc+0xfc>)
 80007cc:	881a      	ldrh	r2, [r3, #0]
 80007ce:	693b      	ldr	r3, [r7, #16]
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	4413      	add	r3, r2
 80007d4:	b298      	uxth	r0, r3
 80007d6:	4b20      	ldr	r3, [pc, #128]	; (8000858 <SSD1306_Putc+0xfc>)
 80007d8:	885a      	ldrh	r2, [r3, #2]
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	b29b      	uxth	r3, r3
 80007de:	4413      	add	r3, r2
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	79ba      	ldrb	r2, [r7, #6]
 80007e4:	4619      	mov	r1, r3
 80007e6:	f7ff ff45 	bl	8000674 <SSD1306_DrawPixel>
 80007ea:	e014      	b.n	8000816 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80007ec:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <SSD1306_Putc+0xfc>)
 80007ee:	881a      	ldrh	r2, [r3, #0]
 80007f0:	693b      	ldr	r3, [r7, #16]
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	4413      	add	r3, r2
 80007f6:	b298      	uxth	r0, r3
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <SSD1306_Putc+0xfc>)
 80007fa:	885a      	ldrh	r2, [r3, #2]
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	4413      	add	r3, r2
 8000802:	b299      	uxth	r1, r3
 8000804:	79bb      	ldrb	r3, [r7, #6]
 8000806:	2b00      	cmp	r3, #0
 8000808:	bf0c      	ite	eq
 800080a:	2301      	moveq	r3, #1
 800080c:	2300      	movne	r3, #0
 800080e:	b2db      	uxtb	r3, r3
 8000810:	461a      	mov	r2, r3
 8000812:	f7ff ff2f 	bl	8000674 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	3301      	adds	r3, #1
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	461a      	mov	r2, r3
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	4293      	cmp	r3, r2
 8000826:	d3c8      	bcc.n	80007ba <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	3301      	adds	r3, #1
 800082c:	617b      	str	r3, [r7, #20]
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	785b      	ldrb	r3, [r3, #1]
 8000832:	461a      	mov	r2, r3
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	4293      	cmp	r3, r2
 8000838:	d3ad      	bcc.n	8000796 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800083a:	4b07      	ldr	r3, [pc, #28]	; (8000858 <SSD1306_Putc+0xfc>)
 800083c:	881a      	ldrh	r2, [r3, #0]
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	b29b      	uxth	r3, r3
 8000844:	4413      	add	r3, r2
 8000846:	b29a      	uxth	r2, r3
 8000848:	4b03      	ldr	r3, [pc, #12]	; (8000858 <SSD1306_Putc+0xfc>)
 800084a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800084c:	79fb      	ldrb	r3, [r7, #7]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	2000049c 	.word	0x2000049c

0800085c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	4613      	mov	r3, r2
 8000868:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800086a:	e012      	b.n	8000892 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	79fa      	ldrb	r2, [r7, #7]
 8000872:	68b9      	ldr	r1, [r7, #8]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff71 	bl	800075c <SSD1306_Putc>
 800087a:	4603      	mov	r3, r0
 800087c:	461a      	mov	r2, r3
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	429a      	cmp	r2, r3
 8000884:	d002      	beq.n	800088c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	e008      	b.n	800089e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	3301      	adds	r3, #1
 8000890:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d1e8      	bne.n	800086c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	781b      	ldrb	r3, [r3, #0]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80008a6:	b590      	push	{r4, r7, lr}
 80008a8:	b087      	sub	sp, #28
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	4604      	mov	r4, r0
 80008ae:	4608      	mov	r0, r1
 80008b0:	4611      	mov	r1, r2
 80008b2:	461a      	mov	r2, r3
 80008b4:	4623      	mov	r3, r4
 80008b6:	80fb      	strh	r3, [r7, #6]
 80008b8:	4603      	mov	r3, r0
 80008ba:	80bb      	strh	r3, [r7, #4]
 80008bc:	460b      	mov	r3, r1
 80008be:	807b      	strh	r3, [r7, #2]
 80008c0:	4613      	mov	r3, r2
 80008c2:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 80008c4:	88fb      	ldrh	r3, [r7, #6]
 80008c6:	2b7f      	cmp	r3, #127	; 0x7f
 80008c8:	d901      	bls.n	80008ce <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 80008ca:	237f      	movs	r3, #127	; 0x7f
 80008cc:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 80008ce:	887b      	ldrh	r3, [r7, #2]
 80008d0:	2b7f      	cmp	r3, #127	; 0x7f
 80008d2:	d901      	bls.n	80008d8 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 80008d4:	237f      	movs	r3, #127	; 0x7f
 80008d6:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 80008d8:	88bb      	ldrh	r3, [r7, #4]
 80008da:	2b3f      	cmp	r3, #63	; 0x3f
 80008dc:	d901      	bls.n	80008e2 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 80008de:	233f      	movs	r3, #63	; 0x3f
 80008e0:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 80008e2:	883b      	ldrh	r3, [r7, #0]
 80008e4:	2b3f      	cmp	r3, #63	; 0x3f
 80008e6:	d901      	bls.n	80008ec <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 80008e8:	233f      	movs	r3, #63	; 0x3f
 80008ea:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 80008ec:	88fa      	ldrh	r2, [r7, #6]
 80008ee:	887b      	ldrh	r3, [r7, #2]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d205      	bcs.n	8000900 <SSD1306_DrawLine+0x5a>
 80008f4:	887a      	ldrh	r2, [r7, #2]
 80008f6:	88fb      	ldrh	r3, [r7, #6]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	b21b      	sxth	r3, r3
 80008fe:	e004      	b.n	800090a <SSD1306_DrawLine+0x64>
 8000900:	88fa      	ldrh	r2, [r7, #6]
 8000902:	887b      	ldrh	r3, [r7, #2]
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	b29b      	uxth	r3, r3
 8000908:	b21b      	sxth	r3, r3
 800090a:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 800090c:	88ba      	ldrh	r2, [r7, #4]
 800090e:	883b      	ldrh	r3, [r7, #0]
 8000910:	429a      	cmp	r2, r3
 8000912:	d205      	bcs.n	8000920 <SSD1306_DrawLine+0x7a>
 8000914:	883a      	ldrh	r2, [r7, #0]
 8000916:	88bb      	ldrh	r3, [r7, #4]
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	b29b      	uxth	r3, r3
 800091c:	b21b      	sxth	r3, r3
 800091e:	e004      	b.n	800092a <SSD1306_DrawLine+0x84>
 8000920:	88ba      	ldrh	r2, [r7, #4]
 8000922:	883b      	ldrh	r3, [r7, #0]
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	b29b      	uxth	r3, r3
 8000928:	b21b      	sxth	r3, r3
 800092a:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 800092c:	88fa      	ldrh	r2, [r7, #6]
 800092e:	887b      	ldrh	r3, [r7, #2]
 8000930:	429a      	cmp	r2, r3
 8000932:	d201      	bcs.n	8000938 <SSD1306_DrawLine+0x92>
 8000934:	2301      	movs	r3, #1
 8000936:	e001      	b.n	800093c <SSD1306_DrawLine+0x96>
 8000938:	f04f 33ff 	mov.w	r3, #4294967295
 800093c:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 800093e:	88ba      	ldrh	r2, [r7, #4]
 8000940:	883b      	ldrh	r3, [r7, #0]
 8000942:	429a      	cmp	r2, r3
 8000944:	d201      	bcs.n	800094a <SSD1306_DrawLine+0xa4>
 8000946:	2301      	movs	r3, #1
 8000948:	e001      	b.n	800094e <SSD1306_DrawLine+0xa8>
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8000950:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000954:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000958:	429a      	cmp	r2, r3
 800095a:	dd06      	ble.n	800096a <SSD1306_DrawLine+0xc4>
 800095c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000960:	0fda      	lsrs	r2, r3, #31
 8000962:	4413      	add	r3, r2
 8000964:	105b      	asrs	r3, r3, #1
 8000966:	b21b      	sxth	r3, r3
 8000968:	e006      	b.n	8000978 <SSD1306_DrawLine+0xd2>
 800096a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800096e:	425b      	negs	r3, r3
 8000970:	0fda      	lsrs	r2, r3, #31
 8000972:	4413      	add	r3, r2
 8000974:	105b      	asrs	r3, r3, #1
 8000976:	b21b      	sxth	r3, r3
 8000978:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 800097a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d129      	bne.n	80009d6 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8000982:	883a      	ldrh	r2, [r7, #0]
 8000984:	88bb      	ldrh	r3, [r7, #4]
 8000986:	429a      	cmp	r2, r3
 8000988:	d205      	bcs.n	8000996 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 800098a:	883b      	ldrh	r3, [r7, #0]
 800098c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800098e:	88bb      	ldrh	r3, [r7, #4]
 8000990:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000992:	893b      	ldrh	r3, [r7, #8]
 8000994:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8000996:	887a      	ldrh	r2, [r7, #2]
 8000998:	88fb      	ldrh	r3, [r7, #6]
 800099a:	429a      	cmp	r2, r3
 800099c:	d205      	bcs.n	80009aa <SSD1306_DrawLine+0x104>
			tmp = x1;
 800099e:	887b      	ldrh	r3, [r7, #2]
 80009a0:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80009a2:	88fb      	ldrh	r3, [r7, #6]
 80009a4:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80009a6:	893b      	ldrh	r3, [r7, #8]
 80009a8:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80009aa:	88bb      	ldrh	r3, [r7, #4]
 80009ac:	82bb      	strh	r3, [r7, #20]
 80009ae:	e00c      	b.n	80009ca <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 80009b0:	8ab9      	ldrh	r1, [r7, #20]
 80009b2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80009b6:	88fb      	ldrh	r3, [r7, #6]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fe5b 	bl	8000674 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80009be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	3301      	adds	r3, #1
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	82bb      	strh	r3, [r7, #20]
 80009ca:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80009ce:	883b      	ldrh	r3, [r7, #0]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	dded      	ble.n	80009b0 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 80009d4:	e05f      	b.n	8000a96 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 80009d6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d129      	bne.n	8000a32 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 80009de:	883a      	ldrh	r2, [r7, #0]
 80009e0:	88bb      	ldrh	r3, [r7, #4]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d205      	bcs.n	80009f2 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 80009e6:	883b      	ldrh	r3, [r7, #0]
 80009e8:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80009ea:	88bb      	ldrh	r3, [r7, #4]
 80009ec:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80009ee:	893b      	ldrh	r3, [r7, #8]
 80009f0:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80009f2:	887a      	ldrh	r2, [r7, #2]
 80009f4:	88fb      	ldrh	r3, [r7, #6]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d205      	bcs.n	8000a06 <SSD1306_DrawLine+0x160>
			tmp = x1;
 80009fa:	887b      	ldrh	r3, [r7, #2]
 80009fc:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80009fe:	88fb      	ldrh	r3, [r7, #6]
 8000a00:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000a02:	893b      	ldrh	r3, [r7, #8]
 8000a04:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8000a06:	88fb      	ldrh	r3, [r7, #6]
 8000a08:	82bb      	strh	r3, [r7, #20]
 8000a0a:	e00c      	b.n	8000a26 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8000a0c:	8abb      	ldrh	r3, [r7, #20]
 8000a0e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000a12:	88b9      	ldrh	r1, [r7, #4]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fe2d 	bl	8000674 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8000a1a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	3301      	adds	r3, #1
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	82bb      	strh	r3, [r7, #20]
 8000a26:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000a2a:	887b      	ldrh	r3, [r7, #2]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	dded      	ble.n	8000a0c <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8000a30:	e031      	b.n	8000a96 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8000a32:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000a36:	88b9      	ldrh	r1, [r7, #4]
 8000a38:	88fb      	ldrh	r3, [r7, #6]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fe1a 	bl	8000674 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8000a40:	88fa      	ldrh	r2, [r7, #6]
 8000a42:	887b      	ldrh	r3, [r7, #2]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d103      	bne.n	8000a50 <SSD1306_DrawLine+0x1aa>
 8000a48:	88ba      	ldrh	r2, [r7, #4]
 8000a4a:	883b      	ldrh	r3, [r7, #0]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d021      	beq.n	8000a94 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8000a50:	8afb      	ldrh	r3, [r7, #22]
 8000a52:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8000a54:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000a58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000a5c:	425b      	negs	r3, r3
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	dd08      	ble.n	8000a74 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8000a62:	8afa      	ldrh	r2, [r7, #22]
 8000a64:	8a3b      	ldrh	r3, [r7, #16]
 8000a66:	1ad3      	subs	r3, r2, r3
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8000a6c:	89fa      	ldrh	r2, [r7, #14]
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	4413      	add	r3, r2
 8000a72:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8000a74:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000a78:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	dad8      	bge.n	8000a32 <SSD1306_DrawLine+0x18c>
			err += dx;
 8000a80:	8afa      	ldrh	r2, [r7, #22]
 8000a82:	8a7b      	ldrh	r3, [r7, #18]
 8000a84:	4413      	add	r3, r2
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8000a8a:	89ba      	ldrh	r2, [r7, #12]
 8000a8c:	88bb      	ldrh	r3, [r7, #4]
 8000a8e:	4413      	add	r3, r2
 8000a90:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8000a92:	e7ce      	b.n	8000a32 <SSD1306_DrawLine+0x18c>
			break;
 8000a94:	bf00      	nop
		} 
	}
}
 8000a96:	371c      	adds	r7, #28
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd90      	pop	{r4, r7, pc}

08000a9c <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af02      	add	r7, sp, #8
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	4608      	mov	r0, r1
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4623      	mov	r3, r4
 8000aac:	80fb      	strh	r3, [r7, #6]
 8000aae:	4603      	mov	r3, r0
 8000ab0:	80bb      	strh	r3, [r7, #4]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	807b      	strh	r3, [r7, #2]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8000aba:	88fb      	ldrh	r3, [r7, #6]
 8000abc:	2b7f      	cmp	r3, #127	; 0x7f
 8000abe:	d853      	bhi.n	8000b68 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8000ac0:	88bb      	ldrh	r3, [r7, #4]
 8000ac2:	2b3f      	cmp	r3, #63	; 0x3f
 8000ac4:	d850      	bhi.n	8000b68 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8000ac6:	88fa      	ldrh	r2, [r7, #6]
 8000ac8:	887b      	ldrh	r3, [r7, #2]
 8000aca:	4413      	add	r3, r2
 8000acc:	2b7f      	cmp	r3, #127	; 0x7f
 8000ace:	dd03      	ble.n	8000ad8 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8000ad0:	88fb      	ldrh	r3, [r7, #6]
 8000ad2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000ad6:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8000ad8:	88ba      	ldrh	r2, [r7, #4]
 8000ada:	883b      	ldrh	r3, [r7, #0]
 8000adc:	4413      	add	r3, r2
 8000ade:	2b3f      	cmp	r3, #63	; 0x3f
 8000ae0:	dd03      	ble.n	8000aea <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8000ae2:	88bb      	ldrh	r3, [r7, #4]
 8000ae4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000ae8:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8000aea:	88fa      	ldrh	r2, [r7, #6]
 8000aec:	887b      	ldrh	r3, [r7, #2]
 8000aee:	4413      	add	r3, r2
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	88bc      	ldrh	r4, [r7, #4]
 8000af4:	88b9      	ldrh	r1, [r7, #4]
 8000af6:	88f8      	ldrh	r0, [r7, #6]
 8000af8:	7e3b      	ldrb	r3, [r7, #24]
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	4623      	mov	r3, r4
 8000afe:	f7ff fed2 	bl	80008a6 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8000b02:	88ba      	ldrh	r2, [r7, #4]
 8000b04:	883b      	ldrh	r3, [r7, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	b299      	uxth	r1, r3
 8000b0a:	88fa      	ldrh	r2, [r7, #6]
 8000b0c:	887b      	ldrh	r3, [r7, #2]
 8000b0e:	4413      	add	r3, r2
 8000b10:	b29c      	uxth	r4, r3
 8000b12:	88ba      	ldrh	r2, [r7, #4]
 8000b14:	883b      	ldrh	r3, [r7, #0]
 8000b16:	4413      	add	r3, r2
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	88f8      	ldrh	r0, [r7, #6]
 8000b1c:	7e3b      	ldrb	r3, [r7, #24]
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	4613      	mov	r3, r2
 8000b22:	4622      	mov	r2, r4
 8000b24:	f7ff febf 	bl	80008a6 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8000b28:	88ba      	ldrh	r2, [r7, #4]
 8000b2a:	883b      	ldrh	r3, [r7, #0]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	b29c      	uxth	r4, r3
 8000b30:	88fa      	ldrh	r2, [r7, #6]
 8000b32:	88b9      	ldrh	r1, [r7, #4]
 8000b34:	88f8      	ldrh	r0, [r7, #6]
 8000b36:	7e3b      	ldrb	r3, [r7, #24]
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	4623      	mov	r3, r4
 8000b3c:	f7ff feb3 	bl	80008a6 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8000b40:	88fa      	ldrh	r2, [r7, #6]
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	4413      	add	r3, r2
 8000b46:	b298      	uxth	r0, r3
 8000b48:	88fa      	ldrh	r2, [r7, #6]
 8000b4a:	887b      	ldrh	r3, [r7, #2]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	b29c      	uxth	r4, r3
 8000b50:	88ba      	ldrh	r2, [r7, #4]
 8000b52:	883b      	ldrh	r3, [r7, #0]
 8000b54:	4413      	add	r3, r2
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	88b9      	ldrh	r1, [r7, #4]
 8000b5a:	7e3b      	ldrb	r3, [r7, #24]
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	4622      	mov	r2, r4
 8000b62:	f7ff fea0 	bl	80008a6 <SSD1306_DrawLine>
 8000b66:	e000      	b.n	8000b6a <SSD1306_DrawRectangle+0xce>
		return;
 8000b68:	bf00      	nop
}
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd90      	pop	{r4, r7, pc}

08000b70 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000b74:	2000      	movs	r0, #0
 8000b76:	f7ff fd65 	bl	8000644 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000b7a:	f7ff fd35 	bl	80005e8 <SSD1306_UpdateScreen>
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000b8a:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <ssd1306_I2C_Init+0x24>)
 8000b8c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b8e:	e002      	b.n	8000b96 <ssd1306_I2C_Init+0x12>
		p--;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d1f9      	bne.n	8000b90 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	0003d090 	.word	0x0003d090

08000bac <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000bac:	b590      	push	{r4, r7, lr}
 8000bae:	b0c7      	sub	sp, #284	; 0x11c
 8000bb0:	af02      	add	r7, sp, #8
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	4608      	mov	r0, r1
 8000bb6:	4639      	mov	r1, r7
 8000bb8:	600a      	str	r2, [r1, #0]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	1dfb      	adds	r3, r7, #7
 8000bbe:	4622      	mov	r2, r4
 8000bc0:	701a      	strb	r2, [r3, #0]
 8000bc2:	1dbb      	adds	r3, r7, #6
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	701a      	strb	r2, [r3, #0]
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	460a      	mov	r2, r1
 8000bcc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000bce:	f107 030c 	add.w	r3, r7, #12
 8000bd2:	1dba      	adds	r2, r7, #6
 8000bd4:	7812      	ldrb	r2, [r2, #0]
 8000bd6:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000bde:	e010      	b.n	8000c02 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8000be0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000be4:	463a      	mov	r2, r7
 8000be6:	6812      	ldr	r2, [r2, #0]
 8000be8:	441a      	add	r2, r3
 8000bea:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000bee:	3301      	adds	r3, #1
 8000bf0:	7811      	ldrb	r1, [r2, #0]
 8000bf2:	f107 020c 	add.w	r2, r7, #12
 8000bf6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000bf8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000c02:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	1d3a      	adds	r2, r7, #4
 8000c0a:	8812      	ldrh	r2, [r2, #0]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d8e7      	bhi.n	8000be0 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000c10:	1dfb      	adds	r3, r7, #7
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b299      	uxth	r1, r3
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	881b      	ldrh	r3, [r3, #0]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	b298      	uxth	r0, r3
 8000c1e:	f107 020c 	add.w	r2, r7, #12
 8000c22:	230a      	movs	r3, #10
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	4603      	mov	r3, r0
 8000c28:	4803      	ldr	r0, [pc, #12]	; (8000c38 <ssd1306_I2C_WriteMulti+0x8c>)
 8000c2a:	f000 fd4b 	bl	80016c4 <HAL_I2C_Master_Transmit>
}
 8000c2e:	bf00      	nop
 8000c30:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd90      	pop	{r4, r7, pc}
 8000c38:	200004b0 	.word	0x200004b0

08000c3c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af02      	add	r7, sp, #8
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
 8000c46:	460b      	mov	r3, r1
 8000c48:	71bb      	strb	r3, [r7, #6]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000c4e:	79bb      	ldrb	r3, [r7, #6]
 8000c50:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000c52:	797b      	ldrb	r3, [r7, #5]
 8000c54:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	b299      	uxth	r1, r3
 8000c5a:	f107 020c 	add.w	r2, r7, #12
 8000c5e:	230a      	movs	r3, #10
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	2302      	movs	r3, #2
 8000c64:	4803      	ldr	r0, [pc, #12]	; (8000c74 <ssd1306_I2C_Write+0x38>)
 8000c66:	f000 fd2d 	bl	80016c4 <HAL_I2C_Master_Transmit>
}
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200004b0 	.word	0x200004b0

08000c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <HAL_MspInit+0x5c>)
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	4a14      	ldr	r2, [pc, #80]	; (8000cd4 <HAL_MspInit+0x5c>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6193      	str	r3, [r2, #24]
 8000c8a:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_MspInit+0x5c>)
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c96:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <HAL_MspInit+0x5c>)
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <HAL_MspInit+0x5c>)
 8000c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca0:	61d3      	str	r3, [r2, #28]
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <HAL_MspInit+0x5c>)
 8000ca4:	69db      	ldr	r3, [r3, #28]
 8000ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cae:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <HAL_MspInit+0x60>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <HAL_MspInit+0x60>)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40010000 	.word	0x40010000

08000cdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0310 	add.w	r3, r7, #16
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a15      	ldr	r2, [pc, #84]	; (8000d4c <HAL_I2C_MspInit+0x70>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d123      	bne.n	8000d44 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <HAL_I2C_MspInit+0x74>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a13      	ldr	r2, [pc, #76]	; (8000d50 <HAL_I2C_MspInit+0x74>)
 8000d02:	f043 0308 	orr.w	r3, r3, #8
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <HAL_I2C_MspInit+0x74>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0308 	and.w	r3, r3, #8
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d14:	23c0      	movs	r3, #192	; 0xc0
 8000d16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d18:	2312      	movs	r3, #18
 8000d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d20:	f107 0310 	add.w	r3, r7, #16
 8000d24:	4619      	mov	r1, r3
 8000d26:	480b      	ldr	r0, [pc, #44]	; (8000d54 <HAL_I2C_MspInit+0x78>)
 8000d28:	f000 fa0a 	bl	8001140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <HAL_I2C_MspInit+0x74>)
 8000d2e:	69db      	ldr	r3, [r3, #28]
 8000d30:	4a07      	ldr	r2, [pc, #28]	; (8000d50 <HAL_I2C_MspInit+0x74>)
 8000d32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d36:	61d3      	str	r3, [r2, #28]
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <HAL_I2C_MspInit+0x74>)
 8000d3a:	69db      	ldr	r3, [r3, #28]
 8000d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d44:	bf00      	nop
 8000d46:	3720      	adds	r7, #32
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40005400 	.word	0x40005400
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40010c00 	.word	0x40010c00

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <HardFault_Handler+0x4>

08000d6a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <MemManage_Handler+0x4>

08000d70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <BusFault_Handler+0x4>

08000d76 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <UsageFault_Handler+0x4>

08000d7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr

08000d88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr

08000d94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da4:	f000 f8cc 	bl	8000f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}

08000dac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <_sbrk+0x50>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d102      	bne.n	8000dc2 <_sbrk+0x16>
		heap_end = &end;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <_sbrk+0x50>)
 8000dbe:	4a10      	ldr	r2, [pc, #64]	; (8000e00 <_sbrk+0x54>)
 8000dc0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <_sbrk+0x50>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <_sbrk+0x50>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4413      	add	r3, r2
 8000dd0:	466a      	mov	r2, sp
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d907      	bls.n	8000de6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000dd6:	f001 fcb1 	bl	800273c <__errno>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	230c      	movs	r3, #12
 8000dde:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000de0:	f04f 33ff 	mov.w	r3, #4294967295
 8000de4:	e006      	b.n	8000df4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000de6:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <_sbrk+0x50>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	4a03      	ldr	r2, [pc, #12]	; (8000dfc <_sbrk+0x50>)
 8000df0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000df2:	68fb      	ldr	r3, [r7, #12]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	200004a4 	.word	0x200004a4
 8000e00:	20000510 	.word	0x20000510

08000e04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr

08000e10 <character_draw>:
        SSD1306_UpdateScreen();
        HAL_Delay (10);
    }
}
void character_draw (uint8_t color)
{
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b087      	sub	sp, #28
 8000e14:	af02      	add	r7, sp, #8
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
    uint8_t n, i, i2;

    SSD1306_Clear ();
 8000e1a:	f7ff fea9 	bl	8000b70 <SSD1306_Clear>

    n = min(SSD1306_WIDTH, SSD1306_HEIGHT);
 8000e1e:	2340      	movs	r3, #64	; 0x40
 8000e20:	73bb      	strb	r3, [r7, #14]

    for (i = 2; i < 30; i += 6)
 8000e22:	2302      	movs	r3, #2
 8000e24:	73fb      	strb	r3, [r7, #15]
 8000e26:	e018      	b.n	8000e5a <character_draw+0x4a>
    {
        i2 = i / 2;
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	085b      	lsrs	r3, r3, #1
 8000e2c:	737b      	strb	r3, [r7, #13]
        SSD1306_DrawRectangle((SSD1306_WIDTH/2) - i2, (SSD1306_HEIGHT/2) - i2 + 10, i, i, color);
 8000e2e:	7b7b      	ldrb	r3, [r7, #13]
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000e36:	b298      	uxth	r0, r3
 8000e38:	7b7b      	ldrb	r3, [r7, #13]
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	f1c3 032a 	rsb	r3, r3, #42	; 0x2a
 8000e40:	b299      	uxth	r1, r3
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	b29c      	uxth	r4, r3
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	4623      	mov	r3, r4
 8000e50:	f7ff fe24 	bl	8000a9c <SSD1306_DrawRectangle>
    for (i = 2; i < 30; i += 6)
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	3306      	adds	r3, #6
 8000e58:	73fb      	strb	r3, [r7, #15]
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	2b1d      	cmp	r3, #29
 8000e5e:	d9e3      	bls.n	8000e28 <character_draw+0x18>
        //SSD1306_UpdateScreen();
        //HAL_Delay (10);
    }
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd90      	pop	{r4, r7, pc}

08000e68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e68:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e6a:	e003      	b.n	8000e74 <LoopCopyDataInit>

08000e6c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e6c:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000e6e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e70:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e72:	3104      	adds	r1, #4

08000e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e74:	480a      	ldr	r0, [pc, #40]	; (8000ea0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000e78:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e7a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e7c:	d3f6      	bcc.n	8000e6c <CopyDataInit>
  ldr r2, =_sbss
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000e80:	e002      	b.n	8000e88 <LoopFillZerobss>

08000e82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e84:	f842 3b04 	str.w	r3, [r2], #4

08000e88 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000e8a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e8c:	d3f9      	bcc.n	8000e82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e8e:	f7ff ffb9 	bl	8000e04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e92:	f001 fc59 	bl	8002748 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e96:	f7ff f959 	bl	800014c <main>
  bx lr
 8000e9a:	4770      	bx	lr
  ldr r3, =_sidata
 8000e9c:	08004538 	.word	0x08004538
  ldr r0, =_sdata
 8000ea0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ea4:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 8000ea8:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 8000eac:	2000050c 	.word	0x2000050c

08000eb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eb0:	e7fe      	b.n	8000eb0 <ADC1_2_IRQHandler>
	...

08000eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_Init+0x28>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a07      	ldr	r2, [pc, #28]	; (8000edc <HAL_Init+0x28>)
 8000ebe:	f043 0310 	orr.w	r3, r3, #16
 8000ec2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	f000 f907 	bl	80010d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f000 f808 	bl	8000ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed0:	f7ff fed2 	bl	8000c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40022000 	.word	0x40022000

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_InitTick+0x54>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_InitTick+0x58>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f911 	bl	8001126 <HAL_SYSTICK_Config>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00e      	b.n	8000f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b0f      	cmp	r3, #15
 8000f12:	d80a      	bhi.n	8000f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f14:	2200      	movs	r2, #0
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f000 f8e7 	bl	80010ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f20:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <HAL_InitTick+0x5c>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e000      	b.n	8000f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000010 	.word	0x20000010
 8000f38:	20000018 	.word	0x20000018
 8000f3c:	20000014 	.word	0x20000014

08000f40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <HAL_IncTick+0x1c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_IncTick+0x20>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a03      	ldr	r2, [pc, #12]	; (8000f60 <HAL_IncTick+0x20>)
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	20000018 	.word	0x20000018
 8000f60:	20000504 	.word	0x20000504

08000f64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return uwTick;
 8000f68:	4b02      	ldr	r3, [pc, #8]	; (8000f74 <HAL_GetTick+0x10>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	20000504 	.word	0x20000504

08000f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f94:	4013      	ands	r3, r2
 8000f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000faa:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	60d3      	str	r3, [r2, #12]
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	f003 0307 	and.w	r3, r3, #7
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	; (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	; (800102c <__NVIC_SetPriority+0x50>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	; 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr

08001094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a4:	d301      	bcc.n	80010aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00f      	b.n	80010ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010aa:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <SysTick_Config+0x40>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b2:	210f      	movs	r1, #15
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	f7ff ff90 	bl	8000fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <SysTick_Config+0x40>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c2:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <SysTick_Config+0x40>)
 80010c4:	2207      	movs	r2, #7
 80010c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	e000e010 	.word	0xe000e010

080010d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ff49 	bl	8000f78 <__NVIC_SetPriorityGrouping>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b086      	sub	sp, #24
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001100:	f7ff ff5e 	bl	8000fc0 <__NVIC_GetPriorityGrouping>
 8001104:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	68b9      	ldr	r1, [r7, #8]
 800110a:	6978      	ldr	r0, [r7, #20]
 800110c:	f7ff ff90 	bl	8001030 <NVIC_EncodePriority>
 8001110:	4602      	mov	r2, r0
 8001112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff5f 	bl	8000fdc <__NVIC_SetPriority>
}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ffb0 	bl	8001094 <SysTick_Config>
 8001134:	4603      	mov	r3, r0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001140:	b480      	push	{r7}
 8001142:	b08b      	sub	sp, #44	; 0x2c
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800114e:	2300      	movs	r3, #0
 8001150:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001152:	e127      	b.n	80013a4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001154:	2201      	movs	r2, #1
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	69fa      	ldr	r2, [r7, #28]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	429a      	cmp	r2, r3
 800116e:	f040 8116 	bne.w	800139e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b12      	cmp	r3, #18
 8001178:	d034      	beq.n	80011e4 <HAL_GPIO_Init+0xa4>
 800117a:	2b12      	cmp	r3, #18
 800117c:	d80d      	bhi.n	800119a <HAL_GPIO_Init+0x5a>
 800117e:	2b02      	cmp	r3, #2
 8001180:	d02b      	beq.n	80011da <HAL_GPIO_Init+0x9a>
 8001182:	2b02      	cmp	r3, #2
 8001184:	d804      	bhi.n	8001190 <HAL_GPIO_Init+0x50>
 8001186:	2b00      	cmp	r3, #0
 8001188:	d031      	beq.n	80011ee <HAL_GPIO_Init+0xae>
 800118a:	2b01      	cmp	r3, #1
 800118c:	d01c      	beq.n	80011c8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800118e:	e048      	b.n	8001222 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001190:	2b03      	cmp	r3, #3
 8001192:	d043      	beq.n	800121c <HAL_GPIO_Init+0xdc>
 8001194:	2b11      	cmp	r3, #17
 8001196:	d01b      	beq.n	80011d0 <HAL_GPIO_Init+0x90>
          break;
 8001198:	e043      	b.n	8001222 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800119a:	4a89      	ldr	r2, [pc, #548]	; (80013c0 <HAL_GPIO_Init+0x280>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d026      	beq.n	80011ee <HAL_GPIO_Init+0xae>
 80011a0:	4a87      	ldr	r2, [pc, #540]	; (80013c0 <HAL_GPIO_Init+0x280>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d806      	bhi.n	80011b4 <HAL_GPIO_Init+0x74>
 80011a6:	4a87      	ldr	r2, [pc, #540]	; (80013c4 <HAL_GPIO_Init+0x284>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d020      	beq.n	80011ee <HAL_GPIO_Init+0xae>
 80011ac:	4a86      	ldr	r2, [pc, #536]	; (80013c8 <HAL_GPIO_Init+0x288>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d01d      	beq.n	80011ee <HAL_GPIO_Init+0xae>
          break;
 80011b2:	e036      	b.n	8001222 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011b4:	4a85      	ldr	r2, [pc, #532]	; (80013cc <HAL_GPIO_Init+0x28c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d019      	beq.n	80011ee <HAL_GPIO_Init+0xae>
 80011ba:	4a85      	ldr	r2, [pc, #532]	; (80013d0 <HAL_GPIO_Init+0x290>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d016      	beq.n	80011ee <HAL_GPIO_Init+0xae>
 80011c0:	4a84      	ldr	r2, [pc, #528]	; (80013d4 <HAL_GPIO_Init+0x294>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d013      	beq.n	80011ee <HAL_GPIO_Init+0xae>
          break;
 80011c6:	e02c      	b.n	8001222 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	623b      	str	r3, [r7, #32]
          break;
 80011ce:	e028      	b.n	8001222 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	3304      	adds	r3, #4
 80011d6:	623b      	str	r3, [r7, #32]
          break;
 80011d8:	e023      	b.n	8001222 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	3308      	adds	r3, #8
 80011e0:	623b      	str	r3, [r7, #32]
          break;
 80011e2:	e01e      	b.n	8001222 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	330c      	adds	r3, #12
 80011ea:	623b      	str	r3, [r7, #32]
          break;
 80011ec:	e019      	b.n	8001222 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d102      	bne.n	80011fc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011f6:	2304      	movs	r3, #4
 80011f8:	623b      	str	r3, [r7, #32]
          break;
 80011fa:	e012      	b.n	8001222 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d105      	bne.n	8001210 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001204:	2308      	movs	r3, #8
 8001206:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69fa      	ldr	r2, [r7, #28]
 800120c:	611a      	str	r2, [r3, #16]
          break;
 800120e:	e008      	b.n	8001222 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001210:	2308      	movs	r3, #8
 8001212:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69fa      	ldr	r2, [r7, #28]
 8001218:	615a      	str	r2, [r3, #20]
          break;
 800121a:	e002      	b.n	8001222 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
          break;
 8001220:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	2bff      	cmp	r3, #255	; 0xff
 8001226:	d801      	bhi.n	800122c <HAL_GPIO_Init+0xec>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	e001      	b.n	8001230 <HAL_GPIO_Init+0xf0>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3304      	adds	r3, #4
 8001230:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	2bff      	cmp	r3, #255	; 0xff
 8001236:	d802      	bhi.n	800123e <HAL_GPIO_Init+0xfe>
 8001238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	e002      	b.n	8001244 <HAL_GPIO_Init+0x104>
 800123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001240:	3b08      	subs	r3, #8
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	210f      	movs	r1, #15
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	401a      	ands	r2, r3
 8001256:	6a39      	ldr	r1, [r7, #32]
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	431a      	orrs	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126c:	2b00      	cmp	r3, #0
 800126e:	f000 8096 	beq.w	800139e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001272:	4b59      	ldr	r3, [pc, #356]	; (80013d8 <HAL_GPIO_Init+0x298>)
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	4a58      	ldr	r2, [pc, #352]	; (80013d8 <HAL_GPIO_Init+0x298>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6193      	str	r3, [r2, #24]
 800127e:	4b56      	ldr	r3, [pc, #344]	; (80013d8 <HAL_GPIO_Init+0x298>)
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800128a:	4a54      	ldr	r2, [pc, #336]	; (80013dc <HAL_GPIO_Init+0x29c>)
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	089b      	lsrs	r3, r3, #2
 8001290:	3302      	adds	r3, #2
 8001292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001296:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	220f      	movs	r2, #15
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	4013      	ands	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a4b      	ldr	r2, [pc, #300]	; (80013e0 <HAL_GPIO_Init+0x2a0>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d013      	beq.n	80012de <HAL_GPIO_Init+0x19e>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a4a      	ldr	r2, [pc, #296]	; (80013e4 <HAL_GPIO_Init+0x2a4>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d00d      	beq.n	80012da <HAL_GPIO_Init+0x19a>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a49      	ldr	r2, [pc, #292]	; (80013e8 <HAL_GPIO_Init+0x2a8>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d007      	beq.n	80012d6 <HAL_GPIO_Init+0x196>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a48      	ldr	r2, [pc, #288]	; (80013ec <HAL_GPIO_Init+0x2ac>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d101      	bne.n	80012d2 <HAL_GPIO_Init+0x192>
 80012ce:	2303      	movs	r3, #3
 80012d0:	e006      	b.n	80012e0 <HAL_GPIO_Init+0x1a0>
 80012d2:	2304      	movs	r3, #4
 80012d4:	e004      	b.n	80012e0 <HAL_GPIO_Init+0x1a0>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e002      	b.n	80012e0 <HAL_GPIO_Init+0x1a0>
 80012da:	2301      	movs	r3, #1
 80012dc:	e000      	b.n	80012e0 <HAL_GPIO_Init+0x1a0>
 80012de:	2300      	movs	r3, #0
 80012e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012e2:	f002 0203 	and.w	r2, r2, #3
 80012e6:	0092      	lsls	r2, r2, #2
 80012e8:	4093      	lsls	r3, r2
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012f0:	493a      	ldr	r1, [pc, #232]	; (80013dc <HAL_GPIO_Init+0x29c>)
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3302      	adds	r3, #2
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d006      	beq.n	8001318 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800130a:	4b39      	ldr	r3, [pc, #228]	; (80013f0 <HAL_GPIO_Init+0x2b0>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	4938      	ldr	r1, [pc, #224]	; (80013f0 <HAL_GPIO_Init+0x2b0>)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	4313      	orrs	r3, r2
 8001314:	600b      	str	r3, [r1, #0]
 8001316:	e006      	b.n	8001326 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001318:	4b35      	ldr	r3, [pc, #212]	; (80013f0 <HAL_GPIO_Init+0x2b0>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	43db      	mvns	r3, r3
 8001320:	4933      	ldr	r1, [pc, #204]	; (80013f0 <HAL_GPIO_Init+0x2b0>)
 8001322:	4013      	ands	r3, r2
 8001324:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d006      	beq.n	8001340 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001332:	4b2f      	ldr	r3, [pc, #188]	; (80013f0 <HAL_GPIO_Init+0x2b0>)
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	492e      	ldr	r1, [pc, #184]	; (80013f0 <HAL_GPIO_Init+0x2b0>)
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	604b      	str	r3, [r1, #4]
 800133e:	e006      	b.n	800134e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001340:	4b2b      	ldr	r3, [pc, #172]	; (80013f0 <HAL_GPIO_Init+0x2b0>)
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	43db      	mvns	r3, r3
 8001348:	4929      	ldr	r1, [pc, #164]	; (80013f0 <HAL_GPIO_Init+0x2b0>)
 800134a:	4013      	ands	r3, r2
 800134c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d006      	beq.n	8001368 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800135a:	4b25      	ldr	r3, [pc, #148]	; (80013f0 <HAL_GPIO_Init+0x2b0>)
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	4924      	ldr	r1, [pc, #144]	; (80013f0 <HAL_GPIO_Init+0x2b0>)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	608b      	str	r3, [r1, #8]
 8001366:	e006      	b.n	8001376 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001368:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <HAL_GPIO_Init+0x2b0>)
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	43db      	mvns	r3, r3
 8001370:	491f      	ldr	r1, [pc, #124]	; (80013f0 <HAL_GPIO_Init+0x2b0>)
 8001372:	4013      	ands	r3, r2
 8001374:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d006      	beq.n	8001390 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001382:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <HAL_GPIO_Init+0x2b0>)
 8001384:	68da      	ldr	r2, [r3, #12]
 8001386:	491a      	ldr	r1, [pc, #104]	; (80013f0 <HAL_GPIO_Init+0x2b0>)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	4313      	orrs	r3, r2
 800138c:	60cb      	str	r3, [r1, #12]
 800138e:	e006      	b.n	800139e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001390:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <HAL_GPIO_Init+0x2b0>)
 8001392:	68da      	ldr	r2, [r3, #12]
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	43db      	mvns	r3, r3
 8001398:	4915      	ldr	r1, [pc, #84]	; (80013f0 <HAL_GPIO_Init+0x2b0>)
 800139a:	4013      	ands	r3, r2
 800139c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	3301      	adds	r3, #1
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	fa22 f303 	lsr.w	r3, r2, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f47f aed0 	bne.w	8001154 <HAL_GPIO_Init+0x14>
  }
}
 80013b4:	bf00      	nop
 80013b6:	372c      	adds	r7, #44	; 0x2c
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	10210000 	.word	0x10210000
 80013c4:	10110000 	.word	0x10110000
 80013c8:	10120000 	.word	0x10120000
 80013cc:	10310000 	.word	0x10310000
 80013d0:	10320000 	.word	0x10320000
 80013d4:	10220000 	.word	0x10220000
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40010000 	.word	0x40010000
 80013e0:	40010800 	.word	0x40010800
 80013e4:	40010c00 	.word	0x40010c00
 80013e8:	40011000 	.word	0x40011000
 80013ec:	40011400 	.word	0x40011400
 80013f0:	40010400 	.word	0x40010400

080013f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	887b      	ldrh	r3, [r7, #2]
 8001406:	4013      	ands	r3, r2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d002      	beq.n	8001412 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800140c:	2301      	movs	r3, #1
 800140e:	73fb      	strb	r3, [r7, #15]
 8001410:	e001      	b.n	8001416 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001412:	2300      	movs	r3, #0
 8001414:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001416:	7bfb      	ldrb	r3, [r7, #15]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr

08001422 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	460b      	mov	r3, r1
 800142c:	807b      	strh	r3, [r7, #2]
 800142e:	4613      	mov	r3, r2
 8001430:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001432:	787b      	ldrb	r3, [r7, #1]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001438:	887a      	ldrh	r2, [r7, #2]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800143e:	e003      	b.n	8001448 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001440:	887b      	ldrh	r3, [r7, #2]
 8001442:	041a      	lsls	r2, r3, #16
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	611a      	str	r2, [r3, #16]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
	...

08001454 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e11f      	b.n	80016a6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d106      	bne.n	8001480 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fc2e 	bl	8000cdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2224      	movs	r2, #36	; 0x24
 8001484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0201 	bic.w	r2, r2, #1
 8001496:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014b8:	f001 f90e 	bl	80026d8 <HAL_RCC_GetPCLK1Freq>
 80014bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	4a7b      	ldr	r2, [pc, #492]	; (80016b0 <HAL_I2C_Init+0x25c>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d807      	bhi.n	80014d8 <HAL_I2C_Init+0x84>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4a7a      	ldr	r2, [pc, #488]	; (80016b4 <HAL_I2C_Init+0x260>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	bf94      	ite	ls
 80014d0:	2301      	movls	r3, #1
 80014d2:	2300      	movhi	r3, #0
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	e006      	b.n	80014e6 <HAL_I2C_Init+0x92>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4a77      	ldr	r2, [pc, #476]	; (80016b8 <HAL_I2C_Init+0x264>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	bf94      	ite	ls
 80014e0:	2301      	movls	r3, #1
 80014e2:	2300      	movhi	r3, #0
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e0db      	b.n	80016a6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	4a72      	ldr	r2, [pc, #456]	; (80016bc <HAL_I2C_Init+0x268>)
 80014f2:	fba2 2303 	umull	r2, r3, r2, r3
 80014f6:	0c9b      	lsrs	r3, r3, #18
 80014f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68ba      	ldr	r2, [r7, #8]
 800150a:	430a      	orrs	r2, r1
 800150c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	4a64      	ldr	r2, [pc, #400]	; (80016b0 <HAL_I2C_Init+0x25c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d802      	bhi.n	8001528 <HAL_I2C_Init+0xd4>
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	3301      	adds	r3, #1
 8001526:	e009      	b.n	800153c <HAL_I2C_Init+0xe8>
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800152e:	fb02 f303 	mul.w	r3, r2, r3
 8001532:	4a63      	ldr	r2, [pc, #396]	; (80016c0 <HAL_I2C_Init+0x26c>)
 8001534:	fba2 2303 	umull	r2, r3, r2, r3
 8001538:	099b      	lsrs	r3, r3, #6
 800153a:	3301      	adds	r3, #1
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	6812      	ldr	r2, [r2, #0]
 8001540:	430b      	orrs	r3, r1
 8001542:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800154e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	4956      	ldr	r1, [pc, #344]	; (80016b0 <HAL_I2C_Init+0x25c>)
 8001558:	428b      	cmp	r3, r1
 800155a:	d80d      	bhi.n	8001578 <HAL_I2C_Init+0x124>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	1e59      	subs	r1, r3, #1
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	fbb1 f3f3 	udiv	r3, r1, r3
 800156a:	3301      	adds	r3, #1
 800156c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001570:	2b04      	cmp	r3, #4
 8001572:	bf38      	it	cc
 8001574:	2304      	movcc	r3, #4
 8001576:	e04f      	b.n	8001618 <HAL_I2C_Init+0x1c4>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d111      	bne.n	80015a4 <HAL_I2C_Init+0x150>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	1e58      	subs	r0, r3, #1
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6859      	ldr	r1, [r3, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	440b      	add	r3, r1
 800158e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001592:	3301      	adds	r3, #1
 8001594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001598:	2b00      	cmp	r3, #0
 800159a:	bf0c      	ite	eq
 800159c:	2301      	moveq	r3, #1
 800159e:	2300      	movne	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	e012      	b.n	80015ca <HAL_I2C_Init+0x176>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	1e58      	subs	r0, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6859      	ldr	r1, [r3, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	0099      	lsls	r1, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ba:	3301      	adds	r3, #1
 80015bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	bf0c      	ite	eq
 80015c4:	2301      	moveq	r3, #1
 80015c6:	2300      	movne	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_I2C_Init+0x17e>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e022      	b.n	8001618 <HAL_I2C_Init+0x1c4>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10e      	bne.n	80015f8 <HAL_I2C_Init+0x1a4>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	1e58      	subs	r0, r3, #1
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6859      	ldr	r1, [r3, #4]
 80015e2:	460b      	mov	r3, r1
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	440b      	add	r3, r1
 80015e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ec:	3301      	adds	r3, #1
 80015ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015f6:	e00f      	b.n	8001618 <HAL_I2C_Init+0x1c4>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	1e58      	subs	r0, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6859      	ldr	r1, [r3, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	0099      	lsls	r1, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	fbb0 f3f3 	udiv	r3, r0, r3
 800160e:	3301      	adds	r3, #1
 8001610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001614:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	6809      	ldr	r1, [r1, #0]
 800161c:	4313      	orrs	r3, r2
 800161e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69da      	ldr	r2, [r3, #28]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001646:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	6911      	ldr	r1, [r2, #16]
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	68d2      	ldr	r2, [r2, #12]
 8001652:	4311      	orrs	r1, r2
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	430b      	orrs	r3, r1
 800165a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695a      	ldr	r2, [r3, #20]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 0201 	orr.w	r2, r2, #1
 8001686:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2220      	movs	r2, #32
 8001692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	000186a0 	.word	0x000186a0
 80016b4:	001e847f 	.word	0x001e847f
 80016b8:	003d08ff 	.word	0x003d08ff
 80016bc:	431bde83 	.word	0x431bde83
 80016c0:	10624dd3 	.word	0x10624dd3

080016c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	461a      	mov	r2, r3
 80016d0:	460b      	mov	r3, r1
 80016d2:	817b      	strh	r3, [r7, #10]
 80016d4:	4613      	mov	r3, r2
 80016d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016d8:	f7ff fc44 	bl	8000f64 <HAL_GetTick>
 80016dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b20      	cmp	r3, #32
 80016e8:	f040 80e0 	bne.w	80018ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	2319      	movs	r3, #25
 80016f2:	2201      	movs	r2, #1
 80016f4:	4970      	ldr	r1, [pc, #448]	; (80018b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f000 fa92 	bl	8001c20 <I2C_WaitOnFlagUntilTimeout>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001702:	2302      	movs	r3, #2
 8001704:	e0d3      	b.n	80018ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800170c:	2b01      	cmp	r3, #1
 800170e:	d101      	bne.n	8001714 <HAL_I2C_Master_Transmit+0x50>
 8001710:	2302      	movs	r3, #2
 8001712:	e0cc      	b.n	80018ae <HAL_I2C_Master_Transmit+0x1ea>
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b01      	cmp	r3, #1
 8001728:	d007      	beq.n	800173a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f042 0201 	orr.w	r2, r2, #1
 8001738:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001748:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2221      	movs	r2, #33	; 0x21
 800174e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2210      	movs	r2, #16
 8001756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2200      	movs	r2, #0
 800175e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	893a      	ldrh	r2, [r7, #8]
 800176a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001770:	b29a      	uxth	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4a50      	ldr	r2, [pc, #320]	; (80018bc <HAL_I2C_Master_Transmit+0x1f8>)
 800177a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800177c:	8979      	ldrh	r1, [r7, #10]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	6a3a      	ldr	r2, [r7, #32]
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f000 f9ca 	bl	8001b1c <I2C_MasterRequestWrite>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e08d      	b.n	80018ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80017a8:	e066      	b.n	8001878 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	6a39      	ldr	r1, [r7, #32]
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f000 fb0c 	bl	8001dcc <I2C_WaitOnTXEFlagUntilTimeout>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00d      	beq.n	80017d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d107      	bne.n	80017d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e06b      	b.n	80018ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	781a      	ldrb	r2, [r3, #0]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	3b01      	subs	r3, #1
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017fe:	3b01      	subs	r3, #1
 8001800:	b29a      	uxth	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b04      	cmp	r3, #4
 8001812:	d11b      	bne.n	800184c <HAL_I2C_Master_Transmit+0x188>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001818:	2b00      	cmp	r3, #0
 800181a:	d017      	beq.n	800184c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	781a      	ldrb	r2, [r3, #0]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001836:	b29b      	uxth	r3, r3
 8001838:	3b01      	subs	r3, #1
 800183a:	b29a      	uxth	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001844:	3b01      	subs	r3, #1
 8001846:	b29a      	uxth	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	6a39      	ldr	r1, [r7, #32]
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f000 fafc 	bl	8001e4e <I2C_WaitOnBTFFlagUntilTimeout>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00d      	beq.n	8001878 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	2b04      	cmp	r3, #4
 8001862:	d107      	bne.n	8001874 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001872:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e01a      	b.n	80018ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800187c:	2b00      	cmp	r3, #0
 800187e:	d194      	bne.n	80017aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800188e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2220      	movs	r2, #32
 8001894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018a8:	2300      	movs	r3, #0
 80018aa:	e000      	b.n	80018ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80018ac:	2302      	movs	r3, #2
  }
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	00100002 	.word	0x00100002
 80018bc:	ffff0000 	.word	0xffff0000

080018c0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	; 0x28
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	607a      	str	r2, [r7, #4]
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	460b      	mov	r3, r1
 80018ce:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80018d0:	f7ff fb48 	bl	8000f64 <HAL_GetTick>
 80018d4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80018d6:	2301      	movs	r3, #1
 80018d8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b20      	cmp	r3, #32
 80018e4:	f040 8111 	bne.w	8001b0a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2319      	movs	r3, #25
 80018ee:	2201      	movs	r2, #1
 80018f0:	4988      	ldr	r1, [pc, #544]	; (8001b14 <HAL_I2C_IsDeviceReady+0x254>)
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 f994 	bl	8001c20 <I2C_WaitOnFlagUntilTimeout>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80018fe:	2302      	movs	r3, #2
 8001900:	e104      	b.n	8001b0c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001908:	2b01      	cmp	r3, #1
 800190a:	d101      	bne.n	8001910 <HAL_I2C_IsDeviceReady+0x50>
 800190c:	2302      	movs	r3, #2
 800190e:	e0fd      	b.n	8001b0c <HAL_I2C_IsDeviceReady+0x24c>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b01      	cmp	r3, #1
 8001924:	d007      	beq.n	8001936 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0201 	orr.w	r2, r2, #1
 8001934:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001944:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2224      	movs	r2, #36	; 0x24
 800194a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4a70      	ldr	r2, [pc, #448]	; (8001b18 <HAL_I2C_IsDeviceReady+0x258>)
 8001958:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001968:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	2200      	movs	r2, #0
 8001972:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f000 f952 	bl	8001c20 <I2C_WaitOnFlagUntilTimeout>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00d      	beq.n	800199e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001990:	d103      	bne.n	800199a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001998:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e0b6      	b.n	8001b0c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800199e:	897b      	ldrh	r3, [r7, #10]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	461a      	mov	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80019ac:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80019ae:	f7ff fad9 	bl	8000f64 <HAL_GetTick>
 80019b2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b02      	cmp	r3, #2
 80019c0:	bf0c      	ite	eq
 80019c2:	2301      	moveq	r3, #1
 80019c4:	2300      	movne	r3, #0
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019d8:	bf0c      	ite	eq
 80019da:	2301      	moveq	r3, #1
 80019dc:	2300      	movne	r3, #0
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80019e2:	e025      	b.n	8001a30 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80019e4:	f7ff fabe 	bl	8000f64 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d302      	bcc.n	80019fa <HAL_I2C_IsDeviceReady+0x13a>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d103      	bne.n	8001a02 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	22a0      	movs	r2, #160	; 0xa0
 80019fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	bf0c      	ite	eq
 8001a10:	2301      	moveq	r3, #1
 8001a12:	2300      	movne	r3, #0
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a26:	bf0c      	ite	eq
 8001a28:	2301      	moveq	r3, #1
 8001a2a:	2300      	movne	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2ba0      	cmp	r3, #160	; 0xa0
 8001a3a:	d005      	beq.n	8001a48 <HAL_I2C_IsDeviceReady+0x188>
 8001a3c:	7dfb      	ldrb	r3, [r7, #23]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d102      	bne.n	8001a48 <HAL_I2C_IsDeviceReady+0x188>
 8001a42:	7dbb      	ldrb	r3, [r7, #22]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0cd      	beq.n	80019e4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d129      	bne.n	8001ab2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a6c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	2319      	movs	r3, #25
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	4921      	ldr	r1, [pc, #132]	; (8001b14 <HAL_I2C_IsDeviceReady+0x254>)
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f000 f8c6 	bl	8001c20 <I2C_WaitOnFlagUntilTimeout>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e036      	b.n	8001b0c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2220      	movs	r2, #32
 8001aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e02c      	b.n	8001b0c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ac0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001aca:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	2319      	movs	r3, #25
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	490f      	ldr	r1, [pc, #60]	; (8001b14 <HAL_I2C_IsDeviceReady+0x254>)
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f000 f8a2 	bl	8001c20 <I2C_WaitOnFlagUntilTimeout>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e012      	b.n	8001b0c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	f4ff af32 	bcc.w	800195a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2220      	movs	r2, #32
 8001afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e000      	b.n	8001b0c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001b0a:	2302      	movs	r3, #2
  }
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3720      	adds	r7, #32
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	00100002 	.word	0x00100002
 8001b18:	ffff0000 	.word	0xffff0000

08001b1c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b088      	sub	sp, #32
 8001b20:	af02      	add	r7, sp, #8
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	607a      	str	r2, [r7, #4]
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b30:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d006      	beq.n	8001b46 <I2C_MasterRequestWrite+0x2a>
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d003      	beq.n	8001b46 <I2C_MasterRequestWrite+0x2a>
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b44:	d108      	bne.n	8001b58 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	e00b      	b.n	8001b70 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	2b12      	cmp	r3, #18
 8001b5e:	d107      	bne.n	8001b70 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f000 f84f 	bl	8001c20 <I2C_WaitOnFlagUntilTimeout>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00d      	beq.n	8001ba4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b96:	d103      	bne.n	8001ba0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e035      	b.n	8001c10 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bac:	d108      	bne.n	8001bc0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bae:	897b      	ldrh	r3, [r7, #10]
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001bbc:	611a      	str	r2, [r3, #16]
 8001bbe:	e01b      	b.n	8001bf8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001bc0:	897b      	ldrh	r3, [r7, #10]
 8001bc2:	11db      	asrs	r3, r3, #7
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	f003 0306 	and.w	r3, r3, #6
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	f063 030f 	orn	r3, r3, #15
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	490e      	ldr	r1, [pc, #56]	; (8001c18 <I2C_MasterRequestWrite+0xfc>)
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 f875 	bl	8001cce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e010      	b.n	8001c10 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001bee:	897b      	ldrh	r3, [r7, #10]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	4907      	ldr	r1, [pc, #28]	; (8001c1c <I2C_MasterRequestWrite+0x100>)
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f000 f865 	bl	8001cce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	00010008 	.word	0x00010008
 8001c1c:	00010002 	.word	0x00010002

08001c20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	603b      	str	r3, [r7, #0]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c30:	e025      	b.n	8001c7e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c38:	d021      	beq.n	8001c7e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c3a:	f7ff f993 	bl	8000f64 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d302      	bcc.n	8001c50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d116      	bne.n	8001c7e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2220      	movs	r2, #32
 8001c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f043 0220 	orr.w	r2, r3, #32
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e023      	b.n	8001cc6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	0c1b      	lsrs	r3, r3, #16
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d10d      	bne.n	8001ca4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	43da      	mvns	r2, r3
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	4013      	ands	r3, r2
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	bf0c      	ite	eq
 8001c9a:	2301      	moveq	r3, #1
 8001c9c:	2300      	movne	r3, #0
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	e00c      	b.n	8001cbe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	43da      	mvns	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	bf0c      	ite	eq
 8001cb6:	2301      	moveq	r3, #1
 8001cb8:	2300      	movne	r3, #0
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d0b6      	beq.n	8001c32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b084      	sub	sp, #16
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cdc:	e051      	b.n	8001d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cec:	d123      	bne.n	8001d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cfc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2220      	movs	r2, #32
 8001d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f043 0204 	orr.w	r2, r3, #4
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e046      	b.n	8001dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d3c:	d021      	beq.n	8001d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d3e:	f7ff f911 	bl	8000f64 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d302      	bcc.n	8001d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d116      	bne.n	8001d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2220      	movs	r2, #32
 8001d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f043 0220 	orr.w	r2, r3, #32
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e020      	b.n	8001dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	0c1b      	lsrs	r3, r3, #16
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d10c      	bne.n	8001da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	43da      	mvns	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	4013      	ands	r3, r2
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	bf14      	ite	ne
 8001d9e:	2301      	movne	r3, #1
 8001da0:	2300      	moveq	r3, #0
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	e00b      	b.n	8001dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	43da      	mvns	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	4013      	ands	r3, r2
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	bf14      	ite	ne
 8001db8:	2301      	movne	r3, #1
 8001dba:	2300      	moveq	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d18d      	bne.n	8001cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dd8:	e02d      	b.n	8001e36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 f878 	bl	8001ed0 <I2C_IsAcknowledgeFailed>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e02d      	b.n	8001e46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df0:	d021      	beq.n	8001e36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001df2:	f7ff f8b7 	bl	8000f64 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d302      	bcc.n	8001e08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d116      	bne.n	8001e36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2220      	movs	r2, #32
 8001e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	f043 0220 	orr.w	r2, r3, #32
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e007      	b.n	8001e46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e40:	2b80      	cmp	r3, #128	; 0x80
 8001e42:	d1ca      	bne.n	8001dda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b084      	sub	sp, #16
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	60f8      	str	r0, [r7, #12]
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e5a:	e02d      	b.n	8001eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f000 f837 	bl	8001ed0 <I2C_IsAcknowledgeFailed>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e02d      	b.n	8001ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e72:	d021      	beq.n	8001eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e74:	f7ff f876 	bl	8000f64 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d302      	bcc.n	8001e8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d116      	bne.n	8001eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2220      	movs	r2, #32
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	f043 0220 	orr.w	r2, r3, #32
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e007      	b.n	8001ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d1ca      	bne.n	8001e5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ee6:	d11b      	bne.n	8001f20 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ef0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2220      	movs	r2, #32
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	f043 0204 	orr.w	r2, r3, #4
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr

08001f2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e26c      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 8087 	beq.w	800205a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f4c:	4b92      	ldr	r3, [pc, #584]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 030c 	and.w	r3, r3, #12
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d00c      	beq.n	8001f72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f58:	4b8f      	ldr	r3, [pc, #572]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 030c 	and.w	r3, r3, #12
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d112      	bne.n	8001f8a <HAL_RCC_OscConfig+0x5e>
 8001f64:	4b8c      	ldr	r3, [pc, #560]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f70:	d10b      	bne.n	8001f8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f72:	4b89      	ldr	r3, [pc, #548]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d06c      	beq.n	8002058 <HAL_RCC_OscConfig+0x12c>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d168      	bne.n	8002058 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e246      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f92:	d106      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x76>
 8001f94:	4b80      	ldr	r3, [pc, #512]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a7f      	ldr	r2, [pc, #508]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	e02e      	b.n	8002000 <HAL_RCC_OscConfig+0xd4>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10c      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x98>
 8001faa:	4b7b      	ldr	r3, [pc, #492]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a7a      	ldr	r2, [pc, #488]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	4b78      	ldr	r3, [pc, #480]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a77      	ldr	r2, [pc, #476]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	e01d      	b.n	8002000 <HAL_RCC_OscConfig+0xd4>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fcc:	d10c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0xbc>
 8001fce:	4b72      	ldr	r3, [pc, #456]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a71      	ldr	r2, [pc, #452]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	4b6f      	ldr	r3, [pc, #444]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a6e      	ldr	r2, [pc, #440]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	e00b      	b.n	8002000 <HAL_RCC_OscConfig+0xd4>
 8001fe8:	4b6b      	ldr	r3, [pc, #428]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a6a      	ldr	r2, [pc, #424]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff2:	6013      	str	r3, [r2, #0]
 8001ff4:	4b68      	ldr	r3, [pc, #416]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a67      	ldr	r2, [pc, #412]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ffe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d013      	beq.n	8002030 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7fe ffac 	bl	8000f64 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002010:	f7fe ffa8 	bl	8000f64 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b64      	cmp	r3, #100	; 0x64
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e1fa      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002022:	4b5d      	ldr	r3, [pc, #372]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0xe4>
 800202e:	e014      	b.n	800205a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002030:	f7fe ff98 	bl	8000f64 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002038:	f7fe ff94 	bl	8000f64 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b64      	cmp	r3, #100	; 0x64
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e1e6      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204a:	4b53      	ldr	r3, [pc, #332]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x10c>
 8002056:	e000      	b.n	800205a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d063      	beq.n	800212e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002066:	4b4c      	ldr	r3, [pc, #304]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 030c 	and.w	r3, r3, #12
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00b      	beq.n	800208a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002072:	4b49      	ldr	r3, [pc, #292]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 030c 	and.w	r3, r3, #12
 800207a:	2b08      	cmp	r3, #8
 800207c:	d11c      	bne.n	80020b8 <HAL_RCC_OscConfig+0x18c>
 800207e:	4b46      	ldr	r3, [pc, #280]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d116      	bne.n	80020b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208a:	4b43      	ldr	r3, [pc, #268]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d005      	beq.n	80020a2 <HAL_RCC_OscConfig+0x176>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d001      	beq.n	80020a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e1ba      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a2:	4b3d      	ldr	r3, [pc, #244]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4939      	ldr	r1, [pc, #228]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b6:	e03a      	b.n	800212e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d020      	beq.n	8002102 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020c0:	4b36      	ldr	r3, [pc, #216]	; (800219c <HAL_RCC_OscConfig+0x270>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c6:	f7fe ff4d 	bl	8000f64 <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ce:	f7fe ff49 	bl	8000f64 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e19b      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e0:	4b2d      	ldr	r3, [pc, #180]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0f0      	beq.n	80020ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ec:	4b2a      	ldr	r3, [pc, #168]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4927      	ldr	r1, [pc, #156]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	600b      	str	r3, [r1, #0]
 8002100:	e015      	b.n	800212e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002102:	4b26      	ldr	r3, [pc, #152]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7fe ff2c 	bl	8000f64 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002110:	f7fe ff28 	bl	8000f64 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e17a      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002122:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d03a      	beq.n	80021b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d019      	beq.n	8002176 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002142:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <HAL_RCC_OscConfig+0x274>)
 8002144:	2201      	movs	r2, #1
 8002146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002148:	f7fe ff0c 	bl	8000f64 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002150:	f7fe ff08 	bl	8000f64 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e15a      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002162:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800216e:	2001      	movs	r0, #1
 8002170:	f000 fac6 	bl	8002700 <RCC_Delay>
 8002174:	e01c      	b.n	80021b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002176:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <HAL_RCC_OscConfig+0x274>)
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217c:	f7fe fef2 	bl	8000f64 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002182:	e00f      	b.n	80021a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002184:	f7fe feee 	bl	8000f64 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d908      	bls.n	80021a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e140      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000
 800219c:	42420000 	.word	0x42420000
 80021a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a4:	4b9e      	ldr	r3, [pc, #632]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1e9      	bne.n	8002184 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80a6 	beq.w	800230a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c2:	4b97      	ldr	r3, [pc, #604]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10d      	bne.n	80021ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ce:	4b94      	ldr	r3, [pc, #592]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	4a93      	ldr	r2, [pc, #588]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80021d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d8:	61d3      	str	r3, [r2, #28]
 80021da:	4b91      	ldr	r3, [pc, #580]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021e6:	2301      	movs	r3, #1
 80021e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ea:	4b8e      	ldr	r3, [pc, #568]	; (8002424 <HAL_RCC_OscConfig+0x4f8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d118      	bne.n	8002228 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021f6:	4b8b      	ldr	r3, [pc, #556]	; (8002424 <HAL_RCC_OscConfig+0x4f8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a8a      	ldr	r2, [pc, #552]	; (8002424 <HAL_RCC_OscConfig+0x4f8>)
 80021fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002202:	f7fe feaf 	bl	8000f64 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800220a:	f7fe feab 	bl	8000f64 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b64      	cmp	r3, #100	; 0x64
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e0fd      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221c:	4b81      	ldr	r3, [pc, #516]	; (8002424 <HAL_RCC_OscConfig+0x4f8>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d106      	bne.n	800223e <HAL_RCC_OscConfig+0x312>
 8002230:	4b7b      	ldr	r3, [pc, #492]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	4a7a      	ldr	r2, [pc, #488]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	6213      	str	r3, [r2, #32]
 800223c:	e02d      	b.n	800229a <HAL_RCC_OscConfig+0x36e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10c      	bne.n	8002260 <HAL_RCC_OscConfig+0x334>
 8002246:	4b76      	ldr	r3, [pc, #472]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	4a75      	ldr	r2, [pc, #468]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 800224c:	f023 0301 	bic.w	r3, r3, #1
 8002250:	6213      	str	r3, [r2, #32]
 8002252:	4b73      	ldr	r3, [pc, #460]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	4a72      	ldr	r2, [pc, #456]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002258:	f023 0304 	bic.w	r3, r3, #4
 800225c:	6213      	str	r3, [r2, #32]
 800225e:	e01c      	b.n	800229a <HAL_RCC_OscConfig+0x36e>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2b05      	cmp	r3, #5
 8002266:	d10c      	bne.n	8002282 <HAL_RCC_OscConfig+0x356>
 8002268:	4b6d      	ldr	r3, [pc, #436]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4a6c      	ldr	r2, [pc, #432]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 800226e:	f043 0304 	orr.w	r3, r3, #4
 8002272:	6213      	str	r3, [r2, #32]
 8002274:	4b6a      	ldr	r3, [pc, #424]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	4a69      	ldr	r2, [pc, #420]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	6213      	str	r3, [r2, #32]
 8002280:	e00b      	b.n	800229a <HAL_RCC_OscConfig+0x36e>
 8002282:	4b67      	ldr	r3, [pc, #412]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	4a66      	ldr	r2, [pc, #408]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002288:	f023 0301 	bic.w	r3, r3, #1
 800228c:	6213      	str	r3, [r2, #32]
 800228e:	4b64      	ldr	r3, [pc, #400]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	4a63      	ldr	r2, [pc, #396]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002294:	f023 0304 	bic.w	r3, r3, #4
 8002298:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d015      	beq.n	80022ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a2:	f7fe fe5f 	bl	8000f64 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a8:	e00a      	b.n	80022c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022aa:	f7fe fe5b 	bl	8000f64 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e0ab      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c0:	4b57      	ldr	r3, [pc, #348]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0ee      	beq.n	80022aa <HAL_RCC_OscConfig+0x37e>
 80022cc:	e014      	b.n	80022f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ce:	f7fe fe49 	bl	8000f64 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d4:	e00a      	b.n	80022ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d6:	f7fe fe45 	bl	8000f64 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e095      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ec:	4b4c      	ldr	r3, [pc, #304]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1ee      	bne.n	80022d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022f8:	7dfb      	ldrb	r3, [r7, #23]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d105      	bne.n	800230a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022fe:	4b48      	ldr	r3, [pc, #288]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	4a47      	ldr	r2, [pc, #284]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002308:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 8081 	beq.w	8002416 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002314:	4b42      	ldr	r3, [pc, #264]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 030c 	and.w	r3, r3, #12
 800231c:	2b08      	cmp	r3, #8
 800231e:	d061      	beq.n	80023e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d146      	bne.n	80023b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002328:	4b3f      	ldr	r3, [pc, #252]	; (8002428 <HAL_RCC_OscConfig+0x4fc>)
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232e:	f7fe fe19 	bl	8000f64 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002336:	f7fe fe15 	bl	8000f64 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e067      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002348:	4b35      	ldr	r3, [pc, #212]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1f0      	bne.n	8002336 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800235c:	d108      	bne.n	8002370 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800235e:	4b30      	ldr	r3, [pc, #192]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	492d      	ldr	r1, [pc, #180]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 800236c:	4313      	orrs	r3, r2
 800236e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002370:	4b2b      	ldr	r3, [pc, #172]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a19      	ldr	r1, [r3, #32]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	430b      	orrs	r3, r1
 8002382:	4927      	ldr	r1, [pc, #156]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002384:	4313      	orrs	r3, r2
 8002386:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002388:	4b27      	ldr	r3, [pc, #156]	; (8002428 <HAL_RCC_OscConfig+0x4fc>)
 800238a:	2201      	movs	r2, #1
 800238c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238e:	f7fe fde9 	bl	8000f64 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002396:	f7fe fde5 	bl	8000f64 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e037      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023a8:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCC_OscConfig+0x46a>
 80023b4:	e02f      	b.n	8002416 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b6:	4b1c      	ldr	r3, [pc, #112]	; (8002428 <HAL_RCC_OscConfig+0x4fc>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023bc:	f7fe fdd2 	bl	8000f64 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c4:	f7fe fdce 	bl	8000f64 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e020      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d6:	4b12      	ldr	r3, [pc, #72]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f0      	bne.n	80023c4 <HAL_RCC_OscConfig+0x498>
 80023e2:	e018      	b.n	8002416 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e013      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	429a      	cmp	r2, r3
 8002402:	d106      	bne.n	8002412 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240e:	429a      	cmp	r2, r3
 8002410:	d001      	beq.n	8002416 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40021000 	.word	0x40021000
 8002424:	40007000 	.word	0x40007000
 8002428:	42420060 	.word	0x42420060

0800242c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0d0      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002440:	4b6a      	ldr	r3, [pc, #424]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d910      	bls.n	8002470 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	4b67      	ldr	r3, [pc, #412]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 0207 	bic.w	r2, r3, #7
 8002456:	4965      	ldr	r1, [pc, #404]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245e:	4b63      	ldr	r3, [pc, #396]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d001      	beq.n	8002470 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0b8      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d020      	beq.n	80024be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002488:	4b59      	ldr	r3, [pc, #356]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	4a58      	ldr	r2, [pc, #352]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002492:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024a0:	4b53      	ldr	r3, [pc, #332]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	4a52      	ldr	r2, [pc, #328]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ac:	4b50      	ldr	r3, [pc, #320]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	494d      	ldr	r1, [pc, #308]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d040      	beq.n	800254c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d107      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	4b47      	ldr	r3, [pc, #284]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d115      	bne.n	800250a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e07f      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d107      	bne.n	80024fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ea:	4b41      	ldr	r3, [pc, #260]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e073      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fa:	4b3d      	ldr	r3, [pc, #244]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e06b      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800250a:	4b39      	ldr	r3, [pc, #228]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f023 0203 	bic.w	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4936      	ldr	r1, [pc, #216]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	4313      	orrs	r3, r2
 800251a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800251c:	f7fe fd22 	bl	8000f64 <HAL_GetTick>
 8002520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002522:	e00a      	b.n	800253a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002524:	f7fe fd1e 	bl	8000f64 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e053      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253a:	4b2d      	ldr	r3, [pc, #180]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 020c 	and.w	r2, r3, #12
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	429a      	cmp	r2, r3
 800254a:	d1eb      	bne.n	8002524 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800254c:	4b27      	ldr	r3, [pc, #156]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d210      	bcs.n	800257c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255a:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 0207 	bic.w	r2, r3, #7
 8002562:	4922      	ldr	r1, [pc, #136]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	4313      	orrs	r3, r2
 8002568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800256a:	4b20      	ldr	r3, [pc, #128]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d001      	beq.n	800257c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e032      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002588:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	4916      	ldr	r1, [pc, #88]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002596:	4313      	orrs	r3, r2
 8002598:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d009      	beq.n	80025ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025a6:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	490e      	ldr	r1, [pc, #56]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ba:	f000 f821 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 80025be:	4601      	mov	r1, r0
 80025c0:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	091b      	lsrs	r3, r3, #4
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <HAL_RCC_ClockConfig+0x1c8>)
 80025cc:	5cd3      	ldrb	r3, [r2, r3]
 80025ce:	fa21 f303 	lsr.w	r3, r1, r3
 80025d2:	4a09      	ldr	r2, [pc, #36]	; (80025f8 <HAL_RCC_ClockConfig+0x1cc>)
 80025d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025d6:	4b09      	ldr	r3, [pc, #36]	; (80025fc <HAL_RCC_ClockConfig+0x1d0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe fc80 	bl	8000ee0 <HAL_InitTick>

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40022000 	.word	0x40022000
 80025f0:	40021000 	.word	0x40021000
 80025f4:	080044e4 	.word	0x080044e4
 80025f8:	20000010 	.word	0x20000010
 80025fc:	20000014 	.word	0x20000014

08002600 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002600:	b490      	push	{r4, r7}
 8002602:	b08a      	sub	sp, #40	; 0x28
 8002604:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002606:	4b2a      	ldr	r3, [pc, #168]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002608:	1d3c      	adds	r4, r7, #4
 800260a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800260c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002610:	4b28      	ldr	r3, [pc, #160]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
 800261a:	2300      	movs	r3, #0
 800261c:	61bb      	str	r3, [r7, #24]
 800261e:	2300      	movs	r3, #0
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002626:	2300      	movs	r3, #0
 8002628:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800262a:	4b23      	ldr	r3, [pc, #140]	; (80026b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b04      	cmp	r3, #4
 8002638:	d002      	beq.n	8002640 <HAL_RCC_GetSysClockFreq+0x40>
 800263a:	2b08      	cmp	r3, #8
 800263c:	d003      	beq.n	8002646 <HAL_RCC_GetSysClockFreq+0x46>
 800263e:	e02d      	b.n	800269c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002640:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002642:	623b      	str	r3, [r7, #32]
      break;
 8002644:	e02d      	b.n	80026a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	0c9b      	lsrs	r3, r3, #18
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002652:	4413      	add	r3, r2
 8002654:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002658:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d013      	beq.n	800268c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002664:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	0c5b      	lsrs	r3, r3, #17
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002672:	4413      	add	r3, r2
 8002674:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002678:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	4a0f      	ldr	r2, [pc, #60]	; (80026bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800267e:	fb02 f203 	mul.w	r2, r2, r3
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	fbb2 f3f3 	udiv	r3, r2, r3
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
 800268a:	e004      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	4a0c      	ldr	r2, [pc, #48]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002690:	fb02 f303 	mul.w	r3, r2, r3
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	623b      	str	r3, [r7, #32]
      break;
 800269a:	e002      	b.n	80026a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800269c:	4b07      	ldr	r3, [pc, #28]	; (80026bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800269e:	623b      	str	r3, [r7, #32]
      break;
 80026a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026a2:	6a3b      	ldr	r3, [r7, #32]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3728      	adds	r7, #40	; 0x28
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc90      	pop	{r4, r7}
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	08003008 	.word	0x08003008
 80026b4:	08003018 	.word	0x08003018
 80026b8:	40021000 	.word	0x40021000
 80026bc:	007a1200 	.word	0x007a1200
 80026c0:	003d0900 	.word	0x003d0900

080026c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026c8:	4b02      	ldr	r3, [pc, #8]	; (80026d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80026ca:	681b      	ldr	r3, [r3, #0]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr
 80026d4:	20000010 	.word	0x20000010

080026d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026dc:	f7ff fff2 	bl	80026c4 <HAL_RCC_GetHCLKFreq>
 80026e0:	4601      	mov	r1, r0
 80026e2:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	0a1b      	lsrs	r3, r3, #8
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	4a03      	ldr	r2, [pc, #12]	; (80026fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ee:	5cd3      	ldrb	r3, [r2, r3]
 80026f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000
 80026fc:	080044f4 	.word	0x080044f4

08002700 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002708:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <RCC_Delay+0x34>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <RCC_Delay+0x38>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	0a5b      	lsrs	r3, r3, #9
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	fb02 f303 	mul.w	r3, r2, r3
 800271a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800271c:	bf00      	nop
  }
  while (Delay --);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1e5a      	subs	r2, r3, #1
 8002722:	60fa      	str	r2, [r7, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f9      	bne.n	800271c <RCC_Delay+0x1c>
}
 8002728:	bf00      	nop
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	20000010 	.word	0x20000010
 8002738:	10624dd3 	.word	0x10624dd3

0800273c <__errno>:
 800273c:	4b01      	ldr	r3, [pc, #4]	; (8002744 <__errno+0x8>)
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	2000001c 	.word	0x2000001c

08002748 <__libc_init_array>:
 8002748:	b570      	push	{r4, r5, r6, lr}
 800274a:	2500      	movs	r5, #0
 800274c:	4e0c      	ldr	r6, [pc, #48]	; (8002780 <__libc_init_array+0x38>)
 800274e:	4c0d      	ldr	r4, [pc, #52]	; (8002784 <__libc_init_array+0x3c>)
 8002750:	1ba4      	subs	r4, r4, r6
 8002752:	10a4      	asrs	r4, r4, #2
 8002754:	42a5      	cmp	r5, r4
 8002756:	d109      	bne.n	800276c <__libc_init_array+0x24>
 8002758:	f000 fc34 	bl	8002fc4 <_init>
 800275c:	2500      	movs	r5, #0
 800275e:	4e0a      	ldr	r6, [pc, #40]	; (8002788 <__libc_init_array+0x40>)
 8002760:	4c0a      	ldr	r4, [pc, #40]	; (800278c <__libc_init_array+0x44>)
 8002762:	1ba4      	subs	r4, r4, r6
 8002764:	10a4      	asrs	r4, r4, #2
 8002766:	42a5      	cmp	r5, r4
 8002768:	d105      	bne.n	8002776 <__libc_init_array+0x2e>
 800276a:	bd70      	pop	{r4, r5, r6, pc}
 800276c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002770:	4798      	blx	r3
 8002772:	3501      	adds	r5, #1
 8002774:	e7ee      	b.n	8002754 <__libc_init_array+0xc>
 8002776:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800277a:	4798      	blx	r3
 800277c:	3501      	adds	r5, #1
 800277e:	e7f2      	b.n	8002766 <__libc_init_array+0x1e>
 8002780:	08004530 	.word	0x08004530
 8002784:	08004530 	.word	0x08004530
 8002788:	08004530 	.word	0x08004530
 800278c:	08004534 	.word	0x08004534

08002790 <memset>:
 8002790:	4603      	mov	r3, r0
 8002792:	4402      	add	r2, r0
 8002794:	4293      	cmp	r3, r2
 8002796:	d100      	bne.n	800279a <memset+0xa>
 8002798:	4770      	bx	lr
 800279a:	f803 1b01 	strb.w	r1, [r3], #1
 800279e:	e7f9      	b.n	8002794 <memset+0x4>

080027a0 <siprintf>:
 80027a0:	b40e      	push	{r1, r2, r3}
 80027a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80027a6:	b500      	push	{lr}
 80027a8:	b09c      	sub	sp, #112	; 0x70
 80027aa:	ab1d      	add	r3, sp, #116	; 0x74
 80027ac:	9002      	str	r0, [sp, #8]
 80027ae:	9006      	str	r0, [sp, #24]
 80027b0:	9107      	str	r1, [sp, #28]
 80027b2:	9104      	str	r1, [sp, #16]
 80027b4:	4808      	ldr	r0, [pc, #32]	; (80027d8 <siprintf+0x38>)
 80027b6:	4909      	ldr	r1, [pc, #36]	; (80027dc <siprintf+0x3c>)
 80027b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80027bc:	9105      	str	r1, [sp, #20]
 80027be:	6800      	ldr	r0, [r0, #0]
 80027c0:	a902      	add	r1, sp, #8
 80027c2:	9301      	str	r3, [sp, #4]
 80027c4:	f000 f866 	bl	8002894 <_svfiprintf_r>
 80027c8:	2200      	movs	r2, #0
 80027ca:	9b02      	ldr	r3, [sp, #8]
 80027cc:	701a      	strb	r2, [r3, #0]
 80027ce:	b01c      	add	sp, #112	; 0x70
 80027d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80027d4:	b003      	add	sp, #12
 80027d6:	4770      	bx	lr
 80027d8:	2000001c 	.word	0x2000001c
 80027dc:	ffff0208 	.word	0xffff0208

080027e0 <__ssputs_r>:
 80027e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027e4:	688e      	ldr	r6, [r1, #8]
 80027e6:	4682      	mov	sl, r0
 80027e8:	429e      	cmp	r6, r3
 80027ea:	460c      	mov	r4, r1
 80027ec:	4690      	mov	r8, r2
 80027ee:	4699      	mov	r9, r3
 80027f0:	d837      	bhi.n	8002862 <__ssputs_r+0x82>
 80027f2:	898a      	ldrh	r2, [r1, #12]
 80027f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80027f8:	d031      	beq.n	800285e <__ssputs_r+0x7e>
 80027fa:	2302      	movs	r3, #2
 80027fc:	6825      	ldr	r5, [r4, #0]
 80027fe:	6909      	ldr	r1, [r1, #16]
 8002800:	1a6f      	subs	r7, r5, r1
 8002802:	6965      	ldr	r5, [r4, #20]
 8002804:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002808:	fb95 f5f3 	sdiv	r5, r5, r3
 800280c:	f109 0301 	add.w	r3, r9, #1
 8002810:	443b      	add	r3, r7
 8002812:	429d      	cmp	r5, r3
 8002814:	bf38      	it	cc
 8002816:	461d      	movcc	r5, r3
 8002818:	0553      	lsls	r3, r2, #21
 800281a:	d530      	bpl.n	800287e <__ssputs_r+0x9e>
 800281c:	4629      	mov	r1, r5
 800281e:	f000 fb37 	bl	8002e90 <_malloc_r>
 8002822:	4606      	mov	r6, r0
 8002824:	b950      	cbnz	r0, 800283c <__ssputs_r+0x5c>
 8002826:	230c      	movs	r3, #12
 8002828:	f04f 30ff 	mov.w	r0, #4294967295
 800282c:	f8ca 3000 	str.w	r3, [sl]
 8002830:	89a3      	ldrh	r3, [r4, #12]
 8002832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002836:	81a3      	strh	r3, [r4, #12]
 8002838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800283c:	463a      	mov	r2, r7
 800283e:	6921      	ldr	r1, [r4, #16]
 8002840:	f000 fab6 	bl	8002db0 <memcpy>
 8002844:	89a3      	ldrh	r3, [r4, #12]
 8002846:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800284a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800284e:	81a3      	strh	r3, [r4, #12]
 8002850:	6126      	str	r6, [r4, #16]
 8002852:	443e      	add	r6, r7
 8002854:	6026      	str	r6, [r4, #0]
 8002856:	464e      	mov	r6, r9
 8002858:	6165      	str	r5, [r4, #20]
 800285a:	1bed      	subs	r5, r5, r7
 800285c:	60a5      	str	r5, [r4, #8]
 800285e:	454e      	cmp	r6, r9
 8002860:	d900      	bls.n	8002864 <__ssputs_r+0x84>
 8002862:	464e      	mov	r6, r9
 8002864:	4632      	mov	r2, r6
 8002866:	4641      	mov	r1, r8
 8002868:	6820      	ldr	r0, [r4, #0]
 800286a:	f000 faac 	bl	8002dc6 <memmove>
 800286e:	68a3      	ldr	r3, [r4, #8]
 8002870:	2000      	movs	r0, #0
 8002872:	1b9b      	subs	r3, r3, r6
 8002874:	60a3      	str	r3, [r4, #8]
 8002876:	6823      	ldr	r3, [r4, #0]
 8002878:	441e      	add	r6, r3
 800287a:	6026      	str	r6, [r4, #0]
 800287c:	e7dc      	b.n	8002838 <__ssputs_r+0x58>
 800287e:	462a      	mov	r2, r5
 8002880:	f000 fb60 	bl	8002f44 <_realloc_r>
 8002884:	4606      	mov	r6, r0
 8002886:	2800      	cmp	r0, #0
 8002888:	d1e2      	bne.n	8002850 <__ssputs_r+0x70>
 800288a:	6921      	ldr	r1, [r4, #16]
 800288c:	4650      	mov	r0, sl
 800288e:	f000 fab3 	bl	8002df8 <_free_r>
 8002892:	e7c8      	b.n	8002826 <__ssputs_r+0x46>

08002894 <_svfiprintf_r>:
 8002894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002898:	461d      	mov	r5, r3
 800289a:	898b      	ldrh	r3, [r1, #12]
 800289c:	b09d      	sub	sp, #116	; 0x74
 800289e:	061f      	lsls	r7, r3, #24
 80028a0:	4680      	mov	r8, r0
 80028a2:	460c      	mov	r4, r1
 80028a4:	4616      	mov	r6, r2
 80028a6:	d50f      	bpl.n	80028c8 <_svfiprintf_r+0x34>
 80028a8:	690b      	ldr	r3, [r1, #16]
 80028aa:	b96b      	cbnz	r3, 80028c8 <_svfiprintf_r+0x34>
 80028ac:	2140      	movs	r1, #64	; 0x40
 80028ae:	f000 faef 	bl	8002e90 <_malloc_r>
 80028b2:	6020      	str	r0, [r4, #0]
 80028b4:	6120      	str	r0, [r4, #16]
 80028b6:	b928      	cbnz	r0, 80028c4 <_svfiprintf_r+0x30>
 80028b8:	230c      	movs	r3, #12
 80028ba:	f8c8 3000 	str.w	r3, [r8]
 80028be:	f04f 30ff 	mov.w	r0, #4294967295
 80028c2:	e0c8      	b.n	8002a56 <_svfiprintf_r+0x1c2>
 80028c4:	2340      	movs	r3, #64	; 0x40
 80028c6:	6163      	str	r3, [r4, #20]
 80028c8:	2300      	movs	r3, #0
 80028ca:	9309      	str	r3, [sp, #36]	; 0x24
 80028cc:	2320      	movs	r3, #32
 80028ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028d2:	2330      	movs	r3, #48	; 0x30
 80028d4:	f04f 0b01 	mov.w	fp, #1
 80028d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80028dc:	9503      	str	r5, [sp, #12]
 80028de:	4637      	mov	r7, r6
 80028e0:	463d      	mov	r5, r7
 80028e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80028e6:	b10b      	cbz	r3, 80028ec <_svfiprintf_r+0x58>
 80028e8:	2b25      	cmp	r3, #37	; 0x25
 80028ea:	d13e      	bne.n	800296a <_svfiprintf_r+0xd6>
 80028ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80028f0:	d00b      	beq.n	800290a <_svfiprintf_r+0x76>
 80028f2:	4653      	mov	r3, sl
 80028f4:	4632      	mov	r2, r6
 80028f6:	4621      	mov	r1, r4
 80028f8:	4640      	mov	r0, r8
 80028fa:	f7ff ff71 	bl	80027e0 <__ssputs_r>
 80028fe:	3001      	adds	r0, #1
 8002900:	f000 80a4 	beq.w	8002a4c <_svfiprintf_r+0x1b8>
 8002904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002906:	4453      	add	r3, sl
 8002908:	9309      	str	r3, [sp, #36]	; 0x24
 800290a:	783b      	ldrb	r3, [r7, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 809d 	beq.w	8002a4c <_svfiprintf_r+0x1b8>
 8002912:	2300      	movs	r3, #0
 8002914:	f04f 32ff 	mov.w	r2, #4294967295
 8002918:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800291c:	9304      	str	r3, [sp, #16]
 800291e:	9307      	str	r3, [sp, #28]
 8002920:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002924:	931a      	str	r3, [sp, #104]	; 0x68
 8002926:	462f      	mov	r7, r5
 8002928:	2205      	movs	r2, #5
 800292a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800292e:	4850      	ldr	r0, [pc, #320]	; (8002a70 <_svfiprintf_r+0x1dc>)
 8002930:	f000 fa30 	bl	8002d94 <memchr>
 8002934:	9b04      	ldr	r3, [sp, #16]
 8002936:	b9d0      	cbnz	r0, 800296e <_svfiprintf_r+0xda>
 8002938:	06d9      	lsls	r1, r3, #27
 800293a:	bf44      	itt	mi
 800293c:	2220      	movmi	r2, #32
 800293e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002942:	071a      	lsls	r2, r3, #28
 8002944:	bf44      	itt	mi
 8002946:	222b      	movmi	r2, #43	; 0x2b
 8002948:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800294c:	782a      	ldrb	r2, [r5, #0]
 800294e:	2a2a      	cmp	r2, #42	; 0x2a
 8002950:	d015      	beq.n	800297e <_svfiprintf_r+0xea>
 8002952:	462f      	mov	r7, r5
 8002954:	2000      	movs	r0, #0
 8002956:	250a      	movs	r5, #10
 8002958:	9a07      	ldr	r2, [sp, #28]
 800295a:	4639      	mov	r1, r7
 800295c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002960:	3b30      	subs	r3, #48	; 0x30
 8002962:	2b09      	cmp	r3, #9
 8002964:	d94d      	bls.n	8002a02 <_svfiprintf_r+0x16e>
 8002966:	b1b8      	cbz	r0, 8002998 <_svfiprintf_r+0x104>
 8002968:	e00f      	b.n	800298a <_svfiprintf_r+0xf6>
 800296a:	462f      	mov	r7, r5
 800296c:	e7b8      	b.n	80028e0 <_svfiprintf_r+0x4c>
 800296e:	4a40      	ldr	r2, [pc, #256]	; (8002a70 <_svfiprintf_r+0x1dc>)
 8002970:	463d      	mov	r5, r7
 8002972:	1a80      	subs	r0, r0, r2
 8002974:	fa0b f000 	lsl.w	r0, fp, r0
 8002978:	4318      	orrs	r0, r3
 800297a:	9004      	str	r0, [sp, #16]
 800297c:	e7d3      	b.n	8002926 <_svfiprintf_r+0x92>
 800297e:	9a03      	ldr	r2, [sp, #12]
 8002980:	1d11      	adds	r1, r2, #4
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	9103      	str	r1, [sp, #12]
 8002986:	2a00      	cmp	r2, #0
 8002988:	db01      	blt.n	800298e <_svfiprintf_r+0xfa>
 800298a:	9207      	str	r2, [sp, #28]
 800298c:	e004      	b.n	8002998 <_svfiprintf_r+0x104>
 800298e:	4252      	negs	r2, r2
 8002990:	f043 0302 	orr.w	r3, r3, #2
 8002994:	9207      	str	r2, [sp, #28]
 8002996:	9304      	str	r3, [sp, #16]
 8002998:	783b      	ldrb	r3, [r7, #0]
 800299a:	2b2e      	cmp	r3, #46	; 0x2e
 800299c:	d10c      	bne.n	80029b8 <_svfiprintf_r+0x124>
 800299e:	787b      	ldrb	r3, [r7, #1]
 80029a0:	2b2a      	cmp	r3, #42	; 0x2a
 80029a2:	d133      	bne.n	8002a0c <_svfiprintf_r+0x178>
 80029a4:	9b03      	ldr	r3, [sp, #12]
 80029a6:	3702      	adds	r7, #2
 80029a8:	1d1a      	adds	r2, r3, #4
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	9203      	str	r2, [sp, #12]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	bfb8      	it	lt
 80029b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80029b6:	9305      	str	r3, [sp, #20]
 80029b8:	4d2e      	ldr	r5, [pc, #184]	; (8002a74 <_svfiprintf_r+0x1e0>)
 80029ba:	2203      	movs	r2, #3
 80029bc:	7839      	ldrb	r1, [r7, #0]
 80029be:	4628      	mov	r0, r5
 80029c0:	f000 f9e8 	bl	8002d94 <memchr>
 80029c4:	b138      	cbz	r0, 80029d6 <_svfiprintf_r+0x142>
 80029c6:	2340      	movs	r3, #64	; 0x40
 80029c8:	1b40      	subs	r0, r0, r5
 80029ca:	fa03 f000 	lsl.w	r0, r3, r0
 80029ce:	9b04      	ldr	r3, [sp, #16]
 80029d0:	3701      	adds	r7, #1
 80029d2:	4303      	orrs	r3, r0
 80029d4:	9304      	str	r3, [sp, #16]
 80029d6:	7839      	ldrb	r1, [r7, #0]
 80029d8:	2206      	movs	r2, #6
 80029da:	4827      	ldr	r0, [pc, #156]	; (8002a78 <_svfiprintf_r+0x1e4>)
 80029dc:	1c7e      	adds	r6, r7, #1
 80029de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029e2:	f000 f9d7 	bl	8002d94 <memchr>
 80029e6:	2800      	cmp	r0, #0
 80029e8:	d038      	beq.n	8002a5c <_svfiprintf_r+0x1c8>
 80029ea:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <_svfiprintf_r+0x1e8>)
 80029ec:	bb13      	cbnz	r3, 8002a34 <_svfiprintf_r+0x1a0>
 80029ee:	9b03      	ldr	r3, [sp, #12]
 80029f0:	3307      	adds	r3, #7
 80029f2:	f023 0307 	bic.w	r3, r3, #7
 80029f6:	3308      	adds	r3, #8
 80029f8:	9303      	str	r3, [sp, #12]
 80029fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029fc:	444b      	add	r3, r9
 80029fe:	9309      	str	r3, [sp, #36]	; 0x24
 8002a00:	e76d      	b.n	80028de <_svfiprintf_r+0x4a>
 8002a02:	fb05 3202 	mla	r2, r5, r2, r3
 8002a06:	2001      	movs	r0, #1
 8002a08:	460f      	mov	r7, r1
 8002a0a:	e7a6      	b.n	800295a <_svfiprintf_r+0xc6>
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	250a      	movs	r5, #10
 8002a10:	4619      	mov	r1, r3
 8002a12:	3701      	adds	r7, #1
 8002a14:	9305      	str	r3, [sp, #20]
 8002a16:	4638      	mov	r0, r7
 8002a18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a1c:	3a30      	subs	r2, #48	; 0x30
 8002a1e:	2a09      	cmp	r2, #9
 8002a20:	d903      	bls.n	8002a2a <_svfiprintf_r+0x196>
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0c8      	beq.n	80029b8 <_svfiprintf_r+0x124>
 8002a26:	9105      	str	r1, [sp, #20]
 8002a28:	e7c6      	b.n	80029b8 <_svfiprintf_r+0x124>
 8002a2a:	fb05 2101 	mla	r1, r5, r1, r2
 8002a2e:	2301      	movs	r3, #1
 8002a30:	4607      	mov	r7, r0
 8002a32:	e7f0      	b.n	8002a16 <_svfiprintf_r+0x182>
 8002a34:	ab03      	add	r3, sp, #12
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	4622      	mov	r2, r4
 8002a3a:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <_svfiprintf_r+0x1ec>)
 8002a3c:	a904      	add	r1, sp, #16
 8002a3e:	4640      	mov	r0, r8
 8002a40:	f3af 8000 	nop.w
 8002a44:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002a48:	4681      	mov	r9, r0
 8002a4a:	d1d6      	bne.n	80029fa <_svfiprintf_r+0x166>
 8002a4c:	89a3      	ldrh	r3, [r4, #12]
 8002a4e:	065b      	lsls	r3, r3, #25
 8002a50:	f53f af35 	bmi.w	80028be <_svfiprintf_r+0x2a>
 8002a54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a56:	b01d      	add	sp, #116	; 0x74
 8002a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a5c:	ab03      	add	r3, sp, #12
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	4622      	mov	r2, r4
 8002a62:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <_svfiprintf_r+0x1ec>)
 8002a64:	a904      	add	r1, sp, #16
 8002a66:	4640      	mov	r0, r8
 8002a68:	f000 f882 	bl	8002b70 <_printf_i>
 8002a6c:	e7ea      	b.n	8002a44 <_svfiprintf_r+0x1b0>
 8002a6e:	bf00      	nop
 8002a70:	080044fc 	.word	0x080044fc
 8002a74:	08004502 	.word	0x08004502
 8002a78:	08004506 	.word	0x08004506
 8002a7c:	00000000 	.word	0x00000000
 8002a80:	080027e1 	.word	0x080027e1

08002a84 <_printf_common>:
 8002a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a88:	4691      	mov	r9, r2
 8002a8a:	461f      	mov	r7, r3
 8002a8c:	688a      	ldr	r2, [r1, #8]
 8002a8e:	690b      	ldr	r3, [r1, #16]
 8002a90:	4606      	mov	r6, r0
 8002a92:	4293      	cmp	r3, r2
 8002a94:	bfb8      	it	lt
 8002a96:	4613      	movlt	r3, r2
 8002a98:	f8c9 3000 	str.w	r3, [r9]
 8002a9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002aa0:	460c      	mov	r4, r1
 8002aa2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002aa6:	b112      	cbz	r2, 8002aae <_printf_common+0x2a>
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	f8c9 3000 	str.w	r3, [r9]
 8002aae:	6823      	ldr	r3, [r4, #0]
 8002ab0:	0699      	lsls	r1, r3, #26
 8002ab2:	bf42      	ittt	mi
 8002ab4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002ab8:	3302      	addmi	r3, #2
 8002aba:	f8c9 3000 	strmi.w	r3, [r9]
 8002abe:	6825      	ldr	r5, [r4, #0]
 8002ac0:	f015 0506 	ands.w	r5, r5, #6
 8002ac4:	d107      	bne.n	8002ad6 <_printf_common+0x52>
 8002ac6:	f104 0a19 	add.w	sl, r4, #25
 8002aca:	68e3      	ldr	r3, [r4, #12]
 8002acc:	f8d9 2000 	ldr.w	r2, [r9]
 8002ad0:	1a9b      	subs	r3, r3, r2
 8002ad2:	42ab      	cmp	r3, r5
 8002ad4:	dc29      	bgt.n	8002b2a <_printf_common+0xa6>
 8002ad6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002ada:	6822      	ldr	r2, [r4, #0]
 8002adc:	3300      	adds	r3, #0
 8002ade:	bf18      	it	ne
 8002ae0:	2301      	movne	r3, #1
 8002ae2:	0692      	lsls	r2, r2, #26
 8002ae4:	d42e      	bmi.n	8002b44 <_printf_common+0xc0>
 8002ae6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002aea:	4639      	mov	r1, r7
 8002aec:	4630      	mov	r0, r6
 8002aee:	47c0      	blx	r8
 8002af0:	3001      	adds	r0, #1
 8002af2:	d021      	beq.n	8002b38 <_printf_common+0xb4>
 8002af4:	6823      	ldr	r3, [r4, #0]
 8002af6:	68e5      	ldr	r5, [r4, #12]
 8002af8:	f003 0306 	and.w	r3, r3, #6
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	bf18      	it	ne
 8002b00:	2500      	movne	r5, #0
 8002b02:	f8d9 2000 	ldr.w	r2, [r9]
 8002b06:	f04f 0900 	mov.w	r9, #0
 8002b0a:	bf08      	it	eq
 8002b0c:	1aad      	subeq	r5, r5, r2
 8002b0e:	68a3      	ldr	r3, [r4, #8]
 8002b10:	6922      	ldr	r2, [r4, #16]
 8002b12:	bf08      	it	eq
 8002b14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	bfc4      	itt	gt
 8002b1c:	1a9b      	subgt	r3, r3, r2
 8002b1e:	18ed      	addgt	r5, r5, r3
 8002b20:	341a      	adds	r4, #26
 8002b22:	454d      	cmp	r5, r9
 8002b24:	d11a      	bne.n	8002b5c <_printf_common+0xd8>
 8002b26:	2000      	movs	r0, #0
 8002b28:	e008      	b.n	8002b3c <_printf_common+0xb8>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	4652      	mov	r2, sl
 8002b2e:	4639      	mov	r1, r7
 8002b30:	4630      	mov	r0, r6
 8002b32:	47c0      	blx	r8
 8002b34:	3001      	adds	r0, #1
 8002b36:	d103      	bne.n	8002b40 <_printf_common+0xbc>
 8002b38:	f04f 30ff 	mov.w	r0, #4294967295
 8002b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b40:	3501      	adds	r5, #1
 8002b42:	e7c2      	b.n	8002aca <_printf_common+0x46>
 8002b44:	2030      	movs	r0, #48	; 0x30
 8002b46:	18e1      	adds	r1, r4, r3
 8002b48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b52:	4422      	add	r2, r4
 8002b54:	3302      	adds	r3, #2
 8002b56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b5a:	e7c4      	b.n	8002ae6 <_printf_common+0x62>
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	4622      	mov	r2, r4
 8002b60:	4639      	mov	r1, r7
 8002b62:	4630      	mov	r0, r6
 8002b64:	47c0      	blx	r8
 8002b66:	3001      	adds	r0, #1
 8002b68:	d0e6      	beq.n	8002b38 <_printf_common+0xb4>
 8002b6a:	f109 0901 	add.w	r9, r9, #1
 8002b6e:	e7d8      	b.n	8002b22 <_printf_common+0x9e>

08002b70 <_printf_i>:
 8002b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b74:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002b78:	460c      	mov	r4, r1
 8002b7a:	7e09      	ldrb	r1, [r1, #24]
 8002b7c:	b085      	sub	sp, #20
 8002b7e:	296e      	cmp	r1, #110	; 0x6e
 8002b80:	4617      	mov	r7, r2
 8002b82:	4606      	mov	r6, r0
 8002b84:	4698      	mov	r8, r3
 8002b86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002b88:	f000 80b3 	beq.w	8002cf2 <_printf_i+0x182>
 8002b8c:	d822      	bhi.n	8002bd4 <_printf_i+0x64>
 8002b8e:	2963      	cmp	r1, #99	; 0x63
 8002b90:	d036      	beq.n	8002c00 <_printf_i+0x90>
 8002b92:	d80a      	bhi.n	8002baa <_printf_i+0x3a>
 8002b94:	2900      	cmp	r1, #0
 8002b96:	f000 80b9 	beq.w	8002d0c <_printf_i+0x19c>
 8002b9a:	2958      	cmp	r1, #88	; 0x58
 8002b9c:	f000 8083 	beq.w	8002ca6 <_printf_i+0x136>
 8002ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ba4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002ba8:	e032      	b.n	8002c10 <_printf_i+0xa0>
 8002baa:	2964      	cmp	r1, #100	; 0x64
 8002bac:	d001      	beq.n	8002bb2 <_printf_i+0x42>
 8002bae:	2969      	cmp	r1, #105	; 0x69
 8002bb0:	d1f6      	bne.n	8002ba0 <_printf_i+0x30>
 8002bb2:	6820      	ldr	r0, [r4, #0]
 8002bb4:	6813      	ldr	r3, [r2, #0]
 8002bb6:	0605      	lsls	r5, r0, #24
 8002bb8:	f103 0104 	add.w	r1, r3, #4
 8002bbc:	d52a      	bpl.n	8002c14 <_printf_i+0xa4>
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6011      	str	r1, [r2, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	da03      	bge.n	8002bce <_printf_i+0x5e>
 8002bc6:	222d      	movs	r2, #45	; 0x2d
 8002bc8:	425b      	negs	r3, r3
 8002bca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002bce:	486f      	ldr	r0, [pc, #444]	; (8002d8c <_printf_i+0x21c>)
 8002bd0:	220a      	movs	r2, #10
 8002bd2:	e039      	b.n	8002c48 <_printf_i+0xd8>
 8002bd4:	2973      	cmp	r1, #115	; 0x73
 8002bd6:	f000 809d 	beq.w	8002d14 <_printf_i+0x1a4>
 8002bda:	d808      	bhi.n	8002bee <_printf_i+0x7e>
 8002bdc:	296f      	cmp	r1, #111	; 0x6f
 8002bde:	d020      	beq.n	8002c22 <_printf_i+0xb2>
 8002be0:	2970      	cmp	r1, #112	; 0x70
 8002be2:	d1dd      	bne.n	8002ba0 <_printf_i+0x30>
 8002be4:	6823      	ldr	r3, [r4, #0]
 8002be6:	f043 0320 	orr.w	r3, r3, #32
 8002bea:	6023      	str	r3, [r4, #0]
 8002bec:	e003      	b.n	8002bf6 <_printf_i+0x86>
 8002bee:	2975      	cmp	r1, #117	; 0x75
 8002bf0:	d017      	beq.n	8002c22 <_printf_i+0xb2>
 8002bf2:	2978      	cmp	r1, #120	; 0x78
 8002bf4:	d1d4      	bne.n	8002ba0 <_printf_i+0x30>
 8002bf6:	2378      	movs	r3, #120	; 0x78
 8002bf8:	4865      	ldr	r0, [pc, #404]	; (8002d90 <_printf_i+0x220>)
 8002bfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002bfe:	e055      	b.n	8002cac <_printf_i+0x13c>
 8002c00:	6813      	ldr	r3, [r2, #0]
 8002c02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c06:	1d19      	adds	r1, r3, #4
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6011      	str	r1, [r2, #0]
 8002c0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c10:	2301      	movs	r3, #1
 8002c12:	e08c      	b.n	8002d2e <_printf_i+0x1be>
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c1a:	6011      	str	r1, [r2, #0]
 8002c1c:	bf18      	it	ne
 8002c1e:	b21b      	sxthne	r3, r3
 8002c20:	e7cf      	b.n	8002bc2 <_printf_i+0x52>
 8002c22:	6813      	ldr	r3, [r2, #0]
 8002c24:	6825      	ldr	r5, [r4, #0]
 8002c26:	1d18      	adds	r0, r3, #4
 8002c28:	6010      	str	r0, [r2, #0]
 8002c2a:	0628      	lsls	r0, r5, #24
 8002c2c:	d501      	bpl.n	8002c32 <_printf_i+0xc2>
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	e002      	b.n	8002c38 <_printf_i+0xc8>
 8002c32:	0668      	lsls	r0, r5, #25
 8002c34:	d5fb      	bpl.n	8002c2e <_printf_i+0xbe>
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	296f      	cmp	r1, #111	; 0x6f
 8002c3a:	bf14      	ite	ne
 8002c3c:	220a      	movne	r2, #10
 8002c3e:	2208      	moveq	r2, #8
 8002c40:	4852      	ldr	r0, [pc, #328]	; (8002d8c <_printf_i+0x21c>)
 8002c42:	2100      	movs	r1, #0
 8002c44:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c48:	6865      	ldr	r5, [r4, #4]
 8002c4a:	2d00      	cmp	r5, #0
 8002c4c:	60a5      	str	r5, [r4, #8]
 8002c4e:	f2c0 8095 	blt.w	8002d7c <_printf_i+0x20c>
 8002c52:	6821      	ldr	r1, [r4, #0]
 8002c54:	f021 0104 	bic.w	r1, r1, #4
 8002c58:	6021      	str	r1, [r4, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d13d      	bne.n	8002cda <_printf_i+0x16a>
 8002c5e:	2d00      	cmp	r5, #0
 8002c60:	f040 808e 	bne.w	8002d80 <_printf_i+0x210>
 8002c64:	4665      	mov	r5, ip
 8002c66:	2a08      	cmp	r2, #8
 8002c68:	d10b      	bne.n	8002c82 <_printf_i+0x112>
 8002c6a:	6823      	ldr	r3, [r4, #0]
 8002c6c:	07db      	lsls	r3, r3, #31
 8002c6e:	d508      	bpl.n	8002c82 <_printf_i+0x112>
 8002c70:	6923      	ldr	r3, [r4, #16]
 8002c72:	6862      	ldr	r2, [r4, #4]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	bfde      	ittt	le
 8002c78:	2330      	movle	r3, #48	; 0x30
 8002c7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c7e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c82:	ebac 0305 	sub.w	r3, ip, r5
 8002c86:	6123      	str	r3, [r4, #16]
 8002c88:	f8cd 8000 	str.w	r8, [sp]
 8002c8c:	463b      	mov	r3, r7
 8002c8e:	aa03      	add	r2, sp, #12
 8002c90:	4621      	mov	r1, r4
 8002c92:	4630      	mov	r0, r6
 8002c94:	f7ff fef6 	bl	8002a84 <_printf_common>
 8002c98:	3001      	adds	r0, #1
 8002c9a:	d14d      	bne.n	8002d38 <_printf_i+0x1c8>
 8002c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca0:	b005      	add	sp, #20
 8002ca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ca6:	4839      	ldr	r0, [pc, #228]	; (8002d8c <_printf_i+0x21c>)
 8002ca8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002cac:	6813      	ldr	r3, [r2, #0]
 8002cae:	6821      	ldr	r1, [r4, #0]
 8002cb0:	1d1d      	adds	r5, r3, #4
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6015      	str	r5, [r2, #0]
 8002cb6:	060a      	lsls	r2, r1, #24
 8002cb8:	d50b      	bpl.n	8002cd2 <_printf_i+0x162>
 8002cba:	07ca      	lsls	r2, r1, #31
 8002cbc:	bf44      	itt	mi
 8002cbe:	f041 0120 	orrmi.w	r1, r1, #32
 8002cc2:	6021      	strmi	r1, [r4, #0]
 8002cc4:	b91b      	cbnz	r3, 8002cce <_printf_i+0x15e>
 8002cc6:	6822      	ldr	r2, [r4, #0]
 8002cc8:	f022 0220 	bic.w	r2, r2, #32
 8002ccc:	6022      	str	r2, [r4, #0]
 8002cce:	2210      	movs	r2, #16
 8002cd0:	e7b7      	b.n	8002c42 <_printf_i+0xd2>
 8002cd2:	064d      	lsls	r5, r1, #25
 8002cd4:	bf48      	it	mi
 8002cd6:	b29b      	uxthmi	r3, r3
 8002cd8:	e7ef      	b.n	8002cba <_printf_i+0x14a>
 8002cda:	4665      	mov	r5, ip
 8002cdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8002ce0:	fb02 3311 	mls	r3, r2, r1, r3
 8002ce4:	5cc3      	ldrb	r3, [r0, r3]
 8002ce6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002cea:	460b      	mov	r3, r1
 8002cec:	2900      	cmp	r1, #0
 8002cee:	d1f5      	bne.n	8002cdc <_printf_i+0x16c>
 8002cf0:	e7b9      	b.n	8002c66 <_printf_i+0xf6>
 8002cf2:	6813      	ldr	r3, [r2, #0]
 8002cf4:	6825      	ldr	r5, [r4, #0]
 8002cf6:	1d18      	adds	r0, r3, #4
 8002cf8:	6961      	ldr	r1, [r4, #20]
 8002cfa:	6010      	str	r0, [r2, #0]
 8002cfc:	0628      	lsls	r0, r5, #24
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	d501      	bpl.n	8002d06 <_printf_i+0x196>
 8002d02:	6019      	str	r1, [r3, #0]
 8002d04:	e002      	b.n	8002d0c <_printf_i+0x19c>
 8002d06:	066a      	lsls	r2, r5, #25
 8002d08:	d5fb      	bpl.n	8002d02 <_printf_i+0x192>
 8002d0a:	8019      	strh	r1, [r3, #0]
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	4665      	mov	r5, ip
 8002d10:	6123      	str	r3, [r4, #16]
 8002d12:	e7b9      	b.n	8002c88 <_printf_i+0x118>
 8002d14:	6813      	ldr	r3, [r2, #0]
 8002d16:	1d19      	adds	r1, r3, #4
 8002d18:	6011      	str	r1, [r2, #0]
 8002d1a:	681d      	ldr	r5, [r3, #0]
 8002d1c:	6862      	ldr	r2, [r4, #4]
 8002d1e:	2100      	movs	r1, #0
 8002d20:	4628      	mov	r0, r5
 8002d22:	f000 f837 	bl	8002d94 <memchr>
 8002d26:	b108      	cbz	r0, 8002d2c <_printf_i+0x1bc>
 8002d28:	1b40      	subs	r0, r0, r5
 8002d2a:	6060      	str	r0, [r4, #4]
 8002d2c:	6863      	ldr	r3, [r4, #4]
 8002d2e:	6123      	str	r3, [r4, #16]
 8002d30:	2300      	movs	r3, #0
 8002d32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d36:	e7a7      	b.n	8002c88 <_printf_i+0x118>
 8002d38:	6923      	ldr	r3, [r4, #16]
 8002d3a:	462a      	mov	r2, r5
 8002d3c:	4639      	mov	r1, r7
 8002d3e:	4630      	mov	r0, r6
 8002d40:	47c0      	blx	r8
 8002d42:	3001      	adds	r0, #1
 8002d44:	d0aa      	beq.n	8002c9c <_printf_i+0x12c>
 8002d46:	6823      	ldr	r3, [r4, #0]
 8002d48:	079b      	lsls	r3, r3, #30
 8002d4a:	d413      	bmi.n	8002d74 <_printf_i+0x204>
 8002d4c:	68e0      	ldr	r0, [r4, #12]
 8002d4e:	9b03      	ldr	r3, [sp, #12]
 8002d50:	4298      	cmp	r0, r3
 8002d52:	bfb8      	it	lt
 8002d54:	4618      	movlt	r0, r3
 8002d56:	e7a3      	b.n	8002ca0 <_printf_i+0x130>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	464a      	mov	r2, r9
 8002d5c:	4639      	mov	r1, r7
 8002d5e:	4630      	mov	r0, r6
 8002d60:	47c0      	blx	r8
 8002d62:	3001      	adds	r0, #1
 8002d64:	d09a      	beq.n	8002c9c <_printf_i+0x12c>
 8002d66:	3501      	adds	r5, #1
 8002d68:	68e3      	ldr	r3, [r4, #12]
 8002d6a:	9a03      	ldr	r2, [sp, #12]
 8002d6c:	1a9b      	subs	r3, r3, r2
 8002d6e:	42ab      	cmp	r3, r5
 8002d70:	dcf2      	bgt.n	8002d58 <_printf_i+0x1e8>
 8002d72:	e7eb      	b.n	8002d4c <_printf_i+0x1dc>
 8002d74:	2500      	movs	r5, #0
 8002d76:	f104 0919 	add.w	r9, r4, #25
 8002d7a:	e7f5      	b.n	8002d68 <_printf_i+0x1f8>
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1ac      	bne.n	8002cda <_printf_i+0x16a>
 8002d80:	7803      	ldrb	r3, [r0, #0]
 8002d82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d8a:	e76c      	b.n	8002c66 <_printf_i+0xf6>
 8002d8c:	0800450d 	.word	0x0800450d
 8002d90:	0800451e 	.word	0x0800451e

08002d94 <memchr>:
 8002d94:	b510      	push	{r4, lr}
 8002d96:	b2c9      	uxtb	r1, r1
 8002d98:	4402      	add	r2, r0
 8002d9a:	4290      	cmp	r0, r2
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	d101      	bne.n	8002da4 <memchr+0x10>
 8002da0:	2300      	movs	r3, #0
 8002da2:	e003      	b.n	8002dac <memchr+0x18>
 8002da4:	781c      	ldrb	r4, [r3, #0]
 8002da6:	3001      	adds	r0, #1
 8002da8:	428c      	cmp	r4, r1
 8002daa:	d1f6      	bne.n	8002d9a <memchr+0x6>
 8002dac:	4618      	mov	r0, r3
 8002dae:	bd10      	pop	{r4, pc}

08002db0 <memcpy>:
 8002db0:	b510      	push	{r4, lr}
 8002db2:	1e43      	subs	r3, r0, #1
 8002db4:	440a      	add	r2, r1
 8002db6:	4291      	cmp	r1, r2
 8002db8:	d100      	bne.n	8002dbc <memcpy+0xc>
 8002dba:	bd10      	pop	{r4, pc}
 8002dbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002dc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002dc4:	e7f7      	b.n	8002db6 <memcpy+0x6>

08002dc6 <memmove>:
 8002dc6:	4288      	cmp	r0, r1
 8002dc8:	b510      	push	{r4, lr}
 8002dca:	eb01 0302 	add.w	r3, r1, r2
 8002dce:	d807      	bhi.n	8002de0 <memmove+0x1a>
 8002dd0:	1e42      	subs	r2, r0, #1
 8002dd2:	4299      	cmp	r1, r3
 8002dd4:	d00a      	beq.n	8002dec <memmove+0x26>
 8002dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002dda:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002dde:	e7f8      	b.n	8002dd2 <memmove+0xc>
 8002de0:	4283      	cmp	r3, r0
 8002de2:	d9f5      	bls.n	8002dd0 <memmove+0xa>
 8002de4:	1881      	adds	r1, r0, r2
 8002de6:	1ad2      	subs	r2, r2, r3
 8002de8:	42d3      	cmn	r3, r2
 8002dea:	d100      	bne.n	8002dee <memmove+0x28>
 8002dec:	bd10      	pop	{r4, pc}
 8002dee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002df2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002df6:	e7f7      	b.n	8002de8 <memmove+0x22>

08002df8 <_free_r>:
 8002df8:	b538      	push	{r3, r4, r5, lr}
 8002dfa:	4605      	mov	r5, r0
 8002dfc:	2900      	cmp	r1, #0
 8002dfe:	d043      	beq.n	8002e88 <_free_r+0x90>
 8002e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e04:	1f0c      	subs	r4, r1, #4
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	bfb8      	it	lt
 8002e0a:	18e4      	addlt	r4, r4, r3
 8002e0c:	f000 f8d0 	bl	8002fb0 <__malloc_lock>
 8002e10:	4a1e      	ldr	r2, [pc, #120]	; (8002e8c <_free_r+0x94>)
 8002e12:	6813      	ldr	r3, [r2, #0]
 8002e14:	4610      	mov	r0, r2
 8002e16:	b933      	cbnz	r3, 8002e26 <_free_r+0x2e>
 8002e18:	6063      	str	r3, [r4, #4]
 8002e1a:	6014      	str	r4, [r2, #0]
 8002e1c:	4628      	mov	r0, r5
 8002e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e22:	f000 b8c6 	b.w	8002fb2 <__malloc_unlock>
 8002e26:	42a3      	cmp	r3, r4
 8002e28:	d90b      	bls.n	8002e42 <_free_r+0x4a>
 8002e2a:	6821      	ldr	r1, [r4, #0]
 8002e2c:	1862      	adds	r2, r4, r1
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	bf01      	itttt	eq
 8002e32:	681a      	ldreq	r2, [r3, #0]
 8002e34:	685b      	ldreq	r3, [r3, #4]
 8002e36:	1852      	addeq	r2, r2, r1
 8002e38:	6022      	streq	r2, [r4, #0]
 8002e3a:	6063      	str	r3, [r4, #4]
 8002e3c:	6004      	str	r4, [r0, #0]
 8002e3e:	e7ed      	b.n	8002e1c <_free_r+0x24>
 8002e40:	4613      	mov	r3, r2
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	b10a      	cbz	r2, 8002e4a <_free_r+0x52>
 8002e46:	42a2      	cmp	r2, r4
 8002e48:	d9fa      	bls.n	8002e40 <_free_r+0x48>
 8002e4a:	6819      	ldr	r1, [r3, #0]
 8002e4c:	1858      	adds	r0, r3, r1
 8002e4e:	42a0      	cmp	r0, r4
 8002e50:	d10b      	bne.n	8002e6a <_free_r+0x72>
 8002e52:	6820      	ldr	r0, [r4, #0]
 8002e54:	4401      	add	r1, r0
 8002e56:	1858      	adds	r0, r3, r1
 8002e58:	4282      	cmp	r2, r0
 8002e5a:	6019      	str	r1, [r3, #0]
 8002e5c:	d1de      	bne.n	8002e1c <_free_r+0x24>
 8002e5e:	6810      	ldr	r0, [r2, #0]
 8002e60:	6852      	ldr	r2, [r2, #4]
 8002e62:	4401      	add	r1, r0
 8002e64:	6019      	str	r1, [r3, #0]
 8002e66:	605a      	str	r2, [r3, #4]
 8002e68:	e7d8      	b.n	8002e1c <_free_r+0x24>
 8002e6a:	d902      	bls.n	8002e72 <_free_r+0x7a>
 8002e6c:	230c      	movs	r3, #12
 8002e6e:	602b      	str	r3, [r5, #0]
 8002e70:	e7d4      	b.n	8002e1c <_free_r+0x24>
 8002e72:	6820      	ldr	r0, [r4, #0]
 8002e74:	1821      	adds	r1, r4, r0
 8002e76:	428a      	cmp	r2, r1
 8002e78:	bf01      	itttt	eq
 8002e7a:	6811      	ldreq	r1, [r2, #0]
 8002e7c:	6852      	ldreq	r2, [r2, #4]
 8002e7e:	1809      	addeq	r1, r1, r0
 8002e80:	6021      	streq	r1, [r4, #0]
 8002e82:	6062      	str	r2, [r4, #4]
 8002e84:	605c      	str	r4, [r3, #4]
 8002e86:	e7c9      	b.n	8002e1c <_free_r+0x24>
 8002e88:	bd38      	pop	{r3, r4, r5, pc}
 8002e8a:	bf00      	nop
 8002e8c:	200004a8 	.word	0x200004a8

08002e90 <_malloc_r>:
 8002e90:	b570      	push	{r4, r5, r6, lr}
 8002e92:	1ccd      	adds	r5, r1, #3
 8002e94:	f025 0503 	bic.w	r5, r5, #3
 8002e98:	3508      	adds	r5, #8
 8002e9a:	2d0c      	cmp	r5, #12
 8002e9c:	bf38      	it	cc
 8002e9e:	250c      	movcc	r5, #12
 8002ea0:	2d00      	cmp	r5, #0
 8002ea2:	4606      	mov	r6, r0
 8002ea4:	db01      	blt.n	8002eaa <_malloc_r+0x1a>
 8002ea6:	42a9      	cmp	r1, r5
 8002ea8:	d903      	bls.n	8002eb2 <_malloc_r+0x22>
 8002eaa:	230c      	movs	r3, #12
 8002eac:	6033      	str	r3, [r6, #0]
 8002eae:	2000      	movs	r0, #0
 8002eb0:	bd70      	pop	{r4, r5, r6, pc}
 8002eb2:	f000 f87d 	bl	8002fb0 <__malloc_lock>
 8002eb6:	4a21      	ldr	r2, [pc, #132]	; (8002f3c <_malloc_r+0xac>)
 8002eb8:	6814      	ldr	r4, [r2, #0]
 8002eba:	4621      	mov	r1, r4
 8002ebc:	b991      	cbnz	r1, 8002ee4 <_malloc_r+0x54>
 8002ebe:	4c20      	ldr	r4, [pc, #128]	; (8002f40 <_malloc_r+0xb0>)
 8002ec0:	6823      	ldr	r3, [r4, #0]
 8002ec2:	b91b      	cbnz	r3, 8002ecc <_malloc_r+0x3c>
 8002ec4:	4630      	mov	r0, r6
 8002ec6:	f000 f863 	bl	8002f90 <_sbrk_r>
 8002eca:	6020      	str	r0, [r4, #0]
 8002ecc:	4629      	mov	r1, r5
 8002ece:	4630      	mov	r0, r6
 8002ed0:	f000 f85e 	bl	8002f90 <_sbrk_r>
 8002ed4:	1c43      	adds	r3, r0, #1
 8002ed6:	d124      	bne.n	8002f22 <_malloc_r+0x92>
 8002ed8:	230c      	movs	r3, #12
 8002eda:	4630      	mov	r0, r6
 8002edc:	6033      	str	r3, [r6, #0]
 8002ede:	f000 f868 	bl	8002fb2 <__malloc_unlock>
 8002ee2:	e7e4      	b.n	8002eae <_malloc_r+0x1e>
 8002ee4:	680b      	ldr	r3, [r1, #0]
 8002ee6:	1b5b      	subs	r3, r3, r5
 8002ee8:	d418      	bmi.n	8002f1c <_malloc_r+0x8c>
 8002eea:	2b0b      	cmp	r3, #11
 8002eec:	d90f      	bls.n	8002f0e <_malloc_r+0x7e>
 8002eee:	600b      	str	r3, [r1, #0]
 8002ef0:	18cc      	adds	r4, r1, r3
 8002ef2:	50cd      	str	r5, [r1, r3]
 8002ef4:	4630      	mov	r0, r6
 8002ef6:	f000 f85c 	bl	8002fb2 <__malloc_unlock>
 8002efa:	f104 000b 	add.w	r0, r4, #11
 8002efe:	1d23      	adds	r3, r4, #4
 8002f00:	f020 0007 	bic.w	r0, r0, #7
 8002f04:	1ac3      	subs	r3, r0, r3
 8002f06:	d0d3      	beq.n	8002eb0 <_malloc_r+0x20>
 8002f08:	425a      	negs	r2, r3
 8002f0a:	50e2      	str	r2, [r4, r3]
 8002f0c:	e7d0      	b.n	8002eb0 <_malloc_r+0x20>
 8002f0e:	684b      	ldr	r3, [r1, #4]
 8002f10:	428c      	cmp	r4, r1
 8002f12:	bf16      	itet	ne
 8002f14:	6063      	strne	r3, [r4, #4]
 8002f16:	6013      	streq	r3, [r2, #0]
 8002f18:	460c      	movne	r4, r1
 8002f1a:	e7eb      	b.n	8002ef4 <_malloc_r+0x64>
 8002f1c:	460c      	mov	r4, r1
 8002f1e:	6849      	ldr	r1, [r1, #4]
 8002f20:	e7cc      	b.n	8002ebc <_malloc_r+0x2c>
 8002f22:	1cc4      	adds	r4, r0, #3
 8002f24:	f024 0403 	bic.w	r4, r4, #3
 8002f28:	42a0      	cmp	r0, r4
 8002f2a:	d005      	beq.n	8002f38 <_malloc_r+0xa8>
 8002f2c:	1a21      	subs	r1, r4, r0
 8002f2e:	4630      	mov	r0, r6
 8002f30:	f000 f82e 	bl	8002f90 <_sbrk_r>
 8002f34:	3001      	adds	r0, #1
 8002f36:	d0cf      	beq.n	8002ed8 <_malloc_r+0x48>
 8002f38:	6025      	str	r5, [r4, #0]
 8002f3a:	e7db      	b.n	8002ef4 <_malloc_r+0x64>
 8002f3c:	200004a8 	.word	0x200004a8
 8002f40:	200004ac 	.word	0x200004ac

08002f44 <_realloc_r>:
 8002f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f46:	4607      	mov	r7, r0
 8002f48:	4614      	mov	r4, r2
 8002f4a:	460e      	mov	r6, r1
 8002f4c:	b921      	cbnz	r1, 8002f58 <_realloc_r+0x14>
 8002f4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002f52:	4611      	mov	r1, r2
 8002f54:	f7ff bf9c 	b.w	8002e90 <_malloc_r>
 8002f58:	b922      	cbnz	r2, 8002f64 <_realloc_r+0x20>
 8002f5a:	f7ff ff4d 	bl	8002df8 <_free_r>
 8002f5e:	4625      	mov	r5, r4
 8002f60:	4628      	mov	r0, r5
 8002f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f64:	f000 f826 	bl	8002fb4 <_malloc_usable_size_r>
 8002f68:	42a0      	cmp	r0, r4
 8002f6a:	d20f      	bcs.n	8002f8c <_realloc_r+0x48>
 8002f6c:	4621      	mov	r1, r4
 8002f6e:	4638      	mov	r0, r7
 8002f70:	f7ff ff8e 	bl	8002e90 <_malloc_r>
 8002f74:	4605      	mov	r5, r0
 8002f76:	2800      	cmp	r0, #0
 8002f78:	d0f2      	beq.n	8002f60 <_realloc_r+0x1c>
 8002f7a:	4631      	mov	r1, r6
 8002f7c:	4622      	mov	r2, r4
 8002f7e:	f7ff ff17 	bl	8002db0 <memcpy>
 8002f82:	4631      	mov	r1, r6
 8002f84:	4638      	mov	r0, r7
 8002f86:	f7ff ff37 	bl	8002df8 <_free_r>
 8002f8a:	e7e9      	b.n	8002f60 <_realloc_r+0x1c>
 8002f8c:	4635      	mov	r5, r6
 8002f8e:	e7e7      	b.n	8002f60 <_realloc_r+0x1c>

08002f90 <_sbrk_r>:
 8002f90:	b538      	push	{r3, r4, r5, lr}
 8002f92:	2300      	movs	r3, #0
 8002f94:	4c05      	ldr	r4, [pc, #20]	; (8002fac <_sbrk_r+0x1c>)
 8002f96:	4605      	mov	r5, r0
 8002f98:	4608      	mov	r0, r1
 8002f9a:	6023      	str	r3, [r4, #0]
 8002f9c:	f7fd ff06 	bl	8000dac <_sbrk>
 8002fa0:	1c43      	adds	r3, r0, #1
 8002fa2:	d102      	bne.n	8002faa <_sbrk_r+0x1a>
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	b103      	cbz	r3, 8002faa <_sbrk_r+0x1a>
 8002fa8:	602b      	str	r3, [r5, #0]
 8002faa:	bd38      	pop	{r3, r4, r5, pc}
 8002fac:	20000508 	.word	0x20000508

08002fb0 <__malloc_lock>:
 8002fb0:	4770      	bx	lr

08002fb2 <__malloc_unlock>:
 8002fb2:	4770      	bx	lr

08002fb4 <_malloc_usable_size_r>:
 8002fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fb8:	1f18      	subs	r0, r3, #4
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	bfbc      	itt	lt
 8002fbe:	580b      	ldrlt	r3, [r1, r0]
 8002fc0:	18c0      	addlt	r0, r0, r3
 8002fc2:	4770      	bx	lr

08002fc4 <_init>:
 8002fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc6:	bf00      	nop
 8002fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fca:	bc08      	pop	{r3}
 8002fcc:	469e      	mov	lr, r3
 8002fce:	4770      	bx	lr

08002fd0 <_fini>:
 8002fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fd2:	bf00      	nop
 8002fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fd6:	bc08      	pop	{r3}
 8002fd8:	469e      	mov	lr, r3
 8002fda:	4770      	bx	lr
