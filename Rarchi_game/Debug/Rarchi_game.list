
Rarchi_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004178  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002224  08004284  08004284  00014284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064a8  080064a8  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080064a8  080064a8  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064a8  080064a8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064a8  080064a8  000164a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064ac  080064ac  000164ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080064b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  20000080  08006530  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  08006530  00020554  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f805  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020c7  00000000  00000000  0002f8ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d98  00000000  00000000  00031978  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cb8  00000000  00000000  00032710  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001821f  00000000  00000000  000333c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bc29  00000000  00000000  0004b5e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b084  00000000  00000000  00057210  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e2294  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bf8  00000000  00000000  000e2310  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	0800426c 	.word	0x0800426c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	0800426c 	.word	0x0800426c

0800014c <gameplay_1_confirm>:
 *      Author: Tecnica2
 */

#include "gameplay_logic.h"

void gameplay_1_confirm(Player *child) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af02      	add	r7, sp, #8
 8000152:	6078      	str	r0, [r7, #4]

	//I check if is the right response:
	if (game1[child->game_questions].answare == child->selected_game_item) {
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	88db      	ldrh	r3, [r3, #6]
 8000158:	4a4d      	ldr	r2, [pc, #308]	; (8000290 <gameplay_1_confirm+0x144>)
 800015a:	011b      	lsls	r3, r3, #4
 800015c:	4413      	add	r3, r2
 800015e:	330c      	adds	r3, #12
 8000160:	781a      	ldrb	r2, [r3, #0]
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	7a1b      	ldrb	r3, [r3, #8]
 8000166:	429a      	cmp	r2, r3
 8000168:	d10b      	bne.n	8000182 <gameplay_1_confirm+0x36>
		HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000170:	4848      	ldr	r0, [pc, #288]	; (8000294 <gameplay_1_confirm+0x148>)
 8000172:	f001 fea4 	bl	8001ebe <HAL_GPIO_WritePin>
		child->points++;
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	1c5a      	adds	r2, r3, #1
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	601a      	str	r2, [r3, #0]
 8000180:	e005      	b.n	800018e <gameplay_1_confirm+0x42>
	} else {
		HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 1);
 8000182:	2201      	movs	r2, #1
 8000184:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000188:	4842      	ldr	r0, [pc, #264]	; (8000294 <gameplay_1_confirm+0x148>)
 800018a:	f001 fe98 	bl	8001ebe <HAL_GPIO_WritePin>
	}
	//Add the points in case of win and then roll over other question:
	child->game_questions++;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	88db      	ldrh	r3, [r3, #6]
 8000192:	3301      	adds	r3, #1
 8000194:	b29a      	uxth	r2, r3
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	80da      	strh	r2, [r3, #6]
	child->selected_game_item = 0;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2200      	movs	r2, #0
 800019e:	721a      	strb	r2, [r3, #8]
	if (child->game_questions <= 5) {
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	88db      	ldrh	r3, [r3, #6]
 80001a4:	2b05      	cmp	r3, #5
 80001a6:	d83f      	bhi.n	8000228 <gameplay_1_confirm+0xdc>
		SSD1306_Clear();
 80001a8:	f001 f9a2 	bl	80014f0 <SSD1306_Clear>
		SSD1306_GotoXY(0, 0);
 80001ac:	2100      	movs	r1, #0
 80001ae:	2000      	movs	r0, #0
 80001b0:	f000 ff7e 	bl	80010b0 <SSD1306_GotoXY>
		SSD1306_Puts(game1[child->game_questions].question, &Font_7x10, 1);
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	88db      	ldrh	r3, [r3, #6]
 80001b8:	4a35      	ldr	r2, [pc, #212]	; (8000290 <gameplay_1_confirm+0x144>)
 80001ba:	011b      	lsls	r3, r3, #4
 80001bc:	4413      	add	r3, r2
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2201      	movs	r2, #1
 80001c2:	4935      	ldr	r1, [pc, #212]	; (8000298 <gameplay_1_confirm+0x14c>)
 80001c4:	4618      	mov	r0, r3
 80001c6:	f001 f809 	bl	80011dc <SSD1306_Puts>
		SSD1306_GotoXY(0, 30);
 80001ca:	211e      	movs	r1, #30
 80001cc:	2000      	movs	r0, #0
 80001ce:	f000 ff6f 	bl	80010b0 <SSD1306_GotoXY>
		SSD1306_Puts(game1[child->game_questions].yes, &Font_7x10, 1);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	88db      	ldrh	r3, [r3, #6]
 80001d6:	4a2e      	ldr	r2, [pc, #184]	; (8000290 <gameplay_1_confirm+0x144>)
 80001d8:	011b      	lsls	r3, r3, #4
 80001da:	4413      	add	r3, r2
 80001dc:	3304      	adds	r3, #4
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	2201      	movs	r2, #1
 80001e2:	492d      	ldr	r1, [pc, #180]	; (8000298 <gameplay_1_confirm+0x14c>)
 80001e4:	4618      	mov	r0, r3
 80001e6:	f000 fff9 	bl	80011dc <SSD1306_Puts>
		SSD1306_GotoXY(80, 30);
 80001ea:	211e      	movs	r1, #30
 80001ec:	2050      	movs	r0, #80	; 0x50
 80001ee:	f000 ff5f 	bl	80010b0 <SSD1306_GotoXY>
		SSD1306_Puts(game1[child->game_questions].no, &Font_7x10, 1);
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	88db      	ldrh	r3, [r3, #6]
 80001f6:	4a26      	ldr	r2, [pc, #152]	; (8000290 <gameplay_1_confirm+0x144>)
 80001f8:	011b      	lsls	r3, r3, #4
 80001fa:	4413      	add	r3, r2
 80001fc:	3308      	adds	r3, #8
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	2201      	movs	r2, #1
 8000202:	4925      	ldr	r1, [pc, #148]	; (8000298 <gameplay_1_confirm+0x14c>)
 8000204:	4618      	mov	r0, r3
 8000206:	f000 ffe9 	bl	80011dc <SSD1306_Puts>
		child->selected_game_item = 0;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2200      	movs	r2, #0
 800020e:	721a      	strb	r2, [r3, #8]
		SSD1306_GotoXY(20, 50);
 8000210:	2132      	movs	r1, #50	; 0x32
 8000212:	2014      	movs	r0, #20
 8000214:	f000 ff4c 	bl	80010b0 <SSD1306_GotoXY>
		SSD1306_Puts("<=>", &Font_7x10, 1);
 8000218:	2201      	movs	r2, #1
 800021a:	491f      	ldr	r1, [pc, #124]	; (8000298 <gameplay_1_confirm+0x14c>)
 800021c:	481f      	ldr	r0, [pc, #124]	; (800029c <gameplay_1_confirm+0x150>)
 800021e:	f000 ffdd 	bl	80011dc <SSD1306_Puts>
		//SSD1306_GotoXY(100, 50);
		//SSD1306_Puts("<=>", &Font_7x10, 1);
		SSD1306_UpdateScreen();
 8000222:	f000 fea1 	bl	8000f68 <SSD1306_UpdateScreen>
 8000226:	e02c      	b.n	8000282 <gameplay_1_confirm+0x136>
	} else {
		SSD1306_Clear();
 8000228:	f001 f962 	bl	80014f0 <SSD1306_Clear>
		child->state_machine = INIT;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2200      	movs	r2, #0
 8000230:	711a      	strb	r2, [r3, #4]
		SSD1306_DrawBitmap(0, 0, image_data_test_real, 128, 64, 1);
 8000232:	2301      	movs	r3, #1
 8000234:	9301      	str	r3, [sp, #4]
 8000236:	2340      	movs	r3, #64	; 0x40
 8000238:	9300      	str	r3, [sp, #0]
 800023a:	2380      	movs	r3, #128	; 0x80
 800023c:	4a18      	ldr	r2, [pc, #96]	; (80002a0 <gameplay_1_confirm+0x154>)
 800023e:	2100      	movs	r1, #0
 8000240:	2000      	movs	r0, #0
 8000242:	f000 fd65 	bl	8000d10 <SSD1306_DrawBitmap>
		SSD1306_GotoXY(0, 0);
 8000246:	2100      	movs	r1, #0
 8000248:	2000      	movs	r0, #0
 800024a:	f000 ff31 	bl	80010b0 <SSD1306_GotoXY>
		SSD1306_Puts("PTS:", &Font_11x18, 1);
 800024e:	2201      	movs	r2, #1
 8000250:	4914      	ldr	r1, [pc, #80]	; (80002a4 <gameplay_1_confirm+0x158>)
 8000252:	4815      	ldr	r0, [pc, #84]	; (80002a8 <gameplay_1_confirm+0x15c>)
 8000254:	f000 ffc2 	bl	80011dc <SSD1306_Puts>
		SSD1306_GotoXY(42, 0);
 8000258:	2100      	movs	r1, #0
 800025a:	202a      	movs	r0, #42	; 0x2a
 800025c:	f000 ff28 	bl	80010b0 <SSD1306_GotoXY>
		char *numberstring[(((sizeof child->points)) + 2) / 3 + 2];
		sprintf(numberstring, "%d", child->points);
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	f107 0308 	add.w	r3, r7, #8
 8000268:	4910      	ldr	r1, [pc, #64]	; (80002ac <gameplay_1_confirm+0x160>)
 800026a:	4618      	mov	r0, r3
 800026c:	f003 fbec 	bl	8003a48 <siprintf>
		SSD1306_Puts(numberstring, &Font_11x18, 1);
 8000270:	f107 0308 	add.w	r3, r7, #8
 8000274:	2201      	movs	r2, #1
 8000276:	490b      	ldr	r1, [pc, #44]	; (80002a4 <gameplay_1_confirm+0x158>)
 8000278:	4618      	mov	r0, r3
 800027a:	f000 ffaf 	bl	80011dc <SSD1306_Puts>
		SSD1306_UpdateScreen(); //display
 800027e:	f000 fe73 	bl	8000f68 <SSD1306_UpdateScreen>
		//HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 0);
	//HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 1);

	}
	HAL_Delay(100);
 8000282:	2064      	movs	r0, #100	; 0x64
 8000284:	f001 fb7a 	bl	800197c <HAL_Delay>

}
 8000288:	bf00      	nop
 800028a:	3718      	adds	r7, #24
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	080059f0 	.word	0x080059f0
 8000294:	40010c00 	.word	0x40010c00
 8000298:	20000000 	.word	0x20000000
 800029c:	08004390 	.word	0x08004390
 80002a0:	08005a60 	.word	0x08005a60
 80002a4:	20000008 	.word	0x20000008
 80002a8:	08004394 	.word	0x08004394
 80002ac:	0800439c 	.word	0x0800439c

080002b0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b098      	sub	sp, #96	; 0x60
 80002b4:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	Player children;
	children.points = 0;
 80002b6:	2300      	movs	r3, #0
 80002b8:	647b      	str	r3, [r7, #68]	; 0x44
	children.state_machine = INIT;
 80002ba:	2300      	movs	r3, #0
 80002bc:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	children.scrol_position = 18;
 80002c0:	2312      	movs	r3, #18
 80002c2:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	children.game_questions = 0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	children.selected_game_item = 0;
 80002cc:	2300      	movs	r3, #0
 80002ce:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002d2:	f001 faf1 	bl	80018b8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002d6:	f000 fbc7 	bl	8000a68 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002da:	f000 fc87 	bl	8000bec <MX_GPIO_Init>
	MX_I2C1_Init();
 80002de:	f000 fc09 	bl	8000af4 <MX_I2C1_Init>
	MX_TIM2_Init();
 80002e2:	f000 fc35 	bl	8000b50 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	SSD1306_Init(); // initialise
 80002e6:	f000 fd7b 	bl	8000de0 <SSD1306_Init>
	HAL_TIM_Base_Init(&htim2);
 80002ea:	48cb      	ldr	r0, [pc, #812]	; (8000618 <main+0x368>)
 80002ec:	f002 ff8c 	bl	8003208 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 80002f0:	48c9      	ldr	r0, [pc, #804]	; (8000618 <main+0x368>)
 80002f2:	f002 ffd9 	bl	80032a8 <HAL_TIM_Base_Start_IT>
	timer_val = __HAL_TIM_GET_COUNTER(&htim2);
 80002f6:	4bc8      	ldr	r3, [pc, #800]	; (8000618 <main+0x368>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	SSD1306_GotoXY(0, 0);
 8000300:	2100      	movs	r1, #0
 8000302:	2000      	movs	r0, #0
 8000304:	f000 fed4 	bl	80010b0 <SSD1306_GotoXY>
	SSD1306_Puts("PTS:", &Font_11x18, 1);
 8000308:	2201      	movs	r2, #1
 800030a:	49c4      	ldr	r1, [pc, #784]	; (800061c <main+0x36c>)
 800030c:	48c4      	ldr	r0, [pc, #784]	; (8000620 <main+0x370>)
 800030e:	f000 ff65 	bl	80011dc <SSD1306_Puts>
	SSD1306_GotoXY(42, 0);
 8000312:	2100      	movs	r1, #0
 8000314:	202a      	movs	r0, #42	; 0x2a
 8000316:	f000 fecb 	bl	80010b0 <SSD1306_GotoXY>
	char *numberstring[(((sizeof children.points)) + 2) / 3 + 2];
	sprintf(numberstring, "%d", children.points);
 800031a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800031c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000320:	49c0      	ldr	r1, [pc, #768]	; (8000624 <main+0x374>)
 8000322:	4618      	mov	r0, r3
 8000324:	f003 fb90 	bl	8003a48 <siprintf>
	SSD1306_Puts(numberstring, &Font_11x18, 1);
 8000328:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800032c:	2201      	movs	r2, #1
 800032e:	49bb      	ldr	r1, [pc, #748]	; (800061c <main+0x36c>)
 8000330:	4618      	mov	r0, r3
 8000332:	f000 ff53 	bl	80011dc <SSD1306_Puts>
	HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 0);
 8000336:	2200      	movs	r2, #0
 8000338:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800033c:	48ba      	ldr	r0, [pc, #744]	; (8000628 <main+0x378>)
 800033e:	f001 fdbe 	bl	8001ebe <HAL_GPIO_WritePin>

	SSD1306_DrawBitmap(30, 0, image_data_test_real, 128, 64, 1);
 8000342:	2301      	movs	r3, #1
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2340      	movs	r3, #64	; 0x40
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	2380      	movs	r3, #128	; 0x80
 800034c:	4ab7      	ldr	r2, [pc, #732]	; (800062c <main+0x37c>)
 800034e:	2100      	movs	r1, #0
 8000350:	201e      	movs	r0, #30
 8000352:	f000 fcdd 	bl	8000d10 <SSD1306_DrawBitmap>
	int position_icon = 0;
 8000356:	2300      	movs	r3, #0
 8000358:	653b      	str	r3, [r7, #80]	; 0x50
	SSD1306_DrawBitmap(position_icon, 20, icon_house, 25, 25, 1);
 800035a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800035c:	b218      	sxth	r0, r3
 800035e:	2301      	movs	r3, #1
 8000360:	9301      	str	r3, [sp, #4]
 8000362:	2319      	movs	r3, #25
 8000364:	9300      	str	r3, [sp, #0]
 8000366:	2319      	movs	r3, #25
 8000368:	4ab1      	ldr	r2, [pc, #708]	; (8000630 <main+0x380>)
 800036a:	2114      	movs	r1, #20
 800036c:	f000 fcd0 	bl	8000d10 <SSD1306_DrawBitmap>
	SSD1306_DrawBitmap(position_icon+=25, 20, icon_cross, 25, 25, 1);
 8000370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000372:	3319      	adds	r3, #25
 8000374:	653b      	str	r3, [r7, #80]	; 0x50
 8000376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000378:	b218      	sxth	r0, r3
 800037a:	2301      	movs	r3, #1
 800037c:	9301      	str	r3, [sp, #4]
 800037e:	2319      	movs	r3, #25
 8000380:	9300      	str	r3, [sp, #0]
 8000382:	2319      	movs	r3, #25
 8000384:	4aab      	ldr	r2, [pc, #684]	; (8000634 <main+0x384>)
 8000386:	2114      	movs	r1, #20
 8000388:	f000 fcc2 	bl	8000d10 <SSD1306_DrawBitmap>
	SSD1306_DrawBitmap(position_icon+=25, 20, icon_circle, 25, 25, 1);
 800038c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800038e:	3319      	adds	r3, #25
 8000390:	653b      	str	r3, [r7, #80]	; 0x50
 8000392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000394:	b218      	sxth	r0, r3
 8000396:	2301      	movs	r3, #1
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	2319      	movs	r3, #25
 800039c:	9300      	str	r3, [sp, #0]
 800039e:	2319      	movs	r3, #25
 80003a0:	4aa5      	ldr	r2, [pc, #660]	; (8000638 <main+0x388>)
 80003a2:	2114      	movs	r1, #20
 80003a4:	f000 fcb4 	bl	8000d10 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 80003a8:	f000 fdde 	bl	8000f68 <SSD1306_UpdateScreen>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		switch (children.state_machine) {
 80003ac:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80003b0:	2b05      	cmp	r3, #5
 80003b2:	d8fb      	bhi.n	80003ac <main+0xfc>
 80003b4:	a201      	add	r2, pc, #4	; (adr r2, 80003bc <main+0x10c>)
 80003b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ba:	bf00      	nop
 80003bc:	080003d5 	.word	0x080003d5
 80003c0:	08000497 	.word	0x08000497
 80003c4:	08000713 	.word	0x08000713
 80003c8:	080007af 	.word	0x080007af
 80003cc:	08000821 	.word	0x08000821
 80003d0:	08000893 	.word	0x08000893
		case INIT:
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin) == 0
 80003d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003d8:	4893      	ldr	r0, [pc, #588]	; (8000628 <main+0x378>)
 80003da:	f001 fd59 	bl	8001e90 <HAL_GPIO_ReadPin>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d008      	beq.n	80003f6 <main+0x146>
					|| HAL_GPIO_ReadPin(BUTTON_LEFT_GPIO_Port, BUTTON_LEFT_Pin)
 80003e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003e8:	488f      	ldr	r0, [pc, #572]	; (8000628 <main+0x378>)
 80003ea:	f001 fd51 	bl	8001e90 <HAL_GPIO_ReadPin>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	f040 831e 	bne.w	8000a32 <main+0x782>
							== 0) {
				HAL_GPIO_WritePin(RGB_RED_GPIO_Port, RGB_RED_Pin, 1);
 80003f6:	2201      	movs	r2, #1
 80003f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003fc:	488a      	ldr	r0, [pc, #552]	; (8000628 <main+0x378>)
 80003fe:	f001 fd5e 	bl	8001ebe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 0);
 8000402:	2200      	movs	r2, #0
 8000404:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000408:	4887      	ldr	r0, [pc, #540]	; (8000628 <main+0x378>)
 800040a:	f001 fd58 	bl	8001ebe <HAL_GPIO_WritePin>
				//I update the screen
				SSD1306_Clear();
 800040e:	f001 f86f 	bl	80014f0 <SSD1306_Clear>
				SSD1306_GotoXY(20, 18);
 8000412:	2112      	movs	r1, #18
 8000414:	2014      	movs	r0, #20
 8000416:	f000 fe4b 	bl	80010b0 <SSD1306_GotoXY>
				SSD1306_Puts("1:Questions", &Font_7x10, 1);
 800041a:	2201      	movs	r2, #1
 800041c:	4987      	ldr	r1, [pc, #540]	; (800063c <main+0x38c>)
 800041e:	4888      	ldr	r0, [pc, #544]	; (8000640 <main+0x390>)
 8000420:	f000 fedc 	bl	80011dc <SSD1306_Puts>
				SSD1306_GotoXY(20, 28);
 8000424:	211c      	movs	r1, #28
 8000426:	2014      	movs	r0, #20
 8000428:	f000 fe42 	bl	80010b0 <SSD1306_GotoXY>
				SSD1306_Puts("2:Relations", &Font_7x10, 1);
 800042c:	2201      	movs	r2, #1
 800042e:	4983      	ldr	r1, [pc, #524]	; (800063c <main+0x38c>)
 8000430:	4884      	ldr	r0, [pc, #528]	; (8000644 <main+0x394>)
 8000432:	f000 fed3 	bl	80011dc <SSD1306_Puts>
				SSD1306_GotoXY(20, 38);
 8000436:	2126      	movs	r1, #38	; 0x26
 8000438:	2014      	movs	r0, #20
 800043a:	f000 fe39 	bl	80010b0 <SSD1306_GotoXY>
				SSD1306_Puts("3:Maths", &Font_7x10, 1);
 800043e:	2201      	movs	r2, #1
 8000440:	497e      	ldr	r1, [pc, #504]	; (800063c <main+0x38c>)
 8000442:	4881      	ldr	r0, [pc, #516]	; (8000648 <main+0x398>)
 8000444:	f000 feca 	bl	80011dc <SSD1306_Puts>
				SSD1306_GotoXY(20, 48);
 8000448:	2130      	movs	r1, #48	; 0x30
 800044a:	2014      	movs	r0, #20
 800044c:	f000 fe30 	bl	80010b0 <SSD1306_GotoXY>
				SSD1306_Puts("4:Orthography", &Font_7x10, 1);
 8000450:	2201      	movs	r2, #1
 8000452:	497a      	ldr	r1, [pc, #488]	; (800063c <main+0x38c>)
 8000454:	487d      	ldr	r0, [pc, #500]	; (800064c <main+0x39c>)
 8000456:	f000 fec1 	bl	80011dc <SSD1306_Puts>
				SSD1306_GotoXY(50, 0);
 800045a:	2100      	movs	r1, #0
 800045c:	2032      	movs	r0, #50	; 0x32
 800045e:	f000 fe27 	bl	80010b0 <SSD1306_GotoXY>
				SSD1306_Puts("Select game", &Font_7x10, 1);
 8000462:	2201      	movs	r2, #1
 8000464:	4975      	ldr	r1, [pc, #468]	; (800063c <main+0x38c>)
 8000466:	487a      	ldr	r0, [pc, #488]	; (8000650 <main+0x3a0>)
 8000468:	f000 feb8 	bl	80011dc <SSD1306_Puts>
				children.scrol_position = 28;
 800046c:	231c      	movs	r3, #28
 800046e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
				SSD1306_GotoXY(10, 18);
 8000472:	2112      	movs	r1, #18
 8000474:	200a      	movs	r0, #10
 8000476:	f000 fe1b 	bl	80010b0 <SSD1306_GotoXY>
				SSD1306_Puts(">", &Font_7x10, 1);
 800047a:	2201      	movs	r2, #1
 800047c:	496f      	ldr	r1, [pc, #444]	; (800063c <main+0x38c>)
 800047e:	4875      	ldr	r0, [pc, #468]	; (8000654 <main+0x3a4>)
 8000480:	f000 feac 	bl	80011dc <SSD1306_Puts>
				SSD1306_UpdateScreen(); //display
 8000484:	f000 fd70 	bl	8000f68 <SSD1306_UpdateScreen>
				HAL_Delay(60);
 8000488:	203c      	movs	r0, #60	; 0x3c
 800048a:	f001 fa77 	bl	800197c <HAL_Delay>
				children.state_machine = MENU;
 800048e:	2301      	movs	r3, #1
 8000490:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			}
			break;
 8000494:	e2cd      	b.n	8000a32 <main+0x782>
		case MENU:
			if (HAL_GPIO_ReadPin(BUTTON_LEFT_GPIO_Port, BUTTON_LEFT_Pin) == 0) {
 8000496:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800049a:	4863      	ldr	r0, [pc, #396]	; (8000628 <main+0x378>)
 800049c:	f001 fcf8 	bl	8001e90 <HAL_GPIO_ReadPin>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d146      	bne.n	8000534 <main+0x284>
				SSD1306_GotoXY(10, 18);
 80004a6:	2112      	movs	r1, #18
 80004a8:	200a      	movs	r0, #10
 80004aa:	f000 fe01 	bl	80010b0 <SSD1306_GotoXY>
				SSD1306_Puts(" ", &Font_7x10, 1);
 80004ae:	2201      	movs	r2, #1
 80004b0:	4962      	ldr	r1, [pc, #392]	; (800063c <main+0x38c>)
 80004b2:	4869      	ldr	r0, [pc, #420]	; (8000658 <main+0x3a8>)
 80004b4:	f000 fe92 	bl	80011dc <SSD1306_Puts>
				SSD1306_GotoXY(10, 28);
 80004b8:	211c      	movs	r1, #28
 80004ba:	200a      	movs	r0, #10
 80004bc:	f000 fdf8 	bl	80010b0 <SSD1306_GotoXY>
				SSD1306_Puts(" ", &Font_7x10, 1);
 80004c0:	2201      	movs	r2, #1
 80004c2:	495e      	ldr	r1, [pc, #376]	; (800063c <main+0x38c>)
 80004c4:	4864      	ldr	r0, [pc, #400]	; (8000658 <main+0x3a8>)
 80004c6:	f000 fe89 	bl	80011dc <SSD1306_Puts>
				SSD1306_GotoXY(10, 38);
 80004ca:	2126      	movs	r1, #38	; 0x26
 80004cc:	200a      	movs	r0, #10
 80004ce:	f000 fdef 	bl	80010b0 <SSD1306_GotoXY>
				SSD1306_Puts(" ", &Font_7x10, 1);
 80004d2:	2201      	movs	r2, #1
 80004d4:	4959      	ldr	r1, [pc, #356]	; (800063c <main+0x38c>)
 80004d6:	4860      	ldr	r0, [pc, #384]	; (8000658 <main+0x3a8>)
 80004d8:	f000 fe80 	bl	80011dc <SSD1306_Puts>
				SSD1306_GotoXY(10, 48);
 80004dc:	2130      	movs	r1, #48	; 0x30
 80004de:	200a      	movs	r0, #10
 80004e0:	f000 fde6 	bl	80010b0 <SSD1306_GotoXY>
				SSD1306_Puts(" ", &Font_7x10, 1);
 80004e4:	2201      	movs	r2, #1
 80004e6:	4955      	ldr	r1, [pc, #340]	; (800063c <main+0x38c>)
 80004e8:	485b      	ldr	r0, [pc, #364]	; (8000658 <main+0x3a8>)
 80004ea:	f000 fe77 	bl	80011dc <SSD1306_Puts>
				SSD1306_GotoXY(10, children.scrol_position);
 80004ee:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80004f2:	b29b      	uxth	r3, r3
 80004f4:	4619      	mov	r1, r3
 80004f6:	200a      	movs	r0, #10
 80004f8:	f000 fdda 	bl	80010b0 <SSD1306_GotoXY>
				SSD1306_Puts(">", &Font_7x10, 1);
 80004fc:	2201      	movs	r2, #1
 80004fe:	494f      	ldr	r1, [pc, #316]	; (800063c <main+0x38c>)
 8000500:	4854      	ldr	r0, [pc, #336]	; (8000654 <main+0x3a4>)
 8000502:	f000 fe6b 	bl	80011dc <SSD1306_Puts>
				SSD1306_UpdateScreen(); //display
 8000506:	f000 fd2f 	bl	8000f68 <SSD1306_UpdateScreen>
				if (children.scrol_position >= 48) {
 800050a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800050e:	2b2f      	cmp	r3, #47	; 0x2f
 8000510:	d903      	bls.n	800051a <main+0x26a>
					children.scrol_position = 18;
 8000512:	2312      	movs	r3, #18
 8000514:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8000518:	e009      	b.n	800052e <main+0x27e>
				} else if (children.scrol_position != 48) {
 800051a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800051e:	2b30      	cmp	r3, #48	; 0x30
 8000520:	d005      	beq.n	800052e <main+0x27e>
					children.scrol_position += 10;
 8000522:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000526:	330a      	adds	r3, #10
 8000528:	b2db      	uxtb	r3, r3
 800052a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
				}
				HAL_Delay(60);
 800052e:	203c      	movs	r0, #60	; 0x3c
 8000530:	f001 fa24 	bl	800197c <HAL_Delay>
			}
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin)
 8000534:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000538:	483b      	ldr	r0, [pc, #236]	; (8000628 <main+0x378>)
 800053a:	f001 fca9 	bl	8001e90 <HAL_GPIO_ReadPin>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	f040 8278 	bne.w	8000a36 <main+0x786>
					== 0) {
				SSD1306_Clear();
 8000546:	f000 ffd3 	bl	80014f0 <SSD1306_Clear>
				HAL_GPIO_WritePin(RGB_RED_GPIO_Port, RGB_RED_Pin, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000550:	4835      	ldr	r0, [pc, #212]	; (8000628 <main+0x378>)
 8000552:	f001 fcb4 	bl	8001ebe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800055c:	4832      	ldr	r0, [pc, #200]	; (8000628 <main+0x378>)
 800055e:	f001 fcae 	bl	8001ebe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 1);
 8000562:	2201      	movs	r2, #1
 8000564:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000568:	482f      	ldr	r0, [pc, #188]	; (8000628 <main+0x378>)
 800056a:	f001 fca8 	bl	8001ebe <HAL_GPIO_WritePin>
				SSD1306_GotoXY(0, 0);
 800056e:	2100      	movs	r1, #0
 8000570:	2000      	movs	r0, #0
 8000572:	f000 fd9d 	bl	80010b0 <SSD1306_GotoXY>

				if (children.scrol_position == 28) {
 8000576:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800057a:	2b1c      	cmp	r3, #28
 800057c:	d13e      	bne.n	80005fc <main+0x34c>
					children.state_machine = GAME_1;
 800057e:	2302      	movs	r3, #2
 8000580:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
					children.game_questions = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
					SSD1306_GotoXY(0, 0);
 800058a:	2100      	movs	r1, #0
 800058c:	2000      	movs	r0, #0
 800058e:	f000 fd8f 	bl	80010b0 <SSD1306_GotoXY>
					SSD1306_Puts(game1[children.game_questions].question,
 8000592:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000596:	4a31      	ldr	r2, [pc, #196]	; (800065c <main+0x3ac>)
 8000598:	011b      	lsls	r3, r3, #4
 800059a:	4413      	add	r3, r2
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2201      	movs	r2, #1
 80005a0:	4926      	ldr	r1, [pc, #152]	; (800063c <main+0x38c>)
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fe1a 	bl	80011dc <SSD1306_Puts>
							&Font_7x10, 1);
					SSD1306_GotoXY(0, 30);
 80005a8:	211e      	movs	r1, #30
 80005aa:	2000      	movs	r0, #0
 80005ac:	f000 fd80 	bl	80010b0 <SSD1306_GotoXY>
					SSD1306_Puts(game1[children.game_questions].yes, &Font_7x10,
 80005b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80005b4:	4a29      	ldr	r2, [pc, #164]	; (800065c <main+0x3ac>)
 80005b6:	011b      	lsls	r3, r3, #4
 80005b8:	4413      	add	r3, r2
 80005ba:	3304      	adds	r3, #4
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2201      	movs	r2, #1
 80005c0:	491e      	ldr	r1, [pc, #120]	; (800063c <main+0x38c>)
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fe0a 	bl	80011dc <SSD1306_Puts>
							1);
					SSD1306_GotoXY(80, 30);
 80005c8:	211e      	movs	r1, #30
 80005ca:	2050      	movs	r0, #80	; 0x50
 80005cc:	f000 fd70 	bl	80010b0 <SSD1306_GotoXY>
					SSD1306_Puts(game1[children.game_questions].no, &Font_7x10,
 80005d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80005d4:	4a21      	ldr	r2, [pc, #132]	; (800065c <main+0x3ac>)
 80005d6:	011b      	lsls	r3, r3, #4
 80005d8:	4413      	add	r3, r2
 80005da:	3308      	adds	r3, #8
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2201      	movs	r2, #1
 80005e0:	4916      	ldr	r1, [pc, #88]	; (800063c <main+0x38c>)
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fdfa 	bl	80011dc <SSD1306_Puts>
							1);
					SSD1306_GotoXY(20, 50);
 80005e8:	2132      	movs	r1, #50	; 0x32
 80005ea:	2014      	movs	r0, #20
 80005ec:	f000 fd60 	bl	80010b0 <SSD1306_GotoXY>
					SSD1306_Puts("<=>", &Font_7x10, 1);
 80005f0:	2201      	movs	r2, #1
 80005f2:	4912      	ldr	r1, [pc, #72]	; (800063c <main+0x38c>)
 80005f4:	481a      	ldr	r0, [pc, #104]	; (8000660 <main+0x3b0>)
 80005f6:	f000 fdf1 	bl	80011dc <SSD1306_Puts>
 80005fa:	e084      	b.n	8000706 <main+0x456>
					//SSD1306_GotoXY(100, 50);
					//SSD1306_Puts("<=>", &Font_7x10, 1);

				} else if (children.scrol_position == 38) {
 80005fc:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000600:	2b26      	cmp	r3, #38	; 0x26
 8000602:	d131      	bne.n	8000668 <main+0x3b8>
					SSD1306_Puts("GAME 2", &Font_11x18, 1);
 8000604:	2201      	movs	r2, #1
 8000606:	4905      	ldr	r1, [pc, #20]	; (800061c <main+0x36c>)
 8000608:	4816      	ldr	r0, [pc, #88]	; (8000664 <main+0x3b4>)
 800060a:	f000 fde7 	bl	80011dc <SSD1306_Puts>
					children.state_machine = GAME_2;
 800060e:	2303      	movs	r3, #3
 8000610:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8000614:	e077      	b.n	8000706 <main+0x456>
 8000616:	bf00      	nop
 8000618:	20000504 	.word	0x20000504
 800061c:	20000008 	.word	0x20000008
 8000620:	080044ac 	.word	0x080044ac
 8000624:	080044b4 	.word	0x080044b4
 8000628:	40010c00 	.word	0x40010c00
 800062c:	08005f8c 	.word	0x08005f8c
 8000630:	08005e60 	.word	0x08005e60
 8000634:	08005f28 	.word	0x08005f28
 8000638:	08005ec4 	.word	0x08005ec4
 800063c:	20000000 	.word	0x20000000
 8000640:	080044b8 	.word	0x080044b8
 8000644:	080044c4 	.word	0x080044c4
 8000648:	080044d0 	.word	0x080044d0
 800064c:	080044d8 	.word	0x080044d8
 8000650:	080044e8 	.word	0x080044e8
 8000654:	080044f4 	.word	0x080044f4
 8000658:	080044f8 	.word	0x080044f8
 800065c:	0800638c 	.word	0x0800638c
 8000660:	080044fc 	.word	0x080044fc
 8000664:	08004500 	.word	0x08004500

				} else if (children.scrol_position == 48) {
 8000668:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800066c:	2b30      	cmp	r3, #48	; 0x30
 800066e:	d108      	bne.n	8000682 <main+0x3d2>
					SSD1306_Puts("GAME 3", &Font_11x18, 1);
 8000670:	2201      	movs	r2, #1
 8000672:	49af      	ldr	r1, [pc, #700]	; (8000930 <main+0x680>)
 8000674:	48af      	ldr	r0, [pc, #700]	; (8000934 <main+0x684>)
 8000676:	f000 fdb1 	bl	80011dc <SSD1306_Puts>
					children.state_machine = GAME_3;
 800067a:	2304      	movs	r3, #4
 800067c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8000680:	e041      	b.n	8000706 <main+0x456>
				} else if (children.scrol_position == 18) {
 8000682:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000686:	2b12      	cmp	r3, #18
 8000688:	d13d      	bne.n	8000706 <main+0x456>

					children.game_questions = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
					children.state_machine = GAME_4;
 8000690:	2305      	movs	r3, #5
 8000692:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
					SSD1306_GotoXY(40, 0);
 8000696:	2100      	movs	r1, #0
 8000698:	2028      	movs	r0, #40	; 0x28
 800069a:	f000 fd09 	bl	80010b0 <SSD1306_GotoXY>
					SSD1306_Puts(game4[children.game_questions].question,
 800069e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80006a2:	4aa5      	ldr	r2, [pc, #660]	; (8000938 <main+0x688>)
 80006a4:	011b      	lsls	r3, r3, #4
 80006a6:	4413      	add	r3, r2
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2201      	movs	r2, #1
 80006ac:	49a0      	ldr	r1, [pc, #640]	; (8000930 <main+0x680>)
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 fd94 	bl	80011dc <SSD1306_Puts>
							&Font_11x18, 1);
					SSD1306_GotoXY(20, 30);
 80006b4:	211e      	movs	r1, #30
 80006b6:	2014      	movs	r0, #20
 80006b8:	f000 fcfa 	bl	80010b0 <SSD1306_GotoXY>
					SSD1306_Puts(game4[children.game_questions].yes,
 80006bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80006c0:	4a9d      	ldr	r2, [pc, #628]	; (8000938 <main+0x688>)
 80006c2:	011b      	lsls	r3, r3, #4
 80006c4:	4413      	add	r3, r2
 80006c6:	3304      	adds	r3, #4
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2201      	movs	r2, #1
 80006cc:	4998      	ldr	r1, [pc, #608]	; (8000930 <main+0x680>)
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 fd84 	bl	80011dc <SSD1306_Puts>
							&Font_11x18, 1);
					SSD1306_GotoXY(100, 30);
 80006d4:	211e      	movs	r1, #30
 80006d6:	2064      	movs	r0, #100	; 0x64
 80006d8:	f000 fcea 	bl	80010b0 <SSD1306_GotoXY>
					SSD1306_Puts(game4[children.game_questions].no, &Font_11x18,
 80006dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80006e0:	4a95      	ldr	r2, [pc, #596]	; (8000938 <main+0x688>)
 80006e2:	011b      	lsls	r3, r3, #4
 80006e4:	4413      	add	r3, r2
 80006e6:	3308      	adds	r3, #8
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2201      	movs	r2, #1
 80006ec:	4990      	ldr	r1, [pc, #576]	; (8000930 <main+0x680>)
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 fd74 	bl	80011dc <SSD1306_Puts>
							1);
					SSD1306_GotoXY(20, 52);
 80006f4:	2134      	movs	r1, #52	; 0x34
 80006f6:	2014      	movs	r0, #20
 80006f8:	f000 fcda 	bl	80010b0 <SSD1306_GotoXY>
					SSD1306_Puts("<=>", &Font_7x10, 1);
 80006fc:	2201      	movs	r2, #1
 80006fe:	498f      	ldr	r1, [pc, #572]	; (800093c <main+0x68c>)
 8000700:	488f      	ldr	r0, [pc, #572]	; (8000940 <main+0x690>)
 8000702:	f000 fd6b 	bl	80011dc <SSD1306_Puts>
				}
				SSD1306_UpdateScreen();
 8000706:	f000 fc2f 	bl	8000f68 <SSD1306_UpdateScreen>
				HAL_Delay(60);
 800070a:	203c      	movs	r0, #60	; 0x3c
 800070c:	f001 f936 	bl	800197c <HAL_Delay>
			}
			break;
 8000710:	e191      	b.n	8000a36 <main+0x786>
		case (GAME_1):
			//If I confirm the answer:
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin)
 8000712:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000716:	488b      	ldr	r0, [pc, #556]	; (8000944 <main+0x694>)
 8000718:	f001 fbba 	bl	8001e90 <HAL_GPIO_ReadPin>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d104      	bne.n	800072c <main+0x47c>
					== 0) {
				gameplay_1_confirm(&children);
 8000722:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff fd10 	bl	800014c <gameplay_1_confirm>
			}
			//If I change the response:
			if (HAL_GPIO_ReadPin(BUTTON_LEFT_GPIO_Port, BUTTON_LEFT_Pin) == 0) {
 800072c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000730:	4884      	ldr	r0, [pc, #528]	; (8000944 <main+0x694>)
 8000732:	f001 fbad 	bl	8001e90 <HAL_GPIO_ReadPin>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	f040 817e 	bne.w	8000a3a <main+0x78a>
				if (children.selected_game_item == 0) {
 800073e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000742:	2b00      	cmp	r3, #0
 8000744:	d118      	bne.n	8000778 <main+0x4c8>
					SSD1306_GotoXY(20, 50);
 8000746:	2132      	movs	r1, #50	; 0x32
 8000748:	2014      	movs	r0, #20
 800074a:	f000 fcb1 	bl	80010b0 <SSD1306_GotoXY>
					SSD1306_Puts("   ", &Font_7x10, 1);
 800074e:	2201      	movs	r2, #1
 8000750:	497a      	ldr	r1, [pc, #488]	; (800093c <main+0x68c>)
 8000752:	487d      	ldr	r0, [pc, #500]	; (8000948 <main+0x698>)
 8000754:	f000 fd42 	bl	80011dc <SSD1306_Puts>

					SSD1306_GotoXY(100, 50);
 8000758:	2132      	movs	r1, #50	; 0x32
 800075a:	2064      	movs	r0, #100	; 0x64
 800075c:	f000 fca8 	bl	80010b0 <SSD1306_GotoXY>
					SSD1306_Puts("<=>", &Font_7x10, 1);
 8000760:	2201      	movs	r2, #1
 8000762:	4976      	ldr	r1, [pc, #472]	; (800093c <main+0x68c>)
 8000764:	4876      	ldr	r0, [pc, #472]	; (8000940 <main+0x690>)
 8000766:	f000 fd39 	bl	80011dc <SSD1306_Puts>
					children.selected_game_item++;
 800076a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800076e:	3301      	adds	r3, #1
 8000770:	b2db      	uxtb	r3, r3
 8000772:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8000776:	e014      	b.n	80007a2 <main+0x4f2>
				} else {
					SSD1306_GotoXY(20, 50);
 8000778:	2132      	movs	r1, #50	; 0x32
 800077a:	2014      	movs	r0, #20
 800077c:	f000 fc98 	bl	80010b0 <SSD1306_GotoXY>
					SSD1306_Puts("<=>", &Font_7x10, 1);
 8000780:	2201      	movs	r2, #1
 8000782:	496e      	ldr	r1, [pc, #440]	; (800093c <main+0x68c>)
 8000784:	486e      	ldr	r0, [pc, #440]	; (8000940 <main+0x690>)
 8000786:	f000 fd29 	bl	80011dc <SSD1306_Puts>

					SSD1306_GotoXY(100, 50);
 800078a:	2132      	movs	r1, #50	; 0x32
 800078c:	2064      	movs	r0, #100	; 0x64
 800078e:	f000 fc8f 	bl	80010b0 <SSD1306_GotoXY>
					SSD1306_Puts("   ", &Font_7x10, 1);
 8000792:	2201      	movs	r2, #1
 8000794:	4969      	ldr	r1, [pc, #420]	; (800093c <main+0x68c>)
 8000796:	486c      	ldr	r0, [pc, #432]	; (8000948 <main+0x698>)
 8000798:	f000 fd20 	bl	80011dc <SSD1306_Puts>
					children.selected_game_item = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
				}
				SSD1306_UpdateScreen();
 80007a2:	f000 fbe1 	bl	8000f68 <SSD1306_UpdateScreen>
				HAL_Delay(80);
 80007a6:	2050      	movs	r0, #80	; 0x50
 80007a8:	f001 f8e8 	bl	800197c <HAL_Delay>
			}

			break;
 80007ac:	e145      	b.n	8000a3a <main+0x78a>
		case (GAME_2):
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin)
 80007ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b2:	4864      	ldr	r0, [pc, #400]	; (8000944 <main+0x694>)
 80007b4:	f001 fb6c 	bl	8001e90 <HAL_GPIO_ReadPin>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	f040 813f 	bne.w	8000a3e <main+0x78e>
					== 0) {
				children.state_machine = INIT;
 80007c0:	2300      	movs	r3, #0
 80007c2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
				character_draw(1);
 80007c6:	2001      	movs	r0, #1
 80007c8:	f001 f824 	bl	8001814 <character_draw>
				SSD1306_GotoXY(0, 0);
 80007cc:	2100      	movs	r1, #0
 80007ce:	2000      	movs	r0, #0
 80007d0:	f000 fc6e 	bl	80010b0 <SSD1306_GotoXY>
				SSD1306_Puts("PTS:", &Font_11x18, 1);
 80007d4:	2201      	movs	r2, #1
 80007d6:	4956      	ldr	r1, [pc, #344]	; (8000930 <main+0x680>)
 80007d8:	485c      	ldr	r0, [pc, #368]	; (800094c <main+0x69c>)
 80007da:	f000 fcff 	bl	80011dc <SSD1306_Puts>
				SSD1306_GotoXY(42, 0);
 80007de:	2100      	movs	r1, #0
 80007e0:	202a      	movs	r0, #42	; 0x2a
 80007e2:	f000 fc65 	bl	80010b0 <SSD1306_GotoXY>
				char *numberstring[(((sizeof children.points)) + 2) / 3 + 2];
				sprintf(numberstring, "%d", children.points);
 80007e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80007e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ec:	4958      	ldr	r1, [pc, #352]	; (8000950 <main+0x6a0>)
 80007ee:	4618      	mov	r0, r3
 80007f0:	f003 f92a 	bl	8003a48 <siprintf>
				SSD1306_Puts(numberstring, &Font_11x18, 1);
 80007f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f8:	2201      	movs	r2, #1
 80007fa:	494d      	ldr	r1, [pc, #308]	; (8000930 <main+0x680>)
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 fced 	bl	80011dc <SSD1306_Puts>
				SSD1306_UpdateScreen(); //display
 8000802:	f000 fbb1 	bl	8000f68 <SSD1306_UpdateScreen>
				HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800080c:	484d      	ldr	r0, [pc, #308]	; (8000944 <main+0x694>)
 800080e:	f001 fb56 	bl	8001ebe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 1);
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000818:	484a      	ldr	r0, [pc, #296]	; (8000944 <main+0x694>)
 800081a:	f001 fb50 	bl	8001ebe <HAL_GPIO_WritePin>
			}
			break;
 800081e:	e10e      	b.n	8000a3e <main+0x78e>
		case (GAME_3):
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin)
 8000820:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000824:	4847      	ldr	r0, [pc, #284]	; (8000944 <main+0x694>)
 8000826:	f001 fb33 	bl	8001e90 <HAL_GPIO_ReadPin>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	f040 8108 	bne.w	8000a42 <main+0x792>
					== 0) {
				children.state_machine = INIT;
 8000832:	2300      	movs	r3, #0
 8000834:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
				character_draw(1);
 8000838:	2001      	movs	r0, #1
 800083a:	f000 ffeb 	bl	8001814 <character_draw>
				SSD1306_GotoXY(0, 0);
 800083e:	2100      	movs	r1, #0
 8000840:	2000      	movs	r0, #0
 8000842:	f000 fc35 	bl	80010b0 <SSD1306_GotoXY>
				SSD1306_Puts("PTS:", &Font_11x18, 1);
 8000846:	2201      	movs	r2, #1
 8000848:	4939      	ldr	r1, [pc, #228]	; (8000930 <main+0x680>)
 800084a:	4840      	ldr	r0, [pc, #256]	; (800094c <main+0x69c>)
 800084c:	f000 fcc6 	bl	80011dc <SSD1306_Puts>
				SSD1306_GotoXY(42, 0);
 8000850:	2100      	movs	r1, #0
 8000852:	202a      	movs	r0, #42	; 0x2a
 8000854:	f000 fc2c 	bl	80010b0 <SSD1306_GotoXY>
				char *numberstring[(((sizeof children.points)) + 2) / 3 + 2];
				sprintf(numberstring, "%d", children.points);
 8000858:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	493c      	ldr	r1, [pc, #240]	; (8000950 <main+0x6a0>)
 8000860:	4618      	mov	r0, r3
 8000862:	f003 f8f1 	bl	8003a48 <siprintf>
				SSD1306_Puts(numberstring, &Font_11x18, 1);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	2201      	movs	r2, #1
 800086c:	4930      	ldr	r1, [pc, #192]	; (8000930 <main+0x680>)
 800086e:	4618      	mov	r0, r3
 8000870:	f000 fcb4 	bl	80011dc <SSD1306_Puts>
				SSD1306_UpdateScreen(); //display
 8000874:	f000 fb78 	bl	8000f68 <SSD1306_UpdateScreen>
				HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800087e:	4831      	ldr	r0, [pc, #196]	; (8000944 <main+0x694>)
 8000880:	f001 fb1d 	bl	8001ebe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 1);
 8000884:	2201      	movs	r2, #1
 8000886:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800088a:	482e      	ldr	r0, [pc, #184]	; (8000944 <main+0x694>)
 800088c:	f001 fb17 	bl	8001ebe <HAL_GPIO_WritePin>
			}
			break;
 8000890:	e0d7      	b.n	8000a42 <main+0x792>
		case (GAME_4):
			//Confirm button
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin)
 8000892:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000896:	482b      	ldr	r0, [pc, #172]	; (8000944 <main+0x694>)
 8000898:	f001 fafa 	bl	8001e90 <HAL_GPIO_ReadPin>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	f040 8087 	bne.w	80009b2 <main+0x702>
					== 0) {
				if (children.game_questions < 5) {
 80008a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80008a8:	2b04      	cmp	r3, #4
 80008aa:	d853      	bhi.n	8000954 <main+0x6a4>
					children.game_questions++;
 80008ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80008b0:	3301      	adds	r3, #1
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
					SSD1306_Clear();
 80008b8:	f000 fe1a 	bl	80014f0 <SSD1306_Clear>
					SSD1306_GotoXY(40, 0);
 80008bc:	2100      	movs	r1, #0
 80008be:	2028      	movs	r0, #40	; 0x28
 80008c0:	f000 fbf6 	bl	80010b0 <SSD1306_GotoXY>
					SSD1306_Puts(game4[children.game_questions].question,
 80008c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80008c8:	4a1b      	ldr	r2, [pc, #108]	; (8000938 <main+0x688>)
 80008ca:	011b      	lsls	r3, r3, #4
 80008cc:	4413      	add	r3, r2
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2201      	movs	r2, #1
 80008d2:	4917      	ldr	r1, [pc, #92]	; (8000930 <main+0x680>)
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 fc81 	bl	80011dc <SSD1306_Puts>
							&Font_11x18, 1);
					SSD1306_GotoXY(20, 30);
 80008da:	211e      	movs	r1, #30
 80008dc:	2014      	movs	r0, #20
 80008de:	f000 fbe7 	bl	80010b0 <SSD1306_GotoXY>
					SSD1306_Puts(game4[children.game_questions].yes,
 80008e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80008e6:	4a14      	ldr	r2, [pc, #80]	; (8000938 <main+0x688>)
 80008e8:	011b      	lsls	r3, r3, #4
 80008ea:	4413      	add	r3, r2
 80008ec:	3304      	adds	r3, #4
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2201      	movs	r2, #1
 80008f2:	490f      	ldr	r1, [pc, #60]	; (8000930 <main+0x680>)
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 fc71 	bl	80011dc <SSD1306_Puts>
							&Font_11x18, 1);
					SSD1306_GotoXY(100, 30);
 80008fa:	211e      	movs	r1, #30
 80008fc:	2064      	movs	r0, #100	; 0x64
 80008fe:	f000 fbd7 	bl	80010b0 <SSD1306_GotoXY>
					SSD1306_Puts(game4[children.game_questions].no, &Font_11x18,
 8000902:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000906:	4a0c      	ldr	r2, [pc, #48]	; (8000938 <main+0x688>)
 8000908:	011b      	lsls	r3, r3, #4
 800090a:	4413      	add	r3, r2
 800090c:	3308      	adds	r3, #8
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2201      	movs	r2, #1
 8000912:	4907      	ldr	r1, [pc, #28]	; (8000930 <main+0x680>)
 8000914:	4618      	mov	r0, r3
 8000916:	f000 fc61 	bl	80011dc <SSD1306_Puts>
							1);
					SSD1306_GotoXY(20, 52);
 800091a:	2134      	movs	r1, #52	; 0x34
 800091c:	2014      	movs	r0, #20
 800091e:	f000 fbc7 	bl	80010b0 <SSD1306_GotoXY>
					SSD1306_Puts("<=>", &Font_7x10, 1);
 8000922:	2201      	movs	r2, #1
 8000924:	4905      	ldr	r1, [pc, #20]	; (800093c <main+0x68c>)
 8000926:	4806      	ldr	r0, [pc, #24]	; (8000940 <main+0x690>)
 8000928:	f000 fc58 	bl	80011dc <SSD1306_Puts>
 800092c:	e03f      	b.n	80009ae <main+0x6fe>
 800092e:	bf00      	nop
 8000930:	20000008 	.word	0x20000008
 8000934:	08004508 	.word	0x08004508
 8000938:	080063fc 	.word	0x080063fc
 800093c:	20000000 	.word	0x20000000
 8000940:	080044fc 	.word	0x080044fc
 8000944:	40010c00 	.word	0x40010c00
 8000948:	08004510 	.word	0x08004510
 800094c:	080044ac 	.word	0x080044ac
 8000950:	080044b4 	.word	0x080044b4

				} else {

					children.state_machine = INIT;
 8000954:	2300      	movs	r3, #0
 8000956:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
					children.game_questions = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
					//character_draw(1);
					SSD1306_Clear();
 8000960:	f000 fdc6 	bl	80014f0 <SSD1306_Clear>
					SSD1306_GotoXY(0, 0);
 8000964:	2100      	movs	r1, #0
 8000966:	2000      	movs	r0, #0
 8000968:	f000 fba2 	bl	80010b0 <SSD1306_GotoXY>
					SSD1306_Puts("PTS:", &Font_11x18, 1);
 800096c:	2201      	movs	r2, #1
 800096e:	4937      	ldr	r1, [pc, #220]	; (8000a4c <main+0x79c>)
 8000970:	4837      	ldr	r0, [pc, #220]	; (8000a50 <main+0x7a0>)
 8000972:	f000 fc33 	bl	80011dc <SSD1306_Puts>
					SSD1306_GotoXY(42, 0);
 8000976:	2100      	movs	r1, #0
 8000978:	202a      	movs	r0, #42	; 0x2a
 800097a:	f000 fb99 	bl	80010b0 <SSD1306_GotoXY>
					char *numberstring[(((sizeof children.points)) + 2) / 3 + 2];
					sprintf(numberstring, "%d", children.points);
 800097e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	4934      	ldr	r1, [pc, #208]	; (8000a54 <main+0x7a4>)
 8000984:	4618      	mov	r0, r3
 8000986:	f003 f85f 	bl	8003a48 <siprintf>
					SSD1306_Puts(numberstring, &Font_11x18, 1);
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2201      	movs	r2, #1
 800098e:	492f      	ldr	r1, [pc, #188]	; (8000a4c <main+0x79c>)
 8000990:	4618      	mov	r0, r3
 8000992:	f000 fc23 	bl	80011dc <SSD1306_Puts>
					HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800099c:	482e      	ldr	r0, [pc, #184]	; (8000a58 <main+0x7a8>)
 800099e:	f001 fa8e 	bl	8001ebe <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 1);
 80009a2:	2201      	movs	r2, #1
 80009a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009a8:	482b      	ldr	r0, [pc, #172]	; (8000a58 <main+0x7a8>)
 80009aa:	f001 fa88 	bl	8001ebe <HAL_GPIO_WritePin>
				}
				SSD1306_UpdateScreen(); //display
 80009ae:	f000 fadb 	bl	8000f68 <SSD1306_UpdateScreen>
			}
			//If I change the response:
			if (HAL_GPIO_ReadPin(BUTTON_LEFT_GPIO_Port, BUTTON_LEFT_Pin) == 0) {
 80009b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b6:	4828      	ldr	r0, [pc, #160]	; (8000a58 <main+0x7a8>)
 80009b8:	f001 fa6a 	bl	8001e90 <HAL_GPIO_ReadPin>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d141      	bne.n	8000a46 <main+0x796>
				if (children.selected_game_item == 0) {
 80009c2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d118      	bne.n	80009fc <main+0x74c>
					SSD1306_GotoXY(20, 50);
 80009ca:	2132      	movs	r1, #50	; 0x32
 80009cc:	2014      	movs	r0, #20
 80009ce:	f000 fb6f 	bl	80010b0 <SSD1306_GotoXY>
					SSD1306_Puts("   ", &Font_7x10, 1);
 80009d2:	2201      	movs	r2, #1
 80009d4:	4921      	ldr	r1, [pc, #132]	; (8000a5c <main+0x7ac>)
 80009d6:	4822      	ldr	r0, [pc, #136]	; (8000a60 <main+0x7b0>)
 80009d8:	f000 fc00 	bl	80011dc <SSD1306_Puts>

					SSD1306_GotoXY(100, 50);
 80009dc:	2132      	movs	r1, #50	; 0x32
 80009de:	2064      	movs	r0, #100	; 0x64
 80009e0:	f000 fb66 	bl	80010b0 <SSD1306_GotoXY>
					SSD1306_Puts("<=>", &Font_7x10, 1);
 80009e4:	2201      	movs	r2, #1
 80009e6:	491d      	ldr	r1, [pc, #116]	; (8000a5c <main+0x7ac>)
 80009e8:	481e      	ldr	r0, [pc, #120]	; (8000a64 <main+0x7b4>)
 80009ea:	f000 fbf7 	bl	80011dc <SSD1306_Puts>
					children.selected_game_item++;
 80009ee:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80009f2:	3301      	adds	r3, #1
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 80009fa:	e014      	b.n	8000a26 <main+0x776>
				} else {
					SSD1306_GotoXY(20, 50);
 80009fc:	2132      	movs	r1, #50	; 0x32
 80009fe:	2014      	movs	r0, #20
 8000a00:	f000 fb56 	bl	80010b0 <SSD1306_GotoXY>
					SSD1306_Puts("<=>", &Font_7x10, 1);
 8000a04:	2201      	movs	r2, #1
 8000a06:	4915      	ldr	r1, [pc, #84]	; (8000a5c <main+0x7ac>)
 8000a08:	4816      	ldr	r0, [pc, #88]	; (8000a64 <main+0x7b4>)
 8000a0a:	f000 fbe7 	bl	80011dc <SSD1306_Puts>

					SSD1306_GotoXY(100, 50);
 8000a0e:	2132      	movs	r1, #50	; 0x32
 8000a10:	2064      	movs	r0, #100	; 0x64
 8000a12:	f000 fb4d 	bl	80010b0 <SSD1306_GotoXY>
					SSD1306_Puts("   ", &Font_7x10, 1);
 8000a16:	2201      	movs	r2, #1
 8000a18:	4910      	ldr	r1, [pc, #64]	; (8000a5c <main+0x7ac>)
 8000a1a:	4811      	ldr	r0, [pc, #68]	; (8000a60 <main+0x7b0>)
 8000a1c:	f000 fbde 	bl	80011dc <SSD1306_Puts>
					children.selected_game_item = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
				}
				SSD1306_UpdateScreen();
 8000a26:	f000 fa9f 	bl	8000f68 <SSD1306_UpdateScreen>
				HAL_Delay(80);
 8000a2a:	2050      	movs	r0, #80	; 0x50
 8000a2c:	f000 ffa6 	bl	800197c <HAL_Delay>
			}
			break;
 8000a30:	e009      	b.n	8000a46 <main+0x796>
			break;
 8000a32:	bf00      	nop
 8000a34:	e4ba      	b.n	80003ac <main+0xfc>
			break;
 8000a36:	bf00      	nop
 8000a38:	e4b8      	b.n	80003ac <main+0xfc>
			break;
 8000a3a:	bf00      	nop
 8000a3c:	e4b6      	b.n	80003ac <main+0xfc>
			break;
 8000a3e:	bf00      	nop
 8000a40:	e4b4      	b.n	80003ac <main+0xfc>
			break;
 8000a42:	bf00      	nop
 8000a44:	e4b2      	b.n	80003ac <main+0xfc>
			break;
 8000a46:	bf00      	nop
		switch (children.state_machine) {
 8000a48:	e4b0      	b.n	80003ac <main+0xfc>
 8000a4a:	bf00      	nop
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	080044ac 	.word	0x080044ac
 8000a54:	080044b4 	.word	0x080044b4
 8000a58:	40010c00 	.word	0x40010c00
 8000a5c:	20000000 	.word	0x20000000
 8000a60:	08004510 	.word	0x08004510
 8000a64:	080044fc 	.word	0x080044fc

08000a68 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b090      	sub	sp, #64	; 0x40
 8000a6c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a6e:	f107 0318 	add.w	r3, r7, #24
 8000a72:	2228      	movs	r2, #40	; 0x28
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 ffde 	bl	8003a38 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a92:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000a94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a98:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aa6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 8000aa8:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 8000aac:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000aae:	f107 0318 	add.w	r3, r7, #24
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 ffa0 	bl	80029f8 <HAL_RCC_OscConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0x5a>
		Error_Handler();
 8000abe:	f000 f921 	bl	8000d04 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ac2:	230f      	movs	r3, #15
 8000ac4:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2102      	movs	r1, #2
 8000adc:	4618      	mov	r0, r3
 8000ade:	f002 fa0b 	bl	8002ef8 <HAL_RCC_ClockConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0x84>
		Error_Handler();
 8000ae8:	f000 f90c 	bl	8000d04 <Error_Handler>
	}
}
 8000aec:	bf00      	nop
 8000aee:	3740      	adds	r7, #64	; 0x40
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000afa:	4a13      	ldr	r2, [pc, #76]	; (8000b48 <MX_I2C1_Init+0x54>)
 8000afc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b00:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <MX_I2C1_Init+0x58>)
 8000b02:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b16:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b24:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000b30:	4804      	ldr	r0, [pc, #16]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b32:	f001 f9f5 	bl	8001f20 <HAL_I2C_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000b3c:	f000 f8e2 	bl	8000d04 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200004b0 	.word	0x200004b0
 8000b48:	40005400 	.word	0x40005400
 8000b4c:	00061a80 	.word	0x00061a80

08000b50 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000b56:	f107 0308 	add.w	r3, r7, #8
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000b64:	463b      	mov	r3, r7
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000b6c:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <MX_TIM2_Init+0x98>)
 8000b6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b72:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 6000 - 1;
 8000b74:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <MX_TIM2_Init+0x98>)
 8000b76:	f241 726f 	movw	r2, #5999	; 0x176f
 8000b7a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <MX_TIM2_Init+0x98>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10000 - 1;
 8000b82:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <MX_TIM2_Init+0x98>)
 8000b84:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b88:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_TIM2_Init+0x98>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_TIM2_Init+0x98>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000b96:	4814      	ldr	r0, [pc, #80]	; (8000be8 <MX_TIM2_Init+0x98>)
 8000b98:	f002 fb36 	bl	8003208 <HAL_TIM_Base_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM2_Init+0x56>
		Error_Handler();
 8000ba2:	f000 f8af 	bl	8000d04 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000baa:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000bac:	f107 0308 	add.w	r3, r7, #8
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480d      	ldr	r0, [pc, #52]	; (8000be8 <MX_TIM2_Init+0x98>)
 8000bb4:	f002 fcd2 	bl	800355c <HAL_TIM_ConfigClockSource>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM2_Init+0x72>
		Error_Handler();
 8000bbe:	f000 f8a1 	bl	8000d04 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000bca:	463b      	mov	r3, r7
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4806      	ldr	r0, [pc, #24]	; (8000be8 <MX_TIM2_Init+0x98>)
 8000bd0:	f002 fe98 	bl	8003904 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8000bda:	f000 f893 	bl	8000d04 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000504 	.word	0x20000504

08000bec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000bf2:	f107 0310 	add.w	r3, r7, #16
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c00:	4b35      	ldr	r3, [pc, #212]	; (8000cd8 <MX_GPIO_Init+0xec>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4a34      	ldr	r2, [pc, #208]	; (8000cd8 <MX_GPIO_Init+0xec>)
 8000c06:	f043 0310 	orr.w	r3, r3, #16
 8000c0a:	6193      	str	r3, [r2, #24]
 8000c0c:	4b32      	ldr	r3, [pc, #200]	; (8000cd8 <MX_GPIO_Init+0xec>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	f003 0310 	and.w	r3, r3, #16
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000c18:	4b2f      	ldr	r3, [pc, #188]	; (8000cd8 <MX_GPIO_Init+0xec>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	4a2e      	ldr	r2, [pc, #184]	; (8000cd8 <MX_GPIO_Init+0xec>)
 8000c1e:	f043 0320 	orr.w	r3, r3, #32
 8000c22:	6193      	str	r3, [r2, #24]
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <MX_GPIO_Init+0xec>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	f003 0320 	and.w	r3, r3, #32
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c30:	4b29      	ldr	r3, [pc, #164]	; (8000cd8 <MX_GPIO_Init+0xec>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	4a28      	ldr	r2, [pc, #160]	; (8000cd8 <MX_GPIO_Init+0xec>)
 8000c36:	f043 0308 	orr.w	r3, r3, #8
 8000c3a:	6193      	str	r3, [r2, #24]
 8000c3c:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <MX_GPIO_Init+0xec>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	f003 0308 	and.w	r3, r3, #8
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c48:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <MX_GPIO_Init+0xec>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	4a22      	ldr	r2, [pc, #136]	; (8000cd8 <MX_GPIO_Init+0xec>)
 8000c4e:	f043 0304 	orr.w	r3, r3, #4
 8000c52:	6193      	str	r3, [r2, #24]
 8000c54:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <MX_GPIO_Init+0xec>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f003 0304 	and.w	r3, r3, #4
 8000c5c:	603b      	str	r3, [r7, #0]
 8000c5e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_BUILD_GPIO_Port, LED_BUILD_Pin, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c66:	481d      	ldr	r0, [pc, #116]	; (8000cdc <MX_GPIO_Init+0xf0>)
 8000c68:	f001 f929 	bl	8001ebe <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin | RGB_BLUE_Pin | RGB_GREEN_Pin,
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000c72:	481b      	ldr	r0, [pc, #108]	; (8000ce0 <MX_GPIO_Init+0xf4>)
 8000c74:	f001 f923 	bl	8001ebe <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : LED_BUILD_Pin */
	GPIO_InitStruct.Pin = LED_BUILD_Pin;
 8000c78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c7c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2302      	movs	r3, #2
 8000c88:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_BUILD_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4812      	ldr	r0, [pc, #72]	; (8000cdc <MX_GPIO_Init+0xf0>)
 8000c92:	f000 ffa3 	bl	8001bdc <HAL_GPIO_Init>

	/*Configure GPIO pins : BUTTON_LEFT_Pin BUTTON_RIGHT_Pin */
	GPIO_InitStruct.Pin = BUTTON_LEFT_Pin | BUTTON_RIGHT_Pin;
 8000c96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c9a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <MX_GPIO_Init+0xf4>)
 8000cac:	f000 ff96 	bl	8001bdc <HAL_GPIO_Init>

	/*Configure GPIO pins : RGB_RED_Pin RGB_BLUE_Pin RGB_GREEN_Pin */
	GPIO_InitStruct.Pin = RGB_RED_Pin | RGB_BLUE_Pin | RGB_GREEN_Pin;
 8000cb0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000cb4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MX_GPIO_Init+0xf4>)
 8000cca:	f000 ff87 	bl	8001bdc <HAL_GPIO_Init>

}
 8000cce:	bf00      	nop
 8000cd0:	3720      	adds	r7, #32
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40011000 	.word	0x40011000
 8000ce0:	40010c00 	.word	0x40010c00

08000ce4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]

	HAL_GPIO_TogglePin(RGB_RED_GPIO_Port, RGB_RED_Pin);
 8000cec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cf0:	4803      	ldr	r0, [pc, #12]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000cf2:	f001 f8fc 	bl	8001eee <HAL_GPIO_TogglePin>

}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40010c00 	.word	0x40010c00

08000d04 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60ba      	str	r2, [r7, #8]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	81fb      	strh	r3, [r7, #14]
 8000d1e:	460b      	mov	r3, r1
 8000d20:	81bb      	strh	r3, [r7, #12]
 8000d22:	4613      	mov	r3, r2
 8000d24:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d2a:	3307      	adds	r3, #7
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	da00      	bge.n	8000d32 <SSD1306_DrawBitmap+0x22>
 8000d30:	3307      	adds	r3, #7
 8000d32:	10db      	asrs	r3, r3, #3
 8000d34:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	82bb      	strh	r3, [r7, #20]
 8000d3e:	e044      	b.n	8000dca <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8000d40:	2300      	movs	r3, #0
 8000d42:	827b      	strh	r3, [r7, #18]
 8000d44:	e02f      	b.n	8000da6 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000d46:	8a7b      	ldrh	r3, [r7, #18]
 8000d48:	f003 0307 	and.w	r3, r3, #7
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d003      	beq.n	8000d58 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8000d50:	7dfb      	ldrb	r3, [r7, #23]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	75fb      	strb	r3, [r7, #23]
 8000d56:	e012      	b.n	8000d7e <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000d58:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000d5c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000d60:	fb02 f203 	mul.w	r2, r2, r3
 8000d64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	da00      	bge.n	8000d6e <SSD1306_DrawBitmap+0x5e>
 8000d6c:	3307      	adds	r3, #7
 8000d6e:	10db      	asrs	r3, r3, #3
 8000d70:	b21b      	sxth	r3, r3
 8000d72:	4413      	add	r3, r2
 8000d74:	461a      	mov	r2, r3
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	4413      	add	r3, r2
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000d7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	da09      	bge.n	8000d9a <SSD1306_DrawBitmap+0x8a>
 8000d86:	89fa      	ldrh	r2, [r7, #14]
 8000d88:	8a7b      	ldrh	r3, [r7, #18]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	89b9      	ldrh	r1, [r7, #12]
 8000d90:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 f92d 	bl	8000ff4 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000d9a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	3301      	adds	r3, #1
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	827b      	strh	r3, [r7, #18]
 8000da6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000daa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	dbc9      	blt.n	8000d46 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8000db2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	3301      	adds	r3, #1
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	82bb      	strh	r3, [r7, #20]
 8000dbe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	81bb      	strh	r3, [r7, #12]
 8000dca:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000dce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	dbb4      	blt.n	8000d40 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8000dd6:	bf00      	nop
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000de6:	f000 fb8d 	bl	8001504 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000dea:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000dee:	2201      	movs	r2, #1
 8000df0:	2178      	movs	r1, #120	; 0x78
 8000df2:	485b      	ldr	r0, [pc, #364]	; (8000f60 <SSD1306_Init+0x180>)
 8000df4:	f001 faca 	bl	800238c <HAL_I2C_IsDeviceReady>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e0a9      	b.n	8000f56 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000e02:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000e06:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e08:	e002      	b.n	8000e10 <SSD1306_Init+0x30>
		p--;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1f9      	bne.n	8000e0a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000e16:	22ae      	movs	r2, #174	; 0xae
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2078      	movs	r0, #120	; 0x78
 8000e1c:	f000 fbce 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000e20:	2220      	movs	r2, #32
 8000e22:	2100      	movs	r1, #0
 8000e24:	2078      	movs	r0, #120	; 0x78
 8000e26:	f000 fbc9 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000e2a:	2210      	movs	r2, #16
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2078      	movs	r0, #120	; 0x78
 8000e30:	f000 fbc4 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000e34:	22b0      	movs	r2, #176	; 0xb0
 8000e36:	2100      	movs	r1, #0
 8000e38:	2078      	movs	r0, #120	; 0x78
 8000e3a:	f000 fbbf 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000e3e:	22c8      	movs	r2, #200	; 0xc8
 8000e40:	2100      	movs	r1, #0
 8000e42:	2078      	movs	r0, #120	; 0x78
 8000e44:	f000 fbba 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2078      	movs	r0, #120	; 0x78
 8000e4e:	f000 fbb5 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000e52:	2210      	movs	r2, #16
 8000e54:	2100      	movs	r1, #0
 8000e56:	2078      	movs	r0, #120	; 0x78
 8000e58:	f000 fbb0 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000e5c:	2240      	movs	r2, #64	; 0x40
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2078      	movs	r0, #120	; 0x78
 8000e62:	f000 fbab 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000e66:	2281      	movs	r2, #129	; 0x81
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2078      	movs	r0, #120	; 0x78
 8000e6c:	f000 fba6 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000e70:	22ff      	movs	r2, #255	; 0xff
 8000e72:	2100      	movs	r1, #0
 8000e74:	2078      	movs	r0, #120	; 0x78
 8000e76:	f000 fba1 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000e7a:	22a1      	movs	r2, #161	; 0xa1
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2078      	movs	r0, #120	; 0x78
 8000e80:	f000 fb9c 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000e84:	22a6      	movs	r2, #166	; 0xa6
 8000e86:	2100      	movs	r1, #0
 8000e88:	2078      	movs	r0, #120	; 0x78
 8000e8a:	f000 fb97 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000e8e:	22a8      	movs	r2, #168	; 0xa8
 8000e90:	2100      	movs	r1, #0
 8000e92:	2078      	movs	r0, #120	; 0x78
 8000e94:	f000 fb92 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000e98:	223f      	movs	r2, #63	; 0x3f
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2078      	movs	r0, #120	; 0x78
 8000e9e:	f000 fb8d 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000ea2:	22a4      	movs	r2, #164	; 0xa4
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2078      	movs	r0, #120	; 0x78
 8000ea8:	f000 fb88 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000eac:	22d3      	movs	r2, #211	; 0xd3
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2078      	movs	r0, #120	; 0x78
 8000eb2:	f000 fb83 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2078      	movs	r0, #120	; 0x78
 8000ebc:	f000 fb7e 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000ec0:	22d5      	movs	r2, #213	; 0xd5
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2078      	movs	r0, #120	; 0x78
 8000ec6:	f000 fb79 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000eca:	22f0      	movs	r2, #240	; 0xf0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2078      	movs	r0, #120	; 0x78
 8000ed0:	f000 fb74 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000ed4:	22d9      	movs	r2, #217	; 0xd9
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	2078      	movs	r0, #120	; 0x78
 8000eda:	f000 fb6f 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000ede:	2222      	movs	r2, #34	; 0x22
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2078      	movs	r0, #120	; 0x78
 8000ee4:	f000 fb6a 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000ee8:	22da      	movs	r2, #218	; 0xda
 8000eea:	2100      	movs	r1, #0
 8000eec:	2078      	movs	r0, #120	; 0x78
 8000eee:	f000 fb65 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000ef2:	2212      	movs	r2, #18
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2078      	movs	r0, #120	; 0x78
 8000ef8:	f000 fb60 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000efc:	22db      	movs	r2, #219	; 0xdb
 8000efe:	2100      	movs	r1, #0
 8000f00:	2078      	movs	r0, #120	; 0x78
 8000f02:	f000 fb5b 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000f06:	2220      	movs	r2, #32
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2078      	movs	r0, #120	; 0x78
 8000f0c:	f000 fb56 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000f10:	228d      	movs	r2, #141	; 0x8d
 8000f12:	2100      	movs	r1, #0
 8000f14:	2078      	movs	r0, #120	; 0x78
 8000f16:	f000 fb51 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000f1a:	2214      	movs	r2, #20
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	2078      	movs	r0, #120	; 0x78
 8000f20:	f000 fb4c 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000f24:	22af      	movs	r2, #175	; 0xaf
 8000f26:	2100      	movs	r1, #0
 8000f28:	2078      	movs	r0, #120	; 0x78
 8000f2a:	f000 fb47 	bl	80015bc <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000f2e:	222e      	movs	r2, #46	; 0x2e
 8000f30:	2100      	movs	r1, #0
 8000f32:	2078      	movs	r0, #120	; 0x78
 8000f34:	f000 fb42 	bl	80015bc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f000 f843 	bl	8000fc4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000f3e:	f000 f813 	bl	8000f68 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <SSD1306_Init+0x184>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <SSD1306_Init+0x184>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000f4e:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <SSD1306_Init+0x184>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000f54:	2301      	movs	r3, #1
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200004b0 	.word	0x200004b0
 8000f64:	2000049c 	.word	0x2000049c

08000f68 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000f6e:	2300      	movs	r3, #0
 8000f70:	71fb      	strb	r3, [r7, #7]
 8000f72:	e01d      	b.n	8000fb0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	3b50      	subs	r3, #80	; 0x50
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2078      	movs	r0, #120	; 0x78
 8000f80:	f000 fb1c 	bl	80015bc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2100      	movs	r1, #0
 8000f88:	2078      	movs	r0, #120	; 0x78
 8000f8a:	f000 fb17 	bl	80015bc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000f8e:	2210      	movs	r2, #16
 8000f90:	2100      	movs	r1, #0
 8000f92:	2078      	movs	r0, #120	; 0x78
 8000f94:	f000 fb12 	bl	80015bc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	01db      	lsls	r3, r3, #7
 8000f9c:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <SSD1306_UpdateScreen+0x58>)
 8000f9e:	441a      	add	r2, r3
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	2140      	movs	r1, #64	; 0x40
 8000fa4:	2078      	movs	r0, #120	; 0x78
 8000fa6:	f000 fac1 	bl	800152c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	3301      	adds	r3, #1
 8000fae:	71fb      	strb	r3, [r7, #7]
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	2b07      	cmp	r3, #7
 8000fb4:	d9de      	bls.n	8000f74 <SSD1306_UpdateScreen+0xc>
	}
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000009c 	.word	0x2000009c

08000fc4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <SSD1306_Fill+0x14>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	e000      	b.n	8000fda <SSD1306_Fill+0x16>
 8000fd8:	23ff      	movs	r3, #255	; 0xff
 8000fda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <SSD1306_Fill+0x2c>)
 8000fe2:	f002 fd29 	bl	8003a38 <memset>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	2000009c 	.word	0x2000009c

08000ff4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	80fb      	strh	r3, [r7, #6]
 8000ffe:	460b      	mov	r3, r1
 8001000:	80bb      	strh	r3, [r7, #4]
 8001002:	4613      	mov	r3, r2
 8001004:	70fb      	strb	r3, [r7, #3]
	if (
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	2b7f      	cmp	r3, #127	; 0x7f
 800100a:	d848      	bhi.n	800109e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800100c:	88bb      	ldrh	r3, [r7, #4]
 800100e:	2b3f      	cmp	r3, #63	; 0x3f
 8001010:	d845      	bhi.n	800109e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001012:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <SSD1306_DrawPixel+0xb4>)
 8001014:	791b      	ldrb	r3, [r3, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d006      	beq.n	8001028 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800101a:	78fb      	ldrb	r3, [r7, #3]
 800101c:	2b00      	cmp	r3, #0
 800101e:	bf0c      	ite	eq
 8001020:	2301      	moveq	r3, #1
 8001022:	2300      	movne	r3, #0
 8001024:	b2db      	uxtb	r3, r3
 8001026:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d11a      	bne.n	8001064 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800102e:	88fa      	ldrh	r2, [r7, #6]
 8001030:	88bb      	ldrh	r3, [r7, #4]
 8001032:	08db      	lsrs	r3, r3, #3
 8001034:	b298      	uxth	r0, r3
 8001036:	4603      	mov	r3, r0
 8001038:	01db      	lsls	r3, r3, #7
 800103a:	4413      	add	r3, r2
 800103c:	4a1b      	ldr	r2, [pc, #108]	; (80010ac <SSD1306_DrawPixel+0xb8>)
 800103e:	5cd3      	ldrb	r3, [r2, r3]
 8001040:	b25a      	sxtb	r2, r3
 8001042:	88bb      	ldrh	r3, [r7, #4]
 8001044:	f003 0307 	and.w	r3, r3, #7
 8001048:	2101      	movs	r1, #1
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	b25b      	sxtb	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b259      	sxtb	r1, r3
 8001054:	88fa      	ldrh	r2, [r7, #6]
 8001056:	4603      	mov	r3, r0
 8001058:	01db      	lsls	r3, r3, #7
 800105a:	4413      	add	r3, r2
 800105c:	b2c9      	uxtb	r1, r1
 800105e:	4a13      	ldr	r2, [pc, #76]	; (80010ac <SSD1306_DrawPixel+0xb8>)
 8001060:	54d1      	strb	r1, [r2, r3]
 8001062:	e01d      	b.n	80010a0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001064:	88fa      	ldrh	r2, [r7, #6]
 8001066:	88bb      	ldrh	r3, [r7, #4]
 8001068:	08db      	lsrs	r3, r3, #3
 800106a:	b298      	uxth	r0, r3
 800106c:	4603      	mov	r3, r0
 800106e:	01db      	lsls	r3, r3, #7
 8001070:	4413      	add	r3, r2
 8001072:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <SSD1306_DrawPixel+0xb8>)
 8001074:	5cd3      	ldrb	r3, [r2, r3]
 8001076:	b25a      	sxtb	r2, r3
 8001078:	88bb      	ldrh	r3, [r7, #4]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	2101      	movs	r1, #1
 8001080:	fa01 f303 	lsl.w	r3, r1, r3
 8001084:	b25b      	sxtb	r3, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	b25b      	sxtb	r3, r3
 800108a:	4013      	ands	r3, r2
 800108c:	b259      	sxtb	r1, r3
 800108e:	88fa      	ldrh	r2, [r7, #6]
 8001090:	4603      	mov	r3, r0
 8001092:	01db      	lsls	r3, r3, #7
 8001094:	4413      	add	r3, r2
 8001096:	b2c9      	uxtb	r1, r1
 8001098:	4a04      	ldr	r2, [pc, #16]	; (80010ac <SSD1306_DrawPixel+0xb8>)
 800109a:	54d1      	strb	r1, [r2, r3]
 800109c:	e000      	b.n	80010a0 <SSD1306_DrawPixel+0xac>
		return;
 800109e:	bf00      	nop
	}
}
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	2000049c 	.word	0x2000049c
 80010ac:	2000009c 	.word	0x2000009c

080010b0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	460a      	mov	r2, r1
 80010ba:	80fb      	strh	r3, [r7, #6]
 80010bc:	4613      	mov	r3, r2
 80010be:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80010c0:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <SSD1306_GotoXY+0x28>)
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <SSD1306_GotoXY+0x28>)
 80010c8:	88bb      	ldrh	r3, [r7, #4]
 80010ca:	8053      	strh	r3, [r2, #2]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	2000049c 	.word	0x2000049c

080010dc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	6039      	str	r1, [r7, #0]
 80010e6:	71fb      	strb	r3, [r7, #7]
 80010e8:	4613      	mov	r3, r2
 80010ea:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80010ec:	4b3a      	ldr	r3, [pc, #232]	; (80011d8 <SSD1306_Putc+0xfc>)
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	4413      	add	r3, r2
	if (
 80010f8:	2b7f      	cmp	r3, #127	; 0x7f
 80010fa:	dc07      	bgt.n	800110c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80010fc:	4b36      	ldr	r3, [pc, #216]	; (80011d8 <SSD1306_Putc+0xfc>)
 80010fe:	885b      	ldrh	r3, [r3, #2]
 8001100:	461a      	mov	r2, r3
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	785b      	ldrb	r3, [r3, #1]
 8001106:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001108:	2b3f      	cmp	r3, #63	; 0x3f
 800110a:	dd01      	ble.n	8001110 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800110c:	2300      	movs	r3, #0
 800110e:	e05e      	b.n	80011ce <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	e04b      	b.n	80011ae <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	3b20      	subs	r3, #32
 800111e:	6839      	ldr	r1, [r7, #0]
 8001120:	7849      	ldrb	r1, [r1, #1]
 8001122:	fb01 f303 	mul.w	r3, r1, r3
 8001126:	4619      	mov	r1, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	440b      	add	r3, r1
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	e030      	b.n	800119c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d010      	beq.n	800116c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800114a:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <SSD1306_Putc+0xfc>)
 800114c:	881a      	ldrh	r2, [r3, #0]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	b29b      	uxth	r3, r3
 8001152:	4413      	add	r3, r2
 8001154:	b298      	uxth	r0, r3
 8001156:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <SSD1306_Putc+0xfc>)
 8001158:	885a      	ldrh	r2, [r3, #2]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	b29b      	uxth	r3, r3
 800115e:	4413      	add	r3, r2
 8001160:	b29b      	uxth	r3, r3
 8001162:	79ba      	ldrb	r2, [r7, #6]
 8001164:	4619      	mov	r1, r3
 8001166:	f7ff ff45 	bl	8000ff4 <SSD1306_DrawPixel>
 800116a:	e014      	b.n	8001196 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <SSD1306_Putc+0xfc>)
 800116e:	881a      	ldrh	r2, [r3, #0]
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	b29b      	uxth	r3, r3
 8001174:	4413      	add	r3, r2
 8001176:	b298      	uxth	r0, r3
 8001178:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <SSD1306_Putc+0xfc>)
 800117a:	885a      	ldrh	r2, [r3, #2]
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	b29b      	uxth	r3, r3
 8001180:	4413      	add	r3, r2
 8001182:	b299      	uxth	r1, r3
 8001184:	79bb      	ldrb	r3, [r7, #6]
 8001186:	2b00      	cmp	r3, #0
 8001188:	bf0c      	ite	eq
 800118a:	2301      	moveq	r3, #1
 800118c:	2300      	movne	r3, #0
 800118e:	b2db      	uxtb	r3, r3
 8001190:	461a      	mov	r2, r3
 8001192:	f7ff ff2f 	bl	8000ff4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	3301      	adds	r3, #1
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d3c8      	bcc.n	800113a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	3301      	adds	r3, #1
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	785b      	ldrb	r3, [r3, #1]
 80011b2:	461a      	mov	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d3ad      	bcc.n	8001116 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <SSD1306_Putc+0xfc>)
 80011bc:	881a      	ldrh	r2, [r3, #0]
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	4413      	add	r3, r2
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <SSD1306_Putc+0xfc>)
 80011ca:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80011cc:	79fb      	ldrb	r3, [r7, #7]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	2000049c 	.word	0x2000049c

080011dc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	4613      	mov	r3, r2
 80011e8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80011ea:	e012      	b.n	8001212 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	79fa      	ldrb	r2, [r7, #7]
 80011f2:	68b9      	ldr	r1, [r7, #8]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff71 	bl	80010dc <SSD1306_Putc>
 80011fa:	4603      	mov	r3, r0
 80011fc:	461a      	mov	r2, r3
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	429a      	cmp	r2, r3
 8001204:	d002      	beq.n	800120c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	e008      	b.n	800121e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	3301      	adds	r3, #1
 8001210:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1e8      	bne.n	80011ec <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	781b      	ldrb	r3, [r3, #0]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001226:	b590      	push	{r4, r7, lr}
 8001228:	b087      	sub	sp, #28
 800122a:	af00      	add	r7, sp, #0
 800122c:	4604      	mov	r4, r0
 800122e:	4608      	mov	r0, r1
 8001230:	4611      	mov	r1, r2
 8001232:	461a      	mov	r2, r3
 8001234:	4623      	mov	r3, r4
 8001236:	80fb      	strh	r3, [r7, #6]
 8001238:	4603      	mov	r3, r0
 800123a:	80bb      	strh	r3, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	807b      	strh	r3, [r7, #2]
 8001240:	4613      	mov	r3, r2
 8001242:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001244:	88fb      	ldrh	r3, [r7, #6]
 8001246:	2b7f      	cmp	r3, #127	; 0x7f
 8001248:	d901      	bls.n	800124e <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 800124a:	237f      	movs	r3, #127	; 0x7f
 800124c:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 800124e:	887b      	ldrh	r3, [r7, #2]
 8001250:	2b7f      	cmp	r3, #127	; 0x7f
 8001252:	d901      	bls.n	8001258 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8001254:	237f      	movs	r3, #127	; 0x7f
 8001256:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001258:	88bb      	ldrh	r3, [r7, #4]
 800125a:	2b3f      	cmp	r3, #63	; 0x3f
 800125c:	d901      	bls.n	8001262 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 800125e:	233f      	movs	r3, #63	; 0x3f
 8001260:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001262:	883b      	ldrh	r3, [r7, #0]
 8001264:	2b3f      	cmp	r3, #63	; 0x3f
 8001266:	d901      	bls.n	800126c <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001268:	233f      	movs	r3, #63	; 0x3f
 800126a:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 800126c:	88fa      	ldrh	r2, [r7, #6]
 800126e:	887b      	ldrh	r3, [r7, #2]
 8001270:	429a      	cmp	r2, r3
 8001272:	d205      	bcs.n	8001280 <SSD1306_DrawLine+0x5a>
 8001274:	887a      	ldrh	r2, [r7, #2]
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	b29b      	uxth	r3, r3
 800127c:	b21b      	sxth	r3, r3
 800127e:	e004      	b.n	800128a <SSD1306_DrawLine+0x64>
 8001280:	88fa      	ldrh	r2, [r7, #6]
 8001282:	887b      	ldrh	r3, [r7, #2]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	b29b      	uxth	r3, r3
 8001288:	b21b      	sxth	r3, r3
 800128a:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 800128c:	88ba      	ldrh	r2, [r7, #4]
 800128e:	883b      	ldrh	r3, [r7, #0]
 8001290:	429a      	cmp	r2, r3
 8001292:	d205      	bcs.n	80012a0 <SSD1306_DrawLine+0x7a>
 8001294:	883a      	ldrh	r2, [r7, #0]
 8001296:	88bb      	ldrh	r3, [r7, #4]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	b29b      	uxth	r3, r3
 800129c:	b21b      	sxth	r3, r3
 800129e:	e004      	b.n	80012aa <SSD1306_DrawLine+0x84>
 80012a0:	88ba      	ldrh	r2, [r7, #4]
 80012a2:	883b      	ldrh	r3, [r7, #0]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 80012ac:	88fa      	ldrh	r2, [r7, #6]
 80012ae:	887b      	ldrh	r3, [r7, #2]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d201      	bcs.n	80012b8 <SSD1306_DrawLine+0x92>
 80012b4:	2301      	movs	r3, #1
 80012b6:	e001      	b.n	80012bc <SSD1306_DrawLine+0x96>
 80012b8:	f04f 33ff 	mov.w	r3, #4294967295
 80012bc:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 80012be:	88ba      	ldrh	r2, [r7, #4]
 80012c0:	883b      	ldrh	r3, [r7, #0]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d201      	bcs.n	80012ca <SSD1306_DrawLine+0xa4>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e001      	b.n	80012ce <SSD1306_DrawLine+0xa8>
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80012d0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80012d4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012d8:	429a      	cmp	r2, r3
 80012da:	dd06      	ble.n	80012ea <SSD1306_DrawLine+0xc4>
 80012dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012e0:	0fda      	lsrs	r2, r3, #31
 80012e2:	4413      	add	r3, r2
 80012e4:	105b      	asrs	r3, r3, #1
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	e006      	b.n	80012f8 <SSD1306_DrawLine+0xd2>
 80012ea:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012ee:	425b      	negs	r3, r3
 80012f0:	0fda      	lsrs	r2, r3, #31
 80012f2:	4413      	add	r3, r2
 80012f4:	105b      	asrs	r3, r3, #1
 80012f6:	b21b      	sxth	r3, r3
 80012f8:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 80012fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d129      	bne.n	8001356 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8001302:	883a      	ldrh	r2, [r7, #0]
 8001304:	88bb      	ldrh	r3, [r7, #4]
 8001306:	429a      	cmp	r2, r3
 8001308:	d205      	bcs.n	8001316 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 800130a:	883b      	ldrh	r3, [r7, #0]
 800130c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800130e:	88bb      	ldrh	r3, [r7, #4]
 8001310:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001312:	893b      	ldrh	r3, [r7, #8]
 8001314:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	429a      	cmp	r2, r3
 800131c:	d205      	bcs.n	800132a <SSD1306_DrawLine+0x104>
			tmp = x1;
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001326:	893b      	ldrh	r3, [r7, #8]
 8001328:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 800132a:	88bb      	ldrh	r3, [r7, #4]
 800132c:	82bb      	strh	r3, [r7, #20]
 800132e:	e00c      	b.n	800134a <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001330:	8ab9      	ldrh	r1, [r7, #20]
 8001332:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fe5b 	bl	8000ff4 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 800133e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001342:	b29b      	uxth	r3, r3
 8001344:	3301      	adds	r3, #1
 8001346:	b29b      	uxth	r3, r3
 8001348:	82bb      	strh	r3, [r7, #20]
 800134a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800134e:	883b      	ldrh	r3, [r7, #0]
 8001350:	429a      	cmp	r2, r3
 8001352:	dded      	ble.n	8001330 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8001354:	e05f      	b.n	8001416 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8001356:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d129      	bne.n	80013b2 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 800135e:	883a      	ldrh	r2, [r7, #0]
 8001360:	88bb      	ldrh	r3, [r7, #4]
 8001362:	429a      	cmp	r2, r3
 8001364:	d205      	bcs.n	8001372 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8001366:	883b      	ldrh	r3, [r7, #0]
 8001368:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800136a:	88bb      	ldrh	r3, [r7, #4]
 800136c:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800136e:	893b      	ldrh	r3, [r7, #8]
 8001370:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001372:	887a      	ldrh	r2, [r7, #2]
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	429a      	cmp	r2, r3
 8001378:	d205      	bcs.n	8001386 <SSD1306_DrawLine+0x160>
			tmp = x1;
 800137a:	887b      	ldrh	r3, [r7, #2]
 800137c:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001382:	893b      	ldrh	r3, [r7, #8]
 8001384:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	82bb      	strh	r3, [r7, #20]
 800138a:	e00c      	b.n	80013a6 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 800138c:	8abb      	ldrh	r3, [r7, #20]
 800138e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001392:	88b9      	ldrh	r1, [r7, #4]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fe2d 	bl	8000ff4 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 800139a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	3301      	adds	r3, #1
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	82bb      	strh	r3, [r7, #20]
 80013a6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80013aa:	887b      	ldrh	r3, [r7, #2]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	dded      	ble.n	800138c <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 80013b0:	e031      	b.n	8001416 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 80013b2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80013b6:	88b9      	ldrh	r1, [r7, #4]
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fe1a 	bl	8000ff4 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80013c0:	88fa      	ldrh	r2, [r7, #6]
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d103      	bne.n	80013d0 <SSD1306_DrawLine+0x1aa>
 80013c8:	88ba      	ldrh	r2, [r7, #4]
 80013ca:	883b      	ldrh	r3, [r7, #0]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d021      	beq.n	8001414 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 80013d0:	8afb      	ldrh	r3, [r7, #22]
 80013d2:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 80013d4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80013d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80013dc:	425b      	negs	r3, r3
 80013de:	429a      	cmp	r2, r3
 80013e0:	dd08      	ble.n	80013f4 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 80013e2:	8afa      	ldrh	r2, [r7, #22]
 80013e4:	8a3b      	ldrh	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 80013ec:	89fa      	ldrh	r2, [r7, #14]
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	4413      	add	r3, r2
 80013f2:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 80013f4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80013f8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	dad8      	bge.n	80013b2 <SSD1306_DrawLine+0x18c>
			err += dx;
 8001400:	8afa      	ldrh	r2, [r7, #22]
 8001402:	8a7b      	ldrh	r3, [r7, #18]
 8001404:	4413      	add	r3, r2
 8001406:	b29b      	uxth	r3, r3
 8001408:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 800140a:	89ba      	ldrh	r2, [r7, #12]
 800140c:	88bb      	ldrh	r3, [r7, #4]
 800140e:	4413      	add	r3, r2
 8001410:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8001412:	e7ce      	b.n	80013b2 <SSD1306_DrawLine+0x18c>
			break;
 8001414:	bf00      	nop
		} 
	}
}
 8001416:	371c      	adds	r7, #28
 8001418:	46bd      	mov	sp, r7
 800141a:	bd90      	pop	{r4, r7, pc}

0800141c <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b085      	sub	sp, #20
 8001420:	af02      	add	r7, sp, #8
 8001422:	4604      	mov	r4, r0
 8001424:	4608      	mov	r0, r1
 8001426:	4611      	mov	r1, r2
 8001428:	461a      	mov	r2, r3
 800142a:	4623      	mov	r3, r4
 800142c:	80fb      	strh	r3, [r7, #6]
 800142e:	4603      	mov	r3, r0
 8001430:	80bb      	strh	r3, [r7, #4]
 8001432:	460b      	mov	r3, r1
 8001434:	807b      	strh	r3, [r7, #2]
 8001436:	4613      	mov	r3, r2
 8001438:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	2b7f      	cmp	r3, #127	; 0x7f
 800143e:	d853      	bhi.n	80014e8 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8001440:	88bb      	ldrh	r3, [r7, #4]
 8001442:	2b3f      	cmp	r3, #63	; 0x3f
 8001444:	d850      	bhi.n	80014e8 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001446:	88fa      	ldrh	r2, [r7, #6]
 8001448:	887b      	ldrh	r3, [r7, #2]
 800144a:	4413      	add	r3, r2
 800144c:	2b7f      	cmp	r3, #127	; 0x7f
 800144e:	dd03      	ble.n	8001458 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001456:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001458:	88ba      	ldrh	r2, [r7, #4]
 800145a:	883b      	ldrh	r3, [r7, #0]
 800145c:	4413      	add	r3, r2
 800145e:	2b3f      	cmp	r3, #63	; 0x3f
 8001460:	dd03      	ble.n	800146a <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001462:	88bb      	ldrh	r3, [r7, #4]
 8001464:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001468:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 800146a:	88fa      	ldrh	r2, [r7, #6]
 800146c:	887b      	ldrh	r3, [r7, #2]
 800146e:	4413      	add	r3, r2
 8001470:	b29a      	uxth	r2, r3
 8001472:	88bc      	ldrh	r4, [r7, #4]
 8001474:	88b9      	ldrh	r1, [r7, #4]
 8001476:	88f8      	ldrh	r0, [r7, #6]
 8001478:	7e3b      	ldrb	r3, [r7, #24]
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	4623      	mov	r3, r4
 800147e:	f7ff fed2 	bl	8001226 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8001482:	88ba      	ldrh	r2, [r7, #4]
 8001484:	883b      	ldrh	r3, [r7, #0]
 8001486:	4413      	add	r3, r2
 8001488:	b299      	uxth	r1, r3
 800148a:	88fa      	ldrh	r2, [r7, #6]
 800148c:	887b      	ldrh	r3, [r7, #2]
 800148e:	4413      	add	r3, r2
 8001490:	b29c      	uxth	r4, r3
 8001492:	88ba      	ldrh	r2, [r7, #4]
 8001494:	883b      	ldrh	r3, [r7, #0]
 8001496:	4413      	add	r3, r2
 8001498:	b29a      	uxth	r2, r3
 800149a:	88f8      	ldrh	r0, [r7, #6]
 800149c:	7e3b      	ldrb	r3, [r7, #24]
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	4613      	mov	r3, r2
 80014a2:	4622      	mov	r2, r4
 80014a4:	f7ff febf 	bl	8001226 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 80014a8:	88ba      	ldrh	r2, [r7, #4]
 80014aa:	883b      	ldrh	r3, [r7, #0]
 80014ac:	4413      	add	r3, r2
 80014ae:	b29c      	uxth	r4, r3
 80014b0:	88fa      	ldrh	r2, [r7, #6]
 80014b2:	88b9      	ldrh	r1, [r7, #4]
 80014b4:	88f8      	ldrh	r0, [r7, #6]
 80014b6:	7e3b      	ldrb	r3, [r7, #24]
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	4623      	mov	r3, r4
 80014bc:	f7ff feb3 	bl	8001226 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 80014c0:	88fa      	ldrh	r2, [r7, #6]
 80014c2:	887b      	ldrh	r3, [r7, #2]
 80014c4:	4413      	add	r3, r2
 80014c6:	b298      	uxth	r0, r3
 80014c8:	88fa      	ldrh	r2, [r7, #6]
 80014ca:	887b      	ldrh	r3, [r7, #2]
 80014cc:	4413      	add	r3, r2
 80014ce:	b29c      	uxth	r4, r3
 80014d0:	88ba      	ldrh	r2, [r7, #4]
 80014d2:	883b      	ldrh	r3, [r7, #0]
 80014d4:	4413      	add	r3, r2
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	88b9      	ldrh	r1, [r7, #4]
 80014da:	7e3b      	ldrb	r3, [r7, #24]
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	4613      	mov	r3, r2
 80014e0:	4622      	mov	r2, r4
 80014e2:	f7ff fea0 	bl	8001226 <SSD1306_DrawLine>
 80014e6:	e000      	b.n	80014ea <SSD1306_DrawRectangle+0xce>
		return;
 80014e8:	bf00      	nop
}
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd90      	pop	{r4, r7, pc}

080014f0 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff fd65 	bl	8000fc4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80014fa:	f7ff fd35 	bl	8000f68 <SSD1306_UpdateScreen>
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800150a:	4b07      	ldr	r3, [pc, #28]	; (8001528 <ssd1306_I2C_Init+0x24>)
 800150c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800150e:	e002      	b.n	8001516 <ssd1306_I2C_Init+0x12>
		p--;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1f9      	bne.n	8001510 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	0003d090 	.word	0x0003d090

0800152c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b0c7      	sub	sp, #284	; 0x11c
 8001530:	af02      	add	r7, sp, #8
 8001532:	4604      	mov	r4, r0
 8001534:	4608      	mov	r0, r1
 8001536:	4639      	mov	r1, r7
 8001538:	600a      	str	r2, [r1, #0]
 800153a:	4619      	mov	r1, r3
 800153c:	1dfb      	adds	r3, r7, #7
 800153e:	4622      	mov	r2, r4
 8001540:	701a      	strb	r2, [r3, #0]
 8001542:	1dbb      	adds	r3, r7, #6
 8001544:	4602      	mov	r2, r0
 8001546:	701a      	strb	r2, [r3, #0]
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	460a      	mov	r2, r1
 800154c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800154e:	f107 030c 	add.w	r3, r7, #12
 8001552:	1dba      	adds	r2, r7, #6
 8001554:	7812      	ldrb	r2, [r2, #0]
 8001556:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001558:	2300      	movs	r3, #0
 800155a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800155e:	e010      	b.n	8001582 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001560:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001564:	463a      	mov	r2, r7
 8001566:	6812      	ldr	r2, [r2, #0]
 8001568:	441a      	add	r2, r3
 800156a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800156e:	3301      	adds	r3, #1
 8001570:	7811      	ldrb	r1, [r2, #0]
 8001572:	f107 020c 	add.w	r2, r7, #12
 8001576:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001578:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800157c:	3301      	adds	r3, #1
 800157e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001582:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001586:	b29b      	uxth	r3, r3
 8001588:	1d3a      	adds	r2, r7, #4
 800158a:	8812      	ldrh	r2, [r2, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d8e7      	bhi.n	8001560 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001590:	1dfb      	adds	r3, r7, #7
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b299      	uxth	r1, r3
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	3301      	adds	r3, #1
 800159c:	b298      	uxth	r0, r3
 800159e:	f107 020c 	add.w	r2, r7, #12
 80015a2:	230a      	movs	r3, #10
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	4603      	mov	r3, r0
 80015a8:	4803      	ldr	r0, [pc, #12]	; (80015b8 <ssd1306_I2C_WriteMulti+0x8c>)
 80015aa:	f000 fdf1 	bl	8002190 <HAL_I2C_Master_Transmit>
}
 80015ae:	bf00      	nop
 80015b0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd90      	pop	{r4, r7, pc}
 80015b8:	200004b0 	.word	0x200004b0

080015bc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af02      	add	r7, sp, #8
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
 80015c6:	460b      	mov	r3, r1
 80015c8:	71bb      	strb	r3, [r7, #6]
 80015ca:	4613      	mov	r3, r2
 80015cc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80015ce:	79bb      	ldrb	r3, [r7, #6]
 80015d0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80015d2:	797b      	ldrb	r3, [r7, #5]
 80015d4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	b299      	uxth	r1, r3
 80015da:	f107 020c 	add.w	r2, r7, #12
 80015de:	230a      	movs	r3, #10
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	2302      	movs	r3, #2
 80015e4:	4803      	ldr	r0, [pc, #12]	; (80015f4 <ssd1306_I2C_Write+0x38>)
 80015e6:	f000 fdd3 	bl	8002190 <HAL_I2C_Master_Transmit>
}
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200004b0 	.word	0x200004b0

080015f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015fe:	4b19      	ldr	r3, [pc, #100]	; (8001664 <HAL_MspInit+0x6c>)
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	4a18      	ldr	r2, [pc, #96]	; (8001664 <HAL_MspInit+0x6c>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6193      	str	r3, [r2, #24]
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <HAL_MspInit+0x6c>)
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	4b13      	ldr	r3, [pc, #76]	; (8001664 <HAL_MspInit+0x6c>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	4a12      	ldr	r2, [pc, #72]	; (8001664 <HAL_MspInit+0x6c>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001620:	61d3      	str	r3, [r2, #28]
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <HAL_MspInit+0x6c>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2100      	movs	r1, #0
 8001632:	2005      	movs	r0, #5
 8001634:	f000 fa9b 	bl	8001b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001638:	2005      	movs	r0, #5
 800163a:	f000 fab4 	bl	8001ba6 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <HAL_MspInit+0x70>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	4a04      	ldr	r2, [pc, #16]	; (8001668 <HAL_MspInit+0x70>)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40021000 	.word	0x40021000
 8001668:	40010000 	.word	0x40010000

0800166c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0310 	add.w	r3, r7, #16
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a15      	ldr	r2, [pc, #84]	; (80016dc <HAL_I2C_MspInit+0x70>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d123      	bne.n	80016d4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168c:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <HAL_I2C_MspInit+0x74>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	4a13      	ldr	r2, [pc, #76]	; (80016e0 <HAL_I2C_MspInit+0x74>)
 8001692:	f043 0308 	orr.w	r3, r3, #8
 8001696:	6193      	str	r3, [r2, #24]
 8001698:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <HAL_I2C_MspInit+0x74>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016a4:	23c0      	movs	r3, #192	; 0xc0
 80016a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a8:	2312      	movs	r3, #18
 80016aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	4619      	mov	r1, r3
 80016b6:	480b      	ldr	r0, [pc, #44]	; (80016e4 <HAL_I2C_MspInit+0x78>)
 80016b8:	f000 fa90 	bl	8001bdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <HAL_I2C_MspInit+0x74>)
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	4a07      	ldr	r2, [pc, #28]	; (80016e0 <HAL_I2C_MspInit+0x74>)
 80016c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016c6:	61d3      	str	r3, [r2, #28]
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <HAL_I2C_MspInit+0x74>)
 80016ca:	69db      	ldr	r3, [r3, #28]
 80016cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016d4:	bf00      	nop
 80016d6:	3720      	adds	r7, #32
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40005400 	.word	0x40005400
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40010c00 	.word	0x40010c00

080016e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f8:	d113      	bne.n	8001722 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016fa:	4b0c      	ldr	r3, [pc, #48]	; (800172c <HAL_TIM_Base_MspInit+0x44>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	4a0b      	ldr	r2, [pc, #44]	; (800172c <HAL_TIM_Base_MspInit+0x44>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	61d3      	str	r3, [r2, #28]
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <HAL_TIM_Base_MspInit+0x44>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2100      	movs	r1, #0
 8001716:	201c      	movs	r0, #28
 8001718:	f000 fa29 	bl	8001b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800171c:	201c      	movs	r0, #28
 800171e:	f000 fa42 	bl	8001ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40021000 	.word	0x40021000

08001730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <HardFault_Handler+0x4>

08001742 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001746:	e7fe      	b.n	8001746 <MemManage_Handler+0x4>

08001748 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174c:	e7fe      	b.n	800174c <BusFault_Handler+0x4>

0800174e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001752:	e7fe      	b.n	8001752 <UsageFault_Handler+0x4>

08001754 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr

08001760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177c:	f000 f8e2 	bl	8001944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}

08001784 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_IRQn 0 */
	HAL_GPIO_TogglePin(RGB_RED_GPIO_Port, RGB_RED_Pin);
 8001788:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <RCC_IRQHandler+0x14>)
 800178e:	f000 fbae 	bl	8001eee <HAL_GPIO_TogglePin>
  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40010c00 	.word	0x40010c00

0800179c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <TIM2_IRQHandler+0x10>)
 80017a2:	f001 fdd3 	bl	800334c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000504 	.word	0x20000504

080017b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <_sbrk+0x50>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <_sbrk+0x16>
		heap_end = &end;
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <_sbrk+0x50>)
 80017c2:	4a10      	ldr	r2, [pc, #64]	; (8001804 <_sbrk+0x54>)
 80017c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <_sbrk+0x50>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <_sbrk+0x50>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4413      	add	r3, r2
 80017d4:	466a      	mov	r2, sp
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d907      	bls.n	80017ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80017da:	f002 f903 	bl	80039e4 <__errno>
 80017de:	4602      	mov	r2, r0
 80017e0:	230c      	movs	r3, #12
 80017e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80017e4:	f04f 33ff 	mov.w	r3, #4294967295
 80017e8:	e006      	b.n	80017f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <_sbrk+0x50>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	4a03      	ldr	r2, [pc, #12]	; (8001800 <_sbrk+0x50>)
 80017f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80017f6:	68fb      	ldr	r3, [r7, #12]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	200004a4 	.word	0x200004a4
 8001804:	20000558 	.word	0x20000558

08001808 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr

08001814 <character_draw>:
				(SSD1306_HEIGHT / 2) - i2, i, i, color);
		SSD1306_UpdateScreen();
		HAL_Delay(10);
	}
}
void character_draw(uint8_t color) {
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	b087      	sub	sp, #28
 8001818:	af02      	add	r7, sp, #8
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, i, i2;

	SSD1306_Clear();
 800181e:	f7ff fe67 	bl	80014f0 <SSD1306_Clear>

	n = min(SSD1306_WIDTH, SSD1306_HEIGHT);
 8001822:	2340      	movs	r3, #64	; 0x40
 8001824:	73bb      	strb	r3, [r7, #14]

	for (i = 2; i < 30; i += 6) {
 8001826:	2302      	movs	r3, #2
 8001828:	73fb      	strb	r3, [r7, #15]
 800182a:	e018      	b.n	800185e <character_draw+0x4a>
		i2 = i / 2;
 800182c:	7bfb      	ldrb	r3, [r7, #15]
 800182e:	085b      	lsrs	r3, r3, #1
 8001830:	737b      	strb	r3, [r7, #13]
		SSD1306_DrawRectangle((SSD1306_WIDTH / 2) - i2,
 8001832:	7b7b      	ldrb	r3, [r7, #13]
 8001834:	b29b      	uxth	r3, r3
 8001836:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800183a:	b298      	uxth	r0, r3
 800183c:	7b7b      	ldrb	r3, [r7, #13]
 800183e:	b29b      	uxth	r3, r3
 8001840:	f1c3 032a 	rsb	r3, r3, #42	; 0x2a
 8001844:	b299      	uxth	r1, r3
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	b29a      	uxth	r2, r3
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	b29c      	uxth	r4, r3
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	4623      	mov	r3, r4
 8001854:	f7ff fde2 	bl	800141c <SSD1306_DrawRectangle>
	for (i = 2; i < 30; i += 6) {
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	3306      	adds	r3, #6
 800185c:	73fb      	strb	r3, [r7, #15]
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	2b1d      	cmp	r3, #29
 8001862:	d9e3      	bls.n	800182c <character_draw+0x18>
				(SSD1306_HEIGHT / 2) - i2 + 10, i, i, color);
		//SSD1306_UpdateScreen();
		//HAL_Delay (10);
	}
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	bd90      	pop	{r4, r7, pc}

0800186c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800186c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800186e:	e003      	b.n	8001878 <LoopCopyDataInit>

08001870 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001872:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001874:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001876:	3104      	adds	r1, #4

08001878 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001878:	480a      	ldr	r0, [pc, #40]	; (80018a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800187c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800187e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001880:	d3f6      	bcc.n	8001870 <CopyDataInit>
  ldr r2, =_sbss
 8001882:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001884:	e002      	b.n	800188c <LoopFillZerobss>

08001886 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001886:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001888:	f842 3b04 	str.w	r3, [r2], #4

0800188c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800188e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001890:	d3f9      	bcc.n	8001886 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001892:	f7ff ffb9 	bl	8001808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001896:	f002 f8ab 	bl	80039f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800189a:	f7fe fd09 	bl	80002b0 <main>
  bx lr
 800189e:	4770      	bx	lr
  ldr r3, =_sidata
 80018a0:	080064b0 	.word	0x080064b0
  ldr r0, =_sdata
 80018a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80018a8:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 80018ac:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 80018b0:	20000554 	.word	0x20000554

080018b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018b4:	e7fe      	b.n	80018b4 <ADC1_2_IRQHandler>
	...

080018b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <HAL_Init+0x28>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a07      	ldr	r2, [pc, #28]	; (80018e0 <HAL_Init+0x28>)
 80018c2:	f043 0310 	orr.w	r3, r3, #16
 80018c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c8:	2003      	movs	r0, #3
 80018ca:	f000 f945 	bl	8001b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ce:	2000      	movs	r0, #0
 80018d0:	f000 f808 	bl	80018e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d4:	f7ff fe90 	bl	80015f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40022000 	.word	0x40022000

080018e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_InitTick+0x54>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_InitTick+0x58>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	4619      	mov	r1, r3
 80018f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80018fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001902:	4618      	mov	r0, r3
 8001904:	f000 f95d 	bl	8001bc2 <HAL_SYSTICK_Config>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e00e      	b.n	8001930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b0f      	cmp	r3, #15
 8001916:	d80a      	bhi.n	800192e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001918:	2200      	movs	r2, #0
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	f04f 30ff 	mov.w	r0, #4294967295
 8001920:	f000 f925 	bl	8001b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001924:	4a06      	ldr	r2, [pc, #24]	; (8001940 <HAL_InitTick+0x5c>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	e000      	b.n	8001930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
}
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000010 	.word	0x20000010
 800193c:	20000018 	.word	0x20000018
 8001940:	20000014 	.word	0x20000014

08001944 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <HAL_IncTick+0x1c>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_IncTick+0x20>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4413      	add	r3, r2
 8001954:	4a03      	ldr	r2, [pc, #12]	; (8001964 <HAL_IncTick+0x20>)
 8001956:	6013      	str	r3, [r2, #0]
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr
 8001960:	20000018 	.word	0x20000018
 8001964:	2000054c 	.word	0x2000054c

08001968 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return uwTick;
 800196c:	4b02      	ldr	r3, [pc, #8]	; (8001978 <HAL_GetTick+0x10>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	2000054c 	.word	0x2000054c

0800197c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001984:	f7ff fff0 	bl	8001968 <HAL_GetTick>
 8001988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001994:	d005      	beq.n	80019a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <HAL_Delay+0x40>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4413      	add	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019a2:	bf00      	nop
 80019a4:	f7ff ffe0 	bl	8001968 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d8f7      	bhi.n	80019a4 <HAL_Delay+0x28>
  {
  }
}
 80019b4:	bf00      	nop
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000018 	.word	0x20000018

080019c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019dc:	4013      	ands	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f2:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	60d3      	str	r3, [r2, #12]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <__NVIC_GetPriorityGrouping+0x18>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	f003 0307 	and.w	r3, r3, #7
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	db0b      	blt.n	8001a4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	f003 021f 	and.w	r2, r3, #31
 8001a3c:	4906      	ldr	r1, [pc, #24]	; (8001a58 <__NVIC_EnableIRQ+0x34>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	2001      	movs	r0, #1
 8001a46:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr
 8001a58:	e000e100 	.word	0xe000e100

08001a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	6039      	str	r1, [r7, #0]
 8001a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	db0a      	blt.n	8001a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	490c      	ldr	r1, [pc, #48]	; (8001aa8 <__NVIC_SetPriority+0x4c>)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	0112      	lsls	r2, r2, #4
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	440b      	add	r3, r1
 8001a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a84:	e00a      	b.n	8001a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4908      	ldr	r1, [pc, #32]	; (8001aac <__NVIC_SetPriority+0x50>)
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	3b04      	subs	r3, #4
 8001a94:	0112      	lsls	r2, r2, #4
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	440b      	add	r3, r1
 8001a9a:	761a      	strb	r2, [r3, #24]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	e000e100 	.word	0xe000e100
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b089      	sub	sp, #36	; 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f1c3 0307 	rsb	r3, r3, #7
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	bf28      	it	cs
 8001ace:	2304      	movcs	r3, #4
 8001ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	2b06      	cmp	r3, #6
 8001ad8:	d902      	bls.n	8001ae0 <NVIC_EncodePriority+0x30>
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3b03      	subs	r3, #3
 8001ade:	e000      	b.n	8001ae2 <NVIC_EncodePriority+0x32>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43da      	mvns	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	401a      	ands	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	fa01 f303 	lsl.w	r3, r1, r3
 8001b02:	43d9      	mvns	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	4313      	orrs	r3, r2
         );
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3724      	adds	r7, #36	; 0x24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr

08001b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b24:	d301      	bcc.n	8001b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b26:	2301      	movs	r3, #1
 8001b28:	e00f      	b.n	8001b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <SysTick_Config+0x40>)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b32:	210f      	movs	r1, #15
 8001b34:	f04f 30ff 	mov.w	r0, #4294967295
 8001b38:	f7ff ff90 	bl	8001a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <SysTick_Config+0x40>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b42:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <SysTick_Config+0x40>)
 8001b44:	2207      	movs	r2, #7
 8001b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	e000e010 	.word	0xe000e010

08001b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ff2d 	bl	80019c0 <__NVIC_SetPriorityGrouping>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b086      	sub	sp, #24
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4603      	mov	r3, r0
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b80:	f7ff ff42 	bl	8001a08 <__NVIC_GetPriorityGrouping>
 8001b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	6978      	ldr	r0, [r7, #20]
 8001b8c:	f7ff ff90 	bl	8001ab0 <NVIC_EncodePriority>
 8001b90:	4602      	mov	r2, r0
 8001b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b96:	4611      	mov	r1, r2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff5f 	bl	8001a5c <__NVIC_SetPriority>
}
 8001b9e:	bf00      	nop
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff35 	bl	8001a24 <__NVIC_EnableIRQ>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ffa2 	bl	8001b14 <SysTick_Config>
 8001bd0:	4603      	mov	r3, r0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b08b      	sub	sp, #44	; 0x2c
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001be6:	2300      	movs	r3, #0
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bee:	e127      	b.n	8001e40 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	f040 8116 	bne.w	8001e3a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b12      	cmp	r3, #18
 8001c14:	d034      	beq.n	8001c80 <HAL_GPIO_Init+0xa4>
 8001c16:	2b12      	cmp	r3, #18
 8001c18:	d80d      	bhi.n	8001c36 <HAL_GPIO_Init+0x5a>
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d02b      	beq.n	8001c76 <HAL_GPIO_Init+0x9a>
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d804      	bhi.n	8001c2c <HAL_GPIO_Init+0x50>
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d031      	beq.n	8001c8a <HAL_GPIO_Init+0xae>
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d01c      	beq.n	8001c64 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c2a:	e048      	b.n	8001cbe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	d043      	beq.n	8001cb8 <HAL_GPIO_Init+0xdc>
 8001c30:	2b11      	cmp	r3, #17
 8001c32:	d01b      	beq.n	8001c6c <HAL_GPIO_Init+0x90>
          break;
 8001c34:	e043      	b.n	8001cbe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c36:	4a89      	ldr	r2, [pc, #548]	; (8001e5c <HAL_GPIO_Init+0x280>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d026      	beq.n	8001c8a <HAL_GPIO_Init+0xae>
 8001c3c:	4a87      	ldr	r2, [pc, #540]	; (8001e5c <HAL_GPIO_Init+0x280>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d806      	bhi.n	8001c50 <HAL_GPIO_Init+0x74>
 8001c42:	4a87      	ldr	r2, [pc, #540]	; (8001e60 <HAL_GPIO_Init+0x284>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d020      	beq.n	8001c8a <HAL_GPIO_Init+0xae>
 8001c48:	4a86      	ldr	r2, [pc, #536]	; (8001e64 <HAL_GPIO_Init+0x288>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d01d      	beq.n	8001c8a <HAL_GPIO_Init+0xae>
          break;
 8001c4e:	e036      	b.n	8001cbe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c50:	4a85      	ldr	r2, [pc, #532]	; (8001e68 <HAL_GPIO_Init+0x28c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d019      	beq.n	8001c8a <HAL_GPIO_Init+0xae>
 8001c56:	4a85      	ldr	r2, [pc, #532]	; (8001e6c <HAL_GPIO_Init+0x290>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d016      	beq.n	8001c8a <HAL_GPIO_Init+0xae>
 8001c5c:	4a84      	ldr	r2, [pc, #528]	; (8001e70 <HAL_GPIO_Init+0x294>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d013      	beq.n	8001c8a <HAL_GPIO_Init+0xae>
          break;
 8001c62:	e02c      	b.n	8001cbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	623b      	str	r3, [r7, #32]
          break;
 8001c6a:	e028      	b.n	8001cbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	3304      	adds	r3, #4
 8001c72:	623b      	str	r3, [r7, #32]
          break;
 8001c74:	e023      	b.n	8001cbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	3308      	adds	r3, #8
 8001c7c:	623b      	str	r3, [r7, #32]
          break;
 8001c7e:	e01e      	b.n	8001cbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	330c      	adds	r3, #12
 8001c86:	623b      	str	r3, [r7, #32]
          break;
 8001c88:	e019      	b.n	8001cbe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d102      	bne.n	8001c98 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c92:	2304      	movs	r3, #4
 8001c94:	623b      	str	r3, [r7, #32]
          break;
 8001c96:	e012      	b.n	8001cbe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d105      	bne.n	8001cac <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ca0:	2308      	movs	r3, #8
 8001ca2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69fa      	ldr	r2, [r7, #28]
 8001ca8:	611a      	str	r2, [r3, #16]
          break;
 8001caa:	e008      	b.n	8001cbe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cac:	2308      	movs	r3, #8
 8001cae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69fa      	ldr	r2, [r7, #28]
 8001cb4:	615a      	str	r2, [r3, #20]
          break;
 8001cb6:	e002      	b.n	8001cbe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	623b      	str	r3, [r7, #32]
          break;
 8001cbc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	2bff      	cmp	r3, #255	; 0xff
 8001cc2:	d801      	bhi.n	8001cc8 <HAL_GPIO_Init+0xec>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	e001      	b.n	8001ccc <HAL_GPIO_Init+0xf0>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3304      	adds	r3, #4
 8001ccc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	2bff      	cmp	r3, #255	; 0xff
 8001cd2:	d802      	bhi.n	8001cda <HAL_GPIO_Init+0xfe>
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	e002      	b.n	8001ce0 <HAL_GPIO_Init+0x104>
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	3b08      	subs	r3, #8
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	210f      	movs	r1, #15
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	401a      	ands	r2, r3
 8001cf2:	6a39      	ldr	r1, [r7, #32]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 8096 	beq.w	8001e3a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d0e:	4b59      	ldr	r3, [pc, #356]	; (8001e74 <HAL_GPIO_Init+0x298>)
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	4a58      	ldr	r2, [pc, #352]	; (8001e74 <HAL_GPIO_Init+0x298>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6193      	str	r3, [r2, #24]
 8001d1a:	4b56      	ldr	r3, [pc, #344]	; (8001e74 <HAL_GPIO_Init+0x298>)
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d26:	4a54      	ldr	r2, [pc, #336]	; (8001e78 <HAL_GPIO_Init+0x29c>)
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	089b      	lsrs	r3, r3, #2
 8001d2c:	3302      	adds	r3, #2
 8001d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d32:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	220f      	movs	r2, #15
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	4013      	ands	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a4b      	ldr	r2, [pc, #300]	; (8001e7c <HAL_GPIO_Init+0x2a0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d013      	beq.n	8001d7a <HAL_GPIO_Init+0x19e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a4a      	ldr	r2, [pc, #296]	; (8001e80 <HAL_GPIO_Init+0x2a4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00d      	beq.n	8001d76 <HAL_GPIO_Init+0x19a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a49      	ldr	r2, [pc, #292]	; (8001e84 <HAL_GPIO_Init+0x2a8>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d007      	beq.n	8001d72 <HAL_GPIO_Init+0x196>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a48      	ldr	r2, [pc, #288]	; (8001e88 <HAL_GPIO_Init+0x2ac>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d101      	bne.n	8001d6e <HAL_GPIO_Init+0x192>
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e006      	b.n	8001d7c <HAL_GPIO_Init+0x1a0>
 8001d6e:	2304      	movs	r3, #4
 8001d70:	e004      	b.n	8001d7c <HAL_GPIO_Init+0x1a0>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e002      	b.n	8001d7c <HAL_GPIO_Init+0x1a0>
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <HAL_GPIO_Init+0x1a0>
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d7e:	f002 0203 	and.w	r2, r2, #3
 8001d82:	0092      	lsls	r2, r2, #2
 8001d84:	4093      	lsls	r3, r2
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d8c:	493a      	ldr	r1, [pc, #232]	; (8001e78 <HAL_GPIO_Init+0x29c>)
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	089b      	lsrs	r3, r3, #2
 8001d92:	3302      	adds	r3, #2
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d006      	beq.n	8001db4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001da6:	4b39      	ldr	r3, [pc, #228]	; (8001e8c <HAL_GPIO_Init+0x2b0>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	4938      	ldr	r1, [pc, #224]	; (8001e8c <HAL_GPIO_Init+0x2b0>)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	600b      	str	r3, [r1, #0]
 8001db2:	e006      	b.n	8001dc2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001db4:	4b35      	ldr	r3, [pc, #212]	; (8001e8c <HAL_GPIO_Init+0x2b0>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	4933      	ldr	r1, [pc, #204]	; (8001e8c <HAL_GPIO_Init+0x2b0>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d006      	beq.n	8001ddc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dce:	4b2f      	ldr	r3, [pc, #188]	; (8001e8c <HAL_GPIO_Init+0x2b0>)
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	492e      	ldr	r1, [pc, #184]	; (8001e8c <HAL_GPIO_Init+0x2b0>)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	604b      	str	r3, [r1, #4]
 8001dda:	e006      	b.n	8001dea <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ddc:	4b2b      	ldr	r3, [pc, #172]	; (8001e8c <HAL_GPIO_Init+0x2b0>)
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	4929      	ldr	r1, [pc, #164]	; (8001e8c <HAL_GPIO_Init+0x2b0>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d006      	beq.n	8001e04 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001df6:	4b25      	ldr	r3, [pc, #148]	; (8001e8c <HAL_GPIO_Init+0x2b0>)
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	4924      	ldr	r1, [pc, #144]	; (8001e8c <HAL_GPIO_Init+0x2b0>)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	608b      	str	r3, [r1, #8]
 8001e02:	e006      	b.n	8001e12 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e04:	4b21      	ldr	r3, [pc, #132]	; (8001e8c <HAL_GPIO_Init+0x2b0>)
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	491f      	ldr	r1, [pc, #124]	; (8001e8c <HAL_GPIO_Init+0x2b0>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d006      	beq.n	8001e2c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e1e:	4b1b      	ldr	r3, [pc, #108]	; (8001e8c <HAL_GPIO_Init+0x2b0>)
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	491a      	ldr	r1, [pc, #104]	; (8001e8c <HAL_GPIO_Init+0x2b0>)
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	60cb      	str	r3, [r1, #12]
 8001e2a:	e006      	b.n	8001e3a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e2c:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <HAL_GPIO_Init+0x2b0>)
 8001e2e:	68da      	ldr	r2, [r3, #12]
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	4915      	ldr	r1, [pc, #84]	; (8001e8c <HAL_GPIO_Init+0x2b0>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f47f aed0 	bne.w	8001bf0 <HAL_GPIO_Init+0x14>
  }
}
 8001e50:	bf00      	nop
 8001e52:	372c      	adds	r7, #44	; 0x2c
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	10210000 	.word	0x10210000
 8001e60:	10110000 	.word	0x10110000
 8001e64:	10120000 	.word	0x10120000
 8001e68:	10310000 	.word	0x10310000
 8001e6c:	10320000 	.word	0x10320000
 8001e70:	10220000 	.word	0x10220000
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	40010800 	.word	0x40010800
 8001e80:	40010c00 	.word	0x40010c00
 8001e84:	40011000 	.word	0x40011000
 8001e88:	40011400 	.word	0x40011400
 8001e8c:	40010400 	.word	0x40010400

08001e90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	887b      	ldrh	r3, [r7, #2]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d002      	beq.n	8001eae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	73fb      	strb	r3, [r7, #15]
 8001eac:	e001      	b.n	8001eb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr

08001ebe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	807b      	strh	r3, [r7, #2]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ece:	787b      	ldrb	r3, [r7, #1]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ed4:	887a      	ldrh	r2, [r7, #2]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001eda:	e003      	b.n	8001ee4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001edc:	887b      	ldrh	r3, [r7, #2]
 8001ede:	041a      	lsls	r2, r3, #16
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	611a      	str	r2, [r3, #16]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr

08001eee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b085      	sub	sp, #20
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f00:	887a      	ldrh	r2, [r7, #2]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4013      	ands	r3, r2
 8001f06:	041a      	lsls	r2, r3, #16
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	43d9      	mvns	r1, r3
 8001f0c:	887b      	ldrh	r3, [r7, #2]
 8001f0e:	400b      	ands	r3, r1
 8001f10:	431a      	orrs	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	611a      	str	r2, [r3, #16]
}
 8001f16:	bf00      	nop
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e11f      	b.n	8002172 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d106      	bne.n	8001f4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff fb90 	bl	800166c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2224      	movs	r2, #36	; 0x24
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0201 	bic.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f84:	f001 f90e 	bl	80031a4 <HAL_RCC_GetPCLK1Freq>
 8001f88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4a7b      	ldr	r2, [pc, #492]	; (800217c <HAL_I2C_Init+0x25c>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d807      	bhi.n	8001fa4 <HAL_I2C_Init+0x84>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4a7a      	ldr	r2, [pc, #488]	; (8002180 <HAL_I2C_Init+0x260>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	bf94      	ite	ls
 8001f9c:	2301      	movls	r3, #1
 8001f9e:	2300      	movhi	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	e006      	b.n	8001fb2 <HAL_I2C_Init+0x92>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4a77      	ldr	r2, [pc, #476]	; (8002184 <HAL_I2C_Init+0x264>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	bf94      	ite	ls
 8001fac:	2301      	movls	r3, #1
 8001fae:	2300      	movhi	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e0db      	b.n	8002172 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4a72      	ldr	r2, [pc, #456]	; (8002188 <HAL_I2C_Init+0x268>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	0c9b      	lsrs	r3, r3, #18
 8001fc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4a64      	ldr	r2, [pc, #400]	; (800217c <HAL_I2C_Init+0x25c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d802      	bhi.n	8001ff4 <HAL_I2C_Init+0xd4>
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	e009      	b.n	8002008 <HAL_I2C_Init+0xe8>
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ffa:	fb02 f303 	mul.w	r3, r2, r3
 8001ffe:	4a63      	ldr	r2, [pc, #396]	; (800218c <HAL_I2C_Init+0x26c>)
 8002000:	fba2 2303 	umull	r2, r3, r2, r3
 8002004:	099b      	lsrs	r3, r3, #6
 8002006:	3301      	adds	r3, #1
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	430b      	orrs	r3, r1
 800200e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800201a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	4956      	ldr	r1, [pc, #344]	; (800217c <HAL_I2C_Init+0x25c>)
 8002024:	428b      	cmp	r3, r1
 8002026:	d80d      	bhi.n	8002044 <HAL_I2C_Init+0x124>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	1e59      	subs	r1, r3, #1
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	fbb1 f3f3 	udiv	r3, r1, r3
 8002036:	3301      	adds	r3, #1
 8002038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800203c:	2b04      	cmp	r3, #4
 800203e:	bf38      	it	cc
 8002040:	2304      	movcc	r3, #4
 8002042:	e04f      	b.n	80020e4 <HAL_I2C_Init+0x1c4>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d111      	bne.n	8002070 <HAL_I2C_Init+0x150>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1e58      	subs	r0, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6859      	ldr	r1, [r3, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	440b      	add	r3, r1
 800205a:	fbb0 f3f3 	udiv	r3, r0, r3
 800205e:	3301      	adds	r3, #1
 8002060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002064:	2b00      	cmp	r3, #0
 8002066:	bf0c      	ite	eq
 8002068:	2301      	moveq	r3, #1
 800206a:	2300      	movne	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	e012      	b.n	8002096 <HAL_I2C_Init+0x176>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	1e58      	subs	r0, r3, #1
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6859      	ldr	r1, [r3, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	0099      	lsls	r1, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	fbb0 f3f3 	udiv	r3, r0, r3
 8002086:	3301      	adds	r3, #1
 8002088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800208c:	2b00      	cmp	r3, #0
 800208e:	bf0c      	ite	eq
 8002090:	2301      	moveq	r3, #1
 8002092:	2300      	movne	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_I2C_Init+0x17e>
 800209a:	2301      	movs	r3, #1
 800209c:	e022      	b.n	80020e4 <HAL_I2C_Init+0x1c4>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10e      	bne.n	80020c4 <HAL_I2C_Init+0x1a4>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1e58      	subs	r0, r3, #1
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6859      	ldr	r1, [r3, #4]
 80020ae:	460b      	mov	r3, r1
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	440b      	add	r3, r1
 80020b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b8:	3301      	adds	r3, #1
 80020ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020c2:	e00f      	b.n	80020e4 <HAL_I2C_Init+0x1c4>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	1e58      	subs	r0, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6859      	ldr	r1, [r3, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	0099      	lsls	r1, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020da:	3301      	adds	r3, #1
 80020dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	6809      	ldr	r1, [r1, #0]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69da      	ldr	r2, [r3, #28]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002112:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6911      	ldr	r1, [r2, #16]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68d2      	ldr	r2, [r2, #12]
 800211e:	4311      	orrs	r1, r2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6812      	ldr	r2, [r2, #0]
 8002124:	430b      	orrs	r3, r1
 8002126:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695a      	ldr	r2, [r3, #20]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0201 	orr.w	r2, r2, #1
 8002152:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2220      	movs	r2, #32
 800215e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	000186a0 	.word	0x000186a0
 8002180:	001e847f 	.word	0x001e847f
 8002184:	003d08ff 	.word	0x003d08ff
 8002188:	431bde83 	.word	0x431bde83
 800218c:	10624dd3 	.word	0x10624dd3

08002190 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af02      	add	r7, sp, #8
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	607a      	str	r2, [r7, #4]
 800219a:	461a      	mov	r2, r3
 800219c:	460b      	mov	r3, r1
 800219e:	817b      	strh	r3, [r7, #10]
 80021a0:	4613      	mov	r3, r2
 80021a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021a4:	f7ff fbe0 	bl	8001968 <HAL_GetTick>
 80021a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b20      	cmp	r3, #32
 80021b4:	f040 80e0 	bne.w	8002378 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	2319      	movs	r3, #25
 80021be:	2201      	movs	r2, #1
 80021c0:	4970      	ldr	r1, [pc, #448]	; (8002384 <HAL_I2C_Master_Transmit+0x1f4>)
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 fa92 	bl	80026ec <I2C_WaitOnFlagUntilTimeout>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021ce:	2302      	movs	r3, #2
 80021d0:	e0d3      	b.n	800237a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d101      	bne.n	80021e0 <HAL_I2C_Master_Transmit+0x50>
 80021dc:	2302      	movs	r3, #2
 80021de:	e0cc      	b.n	800237a <HAL_I2C_Master_Transmit+0x1ea>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d007      	beq.n	8002206 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f042 0201 	orr.w	r2, r2, #1
 8002204:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002214:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2221      	movs	r2, #33	; 0x21
 800221a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2210      	movs	r2, #16
 8002222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	893a      	ldrh	r2, [r7, #8]
 8002236:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223c:	b29a      	uxth	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4a50      	ldr	r2, [pc, #320]	; (8002388 <HAL_I2C_Master_Transmit+0x1f8>)
 8002246:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002248:	8979      	ldrh	r1, [r7, #10]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	6a3a      	ldr	r2, [r7, #32]
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 f9ca 	bl	80025e8 <I2C_MasterRequestWrite>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e08d      	b.n	800237a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800225e:	2300      	movs	r3, #0
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002274:	e066      	b.n	8002344 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	6a39      	ldr	r1, [r7, #32]
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 fb0c 	bl	8002898 <I2C_WaitOnTXEFlagUntilTimeout>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00d      	beq.n	80022a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	2b04      	cmp	r3, #4
 800228c:	d107      	bne.n	800229e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800229c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e06b      	b.n	800237a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	781a      	ldrb	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022bc:	b29b      	uxth	r3, r3
 80022be:	3b01      	subs	r3, #1
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ca:	3b01      	subs	r3, #1
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d11b      	bne.n	8002318 <HAL_I2C_Master_Transmit+0x188>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d017      	beq.n	8002318 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	781a      	ldrb	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002302:	b29b      	uxth	r3, r3
 8002304:	3b01      	subs	r3, #1
 8002306:	b29a      	uxth	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002310:	3b01      	subs	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	6a39      	ldr	r1, [r7, #32]
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 fafc 	bl	800291a <I2C_WaitOnBTFFlagUntilTimeout>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00d      	beq.n	8002344 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	2b04      	cmp	r3, #4
 800232e:	d107      	bne.n	8002340 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800233e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e01a      	b.n	800237a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002348:	2b00      	cmp	r3, #0
 800234a:	d194      	bne.n	8002276 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800235a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	e000      	b.n	800237a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002378:	2302      	movs	r3, #2
  }
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	00100002 	.word	0x00100002
 8002388:	ffff0000 	.word	0xffff0000

0800238c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	; 0x28
 8002390:	af02      	add	r7, sp, #8
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	607a      	str	r2, [r7, #4]
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	460b      	mov	r3, r1
 800239a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800239c:	f7ff fae4 	bl	8001968 <HAL_GetTick>
 80023a0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80023a2:	2301      	movs	r3, #1
 80023a4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b20      	cmp	r3, #32
 80023b0:	f040 8111 	bne.w	80025d6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	2319      	movs	r3, #25
 80023ba:	2201      	movs	r2, #1
 80023bc:	4988      	ldr	r1, [pc, #544]	; (80025e0 <HAL_I2C_IsDeviceReady+0x254>)
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 f994 	bl	80026ec <I2C_WaitOnFlagUntilTimeout>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80023ca:	2302      	movs	r3, #2
 80023cc:	e104      	b.n	80025d8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_I2C_IsDeviceReady+0x50>
 80023d8:	2302      	movs	r3, #2
 80023da:	e0fd      	b.n	80025d8 <HAL_I2C_IsDeviceReady+0x24c>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d007      	beq.n	8002402 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f042 0201 	orr.w	r2, r2, #1
 8002400:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002410:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2224      	movs	r2, #36	; 0x24
 8002416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4a70      	ldr	r2, [pc, #448]	; (80025e4 <HAL_I2C_IsDeviceReady+0x258>)
 8002424:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002434:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2200      	movs	r2, #0
 800243e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 f952 	bl	80026ec <I2C_WaitOnFlagUntilTimeout>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00d      	beq.n	800246a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800245c:	d103      	bne.n	8002466 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002464:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e0b6      	b.n	80025d8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800246a:	897b      	ldrh	r3, [r7, #10]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	461a      	mov	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002478:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800247a:	f7ff fa75 	bl	8001968 <HAL_GetTick>
 800247e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b02      	cmp	r3, #2
 800248c:	bf0c      	ite	eq
 800248e:	2301      	moveq	r3, #1
 8002490:	2300      	movne	r3, #0
 8002492:	b2db      	uxtb	r3, r3
 8002494:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024a4:	bf0c      	ite	eq
 80024a6:	2301      	moveq	r3, #1
 80024a8:	2300      	movne	r3, #0
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80024ae:	e025      	b.n	80024fc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024b0:	f7ff fa5a 	bl	8001968 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d302      	bcc.n	80024c6 <HAL_I2C_IsDeviceReady+0x13a>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d103      	bne.n	80024ce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	22a0      	movs	r2, #160	; 0xa0
 80024ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b02      	cmp	r3, #2
 80024da:	bf0c      	ite	eq
 80024dc:	2301      	moveq	r3, #1
 80024de:	2300      	movne	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f2:	bf0c      	ite	eq
 80024f4:	2301      	moveq	r3, #1
 80024f6:	2300      	movne	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2ba0      	cmp	r3, #160	; 0xa0
 8002506:	d005      	beq.n	8002514 <HAL_I2C_IsDeviceReady+0x188>
 8002508:	7dfb      	ldrb	r3, [r7, #23]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d102      	bne.n	8002514 <HAL_I2C_IsDeviceReady+0x188>
 800250e:	7dbb      	ldrb	r3, [r7, #22]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0cd      	beq.n	80024b0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2220      	movs	r2, #32
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b02      	cmp	r3, #2
 8002528:	d129      	bne.n	800257e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002538:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	2319      	movs	r3, #25
 8002556:	2201      	movs	r2, #1
 8002558:	4921      	ldr	r1, [pc, #132]	; (80025e0 <HAL_I2C_IsDeviceReady+0x254>)
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 f8c6 	bl	80026ec <I2C_WaitOnFlagUntilTimeout>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e036      	b.n	80025d8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2220      	movs	r2, #32
 800256e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	e02c      	b.n	80025d8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800258c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002596:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	2319      	movs	r3, #25
 800259e:	2201      	movs	r2, #1
 80025a0:	490f      	ldr	r1, [pc, #60]	; (80025e0 <HAL_I2C_IsDeviceReady+0x254>)
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 f8a2 	bl	80026ec <I2C_WaitOnFlagUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e012      	b.n	80025d8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	3301      	adds	r3, #1
 80025b6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	429a      	cmp	r2, r3
 80025be:	f4ff af32 	bcc.w	8002426 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2220      	movs	r2, #32
 80025c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80025d6:	2302      	movs	r3, #2
  }
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3720      	adds	r7, #32
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	00100002 	.word	0x00100002
 80025e4:	ffff0000 	.word	0xffff0000

080025e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	607a      	str	r2, [r7, #4]
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	460b      	mov	r3, r1
 80025f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2b08      	cmp	r3, #8
 8002602:	d006      	beq.n	8002612 <I2C_MasterRequestWrite+0x2a>
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d003      	beq.n	8002612 <I2C_MasterRequestWrite+0x2a>
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002610:	d108      	bne.n	8002624 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	e00b      	b.n	800263c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002628:	2b12      	cmp	r3, #18
 800262a:	d107      	bne.n	800263c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800263a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f84f 	bl	80026ec <I2C_WaitOnFlagUntilTimeout>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00d      	beq.n	8002670 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002662:	d103      	bne.n	800266c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f44f 7200 	mov.w	r2, #512	; 0x200
 800266a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e035      	b.n	80026dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002678:	d108      	bne.n	800268c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800267a:	897b      	ldrh	r3, [r7, #10]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002688:	611a      	str	r2, [r3, #16]
 800268a:	e01b      	b.n	80026c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800268c:	897b      	ldrh	r3, [r7, #10]
 800268e:	11db      	asrs	r3, r3, #7
 8002690:	b2db      	uxtb	r3, r3
 8002692:	f003 0306 	and.w	r3, r3, #6
 8002696:	b2db      	uxtb	r3, r3
 8002698:	f063 030f 	orn	r3, r3, #15
 800269c:	b2da      	uxtb	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	490e      	ldr	r1, [pc, #56]	; (80026e4 <I2C_MasterRequestWrite+0xfc>)
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 f875 	bl	800279a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e010      	b.n	80026dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026ba:	897b      	ldrh	r3, [r7, #10]
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	4907      	ldr	r1, [pc, #28]	; (80026e8 <I2C_MasterRequestWrite+0x100>)
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 f865 	bl	800279a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	00010008 	.word	0x00010008
 80026e8:	00010002 	.word	0x00010002

080026ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	4613      	mov	r3, r2
 80026fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026fc:	e025      	b.n	800274a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002704:	d021      	beq.n	800274a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002706:	f7ff f92f 	bl	8001968 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d302      	bcc.n	800271c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d116      	bne.n	800274a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f043 0220 	orr.w	r2, r3, #32
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e023      	b.n	8002792 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	0c1b      	lsrs	r3, r3, #16
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b01      	cmp	r3, #1
 8002752:	d10d      	bne.n	8002770 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	43da      	mvns	r2, r3
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	4013      	ands	r3, r2
 8002760:	b29b      	uxth	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	bf0c      	ite	eq
 8002766:	2301      	moveq	r3, #1
 8002768:	2300      	movne	r3, #0
 800276a:	b2db      	uxtb	r3, r3
 800276c:	461a      	mov	r2, r3
 800276e:	e00c      	b.n	800278a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	43da      	mvns	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	4013      	ands	r3, r2
 800277c:	b29b      	uxth	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	bf0c      	ite	eq
 8002782:	2301      	moveq	r3, #1
 8002784:	2300      	movne	r3, #0
 8002786:	b2db      	uxtb	r3, r3
 8002788:	461a      	mov	r2, r3
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	429a      	cmp	r2, r3
 800278e:	d0b6      	beq.n	80026fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b084      	sub	sp, #16
 800279e:	af00      	add	r7, sp, #0
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	607a      	str	r2, [r7, #4]
 80027a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027a8:	e051      	b.n	800284e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b8:	d123      	bne.n	8002802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2220      	movs	r2, #32
 80027de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f043 0204 	orr.w	r2, r3, #4
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e046      	b.n	8002890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002808:	d021      	beq.n	800284e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800280a:	f7ff f8ad 	bl	8001968 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	429a      	cmp	r2, r3
 8002818:	d302      	bcc.n	8002820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d116      	bne.n	800284e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2220      	movs	r2, #32
 800282a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f043 0220 	orr.w	r2, r3, #32
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e020      	b.n	8002890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	0c1b      	lsrs	r3, r3, #16
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b01      	cmp	r3, #1
 8002856:	d10c      	bne.n	8002872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	43da      	mvns	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	4013      	ands	r3, r2
 8002864:	b29b      	uxth	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	bf14      	ite	ne
 800286a:	2301      	movne	r3, #1
 800286c:	2300      	moveq	r3, #0
 800286e:	b2db      	uxtb	r3, r3
 8002870:	e00b      	b.n	800288a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	43da      	mvns	r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	4013      	ands	r3, r2
 800287e:	b29b      	uxth	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	bf14      	ite	ne
 8002884:	2301      	movne	r3, #1
 8002886:	2300      	moveq	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d18d      	bne.n	80027aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028a4:	e02d      	b.n	8002902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 f878 	bl	800299c <I2C_IsAcknowledgeFailed>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e02d      	b.n	8002912 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028bc:	d021      	beq.n	8002902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028be:	f7ff f853 	bl	8001968 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d302      	bcc.n	80028d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d116      	bne.n	8002902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2220      	movs	r2, #32
 80028de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f043 0220 	orr.w	r2, r3, #32
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e007      	b.n	8002912 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290c:	2b80      	cmp	r3, #128	; 0x80
 800290e:	d1ca      	bne.n	80028a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b084      	sub	sp, #16
 800291e:	af00      	add	r7, sp, #0
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002926:	e02d      	b.n	8002984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 f837 	bl	800299c <I2C_IsAcknowledgeFailed>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e02d      	b.n	8002994 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293e:	d021      	beq.n	8002984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002940:	f7ff f812 	bl	8001968 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	429a      	cmp	r2, r3
 800294e:	d302      	bcc.n	8002956 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d116      	bne.n	8002984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	f043 0220 	orr.w	r2, r3, #32
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e007      	b.n	8002994 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	2b04      	cmp	r3, #4
 8002990:	d1ca      	bne.n	8002928 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b2:	d11b      	bne.n	80029ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	f043 0204 	orr.w	r2, r3, #4
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e000      	b.n	80029ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e26c      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 8087 	beq.w	8002b26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a18:	4b92      	ldr	r3, [pc, #584]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 030c 	and.w	r3, r3, #12
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d00c      	beq.n	8002a3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a24:	4b8f      	ldr	r3, [pc, #572]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 030c 	and.w	r3, r3, #12
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d112      	bne.n	8002a56 <HAL_RCC_OscConfig+0x5e>
 8002a30:	4b8c      	ldr	r3, [pc, #560]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3c:	d10b      	bne.n	8002a56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3e:	4b89      	ldr	r3, [pc, #548]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d06c      	beq.n	8002b24 <HAL_RCC_OscConfig+0x12c>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d168      	bne.n	8002b24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e246      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a5e:	d106      	bne.n	8002a6e <HAL_RCC_OscConfig+0x76>
 8002a60:	4b80      	ldr	r3, [pc, #512]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a7f      	ldr	r2, [pc, #508]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	e02e      	b.n	8002acc <HAL_RCC_OscConfig+0xd4>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10c      	bne.n	8002a90 <HAL_RCC_OscConfig+0x98>
 8002a76:	4b7b      	ldr	r3, [pc, #492]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a7a      	ldr	r2, [pc, #488]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	4b78      	ldr	r3, [pc, #480]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a77      	ldr	r2, [pc, #476]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	e01d      	b.n	8002acc <HAL_RCC_OscConfig+0xd4>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a98:	d10c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0xbc>
 8002a9a:	4b72      	ldr	r3, [pc, #456]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a71      	ldr	r2, [pc, #452]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	4b6f      	ldr	r3, [pc, #444]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a6e      	ldr	r2, [pc, #440]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	e00b      	b.n	8002acc <HAL_RCC_OscConfig+0xd4>
 8002ab4:	4b6b      	ldr	r3, [pc, #428]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a6a      	ldr	r2, [pc, #424]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002abe:	6013      	str	r3, [r2, #0]
 8002ac0:	4b68      	ldr	r3, [pc, #416]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a67      	ldr	r2, [pc, #412]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d013      	beq.n	8002afc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad4:	f7fe ff48 	bl	8001968 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002adc:	f7fe ff44 	bl	8001968 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b64      	cmp	r3, #100	; 0x64
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e1fa      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aee:	4b5d      	ldr	r3, [pc, #372]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0xe4>
 8002afa:	e014      	b.n	8002b26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afc:	f7fe ff34 	bl	8001968 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b04:	f7fe ff30 	bl	8001968 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b64      	cmp	r3, #100	; 0x64
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e1e6      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b16:	4b53      	ldr	r3, [pc, #332]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x10c>
 8002b22:	e000      	b.n	8002b26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d063      	beq.n	8002bfa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b32:	4b4c      	ldr	r3, [pc, #304]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 030c 	and.w	r3, r3, #12
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00b      	beq.n	8002b56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b3e:	4b49      	ldr	r3, [pc, #292]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d11c      	bne.n	8002b84 <HAL_RCC_OscConfig+0x18c>
 8002b4a:	4b46      	ldr	r3, [pc, #280]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d116      	bne.n	8002b84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b56:	4b43      	ldr	r3, [pc, #268]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d005      	beq.n	8002b6e <HAL_RCC_OscConfig+0x176>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d001      	beq.n	8002b6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e1ba      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6e:	4b3d      	ldr	r3, [pc, #244]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	4939      	ldr	r1, [pc, #228]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b82:	e03a      	b.n	8002bfa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d020      	beq.n	8002bce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b8c:	4b36      	ldr	r3, [pc, #216]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b92:	f7fe fee9 	bl	8001968 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b9a:	f7fe fee5 	bl	8001968 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e19b      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bac:	4b2d      	ldr	r3, [pc, #180]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f0      	beq.n	8002b9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb8:	4b2a      	ldr	r3, [pc, #168]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4927      	ldr	r1, [pc, #156]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	600b      	str	r3, [r1, #0]
 8002bcc:	e015      	b.n	8002bfa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bce:	4b26      	ldr	r3, [pc, #152]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd4:	f7fe fec8 	bl	8001968 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bdc:	f7fe fec4 	bl	8001968 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e17a      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bee:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d03a      	beq.n	8002c7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d019      	beq.n	8002c42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c0e:	4b17      	ldr	r3, [pc, #92]	; (8002c6c <HAL_RCC_OscConfig+0x274>)
 8002c10:	2201      	movs	r2, #1
 8002c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c14:	f7fe fea8 	bl	8001968 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c1c:	f7fe fea4 	bl	8001968 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e15a      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c3a:	2001      	movs	r0, #1
 8002c3c:	f000 fac6 	bl	80031cc <RCC_Delay>
 8002c40:	e01c      	b.n	8002c7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c42:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <HAL_RCC_OscConfig+0x274>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c48:	f7fe fe8e 	bl	8001968 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c4e:	e00f      	b.n	8002c70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c50:	f7fe fe8a 	bl	8001968 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d908      	bls.n	8002c70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e140      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
 8002c62:	bf00      	nop
 8002c64:	40021000 	.word	0x40021000
 8002c68:	42420000 	.word	0x42420000
 8002c6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c70:	4b9e      	ldr	r3, [pc, #632]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1e9      	bne.n	8002c50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 80a6 	beq.w	8002dd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c8e:	4b97      	ldr	r3, [pc, #604]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10d      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c9a:	4b94      	ldr	r3, [pc, #592]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	4a93      	ldr	r2, [pc, #588]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	61d3      	str	r3, [r2, #28]
 8002ca6:	4b91      	ldr	r3, [pc, #580]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	60bb      	str	r3, [r7, #8]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb6:	4b8e      	ldr	r3, [pc, #568]	; (8002ef0 <HAL_RCC_OscConfig+0x4f8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d118      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cc2:	4b8b      	ldr	r3, [pc, #556]	; (8002ef0 <HAL_RCC_OscConfig+0x4f8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a8a      	ldr	r2, [pc, #552]	; (8002ef0 <HAL_RCC_OscConfig+0x4f8>)
 8002cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cce:	f7fe fe4b 	bl	8001968 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd6:	f7fe fe47 	bl	8001968 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b64      	cmp	r3, #100	; 0x64
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e0fd      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce8:	4b81      	ldr	r3, [pc, #516]	; (8002ef0 <HAL_RCC_OscConfig+0x4f8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0f0      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d106      	bne.n	8002d0a <HAL_RCC_OscConfig+0x312>
 8002cfc:	4b7b      	ldr	r3, [pc, #492]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	4a7a      	ldr	r2, [pc, #488]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002d02:	f043 0301 	orr.w	r3, r3, #1
 8002d06:	6213      	str	r3, [r2, #32]
 8002d08:	e02d      	b.n	8002d66 <HAL_RCC_OscConfig+0x36e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10c      	bne.n	8002d2c <HAL_RCC_OscConfig+0x334>
 8002d12:	4b76      	ldr	r3, [pc, #472]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	4a75      	ldr	r2, [pc, #468]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002d18:	f023 0301 	bic.w	r3, r3, #1
 8002d1c:	6213      	str	r3, [r2, #32]
 8002d1e:	4b73      	ldr	r3, [pc, #460]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	4a72      	ldr	r2, [pc, #456]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002d24:	f023 0304 	bic.w	r3, r3, #4
 8002d28:	6213      	str	r3, [r2, #32]
 8002d2a:	e01c      	b.n	8002d66 <HAL_RCC_OscConfig+0x36e>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	2b05      	cmp	r3, #5
 8002d32:	d10c      	bne.n	8002d4e <HAL_RCC_OscConfig+0x356>
 8002d34:	4b6d      	ldr	r3, [pc, #436]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	4a6c      	ldr	r2, [pc, #432]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002d3a:	f043 0304 	orr.w	r3, r3, #4
 8002d3e:	6213      	str	r3, [r2, #32]
 8002d40:	4b6a      	ldr	r3, [pc, #424]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	4a69      	ldr	r2, [pc, #420]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	6213      	str	r3, [r2, #32]
 8002d4c:	e00b      	b.n	8002d66 <HAL_RCC_OscConfig+0x36e>
 8002d4e:	4b67      	ldr	r3, [pc, #412]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	4a66      	ldr	r2, [pc, #408]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002d54:	f023 0301 	bic.w	r3, r3, #1
 8002d58:	6213      	str	r3, [r2, #32]
 8002d5a:	4b64      	ldr	r3, [pc, #400]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	4a63      	ldr	r2, [pc, #396]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002d60:	f023 0304 	bic.w	r3, r3, #4
 8002d64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d015      	beq.n	8002d9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6e:	f7fe fdfb 	bl	8001968 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d74:	e00a      	b.n	8002d8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d76:	f7fe fdf7 	bl	8001968 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e0ab      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8c:	4b57      	ldr	r3, [pc, #348]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0ee      	beq.n	8002d76 <HAL_RCC_OscConfig+0x37e>
 8002d98:	e014      	b.n	8002dc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d9a:	f7fe fde5 	bl	8001968 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da0:	e00a      	b.n	8002db8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da2:	f7fe fde1 	bl	8001968 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e095      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db8:	4b4c      	ldr	r3, [pc, #304]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1ee      	bne.n	8002da2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dc4:	7dfb      	ldrb	r3, [r7, #23]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d105      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dca:	4b48      	ldr	r3, [pc, #288]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	4a47      	ldr	r2, [pc, #284]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 8081 	beq.w	8002ee2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002de0:	4b42      	ldr	r3, [pc, #264]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 030c 	and.w	r3, r3, #12
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d061      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d146      	bne.n	8002e82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df4:	4b3f      	ldr	r3, [pc, #252]	; (8002ef4 <HAL_RCC_OscConfig+0x4fc>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfa:	f7fe fdb5 	bl	8001968 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e02:	f7fe fdb1 	bl	8001968 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e067      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e14:	4b35      	ldr	r3, [pc, #212]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1f0      	bne.n	8002e02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e28:	d108      	bne.n	8002e3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e2a:	4b30      	ldr	r3, [pc, #192]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	492d      	ldr	r1, [pc, #180]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e3c:	4b2b      	ldr	r3, [pc, #172]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a19      	ldr	r1, [r3, #32]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	4927      	ldr	r1, [pc, #156]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e54:	4b27      	ldr	r3, [pc, #156]	; (8002ef4 <HAL_RCC_OscConfig+0x4fc>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5a:	f7fe fd85 	bl	8001968 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e62:	f7fe fd81 	bl	8001968 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e037      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e74:	4b1d      	ldr	r3, [pc, #116]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0f0      	beq.n	8002e62 <HAL_RCC_OscConfig+0x46a>
 8002e80:	e02f      	b.n	8002ee2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e82:	4b1c      	ldr	r3, [pc, #112]	; (8002ef4 <HAL_RCC_OscConfig+0x4fc>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e88:	f7fe fd6e 	bl	8001968 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e90:	f7fe fd6a 	bl	8001968 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e020      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea2:	4b12      	ldr	r3, [pc, #72]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0x498>
 8002eae:	e018      	b.n	8002ee2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e013      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d106      	bne.n	8002ede <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d001      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	40007000 	.word	0x40007000
 8002ef4:	42420060 	.word	0x42420060

08002ef8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0d0      	b.n	80030ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f0c:	4b6a      	ldr	r3, [pc, #424]	; (80030b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d910      	bls.n	8002f3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1a:	4b67      	ldr	r3, [pc, #412]	; (80030b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f023 0207 	bic.w	r2, r3, #7
 8002f22:	4965      	ldr	r1, [pc, #404]	; (80030b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2a:	4b63      	ldr	r3, [pc, #396]	; (80030b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d001      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0b8      	b.n	80030ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d020      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d005      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f54:	4b59      	ldr	r3, [pc, #356]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	4a58      	ldr	r2, [pc, #352]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8002f5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0308 	and.w	r3, r3, #8
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f6c:	4b53      	ldr	r3, [pc, #332]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	4a52      	ldr	r2, [pc, #328]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8002f72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f78:	4b50      	ldr	r3, [pc, #320]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	494d      	ldr	r1, [pc, #308]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d040      	beq.n	8003018 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d107      	bne.n	8002fae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9e:	4b47      	ldr	r3, [pc, #284]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d115      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e07f      	b.n	80030ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb6:	4b41      	ldr	r3, [pc, #260]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d109      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e073      	b.n	80030ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc6:	4b3d      	ldr	r3, [pc, #244]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e06b      	b.n	80030ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fd6:	4b39      	ldr	r3, [pc, #228]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f023 0203 	bic.w	r2, r3, #3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	4936      	ldr	r1, [pc, #216]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe8:	f7fe fcbe 	bl	8001968 <HAL_GetTick>
 8002fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fee:	e00a      	b.n	8003006 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff0:	f7fe fcba 	bl	8001968 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e053      	b.n	80030ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003006:	4b2d      	ldr	r3, [pc, #180]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 020c 	and.w	r2, r3, #12
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	429a      	cmp	r2, r3
 8003016:	d1eb      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003018:	4b27      	ldr	r3, [pc, #156]	; (80030b8 <HAL_RCC_ClockConfig+0x1c0>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d210      	bcs.n	8003048 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003026:	4b24      	ldr	r3, [pc, #144]	; (80030b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f023 0207 	bic.w	r2, r3, #7
 800302e:	4922      	ldr	r1, [pc, #136]	; (80030b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	4313      	orrs	r3, r2
 8003034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003036:	4b20      	ldr	r3, [pc, #128]	; (80030b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	429a      	cmp	r2, r3
 8003042:	d001      	beq.n	8003048 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e032      	b.n	80030ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d008      	beq.n	8003066 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003054:	4b19      	ldr	r3, [pc, #100]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	4916      	ldr	r1, [pc, #88]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8003062:	4313      	orrs	r3, r2
 8003064:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d009      	beq.n	8003086 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003072:	4b12      	ldr	r3, [pc, #72]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	490e      	ldr	r1, [pc, #56]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8003082:	4313      	orrs	r3, r2
 8003084:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003086:	f000 f821 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 800308a:	4601      	mov	r1, r0
 800308c:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	4a0a      	ldr	r2, [pc, #40]	; (80030c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003098:	5cd3      	ldrb	r3, [r2, r3]
 800309a:	fa21 f303 	lsr.w	r3, r1, r3
 800309e:	4a09      	ldr	r2, [pc, #36]	; (80030c4 <HAL_RCC_ClockConfig+0x1cc>)
 80030a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030a2:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <HAL_RCC_ClockConfig+0x1d0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fe fc1c 	bl	80018e4 <HAL_InitTick>

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40022000 	.word	0x40022000
 80030bc:	40021000 	.word	0x40021000
 80030c0:	0800645c 	.word	0x0800645c
 80030c4:	20000010 	.word	0x20000010
 80030c8:	20000014 	.word	0x20000014

080030cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030cc:	b490      	push	{r4, r7}
 80030ce:	b08a      	sub	sp, #40	; 0x28
 80030d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030d2:	4b2a      	ldr	r3, [pc, #168]	; (800317c <HAL_RCC_GetSysClockFreq+0xb0>)
 80030d4:	1d3c      	adds	r4, r7, #4
 80030d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030dc:	4b28      	ldr	r3, [pc, #160]	; (8003180 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	2300      	movs	r3, #0
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	2300      	movs	r3, #0
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030f6:	4b23      	ldr	r3, [pc, #140]	; (8003184 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f003 030c 	and.w	r3, r3, #12
 8003102:	2b04      	cmp	r3, #4
 8003104:	d002      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0x40>
 8003106:	2b08      	cmp	r3, #8
 8003108:	d003      	beq.n	8003112 <HAL_RCC_GetSysClockFreq+0x46>
 800310a:	e02d      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800310c:	4b1e      	ldr	r3, [pc, #120]	; (8003188 <HAL_RCC_GetSysClockFreq+0xbc>)
 800310e:	623b      	str	r3, [r7, #32]
      break;
 8003110:	e02d      	b.n	800316e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	0c9b      	lsrs	r3, r3, #18
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800311e:	4413      	add	r3, r2
 8003120:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003124:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d013      	beq.n	8003158 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003130:	4b14      	ldr	r3, [pc, #80]	; (8003184 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	0c5b      	lsrs	r3, r3, #17
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800313e:	4413      	add	r3, r2
 8003140:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003144:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	4a0f      	ldr	r2, [pc, #60]	; (8003188 <HAL_RCC_GetSysClockFreq+0xbc>)
 800314a:	fb02 f203 	mul.w	r2, r2, r3
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	fbb2 f3f3 	udiv	r3, r2, r3
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
 8003156:	e004      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	4a0c      	ldr	r2, [pc, #48]	; (800318c <HAL_RCC_GetSysClockFreq+0xc0>)
 800315c:	fb02 f303 	mul.w	r3, r2, r3
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	623b      	str	r3, [r7, #32]
      break;
 8003166:	e002      	b.n	800316e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003168:	4b07      	ldr	r3, [pc, #28]	; (8003188 <HAL_RCC_GetSysClockFreq+0xbc>)
 800316a:	623b      	str	r3, [r7, #32]
      break;
 800316c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800316e:	6a3b      	ldr	r3, [r7, #32]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3728      	adds	r7, #40	; 0x28
 8003174:	46bd      	mov	sp, r7
 8003176:	bc90      	pop	{r4, r7}
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	08004514 	.word	0x08004514
 8003180:	08004524 	.word	0x08004524
 8003184:	40021000 	.word	0x40021000
 8003188:	007a1200 	.word	0x007a1200
 800318c:	003d0900 	.word	0x003d0900

08003190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003194:	4b02      	ldr	r3, [pc, #8]	; (80031a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003196:	681b      	ldr	r3, [r3, #0]
}
 8003198:	4618      	mov	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr
 80031a0:	20000010 	.word	0x20000010

080031a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031a8:	f7ff fff2 	bl	8003190 <HAL_RCC_GetHCLKFreq>
 80031ac:	4601      	mov	r1, r0
 80031ae:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	0a1b      	lsrs	r3, r3, #8
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	4a03      	ldr	r2, [pc, #12]	; (80031c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ba:	5cd3      	ldrb	r3, [r2, r3]
 80031bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40021000 	.word	0x40021000
 80031c8:	0800646c 	.word	0x0800646c

080031cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031d4:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <RCC_Delay+0x34>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a0a      	ldr	r2, [pc, #40]	; (8003204 <RCC_Delay+0x38>)
 80031da:	fba2 2303 	umull	r2, r3, r2, r3
 80031de:	0a5b      	lsrs	r3, r3, #9
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	fb02 f303 	mul.w	r3, r2, r3
 80031e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031e8:	bf00      	nop
  }
  while (Delay --);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	1e5a      	subs	r2, r3, #1
 80031ee:	60fa      	str	r2, [r7, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1f9      	bne.n	80031e8 <RCC_Delay+0x1c>
}
 80031f4:	bf00      	nop
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	20000010 	.word	0x20000010
 8003204:	10624dd3 	.word	0x10624dd3

08003208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e041      	b.n	800329e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d106      	bne.n	8003234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7fe fa5a 	bl	80016e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3304      	adds	r3, #4
 8003244:	4619      	mov	r1, r3
 8003246:	4610      	mov	r0, r2
 8003248:	f000 fa64 	bl	8003714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
	...

080032a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d001      	beq.n	80032c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e03a      	b.n	8003336 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a18      	ldr	r2, [pc, #96]	; (8003340 <HAL_TIM_Base_Start_IT+0x98>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d00e      	beq.n	8003300 <HAL_TIM_Base_Start_IT+0x58>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ea:	d009      	beq.n	8003300 <HAL_TIM_Base_Start_IT+0x58>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a14      	ldr	r2, [pc, #80]	; (8003344 <HAL_TIM_Base_Start_IT+0x9c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d004      	beq.n	8003300 <HAL_TIM_Base_Start_IT+0x58>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a13      	ldr	r2, [pc, #76]	; (8003348 <HAL_TIM_Base_Start_IT+0xa0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d111      	bne.n	8003324 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b06      	cmp	r3, #6
 8003310:	d010      	beq.n	8003334 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 0201 	orr.w	r2, r2, #1
 8003320:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003322:	e007      	b.n	8003334 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr
 8003340:	40012c00 	.word	0x40012c00
 8003344:	40000400 	.word	0x40000400
 8003348:	40000800 	.word	0x40000800

0800334c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b02      	cmp	r3, #2
 8003360:	d122      	bne.n	80033a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b02      	cmp	r3, #2
 800336e:	d11b      	bne.n	80033a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f06f 0202 	mvn.w	r2, #2
 8003378:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f9a4 	bl	80036dc <HAL_TIM_IC_CaptureCallback>
 8003394:	e005      	b.n	80033a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f997 	bl	80036ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f9a6 	bl	80036ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f003 0304 	and.w	r3, r3, #4
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d122      	bne.n	80033fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	d11b      	bne.n	80033fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f06f 0204 	mvn.w	r2, #4
 80033cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2202      	movs	r2, #2
 80033d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f97a 	bl	80036dc <HAL_TIM_IC_CaptureCallback>
 80033e8:	e005      	b.n	80033f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f96d 	bl	80036ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f97c 	bl	80036ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b08      	cmp	r3, #8
 8003408:	d122      	bne.n	8003450 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b08      	cmp	r3, #8
 8003416:	d11b      	bne.n	8003450 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f06f 0208 	mvn.w	r2, #8
 8003420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2204      	movs	r2, #4
 8003426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f950 	bl	80036dc <HAL_TIM_IC_CaptureCallback>
 800343c:	e005      	b.n	800344a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f943 	bl	80036ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f952 	bl	80036ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	f003 0310 	and.w	r3, r3, #16
 800345a:	2b10      	cmp	r3, #16
 800345c:	d122      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f003 0310 	and.w	r3, r3, #16
 8003468:	2b10      	cmp	r3, #16
 800346a:	d11b      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f06f 0210 	mvn.w	r2, #16
 8003474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2208      	movs	r2, #8
 800347a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f926 	bl	80036dc <HAL_TIM_IC_CaptureCallback>
 8003490:	e005      	b.n	800349e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f919 	bl	80036ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 f928 	bl	80036ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d10e      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d107      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0201 	mvn.w	r2, #1
 80034c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fd fc0a 	bl	8000ce4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034da:	2b80      	cmp	r3, #128	; 0x80
 80034dc:	d10e      	bne.n	80034fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e8:	2b80      	cmp	r3, #128	; 0x80
 80034ea:	d107      	bne.n	80034fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 fa6b 	bl	80039d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003506:	2b40      	cmp	r3, #64	; 0x40
 8003508:	d10e      	bne.n	8003528 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003514:	2b40      	cmp	r3, #64	; 0x40
 8003516:	d107      	bne.n	8003528 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f8ec 	bl	8003700 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f003 0320 	and.w	r3, r3, #32
 8003532:	2b20      	cmp	r3, #32
 8003534:	d10e      	bne.n	8003554 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f003 0320 	and.w	r3, r3, #32
 8003540:	2b20      	cmp	r3, #32
 8003542:	d107      	bne.n	8003554 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f06f 0220 	mvn.w	r2, #32
 800354c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 fa36 	bl	80039c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003554:	bf00      	nop
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_TIM_ConfigClockSource+0x18>
 8003570:	2302      	movs	r3, #2
 8003572:	e0a6      	b.n	80036c2 <HAL_TIM_ConfigClockSource+0x166>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2202      	movs	r2, #2
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003592:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800359a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b40      	cmp	r3, #64	; 0x40
 80035aa:	d067      	beq.n	800367c <HAL_TIM_ConfigClockSource+0x120>
 80035ac:	2b40      	cmp	r3, #64	; 0x40
 80035ae:	d80b      	bhi.n	80035c8 <HAL_TIM_ConfigClockSource+0x6c>
 80035b0:	2b10      	cmp	r3, #16
 80035b2:	d073      	beq.n	800369c <HAL_TIM_ConfigClockSource+0x140>
 80035b4:	2b10      	cmp	r3, #16
 80035b6:	d802      	bhi.n	80035be <HAL_TIM_ConfigClockSource+0x62>
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d06f      	beq.n	800369c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80035bc:	e078      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035be:	2b20      	cmp	r3, #32
 80035c0:	d06c      	beq.n	800369c <HAL_TIM_ConfigClockSource+0x140>
 80035c2:	2b30      	cmp	r3, #48	; 0x30
 80035c4:	d06a      	beq.n	800369c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80035c6:	e073      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035c8:	2b70      	cmp	r3, #112	; 0x70
 80035ca:	d00d      	beq.n	80035e8 <HAL_TIM_ConfigClockSource+0x8c>
 80035cc:	2b70      	cmp	r3, #112	; 0x70
 80035ce:	d804      	bhi.n	80035da <HAL_TIM_ConfigClockSource+0x7e>
 80035d0:	2b50      	cmp	r3, #80	; 0x50
 80035d2:	d033      	beq.n	800363c <HAL_TIM_ConfigClockSource+0xe0>
 80035d4:	2b60      	cmp	r3, #96	; 0x60
 80035d6:	d041      	beq.n	800365c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80035d8:	e06a      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035de:	d066      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0x152>
 80035e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035e4:	d017      	beq.n	8003616 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80035e6:	e063      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6818      	ldr	r0, [r3, #0]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	6899      	ldr	r1, [r3, #8]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f000 f965 	bl	80038c6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800360a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	609a      	str	r2, [r3, #8]
      break;
 8003614:	e04c      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6818      	ldr	r0, [r3, #0]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	6899      	ldr	r1, [r3, #8]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f000 f94e 	bl	80038c6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003638:	609a      	str	r2, [r3, #8]
      break;
 800363a:	e039      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	6859      	ldr	r1, [r3, #4]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	461a      	mov	r2, r3
 800364a:	f000 f8c5 	bl	80037d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2150      	movs	r1, #80	; 0x50
 8003654:	4618      	mov	r0, r3
 8003656:	f000 f91c 	bl	8003892 <TIM_ITRx_SetConfig>
      break;
 800365a:	e029      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6818      	ldr	r0, [r3, #0]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	6859      	ldr	r1, [r3, #4]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	461a      	mov	r2, r3
 800366a:	f000 f8e3 	bl	8003834 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2160      	movs	r1, #96	; 0x60
 8003674:	4618      	mov	r0, r3
 8003676:	f000 f90c 	bl	8003892 <TIM_ITRx_SetConfig>
      break;
 800367a:	e019      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6818      	ldr	r0, [r3, #0]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	6859      	ldr	r1, [r3, #4]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	461a      	mov	r2, r3
 800368a:	f000 f8a5 	bl	80037d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2140      	movs	r1, #64	; 0x40
 8003694:	4618      	mov	r0, r3
 8003696:	f000 f8fc 	bl	8003892 <TIM_ITRx_SetConfig>
      break;
 800369a:	e009      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4619      	mov	r1, r3
 80036a6:	4610      	mov	r0, r2
 80036a8:	f000 f8f3 	bl	8003892 <TIM_ITRx_SetConfig>
        break;
 80036ac:	e000      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80036ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr

080036dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bc80      	pop	{r7}
 80036ec:	4770      	bx	lr

080036ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr

08003700 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	bc80      	pop	{r7}
 8003710:	4770      	bx	lr
	...

08003714 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a29      	ldr	r2, [pc, #164]	; (80037cc <TIM_Base_SetConfig+0xb8>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d00b      	beq.n	8003744 <TIM_Base_SetConfig+0x30>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003732:	d007      	beq.n	8003744 <TIM_Base_SetConfig+0x30>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a26      	ldr	r2, [pc, #152]	; (80037d0 <TIM_Base_SetConfig+0xbc>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d003      	beq.n	8003744 <TIM_Base_SetConfig+0x30>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a25      	ldr	r2, [pc, #148]	; (80037d4 <TIM_Base_SetConfig+0xc0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d108      	bne.n	8003756 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a1c      	ldr	r2, [pc, #112]	; (80037cc <TIM_Base_SetConfig+0xb8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d00b      	beq.n	8003776 <TIM_Base_SetConfig+0x62>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003764:	d007      	beq.n	8003776 <TIM_Base_SetConfig+0x62>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a19      	ldr	r2, [pc, #100]	; (80037d0 <TIM_Base_SetConfig+0xbc>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d003      	beq.n	8003776 <TIM_Base_SetConfig+0x62>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a18      	ldr	r2, [pc, #96]	; (80037d4 <TIM_Base_SetConfig+0xc0>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d108      	bne.n	8003788 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800377c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	4313      	orrs	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	4313      	orrs	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a07      	ldr	r2, [pc, #28]	; (80037cc <TIM_Base_SetConfig+0xb8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d103      	bne.n	80037bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	691a      	ldr	r2, [r3, #16]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	615a      	str	r2, [r3, #20]
}
 80037c2:	bf00      	nop
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bc80      	pop	{r7}
 80037ca:	4770      	bx	lr
 80037cc:	40012c00 	.word	0x40012c00
 80037d0:	40000400 	.word	0x40000400
 80037d4:	40000800 	.word	0x40000800

080037d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	f023 0201 	bic.w	r2, r3, #1
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	011b      	lsls	r3, r3, #4
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4313      	orrs	r3, r2
 800380c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f023 030a 	bic.w	r3, r3, #10
 8003814:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	4313      	orrs	r3, r2
 800381c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	621a      	str	r2, [r3, #32]
}
 800382a:	bf00      	nop
 800382c:	371c      	adds	r7, #28
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr

08003834 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	f023 0210 	bic.w	r2, r3, #16
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800385e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	031b      	lsls	r3, r3, #12
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	4313      	orrs	r3, r2
 8003868:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003870:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	4313      	orrs	r3, r2
 800387a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	621a      	str	r2, [r3, #32]
}
 8003888:	bf00      	nop
 800388a:	371c      	adds	r7, #28
 800388c:	46bd      	mov	sp, r7
 800388e:	bc80      	pop	{r7}
 8003890:	4770      	bx	lr

08003892 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003892:	b480      	push	{r7}
 8003894:	b085      	sub	sp, #20
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f043 0307 	orr.w	r3, r3, #7
 80038b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	609a      	str	r2, [r3, #8]
}
 80038bc:	bf00      	nop
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr

080038c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b087      	sub	sp, #28
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	607a      	str	r2, [r7, #4]
 80038d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	021a      	lsls	r2, r3, #8
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	431a      	orrs	r2, r3
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	609a      	str	r2, [r3, #8]
}
 80038fa:	bf00      	nop
 80038fc:	371c      	adds	r7, #28
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr

08003904 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003918:	2302      	movs	r3, #2
 800391a:	e046      	b.n	80039aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003942:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a16      	ldr	r2, [pc, #88]	; (80039b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d00e      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003968:	d009      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a12      	ldr	r2, [pc, #72]	; (80039b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d004      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a10      	ldr	r2, [pc, #64]	; (80039bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d10c      	bne.n	8003998 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003984:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	4313      	orrs	r3, r2
 800398e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr
 80039b4:	40012c00 	.word	0x40012c00
 80039b8:	40000400 	.word	0x40000400
 80039bc:	40000800 	.word	0x40000800

080039c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr

080039d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr

080039e4 <__errno>:
 80039e4:	4b01      	ldr	r3, [pc, #4]	; (80039ec <__errno+0x8>)
 80039e6:	6818      	ldr	r0, [r3, #0]
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	2000001c 	.word	0x2000001c

080039f0 <__libc_init_array>:
 80039f0:	b570      	push	{r4, r5, r6, lr}
 80039f2:	2500      	movs	r5, #0
 80039f4:	4e0c      	ldr	r6, [pc, #48]	; (8003a28 <__libc_init_array+0x38>)
 80039f6:	4c0d      	ldr	r4, [pc, #52]	; (8003a2c <__libc_init_array+0x3c>)
 80039f8:	1ba4      	subs	r4, r4, r6
 80039fa:	10a4      	asrs	r4, r4, #2
 80039fc:	42a5      	cmp	r5, r4
 80039fe:	d109      	bne.n	8003a14 <__libc_init_array+0x24>
 8003a00:	f000 fc34 	bl	800426c <_init>
 8003a04:	2500      	movs	r5, #0
 8003a06:	4e0a      	ldr	r6, [pc, #40]	; (8003a30 <__libc_init_array+0x40>)
 8003a08:	4c0a      	ldr	r4, [pc, #40]	; (8003a34 <__libc_init_array+0x44>)
 8003a0a:	1ba4      	subs	r4, r4, r6
 8003a0c:	10a4      	asrs	r4, r4, #2
 8003a0e:	42a5      	cmp	r5, r4
 8003a10:	d105      	bne.n	8003a1e <__libc_init_array+0x2e>
 8003a12:	bd70      	pop	{r4, r5, r6, pc}
 8003a14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a18:	4798      	blx	r3
 8003a1a:	3501      	adds	r5, #1
 8003a1c:	e7ee      	b.n	80039fc <__libc_init_array+0xc>
 8003a1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a22:	4798      	blx	r3
 8003a24:	3501      	adds	r5, #1
 8003a26:	e7f2      	b.n	8003a0e <__libc_init_array+0x1e>
 8003a28:	080064a8 	.word	0x080064a8
 8003a2c:	080064a8 	.word	0x080064a8
 8003a30:	080064a8 	.word	0x080064a8
 8003a34:	080064ac 	.word	0x080064ac

08003a38 <memset>:
 8003a38:	4603      	mov	r3, r0
 8003a3a:	4402      	add	r2, r0
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d100      	bne.n	8003a42 <memset+0xa>
 8003a40:	4770      	bx	lr
 8003a42:	f803 1b01 	strb.w	r1, [r3], #1
 8003a46:	e7f9      	b.n	8003a3c <memset+0x4>

08003a48 <siprintf>:
 8003a48:	b40e      	push	{r1, r2, r3}
 8003a4a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a4e:	b500      	push	{lr}
 8003a50:	b09c      	sub	sp, #112	; 0x70
 8003a52:	ab1d      	add	r3, sp, #116	; 0x74
 8003a54:	9002      	str	r0, [sp, #8]
 8003a56:	9006      	str	r0, [sp, #24]
 8003a58:	9107      	str	r1, [sp, #28]
 8003a5a:	9104      	str	r1, [sp, #16]
 8003a5c:	4808      	ldr	r0, [pc, #32]	; (8003a80 <siprintf+0x38>)
 8003a5e:	4909      	ldr	r1, [pc, #36]	; (8003a84 <siprintf+0x3c>)
 8003a60:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a64:	9105      	str	r1, [sp, #20]
 8003a66:	6800      	ldr	r0, [r0, #0]
 8003a68:	a902      	add	r1, sp, #8
 8003a6a:	9301      	str	r3, [sp, #4]
 8003a6c:	f000 f866 	bl	8003b3c <_svfiprintf_r>
 8003a70:	2200      	movs	r2, #0
 8003a72:	9b02      	ldr	r3, [sp, #8]
 8003a74:	701a      	strb	r2, [r3, #0]
 8003a76:	b01c      	add	sp, #112	; 0x70
 8003a78:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a7c:	b003      	add	sp, #12
 8003a7e:	4770      	bx	lr
 8003a80:	2000001c 	.word	0x2000001c
 8003a84:	ffff0208 	.word	0xffff0208

08003a88 <__ssputs_r>:
 8003a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a8c:	688e      	ldr	r6, [r1, #8]
 8003a8e:	4682      	mov	sl, r0
 8003a90:	429e      	cmp	r6, r3
 8003a92:	460c      	mov	r4, r1
 8003a94:	4690      	mov	r8, r2
 8003a96:	4699      	mov	r9, r3
 8003a98:	d837      	bhi.n	8003b0a <__ssputs_r+0x82>
 8003a9a:	898a      	ldrh	r2, [r1, #12]
 8003a9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003aa0:	d031      	beq.n	8003b06 <__ssputs_r+0x7e>
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	6825      	ldr	r5, [r4, #0]
 8003aa6:	6909      	ldr	r1, [r1, #16]
 8003aa8:	1a6f      	subs	r7, r5, r1
 8003aaa:	6965      	ldr	r5, [r4, #20]
 8003aac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ab0:	fb95 f5f3 	sdiv	r5, r5, r3
 8003ab4:	f109 0301 	add.w	r3, r9, #1
 8003ab8:	443b      	add	r3, r7
 8003aba:	429d      	cmp	r5, r3
 8003abc:	bf38      	it	cc
 8003abe:	461d      	movcc	r5, r3
 8003ac0:	0553      	lsls	r3, r2, #21
 8003ac2:	d530      	bpl.n	8003b26 <__ssputs_r+0x9e>
 8003ac4:	4629      	mov	r1, r5
 8003ac6:	f000 fb37 	bl	8004138 <_malloc_r>
 8003aca:	4606      	mov	r6, r0
 8003acc:	b950      	cbnz	r0, 8003ae4 <__ssputs_r+0x5c>
 8003ace:	230c      	movs	r3, #12
 8003ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad4:	f8ca 3000 	str.w	r3, [sl]
 8003ad8:	89a3      	ldrh	r3, [r4, #12]
 8003ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ade:	81a3      	strh	r3, [r4, #12]
 8003ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ae4:	463a      	mov	r2, r7
 8003ae6:	6921      	ldr	r1, [r4, #16]
 8003ae8:	f000 fab6 	bl	8004058 <memcpy>
 8003aec:	89a3      	ldrh	r3, [r4, #12]
 8003aee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003af6:	81a3      	strh	r3, [r4, #12]
 8003af8:	6126      	str	r6, [r4, #16]
 8003afa:	443e      	add	r6, r7
 8003afc:	6026      	str	r6, [r4, #0]
 8003afe:	464e      	mov	r6, r9
 8003b00:	6165      	str	r5, [r4, #20]
 8003b02:	1bed      	subs	r5, r5, r7
 8003b04:	60a5      	str	r5, [r4, #8]
 8003b06:	454e      	cmp	r6, r9
 8003b08:	d900      	bls.n	8003b0c <__ssputs_r+0x84>
 8003b0a:	464e      	mov	r6, r9
 8003b0c:	4632      	mov	r2, r6
 8003b0e:	4641      	mov	r1, r8
 8003b10:	6820      	ldr	r0, [r4, #0]
 8003b12:	f000 faac 	bl	800406e <memmove>
 8003b16:	68a3      	ldr	r3, [r4, #8]
 8003b18:	2000      	movs	r0, #0
 8003b1a:	1b9b      	subs	r3, r3, r6
 8003b1c:	60a3      	str	r3, [r4, #8]
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	441e      	add	r6, r3
 8003b22:	6026      	str	r6, [r4, #0]
 8003b24:	e7dc      	b.n	8003ae0 <__ssputs_r+0x58>
 8003b26:	462a      	mov	r2, r5
 8003b28:	f000 fb60 	bl	80041ec <_realloc_r>
 8003b2c:	4606      	mov	r6, r0
 8003b2e:	2800      	cmp	r0, #0
 8003b30:	d1e2      	bne.n	8003af8 <__ssputs_r+0x70>
 8003b32:	6921      	ldr	r1, [r4, #16]
 8003b34:	4650      	mov	r0, sl
 8003b36:	f000 fab3 	bl	80040a0 <_free_r>
 8003b3a:	e7c8      	b.n	8003ace <__ssputs_r+0x46>

08003b3c <_svfiprintf_r>:
 8003b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b40:	461d      	mov	r5, r3
 8003b42:	898b      	ldrh	r3, [r1, #12]
 8003b44:	b09d      	sub	sp, #116	; 0x74
 8003b46:	061f      	lsls	r7, r3, #24
 8003b48:	4680      	mov	r8, r0
 8003b4a:	460c      	mov	r4, r1
 8003b4c:	4616      	mov	r6, r2
 8003b4e:	d50f      	bpl.n	8003b70 <_svfiprintf_r+0x34>
 8003b50:	690b      	ldr	r3, [r1, #16]
 8003b52:	b96b      	cbnz	r3, 8003b70 <_svfiprintf_r+0x34>
 8003b54:	2140      	movs	r1, #64	; 0x40
 8003b56:	f000 faef 	bl	8004138 <_malloc_r>
 8003b5a:	6020      	str	r0, [r4, #0]
 8003b5c:	6120      	str	r0, [r4, #16]
 8003b5e:	b928      	cbnz	r0, 8003b6c <_svfiprintf_r+0x30>
 8003b60:	230c      	movs	r3, #12
 8003b62:	f8c8 3000 	str.w	r3, [r8]
 8003b66:	f04f 30ff 	mov.w	r0, #4294967295
 8003b6a:	e0c8      	b.n	8003cfe <_svfiprintf_r+0x1c2>
 8003b6c:	2340      	movs	r3, #64	; 0x40
 8003b6e:	6163      	str	r3, [r4, #20]
 8003b70:	2300      	movs	r3, #0
 8003b72:	9309      	str	r3, [sp, #36]	; 0x24
 8003b74:	2320      	movs	r3, #32
 8003b76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b7a:	2330      	movs	r3, #48	; 0x30
 8003b7c:	f04f 0b01 	mov.w	fp, #1
 8003b80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b84:	9503      	str	r5, [sp, #12]
 8003b86:	4637      	mov	r7, r6
 8003b88:	463d      	mov	r5, r7
 8003b8a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003b8e:	b10b      	cbz	r3, 8003b94 <_svfiprintf_r+0x58>
 8003b90:	2b25      	cmp	r3, #37	; 0x25
 8003b92:	d13e      	bne.n	8003c12 <_svfiprintf_r+0xd6>
 8003b94:	ebb7 0a06 	subs.w	sl, r7, r6
 8003b98:	d00b      	beq.n	8003bb2 <_svfiprintf_r+0x76>
 8003b9a:	4653      	mov	r3, sl
 8003b9c:	4632      	mov	r2, r6
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	4640      	mov	r0, r8
 8003ba2:	f7ff ff71 	bl	8003a88 <__ssputs_r>
 8003ba6:	3001      	adds	r0, #1
 8003ba8:	f000 80a4 	beq.w	8003cf4 <_svfiprintf_r+0x1b8>
 8003bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bae:	4453      	add	r3, sl
 8003bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8003bb2:	783b      	ldrb	r3, [r7, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 809d 	beq.w	8003cf4 <_svfiprintf_r+0x1b8>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bc4:	9304      	str	r3, [sp, #16]
 8003bc6:	9307      	str	r3, [sp, #28]
 8003bc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bcc:	931a      	str	r3, [sp, #104]	; 0x68
 8003bce:	462f      	mov	r7, r5
 8003bd0:	2205      	movs	r2, #5
 8003bd2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003bd6:	4850      	ldr	r0, [pc, #320]	; (8003d18 <_svfiprintf_r+0x1dc>)
 8003bd8:	f000 fa30 	bl	800403c <memchr>
 8003bdc:	9b04      	ldr	r3, [sp, #16]
 8003bde:	b9d0      	cbnz	r0, 8003c16 <_svfiprintf_r+0xda>
 8003be0:	06d9      	lsls	r1, r3, #27
 8003be2:	bf44      	itt	mi
 8003be4:	2220      	movmi	r2, #32
 8003be6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003bea:	071a      	lsls	r2, r3, #28
 8003bec:	bf44      	itt	mi
 8003bee:	222b      	movmi	r2, #43	; 0x2b
 8003bf0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003bf4:	782a      	ldrb	r2, [r5, #0]
 8003bf6:	2a2a      	cmp	r2, #42	; 0x2a
 8003bf8:	d015      	beq.n	8003c26 <_svfiprintf_r+0xea>
 8003bfa:	462f      	mov	r7, r5
 8003bfc:	2000      	movs	r0, #0
 8003bfe:	250a      	movs	r5, #10
 8003c00:	9a07      	ldr	r2, [sp, #28]
 8003c02:	4639      	mov	r1, r7
 8003c04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c08:	3b30      	subs	r3, #48	; 0x30
 8003c0a:	2b09      	cmp	r3, #9
 8003c0c:	d94d      	bls.n	8003caa <_svfiprintf_r+0x16e>
 8003c0e:	b1b8      	cbz	r0, 8003c40 <_svfiprintf_r+0x104>
 8003c10:	e00f      	b.n	8003c32 <_svfiprintf_r+0xf6>
 8003c12:	462f      	mov	r7, r5
 8003c14:	e7b8      	b.n	8003b88 <_svfiprintf_r+0x4c>
 8003c16:	4a40      	ldr	r2, [pc, #256]	; (8003d18 <_svfiprintf_r+0x1dc>)
 8003c18:	463d      	mov	r5, r7
 8003c1a:	1a80      	subs	r0, r0, r2
 8003c1c:	fa0b f000 	lsl.w	r0, fp, r0
 8003c20:	4318      	orrs	r0, r3
 8003c22:	9004      	str	r0, [sp, #16]
 8003c24:	e7d3      	b.n	8003bce <_svfiprintf_r+0x92>
 8003c26:	9a03      	ldr	r2, [sp, #12]
 8003c28:	1d11      	adds	r1, r2, #4
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	9103      	str	r1, [sp, #12]
 8003c2e:	2a00      	cmp	r2, #0
 8003c30:	db01      	blt.n	8003c36 <_svfiprintf_r+0xfa>
 8003c32:	9207      	str	r2, [sp, #28]
 8003c34:	e004      	b.n	8003c40 <_svfiprintf_r+0x104>
 8003c36:	4252      	negs	r2, r2
 8003c38:	f043 0302 	orr.w	r3, r3, #2
 8003c3c:	9207      	str	r2, [sp, #28]
 8003c3e:	9304      	str	r3, [sp, #16]
 8003c40:	783b      	ldrb	r3, [r7, #0]
 8003c42:	2b2e      	cmp	r3, #46	; 0x2e
 8003c44:	d10c      	bne.n	8003c60 <_svfiprintf_r+0x124>
 8003c46:	787b      	ldrb	r3, [r7, #1]
 8003c48:	2b2a      	cmp	r3, #42	; 0x2a
 8003c4a:	d133      	bne.n	8003cb4 <_svfiprintf_r+0x178>
 8003c4c:	9b03      	ldr	r3, [sp, #12]
 8003c4e:	3702      	adds	r7, #2
 8003c50:	1d1a      	adds	r2, r3, #4
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	9203      	str	r2, [sp, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	bfb8      	it	lt
 8003c5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c5e:	9305      	str	r3, [sp, #20]
 8003c60:	4d2e      	ldr	r5, [pc, #184]	; (8003d1c <_svfiprintf_r+0x1e0>)
 8003c62:	2203      	movs	r2, #3
 8003c64:	7839      	ldrb	r1, [r7, #0]
 8003c66:	4628      	mov	r0, r5
 8003c68:	f000 f9e8 	bl	800403c <memchr>
 8003c6c:	b138      	cbz	r0, 8003c7e <_svfiprintf_r+0x142>
 8003c6e:	2340      	movs	r3, #64	; 0x40
 8003c70:	1b40      	subs	r0, r0, r5
 8003c72:	fa03 f000 	lsl.w	r0, r3, r0
 8003c76:	9b04      	ldr	r3, [sp, #16]
 8003c78:	3701      	adds	r7, #1
 8003c7a:	4303      	orrs	r3, r0
 8003c7c:	9304      	str	r3, [sp, #16]
 8003c7e:	7839      	ldrb	r1, [r7, #0]
 8003c80:	2206      	movs	r2, #6
 8003c82:	4827      	ldr	r0, [pc, #156]	; (8003d20 <_svfiprintf_r+0x1e4>)
 8003c84:	1c7e      	adds	r6, r7, #1
 8003c86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c8a:	f000 f9d7 	bl	800403c <memchr>
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	d038      	beq.n	8003d04 <_svfiprintf_r+0x1c8>
 8003c92:	4b24      	ldr	r3, [pc, #144]	; (8003d24 <_svfiprintf_r+0x1e8>)
 8003c94:	bb13      	cbnz	r3, 8003cdc <_svfiprintf_r+0x1a0>
 8003c96:	9b03      	ldr	r3, [sp, #12]
 8003c98:	3307      	adds	r3, #7
 8003c9a:	f023 0307 	bic.w	r3, r3, #7
 8003c9e:	3308      	adds	r3, #8
 8003ca0:	9303      	str	r3, [sp, #12]
 8003ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ca4:	444b      	add	r3, r9
 8003ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ca8:	e76d      	b.n	8003b86 <_svfiprintf_r+0x4a>
 8003caa:	fb05 3202 	mla	r2, r5, r2, r3
 8003cae:	2001      	movs	r0, #1
 8003cb0:	460f      	mov	r7, r1
 8003cb2:	e7a6      	b.n	8003c02 <_svfiprintf_r+0xc6>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	250a      	movs	r5, #10
 8003cb8:	4619      	mov	r1, r3
 8003cba:	3701      	adds	r7, #1
 8003cbc:	9305      	str	r3, [sp, #20]
 8003cbe:	4638      	mov	r0, r7
 8003cc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cc4:	3a30      	subs	r2, #48	; 0x30
 8003cc6:	2a09      	cmp	r2, #9
 8003cc8:	d903      	bls.n	8003cd2 <_svfiprintf_r+0x196>
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0c8      	beq.n	8003c60 <_svfiprintf_r+0x124>
 8003cce:	9105      	str	r1, [sp, #20]
 8003cd0:	e7c6      	b.n	8003c60 <_svfiprintf_r+0x124>
 8003cd2:	fb05 2101 	mla	r1, r5, r1, r2
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	4607      	mov	r7, r0
 8003cda:	e7f0      	b.n	8003cbe <_svfiprintf_r+0x182>
 8003cdc:	ab03      	add	r3, sp, #12
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	4622      	mov	r2, r4
 8003ce2:	4b11      	ldr	r3, [pc, #68]	; (8003d28 <_svfiprintf_r+0x1ec>)
 8003ce4:	a904      	add	r1, sp, #16
 8003ce6:	4640      	mov	r0, r8
 8003ce8:	f3af 8000 	nop.w
 8003cec:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003cf0:	4681      	mov	r9, r0
 8003cf2:	d1d6      	bne.n	8003ca2 <_svfiprintf_r+0x166>
 8003cf4:	89a3      	ldrh	r3, [r4, #12]
 8003cf6:	065b      	lsls	r3, r3, #25
 8003cf8:	f53f af35 	bmi.w	8003b66 <_svfiprintf_r+0x2a>
 8003cfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cfe:	b01d      	add	sp, #116	; 0x74
 8003d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d04:	ab03      	add	r3, sp, #12
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	4622      	mov	r2, r4
 8003d0a:	4b07      	ldr	r3, [pc, #28]	; (8003d28 <_svfiprintf_r+0x1ec>)
 8003d0c:	a904      	add	r1, sp, #16
 8003d0e:	4640      	mov	r0, r8
 8003d10:	f000 f882 	bl	8003e18 <_printf_i>
 8003d14:	e7ea      	b.n	8003cec <_svfiprintf_r+0x1b0>
 8003d16:	bf00      	nop
 8003d18:	08006474 	.word	0x08006474
 8003d1c:	0800647a 	.word	0x0800647a
 8003d20:	0800647e 	.word	0x0800647e
 8003d24:	00000000 	.word	0x00000000
 8003d28:	08003a89 	.word	0x08003a89

08003d2c <_printf_common>:
 8003d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d30:	4691      	mov	r9, r2
 8003d32:	461f      	mov	r7, r3
 8003d34:	688a      	ldr	r2, [r1, #8]
 8003d36:	690b      	ldr	r3, [r1, #16]
 8003d38:	4606      	mov	r6, r0
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	bfb8      	it	lt
 8003d3e:	4613      	movlt	r3, r2
 8003d40:	f8c9 3000 	str.w	r3, [r9]
 8003d44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d48:	460c      	mov	r4, r1
 8003d4a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d4e:	b112      	cbz	r2, 8003d56 <_printf_common+0x2a>
 8003d50:	3301      	adds	r3, #1
 8003d52:	f8c9 3000 	str.w	r3, [r9]
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	0699      	lsls	r1, r3, #26
 8003d5a:	bf42      	ittt	mi
 8003d5c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003d60:	3302      	addmi	r3, #2
 8003d62:	f8c9 3000 	strmi.w	r3, [r9]
 8003d66:	6825      	ldr	r5, [r4, #0]
 8003d68:	f015 0506 	ands.w	r5, r5, #6
 8003d6c:	d107      	bne.n	8003d7e <_printf_common+0x52>
 8003d6e:	f104 0a19 	add.w	sl, r4, #25
 8003d72:	68e3      	ldr	r3, [r4, #12]
 8003d74:	f8d9 2000 	ldr.w	r2, [r9]
 8003d78:	1a9b      	subs	r3, r3, r2
 8003d7a:	42ab      	cmp	r3, r5
 8003d7c:	dc29      	bgt.n	8003dd2 <_printf_common+0xa6>
 8003d7e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003d82:	6822      	ldr	r2, [r4, #0]
 8003d84:	3300      	adds	r3, #0
 8003d86:	bf18      	it	ne
 8003d88:	2301      	movne	r3, #1
 8003d8a:	0692      	lsls	r2, r2, #26
 8003d8c:	d42e      	bmi.n	8003dec <_printf_common+0xc0>
 8003d8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d92:	4639      	mov	r1, r7
 8003d94:	4630      	mov	r0, r6
 8003d96:	47c0      	blx	r8
 8003d98:	3001      	adds	r0, #1
 8003d9a:	d021      	beq.n	8003de0 <_printf_common+0xb4>
 8003d9c:	6823      	ldr	r3, [r4, #0]
 8003d9e:	68e5      	ldr	r5, [r4, #12]
 8003da0:	f003 0306 	and.w	r3, r3, #6
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	bf18      	it	ne
 8003da8:	2500      	movne	r5, #0
 8003daa:	f8d9 2000 	ldr.w	r2, [r9]
 8003dae:	f04f 0900 	mov.w	r9, #0
 8003db2:	bf08      	it	eq
 8003db4:	1aad      	subeq	r5, r5, r2
 8003db6:	68a3      	ldr	r3, [r4, #8]
 8003db8:	6922      	ldr	r2, [r4, #16]
 8003dba:	bf08      	it	eq
 8003dbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	bfc4      	itt	gt
 8003dc4:	1a9b      	subgt	r3, r3, r2
 8003dc6:	18ed      	addgt	r5, r5, r3
 8003dc8:	341a      	adds	r4, #26
 8003dca:	454d      	cmp	r5, r9
 8003dcc:	d11a      	bne.n	8003e04 <_printf_common+0xd8>
 8003dce:	2000      	movs	r0, #0
 8003dd0:	e008      	b.n	8003de4 <_printf_common+0xb8>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	4652      	mov	r2, sl
 8003dd6:	4639      	mov	r1, r7
 8003dd8:	4630      	mov	r0, r6
 8003dda:	47c0      	blx	r8
 8003ddc:	3001      	adds	r0, #1
 8003dde:	d103      	bne.n	8003de8 <_printf_common+0xbc>
 8003de0:	f04f 30ff 	mov.w	r0, #4294967295
 8003de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003de8:	3501      	adds	r5, #1
 8003dea:	e7c2      	b.n	8003d72 <_printf_common+0x46>
 8003dec:	2030      	movs	r0, #48	; 0x30
 8003dee:	18e1      	adds	r1, r4, r3
 8003df0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003dfa:	4422      	add	r2, r4
 8003dfc:	3302      	adds	r3, #2
 8003dfe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e02:	e7c4      	b.n	8003d8e <_printf_common+0x62>
 8003e04:	2301      	movs	r3, #1
 8003e06:	4622      	mov	r2, r4
 8003e08:	4639      	mov	r1, r7
 8003e0a:	4630      	mov	r0, r6
 8003e0c:	47c0      	blx	r8
 8003e0e:	3001      	adds	r0, #1
 8003e10:	d0e6      	beq.n	8003de0 <_printf_common+0xb4>
 8003e12:	f109 0901 	add.w	r9, r9, #1
 8003e16:	e7d8      	b.n	8003dca <_printf_common+0x9e>

08003e18 <_printf_i>:
 8003e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e1c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003e20:	460c      	mov	r4, r1
 8003e22:	7e09      	ldrb	r1, [r1, #24]
 8003e24:	b085      	sub	sp, #20
 8003e26:	296e      	cmp	r1, #110	; 0x6e
 8003e28:	4617      	mov	r7, r2
 8003e2a:	4606      	mov	r6, r0
 8003e2c:	4698      	mov	r8, r3
 8003e2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003e30:	f000 80b3 	beq.w	8003f9a <_printf_i+0x182>
 8003e34:	d822      	bhi.n	8003e7c <_printf_i+0x64>
 8003e36:	2963      	cmp	r1, #99	; 0x63
 8003e38:	d036      	beq.n	8003ea8 <_printf_i+0x90>
 8003e3a:	d80a      	bhi.n	8003e52 <_printf_i+0x3a>
 8003e3c:	2900      	cmp	r1, #0
 8003e3e:	f000 80b9 	beq.w	8003fb4 <_printf_i+0x19c>
 8003e42:	2958      	cmp	r1, #88	; 0x58
 8003e44:	f000 8083 	beq.w	8003f4e <_printf_i+0x136>
 8003e48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e4c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003e50:	e032      	b.n	8003eb8 <_printf_i+0xa0>
 8003e52:	2964      	cmp	r1, #100	; 0x64
 8003e54:	d001      	beq.n	8003e5a <_printf_i+0x42>
 8003e56:	2969      	cmp	r1, #105	; 0x69
 8003e58:	d1f6      	bne.n	8003e48 <_printf_i+0x30>
 8003e5a:	6820      	ldr	r0, [r4, #0]
 8003e5c:	6813      	ldr	r3, [r2, #0]
 8003e5e:	0605      	lsls	r5, r0, #24
 8003e60:	f103 0104 	add.w	r1, r3, #4
 8003e64:	d52a      	bpl.n	8003ebc <_printf_i+0xa4>
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6011      	str	r1, [r2, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	da03      	bge.n	8003e76 <_printf_i+0x5e>
 8003e6e:	222d      	movs	r2, #45	; 0x2d
 8003e70:	425b      	negs	r3, r3
 8003e72:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003e76:	486f      	ldr	r0, [pc, #444]	; (8004034 <_printf_i+0x21c>)
 8003e78:	220a      	movs	r2, #10
 8003e7a:	e039      	b.n	8003ef0 <_printf_i+0xd8>
 8003e7c:	2973      	cmp	r1, #115	; 0x73
 8003e7e:	f000 809d 	beq.w	8003fbc <_printf_i+0x1a4>
 8003e82:	d808      	bhi.n	8003e96 <_printf_i+0x7e>
 8003e84:	296f      	cmp	r1, #111	; 0x6f
 8003e86:	d020      	beq.n	8003eca <_printf_i+0xb2>
 8003e88:	2970      	cmp	r1, #112	; 0x70
 8003e8a:	d1dd      	bne.n	8003e48 <_printf_i+0x30>
 8003e8c:	6823      	ldr	r3, [r4, #0]
 8003e8e:	f043 0320 	orr.w	r3, r3, #32
 8003e92:	6023      	str	r3, [r4, #0]
 8003e94:	e003      	b.n	8003e9e <_printf_i+0x86>
 8003e96:	2975      	cmp	r1, #117	; 0x75
 8003e98:	d017      	beq.n	8003eca <_printf_i+0xb2>
 8003e9a:	2978      	cmp	r1, #120	; 0x78
 8003e9c:	d1d4      	bne.n	8003e48 <_printf_i+0x30>
 8003e9e:	2378      	movs	r3, #120	; 0x78
 8003ea0:	4865      	ldr	r0, [pc, #404]	; (8004038 <_printf_i+0x220>)
 8003ea2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ea6:	e055      	b.n	8003f54 <_printf_i+0x13c>
 8003ea8:	6813      	ldr	r3, [r2, #0]
 8003eaa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003eae:	1d19      	adds	r1, r3, #4
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6011      	str	r1, [r2, #0]
 8003eb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e08c      	b.n	8003fd6 <_printf_i+0x1be>
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ec2:	6011      	str	r1, [r2, #0]
 8003ec4:	bf18      	it	ne
 8003ec6:	b21b      	sxthne	r3, r3
 8003ec8:	e7cf      	b.n	8003e6a <_printf_i+0x52>
 8003eca:	6813      	ldr	r3, [r2, #0]
 8003ecc:	6825      	ldr	r5, [r4, #0]
 8003ece:	1d18      	adds	r0, r3, #4
 8003ed0:	6010      	str	r0, [r2, #0]
 8003ed2:	0628      	lsls	r0, r5, #24
 8003ed4:	d501      	bpl.n	8003eda <_printf_i+0xc2>
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	e002      	b.n	8003ee0 <_printf_i+0xc8>
 8003eda:	0668      	lsls	r0, r5, #25
 8003edc:	d5fb      	bpl.n	8003ed6 <_printf_i+0xbe>
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	296f      	cmp	r1, #111	; 0x6f
 8003ee2:	bf14      	ite	ne
 8003ee4:	220a      	movne	r2, #10
 8003ee6:	2208      	moveq	r2, #8
 8003ee8:	4852      	ldr	r0, [pc, #328]	; (8004034 <_printf_i+0x21c>)
 8003eea:	2100      	movs	r1, #0
 8003eec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ef0:	6865      	ldr	r5, [r4, #4]
 8003ef2:	2d00      	cmp	r5, #0
 8003ef4:	60a5      	str	r5, [r4, #8]
 8003ef6:	f2c0 8095 	blt.w	8004024 <_printf_i+0x20c>
 8003efa:	6821      	ldr	r1, [r4, #0]
 8003efc:	f021 0104 	bic.w	r1, r1, #4
 8003f00:	6021      	str	r1, [r4, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d13d      	bne.n	8003f82 <_printf_i+0x16a>
 8003f06:	2d00      	cmp	r5, #0
 8003f08:	f040 808e 	bne.w	8004028 <_printf_i+0x210>
 8003f0c:	4665      	mov	r5, ip
 8003f0e:	2a08      	cmp	r2, #8
 8003f10:	d10b      	bne.n	8003f2a <_printf_i+0x112>
 8003f12:	6823      	ldr	r3, [r4, #0]
 8003f14:	07db      	lsls	r3, r3, #31
 8003f16:	d508      	bpl.n	8003f2a <_printf_i+0x112>
 8003f18:	6923      	ldr	r3, [r4, #16]
 8003f1a:	6862      	ldr	r2, [r4, #4]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	bfde      	ittt	le
 8003f20:	2330      	movle	r3, #48	; 0x30
 8003f22:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f26:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f2a:	ebac 0305 	sub.w	r3, ip, r5
 8003f2e:	6123      	str	r3, [r4, #16]
 8003f30:	f8cd 8000 	str.w	r8, [sp]
 8003f34:	463b      	mov	r3, r7
 8003f36:	aa03      	add	r2, sp, #12
 8003f38:	4621      	mov	r1, r4
 8003f3a:	4630      	mov	r0, r6
 8003f3c:	f7ff fef6 	bl	8003d2c <_printf_common>
 8003f40:	3001      	adds	r0, #1
 8003f42:	d14d      	bne.n	8003fe0 <_printf_i+0x1c8>
 8003f44:	f04f 30ff 	mov.w	r0, #4294967295
 8003f48:	b005      	add	sp, #20
 8003f4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f4e:	4839      	ldr	r0, [pc, #228]	; (8004034 <_printf_i+0x21c>)
 8003f50:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003f54:	6813      	ldr	r3, [r2, #0]
 8003f56:	6821      	ldr	r1, [r4, #0]
 8003f58:	1d1d      	adds	r5, r3, #4
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6015      	str	r5, [r2, #0]
 8003f5e:	060a      	lsls	r2, r1, #24
 8003f60:	d50b      	bpl.n	8003f7a <_printf_i+0x162>
 8003f62:	07ca      	lsls	r2, r1, #31
 8003f64:	bf44      	itt	mi
 8003f66:	f041 0120 	orrmi.w	r1, r1, #32
 8003f6a:	6021      	strmi	r1, [r4, #0]
 8003f6c:	b91b      	cbnz	r3, 8003f76 <_printf_i+0x15e>
 8003f6e:	6822      	ldr	r2, [r4, #0]
 8003f70:	f022 0220 	bic.w	r2, r2, #32
 8003f74:	6022      	str	r2, [r4, #0]
 8003f76:	2210      	movs	r2, #16
 8003f78:	e7b7      	b.n	8003eea <_printf_i+0xd2>
 8003f7a:	064d      	lsls	r5, r1, #25
 8003f7c:	bf48      	it	mi
 8003f7e:	b29b      	uxthmi	r3, r3
 8003f80:	e7ef      	b.n	8003f62 <_printf_i+0x14a>
 8003f82:	4665      	mov	r5, ip
 8003f84:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f88:	fb02 3311 	mls	r3, r2, r1, r3
 8003f8c:	5cc3      	ldrb	r3, [r0, r3]
 8003f8e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003f92:	460b      	mov	r3, r1
 8003f94:	2900      	cmp	r1, #0
 8003f96:	d1f5      	bne.n	8003f84 <_printf_i+0x16c>
 8003f98:	e7b9      	b.n	8003f0e <_printf_i+0xf6>
 8003f9a:	6813      	ldr	r3, [r2, #0]
 8003f9c:	6825      	ldr	r5, [r4, #0]
 8003f9e:	1d18      	adds	r0, r3, #4
 8003fa0:	6961      	ldr	r1, [r4, #20]
 8003fa2:	6010      	str	r0, [r2, #0]
 8003fa4:	0628      	lsls	r0, r5, #24
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	d501      	bpl.n	8003fae <_printf_i+0x196>
 8003faa:	6019      	str	r1, [r3, #0]
 8003fac:	e002      	b.n	8003fb4 <_printf_i+0x19c>
 8003fae:	066a      	lsls	r2, r5, #25
 8003fb0:	d5fb      	bpl.n	8003faa <_printf_i+0x192>
 8003fb2:	8019      	strh	r1, [r3, #0]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	4665      	mov	r5, ip
 8003fb8:	6123      	str	r3, [r4, #16]
 8003fba:	e7b9      	b.n	8003f30 <_printf_i+0x118>
 8003fbc:	6813      	ldr	r3, [r2, #0]
 8003fbe:	1d19      	adds	r1, r3, #4
 8003fc0:	6011      	str	r1, [r2, #0]
 8003fc2:	681d      	ldr	r5, [r3, #0]
 8003fc4:	6862      	ldr	r2, [r4, #4]
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	4628      	mov	r0, r5
 8003fca:	f000 f837 	bl	800403c <memchr>
 8003fce:	b108      	cbz	r0, 8003fd4 <_printf_i+0x1bc>
 8003fd0:	1b40      	subs	r0, r0, r5
 8003fd2:	6060      	str	r0, [r4, #4]
 8003fd4:	6863      	ldr	r3, [r4, #4]
 8003fd6:	6123      	str	r3, [r4, #16]
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fde:	e7a7      	b.n	8003f30 <_printf_i+0x118>
 8003fe0:	6923      	ldr	r3, [r4, #16]
 8003fe2:	462a      	mov	r2, r5
 8003fe4:	4639      	mov	r1, r7
 8003fe6:	4630      	mov	r0, r6
 8003fe8:	47c0      	blx	r8
 8003fea:	3001      	adds	r0, #1
 8003fec:	d0aa      	beq.n	8003f44 <_printf_i+0x12c>
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	079b      	lsls	r3, r3, #30
 8003ff2:	d413      	bmi.n	800401c <_printf_i+0x204>
 8003ff4:	68e0      	ldr	r0, [r4, #12]
 8003ff6:	9b03      	ldr	r3, [sp, #12]
 8003ff8:	4298      	cmp	r0, r3
 8003ffa:	bfb8      	it	lt
 8003ffc:	4618      	movlt	r0, r3
 8003ffe:	e7a3      	b.n	8003f48 <_printf_i+0x130>
 8004000:	2301      	movs	r3, #1
 8004002:	464a      	mov	r2, r9
 8004004:	4639      	mov	r1, r7
 8004006:	4630      	mov	r0, r6
 8004008:	47c0      	blx	r8
 800400a:	3001      	adds	r0, #1
 800400c:	d09a      	beq.n	8003f44 <_printf_i+0x12c>
 800400e:	3501      	adds	r5, #1
 8004010:	68e3      	ldr	r3, [r4, #12]
 8004012:	9a03      	ldr	r2, [sp, #12]
 8004014:	1a9b      	subs	r3, r3, r2
 8004016:	42ab      	cmp	r3, r5
 8004018:	dcf2      	bgt.n	8004000 <_printf_i+0x1e8>
 800401a:	e7eb      	b.n	8003ff4 <_printf_i+0x1dc>
 800401c:	2500      	movs	r5, #0
 800401e:	f104 0919 	add.w	r9, r4, #25
 8004022:	e7f5      	b.n	8004010 <_printf_i+0x1f8>
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1ac      	bne.n	8003f82 <_printf_i+0x16a>
 8004028:	7803      	ldrb	r3, [r0, #0]
 800402a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800402e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004032:	e76c      	b.n	8003f0e <_printf_i+0xf6>
 8004034:	08006485 	.word	0x08006485
 8004038:	08006496 	.word	0x08006496

0800403c <memchr>:
 800403c:	b510      	push	{r4, lr}
 800403e:	b2c9      	uxtb	r1, r1
 8004040:	4402      	add	r2, r0
 8004042:	4290      	cmp	r0, r2
 8004044:	4603      	mov	r3, r0
 8004046:	d101      	bne.n	800404c <memchr+0x10>
 8004048:	2300      	movs	r3, #0
 800404a:	e003      	b.n	8004054 <memchr+0x18>
 800404c:	781c      	ldrb	r4, [r3, #0]
 800404e:	3001      	adds	r0, #1
 8004050:	428c      	cmp	r4, r1
 8004052:	d1f6      	bne.n	8004042 <memchr+0x6>
 8004054:	4618      	mov	r0, r3
 8004056:	bd10      	pop	{r4, pc}

08004058 <memcpy>:
 8004058:	b510      	push	{r4, lr}
 800405a:	1e43      	subs	r3, r0, #1
 800405c:	440a      	add	r2, r1
 800405e:	4291      	cmp	r1, r2
 8004060:	d100      	bne.n	8004064 <memcpy+0xc>
 8004062:	bd10      	pop	{r4, pc}
 8004064:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004068:	f803 4f01 	strb.w	r4, [r3, #1]!
 800406c:	e7f7      	b.n	800405e <memcpy+0x6>

0800406e <memmove>:
 800406e:	4288      	cmp	r0, r1
 8004070:	b510      	push	{r4, lr}
 8004072:	eb01 0302 	add.w	r3, r1, r2
 8004076:	d807      	bhi.n	8004088 <memmove+0x1a>
 8004078:	1e42      	subs	r2, r0, #1
 800407a:	4299      	cmp	r1, r3
 800407c:	d00a      	beq.n	8004094 <memmove+0x26>
 800407e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004082:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004086:	e7f8      	b.n	800407a <memmove+0xc>
 8004088:	4283      	cmp	r3, r0
 800408a:	d9f5      	bls.n	8004078 <memmove+0xa>
 800408c:	1881      	adds	r1, r0, r2
 800408e:	1ad2      	subs	r2, r2, r3
 8004090:	42d3      	cmn	r3, r2
 8004092:	d100      	bne.n	8004096 <memmove+0x28>
 8004094:	bd10      	pop	{r4, pc}
 8004096:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800409a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800409e:	e7f7      	b.n	8004090 <memmove+0x22>

080040a0 <_free_r>:
 80040a0:	b538      	push	{r3, r4, r5, lr}
 80040a2:	4605      	mov	r5, r0
 80040a4:	2900      	cmp	r1, #0
 80040a6:	d043      	beq.n	8004130 <_free_r+0x90>
 80040a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040ac:	1f0c      	subs	r4, r1, #4
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	bfb8      	it	lt
 80040b2:	18e4      	addlt	r4, r4, r3
 80040b4:	f000 f8d0 	bl	8004258 <__malloc_lock>
 80040b8:	4a1e      	ldr	r2, [pc, #120]	; (8004134 <_free_r+0x94>)
 80040ba:	6813      	ldr	r3, [r2, #0]
 80040bc:	4610      	mov	r0, r2
 80040be:	b933      	cbnz	r3, 80040ce <_free_r+0x2e>
 80040c0:	6063      	str	r3, [r4, #4]
 80040c2:	6014      	str	r4, [r2, #0]
 80040c4:	4628      	mov	r0, r5
 80040c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040ca:	f000 b8c6 	b.w	800425a <__malloc_unlock>
 80040ce:	42a3      	cmp	r3, r4
 80040d0:	d90b      	bls.n	80040ea <_free_r+0x4a>
 80040d2:	6821      	ldr	r1, [r4, #0]
 80040d4:	1862      	adds	r2, r4, r1
 80040d6:	4293      	cmp	r3, r2
 80040d8:	bf01      	itttt	eq
 80040da:	681a      	ldreq	r2, [r3, #0]
 80040dc:	685b      	ldreq	r3, [r3, #4]
 80040de:	1852      	addeq	r2, r2, r1
 80040e0:	6022      	streq	r2, [r4, #0]
 80040e2:	6063      	str	r3, [r4, #4]
 80040e4:	6004      	str	r4, [r0, #0]
 80040e6:	e7ed      	b.n	80040c4 <_free_r+0x24>
 80040e8:	4613      	mov	r3, r2
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	b10a      	cbz	r2, 80040f2 <_free_r+0x52>
 80040ee:	42a2      	cmp	r2, r4
 80040f0:	d9fa      	bls.n	80040e8 <_free_r+0x48>
 80040f2:	6819      	ldr	r1, [r3, #0]
 80040f4:	1858      	adds	r0, r3, r1
 80040f6:	42a0      	cmp	r0, r4
 80040f8:	d10b      	bne.n	8004112 <_free_r+0x72>
 80040fa:	6820      	ldr	r0, [r4, #0]
 80040fc:	4401      	add	r1, r0
 80040fe:	1858      	adds	r0, r3, r1
 8004100:	4282      	cmp	r2, r0
 8004102:	6019      	str	r1, [r3, #0]
 8004104:	d1de      	bne.n	80040c4 <_free_r+0x24>
 8004106:	6810      	ldr	r0, [r2, #0]
 8004108:	6852      	ldr	r2, [r2, #4]
 800410a:	4401      	add	r1, r0
 800410c:	6019      	str	r1, [r3, #0]
 800410e:	605a      	str	r2, [r3, #4]
 8004110:	e7d8      	b.n	80040c4 <_free_r+0x24>
 8004112:	d902      	bls.n	800411a <_free_r+0x7a>
 8004114:	230c      	movs	r3, #12
 8004116:	602b      	str	r3, [r5, #0]
 8004118:	e7d4      	b.n	80040c4 <_free_r+0x24>
 800411a:	6820      	ldr	r0, [r4, #0]
 800411c:	1821      	adds	r1, r4, r0
 800411e:	428a      	cmp	r2, r1
 8004120:	bf01      	itttt	eq
 8004122:	6811      	ldreq	r1, [r2, #0]
 8004124:	6852      	ldreq	r2, [r2, #4]
 8004126:	1809      	addeq	r1, r1, r0
 8004128:	6021      	streq	r1, [r4, #0]
 800412a:	6062      	str	r2, [r4, #4]
 800412c:	605c      	str	r4, [r3, #4]
 800412e:	e7c9      	b.n	80040c4 <_free_r+0x24>
 8004130:	bd38      	pop	{r3, r4, r5, pc}
 8004132:	bf00      	nop
 8004134:	200004a8 	.word	0x200004a8

08004138 <_malloc_r>:
 8004138:	b570      	push	{r4, r5, r6, lr}
 800413a:	1ccd      	adds	r5, r1, #3
 800413c:	f025 0503 	bic.w	r5, r5, #3
 8004140:	3508      	adds	r5, #8
 8004142:	2d0c      	cmp	r5, #12
 8004144:	bf38      	it	cc
 8004146:	250c      	movcc	r5, #12
 8004148:	2d00      	cmp	r5, #0
 800414a:	4606      	mov	r6, r0
 800414c:	db01      	blt.n	8004152 <_malloc_r+0x1a>
 800414e:	42a9      	cmp	r1, r5
 8004150:	d903      	bls.n	800415a <_malloc_r+0x22>
 8004152:	230c      	movs	r3, #12
 8004154:	6033      	str	r3, [r6, #0]
 8004156:	2000      	movs	r0, #0
 8004158:	bd70      	pop	{r4, r5, r6, pc}
 800415a:	f000 f87d 	bl	8004258 <__malloc_lock>
 800415e:	4a21      	ldr	r2, [pc, #132]	; (80041e4 <_malloc_r+0xac>)
 8004160:	6814      	ldr	r4, [r2, #0]
 8004162:	4621      	mov	r1, r4
 8004164:	b991      	cbnz	r1, 800418c <_malloc_r+0x54>
 8004166:	4c20      	ldr	r4, [pc, #128]	; (80041e8 <_malloc_r+0xb0>)
 8004168:	6823      	ldr	r3, [r4, #0]
 800416a:	b91b      	cbnz	r3, 8004174 <_malloc_r+0x3c>
 800416c:	4630      	mov	r0, r6
 800416e:	f000 f863 	bl	8004238 <_sbrk_r>
 8004172:	6020      	str	r0, [r4, #0]
 8004174:	4629      	mov	r1, r5
 8004176:	4630      	mov	r0, r6
 8004178:	f000 f85e 	bl	8004238 <_sbrk_r>
 800417c:	1c43      	adds	r3, r0, #1
 800417e:	d124      	bne.n	80041ca <_malloc_r+0x92>
 8004180:	230c      	movs	r3, #12
 8004182:	4630      	mov	r0, r6
 8004184:	6033      	str	r3, [r6, #0]
 8004186:	f000 f868 	bl	800425a <__malloc_unlock>
 800418a:	e7e4      	b.n	8004156 <_malloc_r+0x1e>
 800418c:	680b      	ldr	r3, [r1, #0]
 800418e:	1b5b      	subs	r3, r3, r5
 8004190:	d418      	bmi.n	80041c4 <_malloc_r+0x8c>
 8004192:	2b0b      	cmp	r3, #11
 8004194:	d90f      	bls.n	80041b6 <_malloc_r+0x7e>
 8004196:	600b      	str	r3, [r1, #0]
 8004198:	18cc      	adds	r4, r1, r3
 800419a:	50cd      	str	r5, [r1, r3]
 800419c:	4630      	mov	r0, r6
 800419e:	f000 f85c 	bl	800425a <__malloc_unlock>
 80041a2:	f104 000b 	add.w	r0, r4, #11
 80041a6:	1d23      	adds	r3, r4, #4
 80041a8:	f020 0007 	bic.w	r0, r0, #7
 80041ac:	1ac3      	subs	r3, r0, r3
 80041ae:	d0d3      	beq.n	8004158 <_malloc_r+0x20>
 80041b0:	425a      	negs	r2, r3
 80041b2:	50e2      	str	r2, [r4, r3]
 80041b4:	e7d0      	b.n	8004158 <_malloc_r+0x20>
 80041b6:	684b      	ldr	r3, [r1, #4]
 80041b8:	428c      	cmp	r4, r1
 80041ba:	bf16      	itet	ne
 80041bc:	6063      	strne	r3, [r4, #4]
 80041be:	6013      	streq	r3, [r2, #0]
 80041c0:	460c      	movne	r4, r1
 80041c2:	e7eb      	b.n	800419c <_malloc_r+0x64>
 80041c4:	460c      	mov	r4, r1
 80041c6:	6849      	ldr	r1, [r1, #4]
 80041c8:	e7cc      	b.n	8004164 <_malloc_r+0x2c>
 80041ca:	1cc4      	adds	r4, r0, #3
 80041cc:	f024 0403 	bic.w	r4, r4, #3
 80041d0:	42a0      	cmp	r0, r4
 80041d2:	d005      	beq.n	80041e0 <_malloc_r+0xa8>
 80041d4:	1a21      	subs	r1, r4, r0
 80041d6:	4630      	mov	r0, r6
 80041d8:	f000 f82e 	bl	8004238 <_sbrk_r>
 80041dc:	3001      	adds	r0, #1
 80041de:	d0cf      	beq.n	8004180 <_malloc_r+0x48>
 80041e0:	6025      	str	r5, [r4, #0]
 80041e2:	e7db      	b.n	800419c <_malloc_r+0x64>
 80041e4:	200004a8 	.word	0x200004a8
 80041e8:	200004ac 	.word	0x200004ac

080041ec <_realloc_r>:
 80041ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ee:	4607      	mov	r7, r0
 80041f0:	4614      	mov	r4, r2
 80041f2:	460e      	mov	r6, r1
 80041f4:	b921      	cbnz	r1, 8004200 <_realloc_r+0x14>
 80041f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80041fa:	4611      	mov	r1, r2
 80041fc:	f7ff bf9c 	b.w	8004138 <_malloc_r>
 8004200:	b922      	cbnz	r2, 800420c <_realloc_r+0x20>
 8004202:	f7ff ff4d 	bl	80040a0 <_free_r>
 8004206:	4625      	mov	r5, r4
 8004208:	4628      	mov	r0, r5
 800420a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800420c:	f000 f826 	bl	800425c <_malloc_usable_size_r>
 8004210:	42a0      	cmp	r0, r4
 8004212:	d20f      	bcs.n	8004234 <_realloc_r+0x48>
 8004214:	4621      	mov	r1, r4
 8004216:	4638      	mov	r0, r7
 8004218:	f7ff ff8e 	bl	8004138 <_malloc_r>
 800421c:	4605      	mov	r5, r0
 800421e:	2800      	cmp	r0, #0
 8004220:	d0f2      	beq.n	8004208 <_realloc_r+0x1c>
 8004222:	4631      	mov	r1, r6
 8004224:	4622      	mov	r2, r4
 8004226:	f7ff ff17 	bl	8004058 <memcpy>
 800422a:	4631      	mov	r1, r6
 800422c:	4638      	mov	r0, r7
 800422e:	f7ff ff37 	bl	80040a0 <_free_r>
 8004232:	e7e9      	b.n	8004208 <_realloc_r+0x1c>
 8004234:	4635      	mov	r5, r6
 8004236:	e7e7      	b.n	8004208 <_realloc_r+0x1c>

08004238 <_sbrk_r>:
 8004238:	b538      	push	{r3, r4, r5, lr}
 800423a:	2300      	movs	r3, #0
 800423c:	4c05      	ldr	r4, [pc, #20]	; (8004254 <_sbrk_r+0x1c>)
 800423e:	4605      	mov	r5, r0
 8004240:	4608      	mov	r0, r1
 8004242:	6023      	str	r3, [r4, #0]
 8004244:	f7fd fab4 	bl	80017b0 <_sbrk>
 8004248:	1c43      	adds	r3, r0, #1
 800424a:	d102      	bne.n	8004252 <_sbrk_r+0x1a>
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	b103      	cbz	r3, 8004252 <_sbrk_r+0x1a>
 8004250:	602b      	str	r3, [r5, #0]
 8004252:	bd38      	pop	{r3, r4, r5, pc}
 8004254:	20000550 	.word	0x20000550

08004258 <__malloc_lock>:
 8004258:	4770      	bx	lr

0800425a <__malloc_unlock>:
 800425a:	4770      	bx	lr

0800425c <_malloc_usable_size_r>:
 800425c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004260:	1f18      	subs	r0, r3, #4
 8004262:	2b00      	cmp	r3, #0
 8004264:	bfbc      	itt	lt
 8004266:	580b      	ldrlt	r3, [r1, r0]
 8004268:	18c0      	addlt	r0, r0, r3
 800426a:	4770      	bx	lr

0800426c <_init>:
 800426c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426e:	bf00      	nop
 8004270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004272:	bc08      	pop	{r3}
 8004274:	469e      	mov	lr, r3
 8004276:	4770      	bx	lr

08004278 <_fini>:
 8004278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427a:	bf00      	nop
 800427c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800427e:	bc08      	pop	{r3}
 8004280:	469e      	mov	lr, r3
 8004282:	4770      	bx	lr
