
Rarchi_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f5c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ae4  08004068  08004068  00014068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b4c  08005b4c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08005b4c  08005b4c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b4c  08005b4c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b4c  08005b4c  00015b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b50  08005b50  00015b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005b54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  20000080  08005bd4  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  08005bd4  00020554  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec47  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ee5  00000000  00000000  0002ecf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d78  00000000  00000000  00030bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ca8  00000000  00000000  00031950  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017ee5  00000000  00000000  000325f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b3c4  00000000  00000000  0004a4dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b061  00000000  00000000  000558a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e0902  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bc0  00000000  00000000  000e0980  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08004050 	.word	0x08004050

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08004050 	.word	0x08004050

0800014c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b09a      	sub	sp, #104	; 0x68
 8000150:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	Player children;
	children.points = 0;
 8000152:	2300      	movs	r3, #0
 8000154:	653b      	str	r3, [r7, #80]	; 0x50
	children.state_machine = INIT;
 8000156:	2300      	movs	r3, #0
 8000158:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	children.scrol_position = 18;
 800015c:	2312      	movs	r3, #18
 800015e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	children.game1_questions = 0;
 8000162:	2300      	movs	r3, #0
 8000164:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	children.selected_game_item = 0;
 8000168:	2300      	movs	r3, #0
 800016a:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800016e:	f001 fa95 	bl	800169c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000172:	f000 fb6b 	bl	800084c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000176:	f000 fc2b 	bl	80009d0 <MX_GPIO_Init>
	MX_I2C1_Init();
 800017a:	f000 fbad 	bl	80008d8 <MX_I2C1_Init>
	MX_TIM2_Init();
 800017e:	f000 fbd9 	bl	8000934 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	SSD1306_Init(); // initialise
 8000182:	f000 fd1f 	bl	8000bc4 <SSD1306_Init>
	HAL_TIM_Base_Init(&htim2);
 8000186:	48c5      	ldr	r0, [pc, #788]	; (800049c <main+0x350>)
 8000188:	f002 ff30 	bl	8002fec <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 800018c:	48c3      	ldr	r0, [pc, #780]	; (800049c <main+0x350>)
 800018e:	f002 ff7d 	bl	800308c <HAL_TIM_Base_Start_IT>
	timer_val = __HAL_TIM_GET_COUNTER(&htim2);
 8000192:	4bc2      	ldr	r3, [pc, #776]	; (800049c <main+0x350>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000198:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	SSD1306_GotoXY(0, 0);
 800019c:	2100      	movs	r1, #0
 800019e:	2000      	movs	r0, #0
 80001a0:	f000 fe78 	bl	8000e94 <SSD1306_GotoXY>
	SSD1306_Puts("PTS:", &Font_11x18, 1);
 80001a4:	2201      	movs	r2, #1
 80001a6:	49be      	ldr	r1, [pc, #760]	; (80004a0 <main+0x354>)
 80001a8:	48be      	ldr	r0, [pc, #760]	; (80004a4 <main+0x358>)
 80001aa:	f000 ff09 	bl	8000fc0 <SSD1306_Puts>
	SSD1306_GotoXY(42, 0);
 80001ae:	2100      	movs	r1, #0
 80001b0:	202a      	movs	r0, #42	; 0x2a
 80001b2:	f000 fe6f 	bl	8000e94 <SSD1306_GotoXY>
	char *numberstring[(((sizeof children.points)) + 2) / 3 + 2];
	sprintf(numberstring, "%d", children.points);
 80001b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80001b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80001bc:	49ba      	ldr	r1, [pc, #744]	; (80004a8 <main+0x35c>)
 80001be:	4618      	mov	r0, r3
 80001c0:	f003 fb34 	bl	800382c <siprintf>
	SSD1306_Puts(numberstring, &Font_11x18, 1);
 80001c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80001c8:	2201      	movs	r2, #1
 80001ca:	49b5      	ldr	r1, [pc, #724]	; (80004a0 <main+0x354>)
 80001cc:	4618      	mov	r0, r3
 80001ce:	f000 fef7 	bl	8000fc0 <SSD1306_Puts>
	HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 0);
 80001d2:	2200      	movs	r2, #0
 80001d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001d8:	48b4      	ldr	r0, [pc, #720]	; (80004ac <main+0x360>)
 80001da:	f001 fd62 	bl	8001ca2 <HAL_GPIO_WritePin>

	SSD1306_DrawBitmap(0, 0, image_data_test_real, 128, 64, 1);
 80001de:	2301      	movs	r3, #1
 80001e0:	9301      	str	r3, [sp, #4]
 80001e2:	2340      	movs	r3, #64	; 0x40
 80001e4:	9300      	str	r3, [sp, #0]
 80001e6:	2380      	movs	r3, #128	; 0x80
 80001e8:	4ab1      	ldr	r2, [pc, #708]	; (80004b0 <main+0x364>)
 80001ea:	2100      	movs	r1, #0
 80001ec:	2000      	movs	r0, #0
 80001ee:	f000 fc81 	bl	8000af4 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 80001f2:	f000 fdab 	bl	8000d4c <SSD1306_UpdateScreen>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		switch (children.state_machine) {
 80001f6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80001fa:	2b05      	cmp	r3, #5
 80001fc:	d8fb      	bhi.n	80001f6 <main+0xaa>
 80001fe:	a201      	add	r2, pc, #4	; (adr r2, 8000204 <main+0xb8>)
 8000200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000204:	0800021d 	.word	0x0800021d
 8000208:	080002df 	.word	0x080002df
 800020c:	080004e9 	.word	0x080004e9
 8000210:	080006c3 	.word	0x080006c3
 8000214:	08000735 	.word	0x08000735
 8000218:	080007a5 	.word	0x080007a5
		case INIT:
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin) == 0
 800021c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000220:	48a2      	ldr	r0, [pc, #648]	; (80004ac <main+0x360>)
 8000222:	f001 fd27 	bl	8001c74 <HAL_GPIO_ReadPin>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d008      	beq.n	800023e <main+0xf2>
					|| HAL_GPIO_ReadPin(BUTTON_LEFT_GPIO_Port, BUTTON_LEFT_Pin)
 800022c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000230:	489e      	ldr	r0, [pc, #632]	; (80004ac <main+0x360>)
 8000232:	f001 fd1f 	bl	8001c74 <HAL_GPIO_ReadPin>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	f040 82e9 	bne.w	8000810 <main+0x6c4>
							== 0) {
				HAL_GPIO_WritePin(RGB_RED_GPIO_Port, RGB_RED_Pin, 1);
 800023e:	2201      	movs	r2, #1
 8000240:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000244:	4899      	ldr	r0, [pc, #612]	; (80004ac <main+0x360>)
 8000246:	f001 fd2c 	bl	8001ca2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 0);
 800024a:	2200      	movs	r2, #0
 800024c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000250:	4896      	ldr	r0, [pc, #600]	; (80004ac <main+0x360>)
 8000252:	f001 fd26 	bl	8001ca2 <HAL_GPIO_WritePin>
				//I update the screen
				SSD1306_Clear();
 8000256:	f001 f83d 	bl	80012d4 <SSD1306_Clear>
				SSD1306_GotoXY(20, 18);
 800025a:	2112      	movs	r1, #18
 800025c:	2014      	movs	r0, #20
 800025e:	f000 fe19 	bl	8000e94 <SSD1306_GotoXY>
				SSD1306_Puts("1:Questions", &Font_7x10, 1);
 8000262:	2201      	movs	r2, #1
 8000264:	4993      	ldr	r1, [pc, #588]	; (80004b4 <main+0x368>)
 8000266:	4894      	ldr	r0, [pc, #592]	; (80004b8 <main+0x36c>)
 8000268:	f000 feaa 	bl	8000fc0 <SSD1306_Puts>
				SSD1306_GotoXY(20, 28);
 800026c:	211c      	movs	r1, #28
 800026e:	2014      	movs	r0, #20
 8000270:	f000 fe10 	bl	8000e94 <SSD1306_GotoXY>
				SSD1306_Puts("2:Relations", &Font_7x10, 1);
 8000274:	2201      	movs	r2, #1
 8000276:	498f      	ldr	r1, [pc, #572]	; (80004b4 <main+0x368>)
 8000278:	4890      	ldr	r0, [pc, #576]	; (80004bc <main+0x370>)
 800027a:	f000 fea1 	bl	8000fc0 <SSD1306_Puts>
				SSD1306_GotoXY(20, 38);
 800027e:	2126      	movs	r1, #38	; 0x26
 8000280:	2014      	movs	r0, #20
 8000282:	f000 fe07 	bl	8000e94 <SSD1306_GotoXY>
				SSD1306_Puts("3:Maths", &Font_7x10, 1);
 8000286:	2201      	movs	r2, #1
 8000288:	498a      	ldr	r1, [pc, #552]	; (80004b4 <main+0x368>)
 800028a:	488d      	ldr	r0, [pc, #564]	; (80004c0 <main+0x374>)
 800028c:	f000 fe98 	bl	8000fc0 <SSD1306_Puts>
				SSD1306_GotoXY(20, 48);
 8000290:	2130      	movs	r1, #48	; 0x30
 8000292:	2014      	movs	r0, #20
 8000294:	f000 fdfe 	bl	8000e94 <SSD1306_GotoXY>
				SSD1306_Puts("4:Orthography", &Font_7x10, 1);
 8000298:	2201      	movs	r2, #1
 800029a:	4986      	ldr	r1, [pc, #536]	; (80004b4 <main+0x368>)
 800029c:	4889      	ldr	r0, [pc, #548]	; (80004c4 <main+0x378>)
 800029e:	f000 fe8f 	bl	8000fc0 <SSD1306_Puts>
				SSD1306_GotoXY(50, 0);
 80002a2:	2100      	movs	r1, #0
 80002a4:	2032      	movs	r0, #50	; 0x32
 80002a6:	f000 fdf5 	bl	8000e94 <SSD1306_GotoXY>
				SSD1306_Puts("Select game", &Font_7x10, 1);
 80002aa:	2201      	movs	r2, #1
 80002ac:	4981      	ldr	r1, [pc, #516]	; (80004b4 <main+0x368>)
 80002ae:	4886      	ldr	r0, [pc, #536]	; (80004c8 <main+0x37c>)
 80002b0:	f000 fe86 	bl	8000fc0 <SSD1306_Puts>
				children.scrol_position = 28;
 80002b4:	231c      	movs	r3, #28
 80002b6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
				SSD1306_GotoXY(10, 18);
 80002ba:	2112      	movs	r1, #18
 80002bc:	200a      	movs	r0, #10
 80002be:	f000 fde9 	bl	8000e94 <SSD1306_GotoXY>
				SSD1306_Puts(">", &Font_7x10, 1);
 80002c2:	2201      	movs	r2, #1
 80002c4:	497b      	ldr	r1, [pc, #492]	; (80004b4 <main+0x368>)
 80002c6:	4881      	ldr	r0, [pc, #516]	; (80004cc <main+0x380>)
 80002c8:	f000 fe7a 	bl	8000fc0 <SSD1306_Puts>
				SSD1306_UpdateScreen(); //display
 80002cc:	f000 fd3e 	bl	8000d4c <SSD1306_UpdateScreen>
				HAL_Delay(60);
 80002d0:	203c      	movs	r0, #60	; 0x3c
 80002d2:	f001 fa45 	bl	8001760 <HAL_Delay>
				children.state_machine = MENU;
 80002d6:	2301      	movs	r3, #1
 80002d8:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
			}
			break;
 80002dc:	e298      	b.n	8000810 <main+0x6c4>
		case MENU:
			if (HAL_GPIO_ReadPin(BUTTON_LEFT_GPIO_Port, BUTTON_LEFT_Pin) == 0) {
 80002de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002e2:	4872      	ldr	r0, [pc, #456]	; (80004ac <main+0x360>)
 80002e4:	f001 fcc6 	bl	8001c74 <HAL_GPIO_ReadPin>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d146      	bne.n	800037c <main+0x230>
				SSD1306_GotoXY(10, 18);
 80002ee:	2112      	movs	r1, #18
 80002f0:	200a      	movs	r0, #10
 80002f2:	f000 fdcf 	bl	8000e94 <SSD1306_GotoXY>
				SSD1306_Puts(" ", &Font_7x10, 1);
 80002f6:	2201      	movs	r2, #1
 80002f8:	496e      	ldr	r1, [pc, #440]	; (80004b4 <main+0x368>)
 80002fa:	4875      	ldr	r0, [pc, #468]	; (80004d0 <main+0x384>)
 80002fc:	f000 fe60 	bl	8000fc0 <SSD1306_Puts>
				SSD1306_GotoXY(10, 28);
 8000300:	211c      	movs	r1, #28
 8000302:	200a      	movs	r0, #10
 8000304:	f000 fdc6 	bl	8000e94 <SSD1306_GotoXY>
				SSD1306_Puts(" ", &Font_7x10, 1);
 8000308:	2201      	movs	r2, #1
 800030a:	496a      	ldr	r1, [pc, #424]	; (80004b4 <main+0x368>)
 800030c:	4870      	ldr	r0, [pc, #448]	; (80004d0 <main+0x384>)
 800030e:	f000 fe57 	bl	8000fc0 <SSD1306_Puts>
				SSD1306_GotoXY(10, 38);
 8000312:	2126      	movs	r1, #38	; 0x26
 8000314:	200a      	movs	r0, #10
 8000316:	f000 fdbd 	bl	8000e94 <SSD1306_GotoXY>
				SSD1306_Puts(" ", &Font_7x10, 1);
 800031a:	2201      	movs	r2, #1
 800031c:	4965      	ldr	r1, [pc, #404]	; (80004b4 <main+0x368>)
 800031e:	486c      	ldr	r0, [pc, #432]	; (80004d0 <main+0x384>)
 8000320:	f000 fe4e 	bl	8000fc0 <SSD1306_Puts>
				SSD1306_GotoXY(10, 48);
 8000324:	2130      	movs	r1, #48	; 0x30
 8000326:	200a      	movs	r0, #10
 8000328:	f000 fdb4 	bl	8000e94 <SSD1306_GotoXY>
				SSD1306_Puts(" ", &Font_7x10, 1);
 800032c:	2201      	movs	r2, #1
 800032e:	4961      	ldr	r1, [pc, #388]	; (80004b4 <main+0x368>)
 8000330:	4867      	ldr	r0, [pc, #412]	; (80004d0 <main+0x384>)
 8000332:	f000 fe45 	bl	8000fc0 <SSD1306_Puts>
				SSD1306_GotoXY(10, children.scrol_position);
 8000336:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800033a:	b29b      	uxth	r3, r3
 800033c:	4619      	mov	r1, r3
 800033e:	200a      	movs	r0, #10
 8000340:	f000 fda8 	bl	8000e94 <SSD1306_GotoXY>
				SSD1306_Puts(">", &Font_7x10, 1);
 8000344:	2201      	movs	r2, #1
 8000346:	495b      	ldr	r1, [pc, #364]	; (80004b4 <main+0x368>)
 8000348:	4860      	ldr	r0, [pc, #384]	; (80004cc <main+0x380>)
 800034a:	f000 fe39 	bl	8000fc0 <SSD1306_Puts>
				SSD1306_UpdateScreen(); //display
 800034e:	f000 fcfd 	bl	8000d4c <SSD1306_UpdateScreen>
				if (children.scrol_position >= 48) {
 8000352:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000356:	2b2f      	cmp	r3, #47	; 0x2f
 8000358:	d903      	bls.n	8000362 <main+0x216>
					children.scrol_position = 18;
 800035a:	2312      	movs	r3, #18
 800035c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8000360:	e009      	b.n	8000376 <main+0x22a>
				} else if (children.scrol_position != 48) {
 8000362:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000366:	2b30      	cmp	r3, #48	; 0x30
 8000368:	d005      	beq.n	8000376 <main+0x22a>
					children.scrol_position += 10;
 800036a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800036e:	330a      	adds	r3, #10
 8000370:	b2db      	uxtb	r3, r3
 8000372:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
				}
				HAL_Delay(60);
 8000376:	203c      	movs	r0, #60	; 0x3c
 8000378:	f001 f9f2 	bl	8001760 <HAL_Delay>
			}
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin)
 800037c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000380:	484a      	ldr	r0, [pc, #296]	; (80004ac <main+0x360>)
 8000382:	f001 fc77 	bl	8001c74 <HAL_GPIO_ReadPin>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	f040 8243 	bne.w	8000814 <main+0x6c8>
					== 0) {
				SSD1306_Clear();
 800038e:	f000 ffa1 	bl	80012d4 <SSD1306_Clear>
				HAL_GPIO_WritePin(RGB_RED_GPIO_Port, RGB_RED_Pin, 0);
 8000392:	2200      	movs	r2, #0
 8000394:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000398:	4844      	ldr	r0, [pc, #272]	; (80004ac <main+0x360>)
 800039a:	f001 fc82 	bl	8001ca2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 0);
 800039e:	2200      	movs	r2, #0
 80003a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003a4:	4841      	ldr	r0, [pc, #260]	; (80004ac <main+0x360>)
 80003a6:	f001 fc7c 	bl	8001ca2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 1);
 80003aa:	2201      	movs	r2, #1
 80003ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b0:	483e      	ldr	r0, [pc, #248]	; (80004ac <main+0x360>)
 80003b2:	f001 fc76 	bl	8001ca2 <HAL_GPIO_WritePin>
				SSD1306_GotoXY(0, 0);
 80003b6:	2100      	movs	r1, #0
 80003b8:	2000      	movs	r0, #0
 80003ba:	f000 fd6b 	bl	8000e94 <SSD1306_GotoXY>

				if (children.scrol_position == 28) {
 80003be:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80003c2:	2b1c      	cmp	r3, #28
 80003c4:	d13e      	bne.n	8000444 <main+0x2f8>
					children.state_machine = GAME_1;
 80003c6:	2302      	movs	r3, #2
 80003c8:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
					children.game1_questions = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
					SSD1306_GotoXY(0, 0);
 80003d2:	2100      	movs	r1, #0
 80003d4:	2000      	movs	r0, #0
 80003d6:	f000 fd5d 	bl	8000e94 <SSD1306_GotoXY>
					SSD1306_Puts(game1[children.game1_questions].question,
 80003da:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80003de:	4a3d      	ldr	r2, [pc, #244]	; (80004d4 <main+0x388>)
 80003e0:	011b      	lsls	r3, r3, #4
 80003e2:	4413      	add	r3, r2
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	2201      	movs	r2, #1
 80003e8:	4932      	ldr	r1, [pc, #200]	; (80004b4 <main+0x368>)
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 fde8 	bl	8000fc0 <SSD1306_Puts>
							&Font_7x10, 1);
					SSD1306_GotoXY(0, 30);
 80003f0:	211e      	movs	r1, #30
 80003f2:	2000      	movs	r0, #0
 80003f4:	f000 fd4e 	bl	8000e94 <SSD1306_GotoXY>
					SSD1306_Puts(game1[children.game1_questions].yes,
 80003f8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80003fc:	4a35      	ldr	r2, [pc, #212]	; (80004d4 <main+0x388>)
 80003fe:	011b      	lsls	r3, r3, #4
 8000400:	4413      	add	r3, r2
 8000402:	3304      	adds	r3, #4
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	2201      	movs	r2, #1
 8000408:	492a      	ldr	r1, [pc, #168]	; (80004b4 <main+0x368>)
 800040a:	4618      	mov	r0, r3
 800040c:	f000 fdd8 	bl	8000fc0 <SSD1306_Puts>
							&Font_7x10, 1);
					SSD1306_GotoXY(80, 30);
 8000410:	211e      	movs	r1, #30
 8000412:	2050      	movs	r0, #80	; 0x50
 8000414:	f000 fd3e 	bl	8000e94 <SSD1306_GotoXY>
					SSD1306_Puts(game1[children.game1_questions].no,
 8000418:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800041c:	4a2d      	ldr	r2, [pc, #180]	; (80004d4 <main+0x388>)
 800041e:	011b      	lsls	r3, r3, #4
 8000420:	4413      	add	r3, r2
 8000422:	3308      	adds	r3, #8
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	2201      	movs	r2, #1
 8000428:	4922      	ldr	r1, [pc, #136]	; (80004b4 <main+0x368>)
 800042a:	4618      	mov	r0, r3
 800042c:	f000 fdc8 	bl	8000fc0 <SSD1306_Puts>
							&Font_7x10, 1);
					SSD1306_GotoXY(20, 50);
 8000430:	2132      	movs	r1, #50	; 0x32
 8000432:	2014      	movs	r0, #20
 8000434:	f000 fd2e 	bl	8000e94 <SSD1306_GotoXY>
					SSD1306_Puts("<=>", &Font_7x10, 1);
 8000438:	2201      	movs	r2, #1
 800043a:	491e      	ldr	r1, [pc, #120]	; (80004b4 <main+0x368>)
 800043c:	4826      	ldr	r0, [pc, #152]	; (80004d8 <main+0x38c>)
 800043e:	f000 fdbf 	bl	8000fc0 <SSD1306_Puts>
 8000442:	e025      	b.n	8000490 <main+0x344>
					//SSD1306_GotoXY(100, 50);
					//SSD1306_Puts("<=>", &Font_7x10, 1);

				} else if (children.scrol_position == 38) {
 8000444:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000448:	2b26      	cmp	r3, #38	; 0x26
 800044a:	d108      	bne.n	800045e <main+0x312>
					SSD1306_Puts("GAME 2", &Font_11x18, 1);
 800044c:	2201      	movs	r2, #1
 800044e:	4914      	ldr	r1, [pc, #80]	; (80004a0 <main+0x354>)
 8000450:	4822      	ldr	r0, [pc, #136]	; (80004dc <main+0x390>)
 8000452:	f000 fdb5 	bl	8000fc0 <SSD1306_Puts>
					children.state_machine = GAME_2;
 8000456:	2303      	movs	r3, #3
 8000458:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800045c:	e018      	b.n	8000490 <main+0x344>
				} else if (children.scrol_position == 48) {
 800045e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000462:	2b30      	cmp	r3, #48	; 0x30
 8000464:	d108      	bne.n	8000478 <main+0x32c>
					SSD1306_Puts("GAME 3", &Font_11x18, 1);
 8000466:	2201      	movs	r2, #1
 8000468:	490d      	ldr	r1, [pc, #52]	; (80004a0 <main+0x354>)
 800046a:	481d      	ldr	r0, [pc, #116]	; (80004e0 <main+0x394>)
 800046c:	f000 fda8 	bl	8000fc0 <SSD1306_Puts>
					children.state_machine = GAME_3;
 8000470:	2304      	movs	r3, #4
 8000472:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8000476:	e00b      	b.n	8000490 <main+0x344>
				} else if (children.scrol_position == 18) {
 8000478:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800047c:	2b12      	cmp	r3, #18
 800047e:	d107      	bne.n	8000490 <main+0x344>
					SSD1306_Puts("GAME 4", &Font_11x18, 1);
 8000480:	2201      	movs	r2, #1
 8000482:	4907      	ldr	r1, [pc, #28]	; (80004a0 <main+0x354>)
 8000484:	4817      	ldr	r0, [pc, #92]	; (80004e4 <main+0x398>)
 8000486:	f000 fd9b 	bl	8000fc0 <SSD1306_Puts>
					children.state_machine = GAME_4;
 800048a:	2305      	movs	r3, #5
 800048c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
				}
				SSD1306_UpdateScreen();
 8000490:	f000 fc5c 	bl	8000d4c <SSD1306_UpdateScreen>
				HAL_Delay(60);
 8000494:	203c      	movs	r0, #60	; 0x3c
 8000496:	f001 f963 	bl	8001760 <HAL_Delay>
			}
			break;
 800049a:	e1bb      	b.n	8000814 <main+0x6c8>
 800049c:	20000504 	.word	0x20000504
 80004a0:	20000008 	.word	0x20000008
 80004a4:	08004144 	.word	0x08004144
 80004a8:	0800414c 	.word	0x0800414c
 80004ac:	40010c00 	.word	0x40010c00
 80004b0:	08005690 	.word	0x08005690
 80004b4:	20000000 	.word	0x20000000
 80004b8:	08004150 	.word	0x08004150
 80004bc:	0800415c 	.word	0x0800415c
 80004c0:	08004168 	.word	0x08004168
 80004c4:	08004170 	.word	0x08004170
 80004c8:	08004180 	.word	0x08004180
 80004cc:	0800418c 	.word	0x0800418c
 80004d0:	08004190 	.word	0x08004190
 80004d4:	08005a90 	.word	0x08005a90
 80004d8:	08004194 	.word	0x08004194
 80004dc:	08004198 	.word	0x08004198
 80004e0:	080041a0 	.word	0x080041a0
 80004e4:	080041a8 	.word	0x080041a8
		case (GAME_1):
			//If I confirm the answer:
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin)
 80004e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004ec:	48ce      	ldr	r0, [pc, #824]	; (8000828 <main+0x6dc>)
 80004ee:	f001 fbc1 	bl	8001c74 <HAL_GPIO_ReadPin>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	f040 80a3 	bne.w	8000640 <main+0x4f4>
					== 0) {
				//I check if is the right response:
				if (game1[children.game1_questions].answare == children.selected_game_item){
 80004fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80004fe:	4acb      	ldr	r2, [pc, #812]	; (800082c <main+0x6e0>)
 8000500:	011b      	lsls	r3, r3, #4
 8000502:	4413      	add	r3, r2
 8000504:	330c      	adds	r3, #12
 8000506:	781a      	ldrb	r2, [r3, #0]
 8000508:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800050c:	429a      	cmp	r2, r3
 800050e:	d109      	bne.n	8000524 <main+0x3d8>
					HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 0);
 8000510:	2200      	movs	r2, #0
 8000512:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000516:	48c4      	ldr	r0, [pc, #784]	; (8000828 <main+0x6dc>)
 8000518:	f001 fbc3 	bl	8001ca2 <HAL_GPIO_WritePin>
					children.points++;
 800051c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800051e:	3301      	adds	r3, #1
 8000520:	653b      	str	r3, [r7, #80]	; 0x50
 8000522:	e005      	b.n	8000530 <main+0x3e4>
				}else{
					HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 1);
 8000524:	2201      	movs	r2, #1
 8000526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052a:	48bf      	ldr	r0, [pc, #764]	; (8000828 <main+0x6dc>)
 800052c:	f001 fbb9 	bl	8001ca2 <HAL_GPIO_WritePin>
				}
				//Add the points in case of win and then roll over other question:
				children.game1_questions++;
 8000530:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000534:	3301      	adds	r3, #1
 8000536:	b29b      	uxth	r3, r3
 8000538:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				children.selected_game_item = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
				if (children.game1_questions <= 5) {
 8000542:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000546:	2b05      	cmp	r3, #5
 8000548:	d83f      	bhi.n	80005ca <main+0x47e>
					SSD1306_Clear();
 800054a:	f000 fec3 	bl	80012d4 <SSD1306_Clear>
					SSD1306_GotoXY(0, 0);
 800054e:	2100      	movs	r1, #0
 8000550:	2000      	movs	r0, #0
 8000552:	f000 fc9f 	bl	8000e94 <SSD1306_GotoXY>
					SSD1306_Puts(game1[children.game1_questions].question,
 8000556:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800055a:	4ab4      	ldr	r2, [pc, #720]	; (800082c <main+0x6e0>)
 800055c:	011b      	lsls	r3, r3, #4
 800055e:	4413      	add	r3, r2
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	2201      	movs	r2, #1
 8000564:	49b2      	ldr	r1, [pc, #712]	; (8000830 <main+0x6e4>)
 8000566:	4618      	mov	r0, r3
 8000568:	f000 fd2a 	bl	8000fc0 <SSD1306_Puts>
							&Font_7x10, 1);
					SSD1306_GotoXY(0, 30);
 800056c:	211e      	movs	r1, #30
 800056e:	2000      	movs	r0, #0
 8000570:	f000 fc90 	bl	8000e94 <SSD1306_GotoXY>
					SSD1306_Puts(game1[children.game1_questions].yes,
 8000574:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000578:	4aac      	ldr	r2, [pc, #688]	; (800082c <main+0x6e0>)
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	4413      	add	r3, r2
 800057e:	3304      	adds	r3, #4
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2201      	movs	r2, #1
 8000584:	49aa      	ldr	r1, [pc, #680]	; (8000830 <main+0x6e4>)
 8000586:	4618      	mov	r0, r3
 8000588:	f000 fd1a 	bl	8000fc0 <SSD1306_Puts>
							&Font_7x10, 1);
					SSD1306_GotoXY(80, 30);
 800058c:	211e      	movs	r1, #30
 800058e:	2050      	movs	r0, #80	; 0x50
 8000590:	f000 fc80 	bl	8000e94 <SSD1306_GotoXY>
					SSD1306_Puts(game1[children.game1_questions].no,
 8000594:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000598:	4aa4      	ldr	r2, [pc, #656]	; (800082c <main+0x6e0>)
 800059a:	011b      	lsls	r3, r3, #4
 800059c:	4413      	add	r3, r2
 800059e:	3308      	adds	r3, #8
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2201      	movs	r2, #1
 80005a4:	49a2      	ldr	r1, [pc, #648]	; (8000830 <main+0x6e4>)
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 fd0a 	bl	8000fc0 <SSD1306_Puts>
							&Font_7x10, 1);
					children.selected_game_item = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
					SSD1306_GotoXY(20, 50);
 80005b2:	2132      	movs	r1, #50	; 0x32
 80005b4:	2014      	movs	r0, #20
 80005b6:	f000 fc6d 	bl	8000e94 <SSD1306_GotoXY>
					SSD1306_Puts("<=>", &Font_7x10, 1);
 80005ba:	2201      	movs	r2, #1
 80005bc:	499c      	ldr	r1, [pc, #624]	; (8000830 <main+0x6e4>)
 80005be:	489d      	ldr	r0, [pc, #628]	; (8000834 <main+0x6e8>)
 80005c0:	f000 fcfe 	bl	8000fc0 <SSD1306_Puts>
					//SSD1306_GotoXY(100, 50);
					//SSD1306_Puts("<=>", &Font_7x10, 1);
					SSD1306_UpdateScreen();
 80005c4:	f000 fbc2 	bl	8000d4c <SSD1306_UpdateScreen>
 80005c8:	e037      	b.n	800063a <main+0x4ee>
				} else {
					SSD1306_Clear();
 80005ca:	f000 fe83 	bl	80012d4 <SSD1306_Clear>
					children.state_machine = INIT;
 80005ce:	2300      	movs	r3, #0
 80005d0:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
					SSD1306_DrawBitmap(0, 0, image_data_test_real, 128, 64, 1);
 80005d4:	2301      	movs	r3, #1
 80005d6:	9301      	str	r3, [sp, #4]
 80005d8:	2340      	movs	r3, #64	; 0x40
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2380      	movs	r3, #128	; 0x80
 80005de:	4a96      	ldr	r2, [pc, #600]	; (8000838 <main+0x6ec>)
 80005e0:	2100      	movs	r1, #0
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 fa86 	bl	8000af4 <SSD1306_DrawBitmap>
					SSD1306_GotoXY(0, 0);
 80005e8:	2100      	movs	r1, #0
 80005ea:	2000      	movs	r0, #0
 80005ec:	f000 fc52 	bl	8000e94 <SSD1306_GotoXY>
					SSD1306_Puts("PTS:", &Font_11x18, 1);
 80005f0:	2201      	movs	r2, #1
 80005f2:	4992      	ldr	r1, [pc, #584]	; (800083c <main+0x6f0>)
 80005f4:	4892      	ldr	r0, [pc, #584]	; (8000840 <main+0x6f4>)
 80005f6:	f000 fce3 	bl	8000fc0 <SSD1306_Puts>
					SSD1306_GotoXY(42, 0);
 80005fa:	2100      	movs	r1, #0
 80005fc:	202a      	movs	r0, #42	; 0x2a
 80005fe:	f000 fc49 	bl	8000e94 <SSD1306_GotoXY>
					char *numberstring[(((sizeof children.points)) + 2) / 3 + 2];
					sprintf(numberstring, "%d", children.points);
 8000602:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000604:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000608:	498e      	ldr	r1, [pc, #568]	; (8000844 <main+0x6f8>)
 800060a:	4618      	mov	r0, r3
 800060c:	f003 f90e 	bl	800382c <siprintf>
					SSD1306_Puts(numberstring, &Font_11x18, 1);
 8000610:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000614:	2201      	movs	r2, #1
 8000616:	4989      	ldr	r1, [pc, #548]	; (800083c <main+0x6f0>)
 8000618:	4618      	mov	r0, r3
 800061a:	f000 fcd1 	bl	8000fc0 <SSD1306_Puts>
					SSD1306_UpdateScreen(); //display
 800061e:	f000 fb95 	bl	8000d4c <SSD1306_UpdateScreen>
					HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 0);
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000628:	487f      	ldr	r0, [pc, #508]	; (8000828 <main+0x6dc>)
 800062a:	f001 fb3a 	bl	8001ca2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 1);
 800062e:	2201      	movs	r2, #1
 8000630:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000634:	487c      	ldr	r0, [pc, #496]	; (8000828 <main+0x6dc>)
 8000636:	f001 fb34 	bl	8001ca2 <HAL_GPIO_WritePin>

				}
				HAL_Delay(100);
 800063a:	2064      	movs	r0, #100	; 0x64
 800063c:	f001 f890 	bl	8001760 <HAL_Delay>
			}
			//If I change the response:
			if (HAL_GPIO_ReadPin(BUTTON_LEFT_GPIO_Port, BUTTON_LEFT_Pin) == 0) {
 8000640:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000644:	4878      	ldr	r0, [pc, #480]	; (8000828 <main+0x6dc>)
 8000646:	f001 fb15 	bl	8001c74 <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	f040 80e3 	bne.w	8000818 <main+0x6cc>
				if (children.selected_game_item == 0) {
 8000652:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8000656:	2b00      	cmp	r3, #0
 8000658:	d118      	bne.n	800068c <main+0x540>
					SSD1306_GotoXY(20, 50);
 800065a:	2132      	movs	r1, #50	; 0x32
 800065c:	2014      	movs	r0, #20
 800065e:	f000 fc19 	bl	8000e94 <SSD1306_GotoXY>
					SSD1306_Puts("   ", &Font_7x10, 1);
 8000662:	2201      	movs	r2, #1
 8000664:	4972      	ldr	r1, [pc, #456]	; (8000830 <main+0x6e4>)
 8000666:	4878      	ldr	r0, [pc, #480]	; (8000848 <main+0x6fc>)
 8000668:	f000 fcaa 	bl	8000fc0 <SSD1306_Puts>

					SSD1306_GotoXY(100, 50);
 800066c:	2132      	movs	r1, #50	; 0x32
 800066e:	2064      	movs	r0, #100	; 0x64
 8000670:	f000 fc10 	bl	8000e94 <SSD1306_GotoXY>
					SSD1306_Puts("<=>", &Font_7x10, 1);
 8000674:	2201      	movs	r2, #1
 8000676:	496e      	ldr	r1, [pc, #440]	; (8000830 <main+0x6e4>)
 8000678:	486e      	ldr	r0, [pc, #440]	; (8000834 <main+0x6e8>)
 800067a:	f000 fca1 	bl	8000fc0 <SSD1306_Puts>
					children.selected_game_item++;
 800067e:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8000682:	3301      	adds	r3, #1
 8000684:	b2db      	uxtb	r3, r3
 8000686:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 800068a:	e014      	b.n	80006b6 <main+0x56a>
				} else {
					SSD1306_GotoXY(20, 50);
 800068c:	2132      	movs	r1, #50	; 0x32
 800068e:	2014      	movs	r0, #20
 8000690:	f000 fc00 	bl	8000e94 <SSD1306_GotoXY>
					SSD1306_Puts("<=>", &Font_7x10, 1);
 8000694:	2201      	movs	r2, #1
 8000696:	4966      	ldr	r1, [pc, #408]	; (8000830 <main+0x6e4>)
 8000698:	4866      	ldr	r0, [pc, #408]	; (8000834 <main+0x6e8>)
 800069a:	f000 fc91 	bl	8000fc0 <SSD1306_Puts>

					SSD1306_GotoXY(100, 50);
 800069e:	2132      	movs	r1, #50	; 0x32
 80006a0:	2064      	movs	r0, #100	; 0x64
 80006a2:	f000 fbf7 	bl	8000e94 <SSD1306_GotoXY>
					SSD1306_Puts("   ", &Font_7x10, 1);
 80006a6:	2201      	movs	r2, #1
 80006a8:	4961      	ldr	r1, [pc, #388]	; (8000830 <main+0x6e4>)
 80006aa:	4867      	ldr	r0, [pc, #412]	; (8000848 <main+0x6fc>)
 80006ac:	f000 fc88 	bl	8000fc0 <SSD1306_Puts>
					children.selected_game_item = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
				}
				SSD1306_UpdateScreen();
 80006b6:	f000 fb49 	bl	8000d4c <SSD1306_UpdateScreen>
				HAL_Delay(80);
 80006ba:	2050      	movs	r0, #80	; 0x50
 80006bc:	f001 f850 	bl	8001760 <HAL_Delay>
			}

			break;
 80006c0:	e0aa      	b.n	8000818 <main+0x6cc>
		case (GAME_2):
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin)
 80006c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c6:	4858      	ldr	r0, [pc, #352]	; (8000828 <main+0x6dc>)
 80006c8:	f001 fad4 	bl	8001c74 <HAL_GPIO_ReadPin>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	f040 80a4 	bne.w	800081c <main+0x6d0>
					== 0) {
				children.state_machine = INIT;
 80006d4:	2300      	movs	r3, #0
 80006d6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
				character_draw(1);
 80006da:	2001      	movs	r0, #1
 80006dc:	f000 ff8c 	bl	80015f8 <character_draw>
				SSD1306_GotoXY(0, 0);
 80006e0:	2100      	movs	r1, #0
 80006e2:	2000      	movs	r0, #0
 80006e4:	f000 fbd6 	bl	8000e94 <SSD1306_GotoXY>
				SSD1306_Puts("PTS:", &Font_11x18, 1);
 80006e8:	2201      	movs	r2, #1
 80006ea:	4954      	ldr	r1, [pc, #336]	; (800083c <main+0x6f0>)
 80006ec:	4854      	ldr	r0, [pc, #336]	; (8000840 <main+0x6f4>)
 80006ee:	f000 fc67 	bl	8000fc0 <SSD1306_Puts>
				SSD1306_GotoXY(42, 0);
 80006f2:	2100      	movs	r1, #0
 80006f4:	202a      	movs	r0, #42	; 0x2a
 80006f6:	f000 fbcd 	bl	8000e94 <SSD1306_GotoXY>
				char *numberstring[(((sizeof children.points)) + 2) / 3 + 2];
				sprintf(numberstring, "%d", children.points);
 80006fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80006fc:	f107 0320 	add.w	r3, r7, #32
 8000700:	4950      	ldr	r1, [pc, #320]	; (8000844 <main+0x6f8>)
 8000702:	4618      	mov	r0, r3
 8000704:	f003 f892 	bl	800382c <siprintf>
				SSD1306_Puts(numberstring, &Font_11x18, 1);
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	2201      	movs	r2, #1
 800070e:	494b      	ldr	r1, [pc, #300]	; (800083c <main+0x6f0>)
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fc55 	bl	8000fc0 <SSD1306_Puts>
				SSD1306_UpdateScreen(); //display
 8000716:	f000 fb19 	bl	8000d4c <SSD1306_UpdateScreen>
				HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000720:	4841      	ldr	r0, [pc, #260]	; (8000828 <main+0x6dc>)
 8000722:	f001 fabe 	bl	8001ca2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 1);
 8000726:	2201      	movs	r2, #1
 8000728:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800072c:	483e      	ldr	r0, [pc, #248]	; (8000828 <main+0x6dc>)
 800072e:	f001 fab8 	bl	8001ca2 <HAL_GPIO_WritePin>
			}
			break;
 8000732:	e073      	b.n	800081c <main+0x6d0>
		case (GAME_3):
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin)
 8000734:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000738:	483b      	ldr	r0, [pc, #236]	; (8000828 <main+0x6dc>)
 800073a:	f001 fa9b 	bl	8001c74 <HAL_GPIO_ReadPin>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d16d      	bne.n	8000820 <main+0x6d4>
					== 0) {
				children.state_machine = INIT;
 8000744:	2300      	movs	r3, #0
 8000746:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
				character_draw(1);
 800074a:	2001      	movs	r0, #1
 800074c:	f000 ff54 	bl	80015f8 <character_draw>
				SSD1306_GotoXY(0, 0);
 8000750:	2100      	movs	r1, #0
 8000752:	2000      	movs	r0, #0
 8000754:	f000 fb9e 	bl	8000e94 <SSD1306_GotoXY>
				SSD1306_Puts("PTS:", &Font_11x18, 1);
 8000758:	2201      	movs	r2, #1
 800075a:	4938      	ldr	r1, [pc, #224]	; (800083c <main+0x6f0>)
 800075c:	4838      	ldr	r0, [pc, #224]	; (8000840 <main+0x6f4>)
 800075e:	f000 fc2f 	bl	8000fc0 <SSD1306_Puts>
				SSD1306_GotoXY(42, 0);
 8000762:	2100      	movs	r1, #0
 8000764:	202a      	movs	r0, #42	; 0x2a
 8000766:	f000 fb95 	bl	8000e94 <SSD1306_GotoXY>
				char *numberstring[(((sizeof children.points)) + 2) / 3 + 2];
				sprintf(numberstring, "%d", children.points);
 800076a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	4934      	ldr	r1, [pc, #208]	; (8000844 <main+0x6f8>)
 8000772:	4618      	mov	r0, r3
 8000774:	f003 f85a 	bl	800382c <siprintf>
				SSD1306_Puts(numberstring, &Font_11x18, 1);
 8000778:	f107 0310 	add.w	r3, r7, #16
 800077c:	2201      	movs	r2, #1
 800077e:	492f      	ldr	r1, [pc, #188]	; (800083c <main+0x6f0>)
 8000780:	4618      	mov	r0, r3
 8000782:	f000 fc1d 	bl	8000fc0 <SSD1306_Puts>
				SSD1306_UpdateScreen(); //display
 8000786:	f000 fae1 	bl	8000d4c <SSD1306_UpdateScreen>
				HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000790:	4825      	ldr	r0, [pc, #148]	; (8000828 <main+0x6dc>)
 8000792:	f001 fa86 	bl	8001ca2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 1);
 8000796:	2201      	movs	r2, #1
 8000798:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800079c:	4822      	ldr	r0, [pc, #136]	; (8000828 <main+0x6dc>)
 800079e:	f001 fa80 	bl	8001ca2 <HAL_GPIO_WritePin>
			}
			break;
 80007a2:	e03d      	b.n	8000820 <main+0x6d4>
		case (GAME_4):
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin)
 80007a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007a8:	481f      	ldr	r0, [pc, #124]	; (8000828 <main+0x6dc>)
 80007aa:	f001 fa63 	bl	8001c74 <HAL_GPIO_ReadPin>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d137      	bne.n	8000824 <main+0x6d8>
					== 0) {
				children.state_machine = INIT;
 80007b4:	2300      	movs	r3, #0
 80007b6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
				character_draw(1);
 80007ba:	2001      	movs	r0, #1
 80007bc:	f000 ff1c 	bl	80015f8 <character_draw>
				SSD1306_GotoXY(0, 0);
 80007c0:	2100      	movs	r1, #0
 80007c2:	2000      	movs	r0, #0
 80007c4:	f000 fb66 	bl	8000e94 <SSD1306_GotoXY>
				SSD1306_Puts("PTS:", &Font_11x18, 1);
 80007c8:	2201      	movs	r2, #1
 80007ca:	491c      	ldr	r1, [pc, #112]	; (800083c <main+0x6f0>)
 80007cc:	481c      	ldr	r0, [pc, #112]	; (8000840 <main+0x6f4>)
 80007ce:	f000 fbf7 	bl	8000fc0 <SSD1306_Puts>
				SSD1306_GotoXY(42, 0);
 80007d2:	2100      	movs	r1, #0
 80007d4:	202a      	movs	r0, #42	; 0x2a
 80007d6:	f000 fb5d 	bl	8000e94 <SSD1306_GotoXY>
				char *numberstring[(((sizeof children.points)) + 2) / 3 + 2];
				sprintf(numberstring, "%d", children.points);
 80007da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80007dc:	463b      	mov	r3, r7
 80007de:	4919      	ldr	r1, [pc, #100]	; (8000844 <main+0x6f8>)
 80007e0:	4618      	mov	r0, r3
 80007e2:	f003 f823 	bl	800382c <siprintf>
				SSD1306_Puts(numberstring, &Font_11x18, 1);
 80007e6:	463b      	mov	r3, r7
 80007e8:	2201      	movs	r2, #1
 80007ea:	4914      	ldr	r1, [pc, #80]	; (800083c <main+0x6f0>)
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 fbe7 	bl	8000fc0 <SSD1306_Puts>
				SSD1306_UpdateScreen(); //display
 80007f2:	f000 faab 	bl	8000d4c <SSD1306_UpdateScreen>
				HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007fc:	480a      	ldr	r0, [pc, #40]	; (8000828 <main+0x6dc>)
 80007fe:	f001 fa50 	bl	8001ca2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 1);
 8000802:	2201      	movs	r2, #1
 8000804:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000808:	4807      	ldr	r0, [pc, #28]	; (8000828 <main+0x6dc>)
 800080a:	f001 fa4a 	bl	8001ca2 <HAL_GPIO_WritePin>
			}
			break;
 800080e:	e009      	b.n	8000824 <main+0x6d8>
			break;
 8000810:	bf00      	nop
 8000812:	e4f0      	b.n	80001f6 <main+0xaa>
			break;
 8000814:	bf00      	nop
 8000816:	e4ee      	b.n	80001f6 <main+0xaa>
			break;
 8000818:	bf00      	nop
 800081a:	e4ec      	b.n	80001f6 <main+0xaa>
			break;
 800081c:	bf00      	nop
 800081e:	e4ea      	b.n	80001f6 <main+0xaa>
			break;
 8000820:	bf00      	nop
 8000822:	e4e8      	b.n	80001f6 <main+0xaa>
			break;
 8000824:	bf00      	nop
		switch (children.state_machine) {
 8000826:	e4e6      	b.n	80001f6 <main+0xaa>
 8000828:	40010c00 	.word	0x40010c00
 800082c:	08005a90 	.word	0x08005a90
 8000830:	20000000 	.word	0x20000000
 8000834:	08004194 	.word	0x08004194
 8000838:	08005690 	.word	0x08005690
 800083c:	20000008 	.word	0x20000008
 8000840:	08004144 	.word	0x08004144
 8000844:	0800414c 	.word	0x0800414c
 8000848:	080041b0 	.word	0x080041b0

0800084c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b090      	sub	sp, #64	; 0x40
 8000850:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000852:	f107 0318 	add.w	r3, r7, #24
 8000856:	2228      	movs	r2, #40	; 0x28
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f002 ffde 	bl	800381c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800086e:	2301      	movs	r3, #1
 8000870:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000872:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000876:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000878:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800087c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800087e:	2301      	movs	r3, #1
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000882:	2302      	movs	r3, #2
 8000884:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000886:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800088a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 800088c:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 8000890:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000892:	f107 0318 	add.w	r3, r7, #24
 8000896:	4618      	mov	r0, r3
 8000898:	f001 ffa0 	bl	80027dc <HAL_RCC_OscConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0x5a>
		Error_Handler();
 80008a2:	f000 f921 	bl	8000ae8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008a6:	230f      	movs	r3, #15
 80008a8:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008aa:	2302      	movs	r3, #2
 80008ac:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2102      	movs	r1, #2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f002 fa0b 	bl	8002cdc <HAL_RCC_ClockConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0x84>
		Error_Handler();
 80008cc:	f000 f90c 	bl	8000ae8 <Error_Handler>
	}
}
 80008d0:	bf00      	nop
 80008d2:	3740      	adds	r7, #64	; 0x40
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <MX_I2C1_Init+0x50>)
 80008de:	4a13      	ldr	r2, [pc, #76]	; (800092c <MX_I2C1_Init+0x54>)
 80008e0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_I2C1_Init+0x50>)
 80008e4:	4a12      	ldr	r2, [pc, #72]	; (8000930 <MX_I2C1_Init+0x58>)
 80008e6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_I2C1_Init+0x50>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_I2C1_Init+0x50>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_I2C1_Init+0x50>)
 80008f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008fa:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <MX_I2C1_Init+0x50>)
 80008fe:	2200      	movs	r2, #0
 8000900:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_I2C1_Init+0x50>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <MX_I2C1_Init+0x50>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_I2C1_Init+0x50>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_I2C1_Init+0x50>)
 8000916:	f001 f9f5 	bl	8001d04 <HAL_I2C_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000920:	f000 f8e2 	bl	8000ae8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	200004b0 	.word	0x200004b0
 800092c:	40005400 	.word	0x40005400
 8000930:	00061a80 	.word	0x00061a80

08000934 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800093a:	f107 0308 	add.w	r3, r7, #8
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000948:	463b      	mov	r3, r7
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000950:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <MX_TIM2_Init+0x98>)
 8000952:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000956:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 6000 - 1;
 8000958:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <MX_TIM2_Init+0x98>)
 800095a:	f241 726f 	movw	r2, #5999	; 0x176f
 800095e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_TIM2_Init+0x98>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10000 - 1;
 8000966:	4b19      	ldr	r3, [pc, #100]	; (80009cc <MX_TIM2_Init+0x98>)
 8000968:	f242 720f 	movw	r2, #9999	; 0x270f
 800096c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <MX_TIM2_Init+0x98>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_TIM2_Init+0x98>)
 8000976:	2200      	movs	r2, #0
 8000978:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800097a:	4814      	ldr	r0, [pc, #80]	; (80009cc <MX_TIM2_Init+0x98>)
 800097c:	f002 fb36 	bl	8002fec <HAL_TIM_Base_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM2_Init+0x56>
		Error_Handler();
 8000986:	f000 f8af 	bl	8000ae8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800098a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000990:	f107 0308 	add.w	r3, r7, #8
 8000994:	4619      	mov	r1, r3
 8000996:	480d      	ldr	r0, [pc, #52]	; (80009cc <MX_TIM2_Init+0x98>)
 8000998:	f002 fcd2 	bl	8003340 <HAL_TIM_ConfigClockSource>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM2_Init+0x72>
		Error_Handler();
 80009a2:	f000 f8a1 	bl	8000ae8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80009ae:	463b      	mov	r3, r7
 80009b0:	4619      	mov	r1, r3
 80009b2:	4806      	ldr	r0, [pc, #24]	; (80009cc <MX_TIM2_Init+0x98>)
 80009b4:	f002 fe98 	bl	80036e8 <HAL_TIMEx_MasterConfigSynchronization>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 80009be:	f000 f893 	bl	8000ae8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000504 	.word	0x20000504

080009d0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80009d6:	f107 0310 	add.w	r3, r7, #16
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80009e4:	4b35      	ldr	r3, [pc, #212]	; (8000abc <MX_GPIO_Init+0xec>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a34      	ldr	r2, [pc, #208]	; (8000abc <MX_GPIO_Init+0xec>)
 80009ea:	f043 0310 	orr.w	r3, r3, #16
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b32      	ldr	r3, [pc, #200]	; (8000abc <MX_GPIO_Init+0xec>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0310 	and.w	r3, r3, #16
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80009fc:	4b2f      	ldr	r3, [pc, #188]	; (8000abc <MX_GPIO_Init+0xec>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a2e      	ldr	r2, [pc, #184]	; (8000abc <MX_GPIO_Init+0xec>)
 8000a02:	f043 0320 	orr.w	r3, r3, #32
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b2c      	ldr	r3, [pc, #176]	; (8000abc <MX_GPIO_Init+0xec>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0320 	and.w	r3, r3, #32
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a14:	4b29      	ldr	r3, [pc, #164]	; (8000abc <MX_GPIO_Init+0xec>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a28      	ldr	r2, [pc, #160]	; (8000abc <MX_GPIO_Init+0xec>)
 8000a1a:	f043 0308 	orr.w	r3, r3, #8
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b26      	ldr	r3, [pc, #152]	; (8000abc <MX_GPIO_Init+0xec>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f003 0308 	and.w	r3, r3, #8
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2c:	4b23      	ldr	r3, [pc, #140]	; (8000abc <MX_GPIO_Init+0xec>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a22      	ldr	r2, [pc, #136]	; (8000abc <MX_GPIO_Init+0xec>)
 8000a32:	f043 0304 	orr.w	r3, r3, #4
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b20      	ldr	r3, [pc, #128]	; (8000abc <MX_GPIO_Init+0xec>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f003 0304 	and.w	r3, r3, #4
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_BUILD_GPIO_Port, LED_BUILD_Pin, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a4a:	481d      	ldr	r0, [pc, #116]	; (8000ac0 <MX_GPIO_Init+0xf0>)
 8000a4c:	f001 f929 	bl	8001ca2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin | RGB_BLUE_Pin | RGB_GREEN_Pin,
 8000a50:	2200      	movs	r2, #0
 8000a52:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000a56:	481b      	ldr	r0, [pc, #108]	; (8000ac4 <MX_GPIO_Init+0xf4>)
 8000a58:	f001 f923 	bl	8001ca2 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : LED_BUILD_Pin */
	GPIO_InitStruct.Pin = LED_BUILD_Pin;
 8000a5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a60:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_BUILD_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0310 	add.w	r3, r7, #16
 8000a72:	4619      	mov	r1, r3
 8000a74:	4812      	ldr	r0, [pc, #72]	; (8000ac0 <MX_GPIO_Init+0xf0>)
 8000a76:	f000 ffa3 	bl	80019c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : BUTTON_LEFT_Pin BUTTON_RIGHT_Pin */
	GPIO_InitStruct.Pin = BUTTON_LEFT_Pin | BUTTON_RIGHT_Pin;
 8000a7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a7e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <MX_GPIO_Init+0xf4>)
 8000a90:	f000 ff96 	bl	80019c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RGB_RED_Pin RGB_BLUE_Pin RGB_GREEN_Pin */
	GPIO_InitStruct.Pin = RGB_RED_Pin | RGB_BLUE_Pin | RGB_GREEN_Pin;
 8000a94:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000a98:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa6:	f107 0310 	add.w	r3, r7, #16
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_GPIO_Init+0xf4>)
 8000aae:	f000 ff87 	bl	80019c0 <HAL_GPIO_Init>

}
 8000ab2:	bf00      	nop
 8000ab4:	3720      	adds	r7, #32
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	40011000 	.word	0x40011000
 8000ac4:	40010c00 	.word	0x40010c00

08000ac8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]

	HAL_GPIO_TogglePin(RGB_RED_GPIO_Port, RGB_RED_Pin);
 8000ad0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad4:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000ad6:	f001 f8fc 	bl	8001cd2 <HAL_GPIO_TogglePin>

}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40010c00 	.word	0x40010c00

08000ae8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr

08000af4 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60ba      	str	r2, [r7, #8]
 8000afc:	461a      	mov	r2, r3
 8000afe:	4603      	mov	r3, r0
 8000b00:	81fb      	strh	r3, [r7, #14]
 8000b02:	460b      	mov	r3, r1
 8000b04:	81bb      	strh	r3, [r7, #12]
 8000b06:	4613      	mov	r3, r2
 8000b08:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000b0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b0e:	3307      	adds	r3, #7
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	da00      	bge.n	8000b16 <SSD1306_DrawBitmap+0x22>
 8000b14:	3307      	adds	r3, #7
 8000b16:	10db      	asrs	r3, r3, #3
 8000b18:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000b1e:	2300      	movs	r3, #0
 8000b20:	82bb      	strh	r3, [r7, #20]
 8000b22:	e044      	b.n	8000bae <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8000b24:	2300      	movs	r3, #0
 8000b26:	827b      	strh	r3, [r7, #18]
 8000b28:	e02f      	b.n	8000b8a <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000b2a:	8a7b      	ldrh	r3, [r7, #18]
 8000b2c:	f003 0307 	and.w	r3, r3, #7
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8000b34:	7dfb      	ldrb	r3, [r7, #23]
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	75fb      	strb	r3, [r7, #23]
 8000b3a:	e012      	b.n	8000b62 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000b3c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000b40:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000b44:	fb02 f203 	mul.w	r2, r2, r3
 8000b48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	da00      	bge.n	8000b52 <SSD1306_DrawBitmap+0x5e>
 8000b50:	3307      	adds	r3, #7
 8000b52:	10db      	asrs	r3, r3, #3
 8000b54:	b21b      	sxth	r3, r3
 8000b56:	4413      	add	r3, r2
 8000b58:	461a      	mov	r2, r3
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000b62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	da09      	bge.n	8000b7e <SSD1306_DrawBitmap+0x8a>
 8000b6a:	89fa      	ldrh	r2, [r7, #14]
 8000b6c:	8a7b      	ldrh	r3, [r7, #18]
 8000b6e:	4413      	add	r3, r2
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	89b9      	ldrh	r1, [r7, #12]
 8000b74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000b76:	b2d2      	uxtb	r2, r2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 f92d 	bl	8000dd8 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000b7e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	3301      	adds	r3, #1
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	827b      	strh	r3, [r7, #18]
 8000b8a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	dbc9      	blt.n	8000b2a <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8000b96:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	82bb      	strh	r3, [r7, #20]
 8000ba2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	3301      	adds	r3, #1
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	81bb      	strh	r3, [r7, #12]
 8000bae:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000bb2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	dbb4      	blt.n	8000b24 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8000bba:	bf00      	nop
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000bca:	f000 fb8d 	bl	80012e8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000bce:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2178      	movs	r1, #120	; 0x78
 8000bd6:	485b      	ldr	r0, [pc, #364]	; (8000d44 <SSD1306_Init+0x180>)
 8000bd8:	f001 faca 	bl	8002170 <HAL_I2C_IsDeviceReady>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	e0a9      	b.n	8000d3a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000be6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000bea:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000bec:	e002      	b.n	8000bf4 <SSD1306_Init+0x30>
		p--;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1f9      	bne.n	8000bee <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000bfa:	22ae      	movs	r2, #174	; 0xae
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2078      	movs	r0, #120	; 0x78
 8000c00:	f000 fbce 	bl	80013a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000c04:	2220      	movs	r2, #32
 8000c06:	2100      	movs	r1, #0
 8000c08:	2078      	movs	r0, #120	; 0x78
 8000c0a:	f000 fbc9 	bl	80013a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000c0e:	2210      	movs	r2, #16
 8000c10:	2100      	movs	r1, #0
 8000c12:	2078      	movs	r0, #120	; 0x78
 8000c14:	f000 fbc4 	bl	80013a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000c18:	22b0      	movs	r2, #176	; 0xb0
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	2078      	movs	r0, #120	; 0x78
 8000c1e:	f000 fbbf 	bl	80013a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000c22:	22c8      	movs	r2, #200	; 0xc8
 8000c24:	2100      	movs	r1, #0
 8000c26:	2078      	movs	r0, #120	; 0x78
 8000c28:	f000 fbba 	bl	80013a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2100      	movs	r1, #0
 8000c30:	2078      	movs	r0, #120	; 0x78
 8000c32:	f000 fbb5 	bl	80013a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000c36:	2210      	movs	r2, #16
 8000c38:	2100      	movs	r1, #0
 8000c3a:	2078      	movs	r0, #120	; 0x78
 8000c3c:	f000 fbb0 	bl	80013a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000c40:	2240      	movs	r2, #64	; 0x40
 8000c42:	2100      	movs	r1, #0
 8000c44:	2078      	movs	r0, #120	; 0x78
 8000c46:	f000 fbab 	bl	80013a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000c4a:	2281      	movs	r2, #129	; 0x81
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	2078      	movs	r0, #120	; 0x78
 8000c50:	f000 fba6 	bl	80013a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000c54:	22ff      	movs	r2, #255	; 0xff
 8000c56:	2100      	movs	r1, #0
 8000c58:	2078      	movs	r0, #120	; 0x78
 8000c5a:	f000 fba1 	bl	80013a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000c5e:	22a1      	movs	r2, #161	; 0xa1
 8000c60:	2100      	movs	r1, #0
 8000c62:	2078      	movs	r0, #120	; 0x78
 8000c64:	f000 fb9c 	bl	80013a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000c68:	22a6      	movs	r2, #166	; 0xa6
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2078      	movs	r0, #120	; 0x78
 8000c6e:	f000 fb97 	bl	80013a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000c72:	22a8      	movs	r2, #168	; 0xa8
 8000c74:	2100      	movs	r1, #0
 8000c76:	2078      	movs	r0, #120	; 0x78
 8000c78:	f000 fb92 	bl	80013a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000c7c:	223f      	movs	r2, #63	; 0x3f
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2078      	movs	r0, #120	; 0x78
 8000c82:	f000 fb8d 	bl	80013a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000c86:	22a4      	movs	r2, #164	; 0xa4
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2078      	movs	r0, #120	; 0x78
 8000c8c:	f000 fb88 	bl	80013a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000c90:	22d3      	movs	r2, #211	; 0xd3
 8000c92:	2100      	movs	r1, #0
 8000c94:	2078      	movs	r0, #120	; 0x78
 8000c96:	f000 fb83 	bl	80013a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2078      	movs	r0, #120	; 0x78
 8000ca0:	f000 fb7e 	bl	80013a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000ca4:	22d5      	movs	r2, #213	; 0xd5
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2078      	movs	r0, #120	; 0x78
 8000caa:	f000 fb79 	bl	80013a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000cae:	22f0      	movs	r2, #240	; 0xf0
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	2078      	movs	r0, #120	; 0x78
 8000cb4:	f000 fb74 	bl	80013a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000cb8:	22d9      	movs	r2, #217	; 0xd9
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2078      	movs	r0, #120	; 0x78
 8000cbe:	f000 fb6f 	bl	80013a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000cc2:	2222      	movs	r2, #34	; 0x22
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2078      	movs	r0, #120	; 0x78
 8000cc8:	f000 fb6a 	bl	80013a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000ccc:	22da      	movs	r2, #218	; 0xda
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2078      	movs	r0, #120	; 0x78
 8000cd2:	f000 fb65 	bl	80013a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000cd6:	2212      	movs	r2, #18
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2078      	movs	r0, #120	; 0x78
 8000cdc:	f000 fb60 	bl	80013a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000ce0:	22db      	movs	r2, #219	; 0xdb
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2078      	movs	r0, #120	; 0x78
 8000ce6:	f000 fb5b 	bl	80013a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000cea:	2220      	movs	r2, #32
 8000cec:	2100      	movs	r1, #0
 8000cee:	2078      	movs	r0, #120	; 0x78
 8000cf0:	f000 fb56 	bl	80013a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000cf4:	228d      	movs	r2, #141	; 0x8d
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2078      	movs	r0, #120	; 0x78
 8000cfa:	f000 fb51 	bl	80013a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000cfe:	2214      	movs	r2, #20
 8000d00:	2100      	movs	r1, #0
 8000d02:	2078      	movs	r0, #120	; 0x78
 8000d04:	f000 fb4c 	bl	80013a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000d08:	22af      	movs	r2, #175	; 0xaf
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2078      	movs	r0, #120	; 0x78
 8000d0e:	f000 fb47 	bl	80013a0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000d12:	222e      	movs	r2, #46	; 0x2e
 8000d14:	2100      	movs	r1, #0
 8000d16:	2078      	movs	r0, #120	; 0x78
 8000d18:	f000 fb42 	bl	80013a0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f000 f843 	bl	8000da8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000d22:	f000 f813 	bl	8000d4c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <SSD1306_Init+0x184>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <SSD1306_Init+0x184>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000d32:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <SSD1306_Init+0x184>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000d38:	2301      	movs	r3, #1
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200004b0 	.word	0x200004b0
 8000d48:	2000049c 	.word	0x2000049c

08000d4c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000d52:	2300      	movs	r3, #0
 8000d54:	71fb      	strb	r3, [r7, #7]
 8000d56:	e01d      	b.n	8000d94 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	3b50      	subs	r3, #80	; 0x50
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	461a      	mov	r2, r3
 8000d60:	2100      	movs	r1, #0
 8000d62:	2078      	movs	r0, #120	; 0x78
 8000d64:	f000 fb1c 	bl	80013a0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	2078      	movs	r0, #120	; 0x78
 8000d6e:	f000 fb17 	bl	80013a0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000d72:	2210      	movs	r2, #16
 8000d74:	2100      	movs	r1, #0
 8000d76:	2078      	movs	r0, #120	; 0x78
 8000d78:	f000 fb12 	bl	80013a0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	01db      	lsls	r3, r3, #7
 8000d80:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <SSD1306_UpdateScreen+0x58>)
 8000d82:	441a      	add	r2, r3
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	2140      	movs	r1, #64	; 0x40
 8000d88:	2078      	movs	r0, #120	; 0x78
 8000d8a:	f000 fac1 	bl	8001310 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	3301      	adds	r3, #1
 8000d92:	71fb      	strb	r3, [r7, #7]
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	2b07      	cmp	r3, #7
 8000d98:	d9de      	bls.n	8000d58 <SSD1306_UpdateScreen+0xc>
	}
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	2000009c 	.word	0x2000009c

08000da8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <SSD1306_Fill+0x14>
 8000db8:	2300      	movs	r3, #0
 8000dba:	e000      	b.n	8000dbe <SSD1306_Fill+0x16>
 8000dbc:	23ff      	movs	r3, #255	; 0xff
 8000dbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <SSD1306_Fill+0x2c>)
 8000dc6:	f002 fd29 	bl	800381c <memset>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	2000009c 	.word	0x2000009c

08000dd8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	80fb      	strh	r3, [r7, #6]
 8000de2:	460b      	mov	r3, r1
 8000de4:	80bb      	strh	r3, [r7, #4]
 8000de6:	4613      	mov	r3, r2
 8000de8:	70fb      	strb	r3, [r7, #3]
	if (
 8000dea:	88fb      	ldrh	r3, [r7, #6]
 8000dec:	2b7f      	cmp	r3, #127	; 0x7f
 8000dee:	d848      	bhi.n	8000e82 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000df0:	88bb      	ldrh	r3, [r7, #4]
 8000df2:	2b3f      	cmp	r3, #63	; 0x3f
 8000df4:	d845      	bhi.n	8000e82 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000df6:	4b25      	ldr	r3, [pc, #148]	; (8000e8c <SSD1306_DrawPixel+0xb4>)
 8000df8:	791b      	ldrb	r3, [r3, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d006      	beq.n	8000e0c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000dfe:	78fb      	ldrb	r3, [r7, #3]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	bf0c      	ite	eq
 8000e04:	2301      	moveq	r3, #1
 8000e06:	2300      	movne	r3, #0
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000e0c:	78fb      	ldrb	r3, [r7, #3]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d11a      	bne.n	8000e48 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000e12:	88fa      	ldrh	r2, [r7, #6]
 8000e14:	88bb      	ldrh	r3, [r7, #4]
 8000e16:	08db      	lsrs	r3, r3, #3
 8000e18:	b298      	uxth	r0, r3
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	01db      	lsls	r3, r3, #7
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a1b      	ldr	r2, [pc, #108]	; (8000e90 <SSD1306_DrawPixel+0xb8>)
 8000e22:	5cd3      	ldrb	r3, [r2, r3]
 8000e24:	b25a      	sxtb	r2, r3
 8000e26:	88bb      	ldrh	r3, [r7, #4]
 8000e28:	f003 0307 	and.w	r3, r3, #7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e32:	b25b      	sxtb	r3, r3
 8000e34:	4313      	orrs	r3, r2
 8000e36:	b259      	sxtb	r1, r3
 8000e38:	88fa      	ldrh	r2, [r7, #6]
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	01db      	lsls	r3, r3, #7
 8000e3e:	4413      	add	r3, r2
 8000e40:	b2c9      	uxtb	r1, r1
 8000e42:	4a13      	ldr	r2, [pc, #76]	; (8000e90 <SSD1306_DrawPixel+0xb8>)
 8000e44:	54d1      	strb	r1, [r2, r3]
 8000e46:	e01d      	b.n	8000e84 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000e48:	88fa      	ldrh	r2, [r7, #6]
 8000e4a:	88bb      	ldrh	r3, [r7, #4]
 8000e4c:	08db      	lsrs	r3, r3, #3
 8000e4e:	b298      	uxth	r0, r3
 8000e50:	4603      	mov	r3, r0
 8000e52:	01db      	lsls	r3, r3, #7
 8000e54:	4413      	add	r3, r2
 8000e56:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <SSD1306_DrawPixel+0xb8>)
 8000e58:	5cd3      	ldrb	r3, [r2, r3]
 8000e5a:	b25a      	sxtb	r2, r3
 8000e5c:	88bb      	ldrh	r3, [r7, #4]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	2101      	movs	r1, #1
 8000e64:	fa01 f303 	lsl.w	r3, r1, r3
 8000e68:	b25b      	sxtb	r3, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	b25b      	sxtb	r3, r3
 8000e6e:	4013      	ands	r3, r2
 8000e70:	b259      	sxtb	r1, r3
 8000e72:	88fa      	ldrh	r2, [r7, #6]
 8000e74:	4603      	mov	r3, r0
 8000e76:	01db      	lsls	r3, r3, #7
 8000e78:	4413      	add	r3, r2
 8000e7a:	b2c9      	uxtb	r1, r1
 8000e7c:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <SSD1306_DrawPixel+0xb8>)
 8000e7e:	54d1      	strb	r1, [r2, r3]
 8000e80:	e000      	b.n	8000e84 <SSD1306_DrawPixel+0xac>
		return;
 8000e82:	bf00      	nop
	}
}
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	2000049c 	.word	0x2000049c
 8000e90:	2000009c 	.word	0x2000009c

08000e94 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	460a      	mov	r2, r1
 8000e9e:	80fb      	strh	r3, [r7, #6]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000ea4:	4a05      	ldr	r2, [pc, #20]	; (8000ebc <SSD1306_GotoXY+0x28>)
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000eaa:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <SSD1306_GotoXY+0x28>)
 8000eac:	88bb      	ldrh	r3, [r7, #4]
 8000eae:	8053      	strh	r3, [r2, #2]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	2000049c 	.word	0x2000049c

08000ec0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000ed0:	4b3a      	ldr	r3, [pc, #232]	; (8000fbc <SSD1306_Putc+0xfc>)
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
	if (
 8000edc:	2b7f      	cmp	r3, #127	; 0x7f
 8000ede:	dc07      	bgt.n	8000ef0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000ee0:	4b36      	ldr	r3, [pc, #216]	; (8000fbc <SSD1306_Putc+0xfc>)
 8000ee2:	885b      	ldrh	r3, [r3, #2]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	785b      	ldrb	r3, [r3, #1]
 8000eea:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000eec:	2b3f      	cmp	r3, #63	; 0x3f
 8000eee:	dd01      	ble.n	8000ef4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	e05e      	b.n	8000fb2 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	e04b      	b.n	8000f92 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	3b20      	subs	r3, #32
 8000f02:	6839      	ldr	r1, [r7, #0]
 8000f04:	7849      	ldrb	r1, [r1, #1]
 8000f06:	fb01 f303 	mul.w	r3, r1, r3
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	440b      	add	r3, r1
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4413      	add	r3, r2
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000f18:	2300      	movs	r3, #0
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	e030      	b.n	8000f80 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d010      	beq.n	8000f50 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000f2e:	4b23      	ldr	r3, [pc, #140]	; (8000fbc <SSD1306_Putc+0xfc>)
 8000f30:	881a      	ldrh	r2, [r3, #0]
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	4413      	add	r3, r2
 8000f38:	b298      	uxth	r0, r3
 8000f3a:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <SSD1306_Putc+0xfc>)
 8000f3c:	885a      	ldrh	r2, [r3, #2]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	4413      	add	r3, r2
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	79ba      	ldrb	r2, [r7, #6]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f7ff ff45 	bl	8000dd8 <SSD1306_DrawPixel>
 8000f4e:	e014      	b.n	8000f7a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000f50:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <SSD1306_Putc+0xfc>)
 8000f52:	881a      	ldrh	r2, [r3, #0]
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	4413      	add	r3, r2
 8000f5a:	b298      	uxth	r0, r3
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <SSD1306_Putc+0xfc>)
 8000f5e:	885a      	ldrh	r2, [r3, #2]
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	4413      	add	r3, r2
 8000f66:	b299      	uxth	r1, r3
 8000f68:	79bb      	ldrb	r3, [r7, #6]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	bf0c      	ite	eq
 8000f6e:	2301      	moveq	r3, #1
 8000f70:	2300      	movne	r3, #0
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	461a      	mov	r2, r3
 8000f76:	f7ff ff2f 	bl	8000dd8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d3c8      	bcc.n	8000f1e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	785b      	ldrb	r3, [r3, #1]
 8000f96:	461a      	mov	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d3ad      	bcc.n	8000efa <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000f9e:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <SSD1306_Putc+0xfc>)
 8000fa0:	881a      	ldrh	r2, [r3, #0]
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	4413      	add	r3, r2
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <SSD1306_Putc+0xfc>)
 8000fae:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000049c 	.word	0x2000049c

08000fc0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000fce:	e012      	b.n	8000ff6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	79fa      	ldrb	r2, [r7, #7]
 8000fd6:	68b9      	ldr	r1, [r7, #8]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff71 	bl	8000ec0 <SSD1306_Putc>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d002      	beq.n	8000ff0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	e008      	b.n	8001002 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1e8      	bne.n	8000fd0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	781b      	ldrb	r3, [r3, #0]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 800100a:	b590      	push	{r4, r7, lr}
 800100c:	b087      	sub	sp, #28
 800100e:	af00      	add	r7, sp, #0
 8001010:	4604      	mov	r4, r0
 8001012:	4608      	mov	r0, r1
 8001014:	4611      	mov	r1, r2
 8001016:	461a      	mov	r2, r3
 8001018:	4623      	mov	r3, r4
 800101a:	80fb      	strh	r3, [r7, #6]
 800101c:	4603      	mov	r3, r0
 800101e:	80bb      	strh	r3, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	807b      	strh	r3, [r7, #2]
 8001024:	4613      	mov	r3, r2
 8001026:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	2b7f      	cmp	r3, #127	; 0x7f
 800102c:	d901      	bls.n	8001032 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 800102e:	237f      	movs	r3, #127	; 0x7f
 8001030:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001032:	887b      	ldrh	r3, [r7, #2]
 8001034:	2b7f      	cmp	r3, #127	; 0x7f
 8001036:	d901      	bls.n	800103c <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8001038:	237f      	movs	r3, #127	; 0x7f
 800103a:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 800103c:	88bb      	ldrh	r3, [r7, #4]
 800103e:	2b3f      	cmp	r3, #63	; 0x3f
 8001040:	d901      	bls.n	8001046 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8001042:	233f      	movs	r3, #63	; 0x3f
 8001044:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001046:	883b      	ldrh	r3, [r7, #0]
 8001048:	2b3f      	cmp	r3, #63	; 0x3f
 800104a:	d901      	bls.n	8001050 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 800104c:	233f      	movs	r3, #63	; 0x3f
 800104e:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001050:	88fa      	ldrh	r2, [r7, #6]
 8001052:	887b      	ldrh	r3, [r7, #2]
 8001054:	429a      	cmp	r2, r3
 8001056:	d205      	bcs.n	8001064 <SSD1306_DrawLine+0x5a>
 8001058:	887a      	ldrh	r2, [r7, #2]
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	b29b      	uxth	r3, r3
 8001060:	b21b      	sxth	r3, r3
 8001062:	e004      	b.n	800106e <SSD1306_DrawLine+0x64>
 8001064:	88fa      	ldrh	r2, [r7, #6]
 8001066:	887b      	ldrh	r3, [r7, #2]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	b29b      	uxth	r3, r3
 800106c:	b21b      	sxth	r3, r3
 800106e:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001070:	88ba      	ldrh	r2, [r7, #4]
 8001072:	883b      	ldrh	r3, [r7, #0]
 8001074:	429a      	cmp	r2, r3
 8001076:	d205      	bcs.n	8001084 <SSD1306_DrawLine+0x7a>
 8001078:	883a      	ldrh	r2, [r7, #0]
 800107a:	88bb      	ldrh	r3, [r7, #4]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	b29b      	uxth	r3, r3
 8001080:	b21b      	sxth	r3, r3
 8001082:	e004      	b.n	800108e <SSD1306_DrawLine+0x84>
 8001084:	88ba      	ldrh	r2, [r7, #4]
 8001086:	883b      	ldrh	r3, [r7, #0]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	b29b      	uxth	r3, r3
 800108c:	b21b      	sxth	r3, r3
 800108e:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001090:	88fa      	ldrh	r2, [r7, #6]
 8001092:	887b      	ldrh	r3, [r7, #2]
 8001094:	429a      	cmp	r2, r3
 8001096:	d201      	bcs.n	800109c <SSD1306_DrawLine+0x92>
 8001098:	2301      	movs	r3, #1
 800109a:	e001      	b.n	80010a0 <SSD1306_DrawLine+0x96>
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 80010a2:	88ba      	ldrh	r2, [r7, #4]
 80010a4:	883b      	ldrh	r3, [r7, #0]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d201      	bcs.n	80010ae <SSD1306_DrawLine+0xa4>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e001      	b.n	80010b2 <SSD1306_DrawLine+0xa8>
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80010b4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80010b8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80010bc:	429a      	cmp	r2, r3
 80010be:	dd06      	ble.n	80010ce <SSD1306_DrawLine+0xc4>
 80010c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80010c4:	0fda      	lsrs	r2, r3, #31
 80010c6:	4413      	add	r3, r2
 80010c8:	105b      	asrs	r3, r3, #1
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	e006      	b.n	80010dc <SSD1306_DrawLine+0xd2>
 80010ce:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80010d2:	425b      	negs	r3, r3
 80010d4:	0fda      	lsrs	r2, r3, #31
 80010d6:	4413      	add	r3, r2
 80010d8:	105b      	asrs	r3, r3, #1
 80010da:	b21b      	sxth	r3, r3
 80010dc:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 80010de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d129      	bne.n	800113a <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 80010e6:	883a      	ldrh	r2, [r7, #0]
 80010e8:	88bb      	ldrh	r3, [r7, #4]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d205      	bcs.n	80010fa <SSD1306_DrawLine+0xf0>
			tmp = y1;
 80010ee:	883b      	ldrh	r3, [r7, #0]
 80010f0:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80010f2:	88bb      	ldrh	r3, [r7, #4]
 80010f4:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80010f6:	893b      	ldrh	r3, [r7, #8]
 80010f8:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80010fa:	887a      	ldrh	r2, [r7, #2]
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d205      	bcs.n	800110e <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001102:	887b      	ldrh	r3, [r7, #2]
 8001104:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800110a:	893b      	ldrh	r3, [r7, #8]
 800110c:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 800110e:	88bb      	ldrh	r3, [r7, #4]
 8001110:	82bb      	strh	r3, [r7, #20]
 8001112:	e00c      	b.n	800112e <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001114:	8ab9      	ldrh	r1, [r7, #20]
 8001116:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800111a:	88fb      	ldrh	r3, [r7, #6]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fe5b 	bl	8000dd8 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001122:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001126:	b29b      	uxth	r3, r3
 8001128:	3301      	adds	r3, #1
 800112a:	b29b      	uxth	r3, r3
 800112c:	82bb      	strh	r3, [r7, #20]
 800112e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001132:	883b      	ldrh	r3, [r7, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	dded      	ble.n	8001114 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8001138:	e05f      	b.n	80011fa <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 800113a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d129      	bne.n	8001196 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8001142:	883a      	ldrh	r2, [r7, #0]
 8001144:	88bb      	ldrh	r3, [r7, #4]
 8001146:	429a      	cmp	r2, r3
 8001148:	d205      	bcs.n	8001156 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 800114a:	883b      	ldrh	r3, [r7, #0]
 800114c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800114e:	88bb      	ldrh	r3, [r7, #4]
 8001150:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001152:	893b      	ldrh	r3, [r7, #8]
 8001154:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001156:	887a      	ldrh	r2, [r7, #2]
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	429a      	cmp	r2, r3
 800115c:	d205      	bcs.n	800116a <SSD1306_DrawLine+0x160>
			tmp = x1;
 800115e:	887b      	ldrh	r3, [r7, #2]
 8001160:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001166:	893b      	ldrh	r3, [r7, #8]
 8001168:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	82bb      	strh	r3, [r7, #20]
 800116e:	e00c      	b.n	800118a <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8001170:	8abb      	ldrh	r3, [r7, #20]
 8001172:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001176:	88b9      	ldrh	r1, [r7, #4]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fe2d 	bl	8000dd8 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 800117e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001182:	b29b      	uxth	r3, r3
 8001184:	3301      	adds	r3, #1
 8001186:	b29b      	uxth	r3, r3
 8001188:	82bb      	strh	r3, [r7, #20]
 800118a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800118e:	887b      	ldrh	r3, [r7, #2]
 8001190:	429a      	cmp	r2, r3
 8001192:	dded      	ble.n	8001170 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8001194:	e031      	b.n	80011fa <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8001196:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800119a:	88b9      	ldrh	r1, [r7, #4]
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff fe1a 	bl	8000dd8 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80011a4:	88fa      	ldrh	r2, [r7, #6]
 80011a6:	887b      	ldrh	r3, [r7, #2]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d103      	bne.n	80011b4 <SSD1306_DrawLine+0x1aa>
 80011ac:	88ba      	ldrh	r2, [r7, #4]
 80011ae:	883b      	ldrh	r3, [r7, #0]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d021      	beq.n	80011f8 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 80011b4:	8afb      	ldrh	r3, [r7, #22]
 80011b6:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 80011b8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80011bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011c0:	425b      	negs	r3, r3
 80011c2:	429a      	cmp	r2, r3
 80011c4:	dd08      	ble.n	80011d8 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 80011c6:	8afa      	ldrh	r2, [r7, #22]
 80011c8:	8a3b      	ldrh	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 80011d0:	89fa      	ldrh	r2, [r7, #14]
 80011d2:	88fb      	ldrh	r3, [r7, #6]
 80011d4:	4413      	add	r3, r2
 80011d6:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 80011d8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80011dc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	dad8      	bge.n	8001196 <SSD1306_DrawLine+0x18c>
			err += dx;
 80011e4:	8afa      	ldrh	r2, [r7, #22]
 80011e6:	8a7b      	ldrh	r3, [r7, #18]
 80011e8:	4413      	add	r3, r2
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 80011ee:	89ba      	ldrh	r2, [r7, #12]
 80011f0:	88bb      	ldrh	r3, [r7, #4]
 80011f2:	4413      	add	r3, r2
 80011f4:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 80011f6:	e7ce      	b.n	8001196 <SSD1306_DrawLine+0x18c>
			break;
 80011f8:	bf00      	nop
		} 
	}
}
 80011fa:	371c      	adds	r7, #28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd90      	pop	{r4, r7, pc}

08001200 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b085      	sub	sp, #20
 8001204:	af02      	add	r7, sp, #8
 8001206:	4604      	mov	r4, r0
 8001208:	4608      	mov	r0, r1
 800120a:	4611      	mov	r1, r2
 800120c:	461a      	mov	r2, r3
 800120e:	4623      	mov	r3, r4
 8001210:	80fb      	strh	r3, [r7, #6]
 8001212:	4603      	mov	r3, r0
 8001214:	80bb      	strh	r3, [r7, #4]
 8001216:	460b      	mov	r3, r1
 8001218:	807b      	strh	r3, [r7, #2]
 800121a:	4613      	mov	r3, r2
 800121c:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 800121e:	88fb      	ldrh	r3, [r7, #6]
 8001220:	2b7f      	cmp	r3, #127	; 0x7f
 8001222:	d853      	bhi.n	80012cc <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8001224:	88bb      	ldrh	r3, [r7, #4]
 8001226:	2b3f      	cmp	r3, #63	; 0x3f
 8001228:	d850      	bhi.n	80012cc <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 800122a:	88fa      	ldrh	r2, [r7, #6]
 800122c:	887b      	ldrh	r3, [r7, #2]
 800122e:	4413      	add	r3, r2
 8001230:	2b7f      	cmp	r3, #127	; 0x7f
 8001232:	dd03      	ble.n	800123c <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001234:	88fb      	ldrh	r3, [r7, #6]
 8001236:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800123a:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 800123c:	88ba      	ldrh	r2, [r7, #4]
 800123e:	883b      	ldrh	r3, [r7, #0]
 8001240:	4413      	add	r3, r2
 8001242:	2b3f      	cmp	r3, #63	; 0x3f
 8001244:	dd03      	ble.n	800124e <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001246:	88bb      	ldrh	r3, [r7, #4]
 8001248:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800124c:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 800124e:	88fa      	ldrh	r2, [r7, #6]
 8001250:	887b      	ldrh	r3, [r7, #2]
 8001252:	4413      	add	r3, r2
 8001254:	b29a      	uxth	r2, r3
 8001256:	88bc      	ldrh	r4, [r7, #4]
 8001258:	88b9      	ldrh	r1, [r7, #4]
 800125a:	88f8      	ldrh	r0, [r7, #6]
 800125c:	7e3b      	ldrb	r3, [r7, #24]
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	4623      	mov	r3, r4
 8001262:	f7ff fed2 	bl	800100a <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8001266:	88ba      	ldrh	r2, [r7, #4]
 8001268:	883b      	ldrh	r3, [r7, #0]
 800126a:	4413      	add	r3, r2
 800126c:	b299      	uxth	r1, r3
 800126e:	88fa      	ldrh	r2, [r7, #6]
 8001270:	887b      	ldrh	r3, [r7, #2]
 8001272:	4413      	add	r3, r2
 8001274:	b29c      	uxth	r4, r3
 8001276:	88ba      	ldrh	r2, [r7, #4]
 8001278:	883b      	ldrh	r3, [r7, #0]
 800127a:	4413      	add	r3, r2
 800127c:	b29a      	uxth	r2, r3
 800127e:	88f8      	ldrh	r0, [r7, #6]
 8001280:	7e3b      	ldrb	r3, [r7, #24]
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	4613      	mov	r3, r2
 8001286:	4622      	mov	r2, r4
 8001288:	f7ff febf 	bl	800100a <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 800128c:	88ba      	ldrh	r2, [r7, #4]
 800128e:	883b      	ldrh	r3, [r7, #0]
 8001290:	4413      	add	r3, r2
 8001292:	b29c      	uxth	r4, r3
 8001294:	88fa      	ldrh	r2, [r7, #6]
 8001296:	88b9      	ldrh	r1, [r7, #4]
 8001298:	88f8      	ldrh	r0, [r7, #6]
 800129a:	7e3b      	ldrb	r3, [r7, #24]
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	4623      	mov	r3, r4
 80012a0:	f7ff feb3 	bl	800100a <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 80012a4:	88fa      	ldrh	r2, [r7, #6]
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	4413      	add	r3, r2
 80012aa:	b298      	uxth	r0, r3
 80012ac:	88fa      	ldrh	r2, [r7, #6]
 80012ae:	887b      	ldrh	r3, [r7, #2]
 80012b0:	4413      	add	r3, r2
 80012b2:	b29c      	uxth	r4, r3
 80012b4:	88ba      	ldrh	r2, [r7, #4]
 80012b6:	883b      	ldrh	r3, [r7, #0]
 80012b8:	4413      	add	r3, r2
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	88b9      	ldrh	r1, [r7, #4]
 80012be:	7e3b      	ldrb	r3, [r7, #24]
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	4613      	mov	r3, r2
 80012c4:	4622      	mov	r2, r4
 80012c6:	f7ff fea0 	bl	800100a <SSD1306_DrawLine>
 80012ca:	e000      	b.n	80012ce <SSD1306_DrawRectangle+0xce>
		return;
 80012cc:	bf00      	nop
}
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd90      	pop	{r4, r7, pc}

080012d4 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80012d8:	2000      	movs	r0, #0
 80012da:	f7ff fd65 	bl	8000da8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80012de:	f7ff fd35 	bl	8000d4c <SSD1306_UpdateScreen>
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80012ee:	4b07      	ldr	r3, [pc, #28]	; (800130c <ssd1306_I2C_Init+0x24>)
 80012f0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80012f2:	e002      	b.n	80012fa <ssd1306_I2C_Init+0x12>
		p--;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1f9      	bne.n	80012f4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	0003d090 	.word	0x0003d090

08001310 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b0c7      	sub	sp, #284	; 0x11c
 8001314:	af02      	add	r7, sp, #8
 8001316:	4604      	mov	r4, r0
 8001318:	4608      	mov	r0, r1
 800131a:	4639      	mov	r1, r7
 800131c:	600a      	str	r2, [r1, #0]
 800131e:	4619      	mov	r1, r3
 8001320:	1dfb      	adds	r3, r7, #7
 8001322:	4622      	mov	r2, r4
 8001324:	701a      	strb	r2, [r3, #0]
 8001326:	1dbb      	adds	r3, r7, #6
 8001328:	4602      	mov	r2, r0
 800132a:	701a      	strb	r2, [r3, #0]
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	460a      	mov	r2, r1
 8001330:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001332:	f107 030c 	add.w	r3, r7, #12
 8001336:	1dba      	adds	r2, r7, #6
 8001338:	7812      	ldrb	r2, [r2, #0]
 800133a:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800133c:	2300      	movs	r3, #0
 800133e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001342:	e010      	b.n	8001366 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001344:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001348:	463a      	mov	r2, r7
 800134a:	6812      	ldr	r2, [r2, #0]
 800134c:	441a      	add	r2, r3
 800134e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001352:	3301      	adds	r3, #1
 8001354:	7811      	ldrb	r1, [r2, #0]
 8001356:	f107 020c 	add.w	r2, r7, #12
 800135a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800135c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001360:	3301      	adds	r3, #1
 8001362:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001366:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800136a:	b29b      	uxth	r3, r3
 800136c:	1d3a      	adds	r2, r7, #4
 800136e:	8812      	ldrh	r2, [r2, #0]
 8001370:	429a      	cmp	r2, r3
 8001372:	d8e7      	bhi.n	8001344 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001374:	1dfb      	adds	r3, r7, #7
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	b299      	uxth	r1, r3
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	3301      	adds	r3, #1
 8001380:	b298      	uxth	r0, r3
 8001382:	f107 020c 	add.w	r2, r7, #12
 8001386:	230a      	movs	r3, #10
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	4603      	mov	r3, r0
 800138c:	4803      	ldr	r0, [pc, #12]	; (800139c <ssd1306_I2C_WriteMulti+0x8c>)
 800138e:	f000 fdf1 	bl	8001f74 <HAL_I2C_Master_Transmit>
}
 8001392:	bf00      	nop
 8001394:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001398:	46bd      	mov	sp, r7
 800139a:	bd90      	pop	{r4, r7, pc}
 800139c:	200004b0 	.word	0x200004b0

080013a0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af02      	add	r7, sp, #8
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
 80013aa:	460b      	mov	r3, r1
 80013ac:	71bb      	strb	r3, [r7, #6]
 80013ae:	4613      	mov	r3, r2
 80013b0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80013b2:	79bb      	ldrb	r3, [r7, #6]
 80013b4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80013b6:	797b      	ldrb	r3, [r7, #5]
 80013b8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	b299      	uxth	r1, r3
 80013be:	f107 020c 	add.w	r2, r7, #12
 80013c2:	230a      	movs	r3, #10
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	2302      	movs	r3, #2
 80013c8:	4803      	ldr	r0, [pc, #12]	; (80013d8 <ssd1306_I2C_Write+0x38>)
 80013ca:	f000 fdd3 	bl	8001f74 <HAL_I2C_Master_Transmit>
}
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200004b0 	.word	0x200004b0

080013dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013e2:	4b19      	ldr	r3, [pc, #100]	; (8001448 <HAL_MspInit+0x6c>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	4a18      	ldr	r2, [pc, #96]	; (8001448 <HAL_MspInit+0x6c>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6193      	str	r3, [r2, #24]
 80013ee:	4b16      	ldr	r3, [pc, #88]	; (8001448 <HAL_MspInit+0x6c>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fa:	4b13      	ldr	r3, [pc, #76]	; (8001448 <HAL_MspInit+0x6c>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	4a12      	ldr	r2, [pc, #72]	; (8001448 <HAL_MspInit+0x6c>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	61d3      	str	r3, [r2, #28]
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <HAL_MspInit+0x6c>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2100      	movs	r1, #0
 8001416:	2005      	movs	r0, #5
 8001418:	f000 fa9b 	bl	8001952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800141c:	2005      	movs	r0, #5
 800141e:	f000 fab4 	bl	800198a <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_MspInit+0x70>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	4a04      	ldr	r2, [pc, #16]	; (800144c <HAL_MspInit+0x70>)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40021000 	.word	0x40021000
 800144c:	40010000 	.word	0x40010000

08001450 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a15      	ldr	r2, [pc, #84]	; (80014c0 <HAL_I2C_MspInit+0x70>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d123      	bne.n	80014b8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001470:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <HAL_I2C_MspInit+0x74>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	4a13      	ldr	r2, [pc, #76]	; (80014c4 <HAL_I2C_MspInit+0x74>)
 8001476:	f043 0308 	orr.w	r3, r3, #8
 800147a:	6193      	str	r3, [r2, #24]
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <HAL_I2C_MspInit+0x74>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	f003 0308 	and.w	r3, r3, #8
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001488:	23c0      	movs	r3, #192	; 0xc0
 800148a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800148c:	2312      	movs	r3, #18
 800148e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001494:	f107 0310 	add.w	r3, r7, #16
 8001498:	4619      	mov	r1, r3
 800149a:	480b      	ldr	r0, [pc, #44]	; (80014c8 <HAL_I2C_MspInit+0x78>)
 800149c:	f000 fa90 	bl	80019c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <HAL_I2C_MspInit+0x74>)
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <HAL_I2C_MspInit+0x74>)
 80014a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014aa:	61d3      	str	r3, [r2, #28]
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <HAL_I2C_MspInit+0x74>)
 80014ae:	69db      	ldr	r3, [r3, #28]
 80014b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014b8:	bf00      	nop
 80014ba:	3720      	adds	r7, #32
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40005400 	.word	0x40005400
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40010c00 	.word	0x40010c00

080014cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014dc:	d113      	bne.n	8001506 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <HAL_TIM_Base_MspInit+0x44>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <HAL_TIM_Base_MspInit+0x44>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	61d3      	str	r3, [r2, #28]
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_TIM_Base_MspInit+0x44>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2100      	movs	r1, #0
 80014fa:	201c      	movs	r0, #28
 80014fc:	f000 fa29 	bl	8001952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001500:	201c      	movs	r0, #28
 8001502:	f000 fa42 	bl	800198a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000

08001514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <HardFault_Handler+0x4>

08001526 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800152a:	e7fe      	b.n	800152a <MemManage_Handler+0x4>

0800152c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <BusFault_Handler+0x4>

08001532 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001536:	e7fe      	b.n	8001536 <UsageFault_Handler+0x4>

08001538 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001560:	f000 f8e2 	bl	8001728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}

08001568 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_IRQn 0 */
	HAL_GPIO_TogglePin(RGB_RED_GPIO_Port, RGB_RED_Pin);
 800156c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <RCC_IRQHandler+0x14>)
 8001572:	f000 fbae 	bl	8001cd2 <HAL_GPIO_TogglePin>
  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40010c00 	.word	0x40010c00

08001580 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <TIM2_IRQHandler+0x10>)
 8001586:	f001 fdd3 	bl	8003130 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000504 	.word	0x20000504

08001594 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <_sbrk+0x50>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d102      	bne.n	80015aa <_sbrk+0x16>
		heap_end = &end;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <_sbrk+0x50>)
 80015a6:	4a10      	ldr	r2, [pc, #64]	; (80015e8 <_sbrk+0x54>)
 80015a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <_sbrk+0x50>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <_sbrk+0x50>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4413      	add	r3, r2
 80015b8:	466a      	mov	r2, sp
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d907      	bls.n	80015ce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80015be:	f002 f903 	bl	80037c8 <__errno>
 80015c2:	4602      	mov	r2, r0
 80015c4:	230c      	movs	r3, #12
 80015c6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80015c8:	f04f 33ff 	mov.w	r3, #4294967295
 80015cc:	e006      	b.n	80015dc <_sbrk+0x48>
	}

	heap_end += incr;
 80015ce:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <_sbrk+0x50>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	4a03      	ldr	r2, [pc, #12]	; (80015e4 <_sbrk+0x50>)
 80015d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80015da:	68fb      	ldr	r3, [r7, #12]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200004a4 	.word	0x200004a4
 80015e8:	20000558 	.word	0x20000558

080015ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <character_draw>:
        SSD1306_UpdateScreen();
        HAL_Delay (10);
    }
}
void character_draw (uint8_t color)
{
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b087      	sub	sp, #28
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
    uint8_t n, i, i2;

    SSD1306_Clear ();
 8001602:	f7ff fe67 	bl	80012d4 <SSD1306_Clear>

    n = min(SSD1306_WIDTH, SSD1306_HEIGHT);
 8001606:	2340      	movs	r3, #64	; 0x40
 8001608:	73bb      	strb	r3, [r7, #14]

    for (i = 2; i < 30; i += 6)
 800160a:	2302      	movs	r3, #2
 800160c:	73fb      	strb	r3, [r7, #15]
 800160e:	e018      	b.n	8001642 <character_draw+0x4a>
    {
        i2 = i / 2;
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	085b      	lsrs	r3, r3, #1
 8001614:	737b      	strb	r3, [r7, #13]
        SSD1306_DrawRectangle((SSD1306_WIDTH/2) - i2, (SSD1306_HEIGHT/2) - i2 + 10, i, i, color);
 8001616:	7b7b      	ldrb	r3, [r7, #13]
 8001618:	b29b      	uxth	r3, r3
 800161a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800161e:	b298      	uxth	r0, r3
 8001620:	7b7b      	ldrb	r3, [r7, #13]
 8001622:	b29b      	uxth	r3, r3
 8001624:	f1c3 032a 	rsb	r3, r3, #42	; 0x2a
 8001628:	b299      	uxth	r1, r3
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	b29a      	uxth	r2, r3
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	b29c      	uxth	r4, r3
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	4623      	mov	r3, r4
 8001638:	f7ff fde2 	bl	8001200 <SSD1306_DrawRectangle>
    for (i = 2; i < 30; i += 6)
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	3306      	adds	r3, #6
 8001640:	73fb      	strb	r3, [r7, #15]
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	2b1d      	cmp	r3, #29
 8001646:	d9e3      	bls.n	8001610 <character_draw+0x18>
        //SSD1306_UpdateScreen();
        //HAL_Delay (10);
    }
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	bd90      	pop	{r4, r7, pc}

08001650 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001650:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001652:	e003      	b.n	800165c <LoopCopyDataInit>

08001654 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001656:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001658:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800165a:	3104      	adds	r1, #4

0800165c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800165c:	480a      	ldr	r0, [pc, #40]	; (8001688 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800165e:	4b0b      	ldr	r3, [pc, #44]	; (800168c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001660:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001662:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001664:	d3f6      	bcc.n	8001654 <CopyDataInit>
  ldr r2, =_sbss
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001668:	e002      	b.n	8001670 <LoopFillZerobss>

0800166a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800166c:	f842 3b04 	str.w	r3, [r2], #4

08001670 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001672:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001674:	d3f9      	bcc.n	800166a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001676:	f7ff ffb9 	bl	80015ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800167a:	f002 f8ab 	bl	80037d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800167e:	f7fe fd65 	bl	800014c <main>
  bx lr
 8001682:	4770      	bx	lr
  ldr r3, =_sidata
 8001684:	08005b54 	.word	0x08005b54
  ldr r0, =_sdata
 8001688:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800168c:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 8001690:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 8001694:	20000554 	.word	0x20000554

08001698 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC1_2_IRQHandler>
	...

0800169c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <HAL_Init+0x28>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a07      	ldr	r2, [pc, #28]	; (80016c4 <HAL_Init+0x28>)
 80016a6:	f043 0310 	orr.w	r3, r3, #16
 80016aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ac:	2003      	movs	r0, #3
 80016ae:	f000 f945 	bl	800193c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b2:	2000      	movs	r0, #0
 80016b4:	f000 f808 	bl	80016c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b8:	f7ff fe90 	bl	80013dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40022000 	.word	0x40022000

080016c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_InitTick+0x54>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_InitTick+0x58>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016de:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 f95d 	bl	80019a6 <HAL_SYSTICK_Config>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00e      	b.n	8001714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b0f      	cmp	r3, #15
 80016fa:	d80a      	bhi.n	8001712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016fc:	2200      	movs	r2, #0
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f000 f925 	bl	8001952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001708:	4a06      	ldr	r2, [pc, #24]	; (8001724 <HAL_InitTick+0x5c>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	e000      	b.n	8001714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000010 	.word	0x20000010
 8001720:	20000018 	.word	0x20000018
 8001724:	20000014 	.word	0x20000014

08001728 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_IncTick+0x1c>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4b05      	ldr	r3, [pc, #20]	; (8001748 <HAL_IncTick+0x20>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4413      	add	r3, r2
 8001738:	4a03      	ldr	r2, [pc, #12]	; (8001748 <HAL_IncTick+0x20>)
 800173a:	6013      	str	r3, [r2, #0]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	20000018 	.word	0x20000018
 8001748:	2000054c 	.word	0x2000054c

0800174c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return uwTick;
 8001750:	4b02      	ldr	r3, [pc, #8]	; (800175c <HAL_GetTick+0x10>)
 8001752:	681b      	ldr	r3, [r3, #0]
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	2000054c 	.word	0x2000054c

08001760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001768:	f7ff fff0 	bl	800174c <HAL_GetTick>
 800176c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001778:	d005      	beq.n	8001786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_Delay+0x40>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4413      	add	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001786:	bf00      	nop
 8001788:	f7ff ffe0 	bl	800174c <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	429a      	cmp	r2, r3
 8001796:	d8f7      	bhi.n	8001788 <HAL_Delay+0x28>
  {
  }
}
 8001798:	bf00      	nop
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000018 	.word	0x20000018

080017a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c0:	4013      	ands	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d6:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	60d3      	str	r3, [r2, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <__NVIC_GetPriorityGrouping+0x18>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	f003 0307 	and.w	r3, r3, #7
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	2b00      	cmp	r3, #0
 8001818:	db0b      	blt.n	8001832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	f003 021f 	and.w	r2, r3, #31
 8001820:	4906      	ldr	r1, [pc, #24]	; (800183c <__NVIC_EnableIRQ+0x34>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	2001      	movs	r0, #1
 800182a:	fa00 f202 	lsl.w	r2, r0, r2
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	e000e100 	.word	0xe000e100

08001840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db0a      	blt.n	800186a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	490c      	ldr	r1, [pc, #48]	; (800188c <__NVIC_SetPriority+0x4c>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	440b      	add	r3, r1
 8001864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001868:	e00a      	b.n	8001880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4908      	ldr	r1, [pc, #32]	; (8001890 <__NVIC_SetPriority+0x50>)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	3b04      	subs	r3, #4
 8001878:	0112      	lsls	r2, r2, #4
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	440b      	add	r3, r1
 800187e:	761a      	strb	r2, [r3, #24]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f1c3 0307 	rsb	r3, r3, #7
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	bf28      	it	cs
 80018b2:	2304      	movcs	r3, #4
 80018b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3304      	adds	r3, #4
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d902      	bls.n	80018c4 <NVIC_EncodePriority+0x30>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3b03      	subs	r3, #3
 80018c2:	e000      	b.n	80018c6 <NVIC_EncodePriority+0x32>
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	401a      	ands	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43d9      	mvns	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	4313      	orrs	r3, r2
         );
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3724      	adds	r7, #36	; 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001908:	d301      	bcc.n	800190e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190a:	2301      	movs	r3, #1
 800190c:	e00f      	b.n	800192e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <SysTick_Config+0x40>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001916:	210f      	movs	r1, #15
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
 800191c:	f7ff ff90 	bl	8001840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <SysTick_Config+0x40>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001926:	4b04      	ldr	r3, [pc, #16]	; (8001938 <SysTick_Config+0x40>)
 8001928:	2207      	movs	r2, #7
 800192a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	e000e010 	.word	0xe000e010

0800193c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ff2d 	bl	80017a4 <__NVIC_SetPriorityGrouping>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001964:	f7ff ff42 	bl	80017ec <__NVIC_GetPriorityGrouping>
 8001968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	6978      	ldr	r0, [r7, #20]
 8001970:	f7ff ff90 	bl	8001894 <NVIC_EncodePriority>
 8001974:	4602      	mov	r2, r0
 8001976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff5f 	bl	8001840 <__NVIC_SetPriority>
}
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff35 	bl	8001808 <__NVIC_EnableIRQ>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ffa2 	bl	80018f8 <SysTick_Config>
 80019b4:	4603      	mov	r3, r0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b08b      	sub	sp, #44	; 0x2c
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ca:	2300      	movs	r3, #0
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019ce:	2300      	movs	r3, #0
 80019d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d2:	e127      	b.n	8001c24 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019d4:	2201      	movs	r2, #1
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	f040 8116 	bne.w	8001c1e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b12      	cmp	r3, #18
 80019f8:	d034      	beq.n	8001a64 <HAL_GPIO_Init+0xa4>
 80019fa:	2b12      	cmp	r3, #18
 80019fc:	d80d      	bhi.n	8001a1a <HAL_GPIO_Init+0x5a>
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d02b      	beq.n	8001a5a <HAL_GPIO_Init+0x9a>
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d804      	bhi.n	8001a10 <HAL_GPIO_Init+0x50>
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d031      	beq.n	8001a6e <HAL_GPIO_Init+0xae>
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d01c      	beq.n	8001a48 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a0e:	e048      	b.n	8001aa2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d043      	beq.n	8001a9c <HAL_GPIO_Init+0xdc>
 8001a14:	2b11      	cmp	r3, #17
 8001a16:	d01b      	beq.n	8001a50 <HAL_GPIO_Init+0x90>
          break;
 8001a18:	e043      	b.n	8001aa2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a1a:	4a89      	ldr	r2, [pc, #548]	; (8001c40 <HAL_GPIO_Init+0x280>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d026      	beq.n	8001a6e <HAL_GPIO_Init+0xae>
 8001a20:	4a87      	ldr	r2, [pc, #540]	; (8001c40 <HAL_GPIO_Init+0x280>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d806      	bhi.n	8001a34 <HAL_GPIO_Init+0x74>
 8001a26:	4a87      	ldr	r2, [pc, #540]	; (8001c44 <HAL_GPIO_Init+0x284>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d020      	beq.n	8001a6e <HAL_GPIO_Init+0xae>
 8001a2c:	4a86      	ldr	r2, [pc, #536]	; (8001c48 <HAL_GPIO_Init+0x288>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d01d      	beq.n	8001a6e <HAL_GPIO_Init+0xae>
          break;
 8001a32:	e036      	b.n	8001aa2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a34:	4a85      	ldr	r2, [pc, #532]	; (8001c4c <HAL_GPIO_Init+0x28c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d019      	beq.n	8001a6e <HAL_GPIO_Init+0xae>
 8001a3a:	4a85      	ldr	r2, [pc, #532]	; (8001c50 <HAL_GPIO_Init+0x290>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d016      	beq.n	8001a6e <HAL_GPIO_Init+0xae>
 8001a40:	4a84      	ldr	r2, [pc, #528]	; (8001c54 <HAL_GPIO_Init+0x294>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d013      	beq.n	8001a6e <HAL_GPIO_Init+0xae>
          break;
 8001a46:	e02c      	b.n	8001aa2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	623b      	str	r3, [r7, #32]
          break;
 8001a4e:	e028      	b.n	8001aa2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	3304      	adds	r3, #4
 8001a56:	623b      	str	r3, [r7, #32]
          break;
 8001a58:	e023      	b.n	8001aa2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	3308      	adds	r3, #8
 8001a60:	623b      	str	r3, [r7, #32]
          break;
 8001a62:	e01e      	b.n	8001aa2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	330c      	adds	r3, #12
 8001a6a:	623b      	str	r3, [r7, #32]
          break;
 8001a6c:	e019      	b.n	8001aa2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d102      	bne.n	8001a7c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a76:	2304      	movs	r3, #4
 8001a78:	623b      	str	r3, [r7, #32]
          break;
 8001a7a:	e012      	b.n	8001aa2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d105      	bne.n	8001a90 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a84:	2308      	movs	r3, #8
 8001a86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69fa      	ldr	r2, [r7, #28]
 8001a8c:	611a      	str	r2, [r3, #16]
          break;
 8001a8e:	e008      	b.n	8001aa2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a90:	2308      	movs	r3, #8
 8001a92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69fa      	ldr	r2, [r7, #28]
 8001a98:	615a      	str	r2, [r3, #20]
          break;
 8001a9a:	e002      	b.n	8001aa2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	623b      	str	r3, [r7, #32]
          break;
 8001aa0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	2bff      	cmp	r3, #255	; 0xff
 8001aa6:	d801      	bhi.n	8001aac <HAL_GPIO_Init+0xec>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	e001      	b.n	8001ab0 <HAL_GPIO_Init+0xf0>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3304      	adds	r3, #4
 8001ab0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	2bff      	cmp	r3, #255	; 0xff
 8001ab6:	d802      	bhi.n	8001abe <HAL_GPIO_Init+0xfe>
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	e002      	b.n	8001ac4 <HAL_GPIO_Init+0x104>
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	3b08      	subs	r3, #8
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	210f      	movs	r1, #15
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	401a      	ands	r2, r3
 8001ad6:	6a39      	ldr	r1, [r7, #32]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 8096 	beq.w	8001c1e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001af2:	4b59      	ldr	r3, [pc, #356]	; (8001c58 <HAL_GPIO_Init+0x298>)
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	4a58      	ldr	r2, [pc, #352]	; (8001c58 <HAL_GPIO_Init+0x298>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6193      	str	r3, [r2, #24]
 8001afe:	4b56      	ldr	r3, [pc, #344]	; (8001c58 <HAL_GPIO_Init+0x298>)
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b0a:	4a54      	ldr	r2, [pc, #336]	; (8001c5c <HAL_GPIO_Init+0x29c>)
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	089b      	lsrs	r3, r3, #2
 8001b10:	3302      	adds	r3, #2
 8001b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b16:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	220f      	movs	r2, #15
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a4b      	ldr	r2, [pc, #300]	; (8001c60 <HAL_GPIO_Init+0x2a0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d013      	beq.n	8001b5e <HAL_GPIO_Init+0x19e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a4a      	ldr	r2, [pc, #296]	; (8001c64 <HAL_GPIO_Init+0x2a4>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00d      	beq.n	8001b5a <HAL_GPIO_Init+0x19a>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a49      	ldr	r2, [pc, #292]	; (8001c68 <HAL_GPIO_Init+0x2a8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d007      	beq.n	8001b56 <HAL_GPIO_Init+0x196>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a48      	ldr	r2, [pc, #288]	; (8001c6c <HAL_GPIO_Init+0x2ac>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d101      	bne.n	8001b52 <HAL_GPIO_Init+0x192>
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e006      	b.n	8001b60 <HAL_GPIO_Init+0x1a0>
 8001b52:	2304      	movs	r3, #4
 8001b54:	e004      	b.n	8001b60 <HAL_GPIO_Init+0x1a0>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e002      	b.n	8001b60 <HAL_GPIO_Init+0x1a0>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <HAL_GPIO_Init+0x1a0>
 8001b5e:	2300      	movs	r3, #0
 8001b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b62:	f002 0203 	and.w	r2, r2, #3
 8001b66:	0092      	lsls	r2, r2, #2
 8001b68:	4093      	lsls	r3, r2
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b70:	493a      	ldr	r1, [pc, #232]	; (8001c5c <HAL_GPIO_Init+0x29c>)
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	089b      	lsrs	r3, r3, #2
 8001b76:	3302      	adds	r3, #2
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d006      	beq.n	8001b98 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b8a:	4b39      	ldr	r3, [pc, #228]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	4938      	ldr	r1, [pc, #224]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]
 8001b96:	e006      	b.n	8001ba6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b98:	4b35      	ldr	r3, [pc, #212]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	4933      	ldr	r1, [pc, #204]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d006      	beq.n	8001bc0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bb2:	4b2f      	ldr	r3, [pc, #188]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	492e      	ldr	r1, [pc, #184]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	604b      	str	r3, [r1, #4]
 8001bbe:	e006      	b.n	8001bce <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bc0:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	4929      	ldr	r1, [pc, #164]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d006      	beq.n	8001be8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bda:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	4924      	ldr	r1, [pc, #144]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	608b      	str	r3, [r1, #8]
 8001be6:	e006      	b.n	8001bf6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001be8:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	491f      	ldr	r1, [pc, #124]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d006      	beq.n	8001c10 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c02:	4b1b      	ldr	r3, [pc, #108]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	491a      	ldr	r1, [pc, #104]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	60cb      	str	r3, [r1, #12]
 8001c0e:	e006      	b.n	8001c1e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c10:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	43db      	mvns	r3, r3
 8001c18:	4915      	ldr	r1, [pc, #84]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	3301      	adds	r3, #1
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f47f aed0 	bne.w	80019d4 <HAL_GPIO_Init+0x14>
  }
}
 8001c34:	bf00      	nop
 8001c36:	372c      	adds	r7, #44	; 0x2c
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	10210000 	.word	0x10210000
 8001c44:	10110000 	.word	0x10110000
 8001c48:	10120000 	.word	0x10120000
 8001c4c:	10310000 	.word	0x10310000
 8001c50:	10320000 	.word	0x10320000
 8001c54:	10220000 	.word	0x10220000
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40010000 	.word	0x40010000
 8001c60:	40010800 	.word	0x40010800
 8001c64:	40010c00 	.word	0x40010c00
 8001c68:	40011000 	.word	0x40011000
 8001c6c:	40011400 	.word	0x40011400
 8001c70:	40010400 	.word	0x40010400

08001c74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	887b      	ldrh	r3, [r7, #2]
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d002      	beq.n	8001c92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]
 8001c90:	e001      	b.n	8001c96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	460b      	mov	r3, r1
 8001cac:	807b      	strh	r3, [r7, #2]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cb2:	787b      	ldrb	r3, [r7, #1]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cb8:	887a      	ldrh	r2, [r7, #2]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cbe:	e003      	b.n	8001cc8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cc0:	887b      	ldrh	r3, [r7, #2]
 8001cc2:	041a      	lsls	r2, r3, #16
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	611a      	str	r2, [r3, #16]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b085      	sub	sp, #20
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ce4:	887a      	ldrh	r2, [r7, #2]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	041a      	lsls	r2, r3, #16
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	43d9      	mvns	r1, r3
 8001cf0:	887b      	ldrh	r3, [r7, #2]
 8001cf2:	400b      	ands	r3, r1
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	611a      	str	r2, [r3, #16]
}
 8001cfa:	bf00      	nop
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e11f      	b.n	8001f56 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d106      	bne.n	8001d30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff fb90 	bl	8001450 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2224      	movs	r2, #36	; 0x24
 8001d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0201 	bic.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d68:	f001 f90e 	bl	8002f88 <HAL_RCC_GetPCLK1Freq>
 8001d6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	4a7b      	ldr	r2, [pc, #492]	; (8001f60 <HAL_I2C_Init+0x25c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d807      	bhi.n	8001d88 <HAL_I2C_Init+0x84>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4a7a      	ldr	r2, [pc, #488]	; (8001f64 <HAL_I2C_Init+0x260>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	bf94      	ite	ls
 8001d80:	2301      	movls	r3, #1
 8001d82:	2300      	movhi	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	e006      	b.n	8001d96 <HAL_I2C_Init+0x92>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4a77      	ldr	r2, [pc, #476]	; (8001f68 <HAL_I2C_Init+0x264>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	bf94      	ite	ls
 8001d90:	2301      	movls	r3, #1
 8001d92:	2300      	movhi	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e0db      	b.n	8001f56 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4a72      	ldr	r2, [pc, #456]	; (8001f6c <HAL_I2C_Init+0x268>)
 8001da2:	fba2 2303 	umull	r2, r3, r2, r3
 8001da6:	0c9b      	lsrs	r3, r3, #18
 8001da8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68ba      	ldr	r2, [r7, #8]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	4a64      	ldr	r2, [pc, #400]	; (8001f60 <HAL_I2C_Init+0x25c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d802      	bhi.n	8001dd8 <HAL_I2C_Init+0xd4>
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	e009      	b.n	8001dec <HAL_I2C_Init+0xe8>
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dde:	fb02 f303 	mul.w	r3, r2, r3
 8001de2:	4a63      	ldr	r2, [pc, #396]	; (8001f70 <HAL_I2C_Init+0x26c>)
 8001de4:	fba2 2303 	umull	r2, r3, r2, r3
 8001de8:	099b      	lsrs	r3, r3, #6
 8001dea:	3301      	adds	r3, #1
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6812      	ldr	r2, [r2, #0]
 8001df0:	430b      	orrs	r3, r1
 8001df2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001dfe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	4956      	ldr	r1, [pc, #344]	; (8001f60 <HAL_I2C_Init+0x25c>)
 8001e08:	428b      	cmp	r3, r1
 8001e0a:	d80d      	bhi.n	8001e28 <HAL_I2C_Init+0x124>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	1e59      	subs	r1, r3, #1
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	bf38      	it	cc
 8001e24:	2304      	movcc	r3, #4
 8001e26:	e04f      	b.n	8001ec8 <HAL_I2C_Init+0x1c4>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d111      	bne.n	8001e54 <HAL_I2C_Init+0x150>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	1e58      	subs	r0, r3, #1
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6859      	ldr	r1, [r3, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	440b      	add	r3, r1
 8001e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e42:	3301      	adds	r3, #1
 8001e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	bf0c      	ite	eq
 8001e4c:	2301      	moveq	r3, #1
 8001e4e:	2300      	movne	r3, #0
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	e012      	b.n	8001e7a <HAL_I2C_Init+0x176>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1e58      	subs	r0, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6859      	ldr	r1, [r3, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	0099      	lsls	r1, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bf0c      	ite	eq
 8001e74:	2301      	moveq	r3, #1
 8001e76:	2300      	movne	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_I2C_Init+0x17e>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e022      	b.n	8001ec8 <HAL_I2C_Init+0x1c4>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10e      	bne.n	8001ea8 <HAL_I2C_Init+0x1a4>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1e58      	subs	r0, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6859      	ldr	r1, [r3, #4]
 8001e92:	460b      	mov	r3, r1
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	440b      	add	r3, r1
 8001e98:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ea6:	e00f      	b.n	8001ec8 <HAL_I2C_Init+0x1c4>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	1e58      	subs	r0, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6859      	ldr	r1, [r3, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	0099      	lsls	r1, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	6809      	ldr	r1, [r1, #0]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69da      	ldr	r2, [r3, #28]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ef6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6911      	ldr	r1, [r2, #16]
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	68d2      	ldr	r2, [r2, #12]
 8001f02:	4311      	orrs	r1, r2
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	430b      	orrs	r3, r1
 8001f0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	695a      	ldr	r2, [r3, #20]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0201 	orr.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2220      	movs	r2, #32
 8001f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	000186a0 	.word	0x000186a0
 8001f64:	001e847f 	.word	0x001e847f
 8001f68:	003d08ff 	.word	0x003d08ff
 8001f6c:	431bde83 	.word	0x431bde83
 8001f70:	10624dd3 	.word	0x10624dd3

08001f74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af02      	add	r7, sp, #8
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	607a      	str	r2, [r7, #4]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	460b      	mov	r3, r1
 8001f82:	817b      	strh	r3, [r7, #10]
 8001f84:	4613      	mov	r3, r2
 8001f86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f88:	f7ff fbe0 	bl	800174c <HAL_GetTick>
 8001f8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b20      	cmp	r3, #32
 8001f98:	f040 80e0 	bne.w	800215c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	2319      	movs	r3, #25
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	4970      	ldr	r1, [pc, #448]	; (8002168 <HAL_I2C_Master_Transmit+0x1f4>)
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 fa92 	bl	80024d0 <I2C_WaitOnFlagUntilTimeout>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e0d3      	b.n	800215e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <HAL_I2C_Master_Transmit+0x50>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e0cc      	b.n	800215e <HAL_I2C_Master_Transmit+0x1ea>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d007      	beq.n	8001fea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f042 0201 	orr.w	r2, r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ff8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2221      	movs	r2, #33	; 0x21
 8001ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2210      	movs	r2, #16
 8002006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	893a      	ldrh	r2, [r7, #8]
 800201a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4a50      	ldr	r2, [pc, #320]	; (800216c <HAL_I2C_Master_Transmit+0x1f8>)
 800202a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800202c:	8979      	ldrh	r1, [r7, #10]
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	6a3a      	ldr	r2, [r7, #32]
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 f9ca 	bl	80023cc <I2C_MasterRequestWrite>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e08d      	b.n	800215e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002058:	e066      	b.n	8002128 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	6a39      	ldr	r1, [r7, #32]
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 fb0c 	bl	800267c <I2C_WaitOnTXEFlagUntilTimeout>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00d      	beq.n	8002086 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	2b04      	cmp	r3, #4
 8002070:	d107      	bne.n	8002082 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002080:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e06b      	b.n	800215e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	781a      	ldrb	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	3b01      	subs	r3, #1
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d11b      	bne.n	80020fc <HAL_I2C_Master_Transmit+0x188>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d017      	beq.n	80020fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	781a      	ldrb	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	3b01      	subs	r3, #1
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	6a39      	ldr	r1, [r7, #32]
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 fafc 	bl	80026fe <I2C_WaitOnBTFFlagUntilTimeout>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00d      	beq.n	8002128 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	2b04      	cmp	r3, #4
 8002112:	d107      	bne.n	8002124 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002122:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e01a      	b.n	800215e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212c:	2b00      	cmp	r3, #0
 800212e:	d194      	bne.n	800205a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800213e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	e000      	b.n	800215e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800215c:	2302      	movs	r3, #2
  }
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	00100002 	.word	0x00100002
 800216c:	ffff0000 	.word	0xffff0000

08002170 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	; 0x28
 8002174:	af02      	add	r7, sp, #8
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	460b      	mov	r3, r1
 800217e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002180:	f7ff fae4 	bl	800174c <HAL_GetTick>
 8002184:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002186:	2301      	movs	r3, #1
 8002188:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b20      	cmp	r3, #32
 8002194:	f040 8111 	bne.w	80023ba <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	2319      	movs	r3, #25
 800219e:	2201      	movs	r2, #1
 80021a0:	4988      	ldr	r1, [pc, #544]	; (80023c4 <HAL_I2C_IsDeviceReady+0x254>)
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 f994 	bl	80024d0 <I2C_WaitOnFlagUntilTimeout>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80021ae:	2302      	movs	r3, #2
 80021b0:	e104      	b.n	80023bc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <HAL_I2C_IsDeviceReady+0x50>
 80021bc:	2302      	movs	r3, #2
 80021be:	e0fd      	b.n	80023bc <HAL_I2C_IsDeviceReady+0x24c>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d007      	beq.n	80021e6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f042 0201 	orr.w	r2, r2, #1
 80021e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2224      	movs	r2, #36	; 0x24
 80021fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4a70      	ldr	r2, [pc, #448]	; (80023c8 <HAL_I2C_IsDeviceReady+0x258>)
 8002208:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002218:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	2200      	movs	r2, #0
 8002222:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f000 f952 	bl	80024d0 <I2C_WaitOnFlagUntilTimeout>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00d      	beq.n	800224e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002240:	d103      	bne.n	800224a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002248:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e0b6      	b.n	80023bc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800224e:	897b      	ldrh	r3, [r7, #10]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	461a      	mov	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800225c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800225e:	f7ff fa75 	bl	800174c <HAL_GetTick>
 8002262:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b02      	cmp	r3, #2
 8002270:	bf0c      	ite	eq
 8002272:	2301      	moveq	r3, #1
 8002274:	2300      	movne	r3, #0
 8002276:	b2db      	uxtb	r3, r3
 8002278:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002288:	bf0c      	ite	eq
 800228a:	2301      	moveq	r3, #1
 800228c:	2300      	movne	r3, #0
 800228e:	b2db      	uxtb	r3, r3
 8002290:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002292:	e025      	b.n	80022e0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002294:	f7ff fa5a 	bl	800174c <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d302      	bcc.n	80022aa <HAL_I2C_IsDeviceReady+0x13a>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d103      	bne.n	80022b2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	22a0      	movs	r2, #160	; 0xa0
 80022ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b02      	cmp	r3, #2
 80022be:	bf0c      	ite	eq
 80022c0:	2301      	moveq	r3, #1
 80022c2:	2300      	movne	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d6:	bf0c      	ite	eq
 80022d8:	2301      	moveq	r3, #1
 80022da:	2300      	movne	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2ba0      	cmp	r3, #160	; 0xa0
 80022ea:	d005      	beq.n	80022f8 <HAL_I2C_IsDeviceReady+0x188>
 80022ec:	7dfb      	ldrb	r3, [r7, #23]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d102      	bne.n	80022f8 <HAL_I2C_IsDeviceReady+0x188>
 80022f2:	7dbb      	ldrb	r3, [r7, #22]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0cd      	beq.n	8002294 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2220      	movs	r2, #32
 80022fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b02      	cmp	r3, #2
 800230c:	d129      	bne.n	8002362 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800231c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	613b      	str	r3, [r7, #16]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	2319      	movs	r3, #25
 800233a:	2201      	movs	r2, #1
 800233c:	4921      	ldr	r1, [pc, #132]	; (80023c4 <HAL_I2C_IsDeviceReady+0x254>)
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 f8c6 	bl	80024d0 <I2C_WaitOnFlagUntilTimeout>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e036      	b.n	80023bc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2220      	movs	r2, #32
 8002352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	e02c      	b.n	80023bc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002370:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800237a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	2319      	movs	r3, #25
 8002382:	2201      	movs	r2, #1
 8002384:	490f      	ldr	r1, [pc, #60]	; (80023c4 <HAL_I2C_IsDeviceReady+0x254>)
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 f8a2 	bl	80024d0 <I2C_WaitOnFlagUntilTimeout>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e012      	b.n	80023bc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	3301      	adds	r3, #1
 800239a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	f4ff af32 	bcc.w	800220a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2220      	movs	r2, #32
 80023aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80023ba:	2302      	movs	r3, #2
  }
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3720      	adds	r7, #32
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	00100002 	.word	0x00100002
 80023c8:	ffff0000 	.word	0xffff0000

080023cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af02      	add	r7, sp, #8
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	607a      	str	r2, [r7, #4]
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	460b      	mov	r3, r1
 80023da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d006      	beq.n	80023f6 <I2C_MasterRequestWrite+0x2a>
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d003      	beq.n	80023f6 <I2C_MasterRequestWrite+0x2a>
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023f4:	d108      	bne.n	8002408 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	e00b      	b.n	8002420 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	2b12      	cmp	r3, #18
 800240e:	d107      	bne.n	8002420 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800241e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 f84f 	bl	80024d0 <I2C_WaitOnFlagUntilTimeout>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00d      	beq.n	8002454 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002446:	d103      	bne.n	8002450 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800244e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e035      	b.n	80024c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800245c:	d108      	bne.n	8002470 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800245e:	897b      	ldrh	r3, [r7, #10]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	461a      	mov	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800246c:	611a      	str	r2, [r3, #16]
 800246e:	e01b      	b.n	80024a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002470:	897b      	ldrh	r3, [r7, #10]
 8002472:	11db      	asrs	r3, r3, #7
 8002474:	b2db      	uxtb	r3, r3
 8002476:	f003 0306 	and.w	r3, r3, #6
 800247a:	b2db      	uxtb	r3, r3
 800247c:	f063 030f 	orn	r3, r3, #15
 8002480:	b2da      	uxtb	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	490e      	ldr	r1, [pc, #56]	; (80024c8 <I2C_MasterRequestWrite+0xfc>)
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 f875 	bl	800257e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e010      	b.n	80024c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800249e:	897b      	ldrh	r3, [r7, #10]
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	4907      	ldr	r1, [pc, #28]	; (80024cc <I2C_MasterRequestWrite+0x100>)
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 f865 	bl	800257e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	00010008 	.word	0x00010008
 80024cc:	00010002 	.word	0x00010002

080024d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	603b      	str	r3, [r7, #0]
 80024dc:	4613      	mov	r3, r2
 80024de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024e0:	e025      	b.n	800252e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e8:	d021      	beq.n	800252e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ea:	f7ff f92f 	bl	800174c <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d302      	bcc.n	8002500 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d116      	bne.n	800252e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2220      	movs	r2, #32
 800250a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f043 0220 	orr.w	r2, r3, #32
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e023      	b.n	8002576 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	0c1b      	lsrs	r3, r3, #16
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b01      	cmp	r3, #1
 8002536:	d10d      	bne.n	8002554 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	43da      	mvns	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	4013      	ands	r3, r2
 8002544:	b29b      	uxth	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	bf0c      	ite	eq
 800254a:	2301      	moveq	r3, #1
 800254c:	2300      	movne	r3, #0
 800254e:	b2db      	uxtb	r3, r3
 8002550:	461a      	mov	r2, r3
 8002552:	e00c      	b.n	800256e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	43da      	mvns	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	4013      	ands	r3, r2
 8002560:	b29b      	uxth	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	bf0c      	ite	eq
 8002566:	2301      	moveq	r3, #1
 8002568:	2300      	movne	r3, #0
 800256a:	b2db      	uxtb	r3, r3
 800256c:	461a      	mov	r2, r3
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	429a      	cmp	r2, r3
 8002572:	d0b6      	beq.n	80024e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	60f8      	str	r0, [r7, #12]
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	607a      	str	r2, [r7, #4]
 800258a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800258c:	e051      	b.n	8002632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259c:	d123      	bne.n	80025e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2220      	movs	r2, #32
 80025c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f043 0204 	orr.w	r2, r3, #4
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e046      	b.n	8002674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ec:	d021      	beq.n	8002632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ee:	f7ff f8ad 	bl	800174c <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d302      	bcc.n	8002604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d116      	bne.n	8002632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2220      	movs	r2, #32
 800260e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f043 0220 	orr.w	r2, r3, #32
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e020      	b.n	8002674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	0c1b      	lsrs	r3, r3, #16
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b01      	cmp	r3, #1
 800263a:	d10c      	bne.n	8002656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	43da      	mvns	r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	4013      	ands	r3, r2
 8002648:	b29b      	uxth	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	bf14      	ite	ne
 800264e:	2301      	movne	r3, #1
 8002650:	2300      	moveq	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	e00b      	b.n	800266e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	43da      	mvns	r2, r3
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	4013      	ands	r3, r2
 8002662:	b29b      	uxth	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	bf14      	ite	ne
 8002668:	2301      	movne	r3, #1
 800266a:	2300      	moveq	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d18d      	bne.n	800258e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002688:	e02d      	b.n	80026e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f878 	bl	8002780 <I2C_IsAcknowledgeFailed>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e02d      	b.n	80026f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a0:	d021      	beq.n	80026e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a2:	f7ff f853 	bl	800174c <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d302      	bcc.n	80026b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d116      	bne.n	80026e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2220      	movs	r2, #32
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f043 0220 	orr.w	r2, r3, #32
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e007      	b.n	80026f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f0:	2b80      	cmp	r3, #128	; 0x80
 80026f2:	d1ca      	bne.n	800268a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
 8002704:	60f8      	str	r0, [r7, #12]
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800270a:	e02d      	b.n	8002768 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f000 f837 	bl	8002780 <I2C_IsAcknowledgeFailed>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e02d      	b.n	8002778 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002722:	d021      	beq.n	8002768 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002724:	f7ff f812 	bl	800174c <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	429a      	cmp	r2, r3
 8002732:	d302      	bcc.n	800273a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d116      	bne.n	8002768 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2220      	movs	r2, #32
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	f043 0220 	orr.w	r2, r3, #32
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e007      	b.n	8002778 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	2b04      	cmp	r3, #4
 8002774:	d1ca      	bne.n	800270c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002796:	d11b      	bne.n	80027d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	f043 0204 	orr.w	r2, r3, #4
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e26c      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 8087 	beq.w	800290a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027fc:	4b92      	ldr	r3, [pc, #584]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 030c 	and.w	r3, r3, #12
 8002804:	2b04      	cmp	r3, #4
 8002806:	d00c      	beq.n	8002822 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002808:	4b8f      	ldr	r3, [pc, #572]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 030c 	and.w	r3, r3, #12
 8002810:	2b08      	cmp	r3, #8
 8002812:	d112      	bne.n	800283a <HAL_RCC_OscConfig+0x5e>
 8002814:	4b8c      	ldr	r3, [pc, #560]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002820:	d10b      	bne.n	800283a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002822:	4b89      	ldr	r3, [pc, #548]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d06c      	beq.n	8002908 <HAL_RCC_OscConfig+0x12c>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d168      	bne.n	8002908 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e246      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002842:	d106      	bne.n	8002852 <HAL_RCC_OscConfig+0x76>
 8002844:	4b80      	ldr	r3, [pc, #512]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a7f      	ldr	r2, [pc, #508]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 800284a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284e:	6013      	str	r3, [r2, #0]
 8002850:	e02e      	b.n	80028b0 <HAL_RCC_OscConfig+0xd4>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10c      	bne.n	8002874 <HAL_RCC_OscConfig+0x98>
 800285a:	4b7b      	ldr	r3, [pc, #492]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a7a      	ldr	r2, [pc, #488]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 8002860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	4b78      	ldr	r3, [pc, #480]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a77      	ldr	r2, [pc, #476]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 800286c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	e01d      	b.n	80028b0 <HAL_RCC_OscConfig+0xd4>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800287c:	d10c      	bne.n	8002898 <HAL_RCC_OscConfig+0xbc>
 800287e:	4b72      	ldr	r3, [pc, #456]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a71      	ldr	r2, [pc, #452]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 8002884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	4b6f      	ldr	r3, [pc, #444]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a6e      	ldr	r2, [pc, #440]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 8002890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	e00b      	b.n	80028b0 <HAL_RCC_OscConfig+0xd4>
 8002898:	4b6b      	ldr	r3, [pc, #428]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a6a      	ldr	r2, [pc, #424]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 800289e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a2:	6013      	str	r3, [r2, #0]
 80028a4:	4b68      	ldr	r3, [pc, #416]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a67      	ldr	r2, [pc, #412]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 80028aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d013      	beq.n	80028e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b8:	f7fe ff48 	bl	800174c <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c0:	f7fe ff44 	bl	800174c <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b64      	cmp	r3, #100	; 0x64
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e1fa      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d2:	4b5d      	ldr	r3, [pc, #372]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0xe4>
 80028de:	e014      	b.n	800290a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7fe ff34 	bl	800174c <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e8:	f7fe ff30 	bl	800174c <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b64      	cmp	r3, #100	; 0x64
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e1e6      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028fa:	4b53      	ldr	r3, [pc, #332]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0x10c>
 8002906:	e000      	b.n	800290a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d063      	beq.n	80029de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002916:	4b4c      	ldr	r3, [pc, #304]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f003 030c 	and.w	r3, r3, #12
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00b      	beq.n	800293a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002922:	4b49      	ldr	r3, [pc, #292]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	2b08      	cmp	r3, #8
 800292c:	d11c      	bne.n	8002968 <HAL_RCC_OscConfig+0x18c>
 800292e:	4b46      	ldr	r3, [pc, #280]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d116      	bne.n	8002968 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293a:	4b43      	ldr	r3, [pc, #268]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d005      	beq.n	8002952 <HAL_RCC_OscConfig+0x176>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d001      	beq.n	8002952 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e1ba      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002952:	4b3d      	ldr	r3, [pc, #244]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4939      	ldr	r1, [pc, #228]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 8002962:	4313      	orrs	r3, r2
 8002964:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002966:	e03a      	b.n	80029de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d020      	beq.n	80029b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002970:	4b36      	ldr	r3, [pc, #216]	; (8002a4c <HAL_RCC_OscConfig+0x270>)
 8002972:	2201      	movs	r2, #1
 8002974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002976:	f7fe fee9 	bl	800174c <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800297e:	f7fe fee5 	bl	800174c <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e19b      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002990:	4b2d      	ldr	r3, [pc, #180]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299c:	4b2a      	ldr	r3, [pc, #168]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	4927      	ldr	r1, [pc, #156]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	600b      	str	r3, [r1, #0]
 80029b0:	e015      	b.n	80029de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029b2:	4b26      	ldr	r3, [pc, #152]	; (8002a4c <HAL_RCC_OscConfig+0x270>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b8:	f7fe fec8 	bl	800174c <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c0:	f7fe fec4 	bl	800174c <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e17a      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d2:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d03a      	beq.n	8002a60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d019      	beq.n	8002a26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029f2:	4b17      	ldr	r3, [pc, #92]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f8:	f7fe fea8 	bl	800174c <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a00:	f7fe fea4 	bl	800174c <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e15a      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a12:	4b0d      	ldr	r3, [pc, #52]	; (8002a48 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a1e:	2001      	movs	r0, #1
 8002a20:	f000 fac6 	bl	8002fb0 <RCC_Delay>
 8002a24:	e01c      	b.n	8002a60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a26:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a2c:	f7fe fe8e 	bl	800174c <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a32:	e00f      	b.n	8002a54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a34:	f7fe fe8a 	bl	800174c <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d908      	bls.n	8002a54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e140      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4ec>
 8002a46:	bf00      	nop
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	42420000 	.word	0x42420000
 8002a50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a54:	4b9e      	ldr	r3, [pc, #632]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1e9      	bne.n	8002a34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 80a6 	beq.w	8002bba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a72:	4b97      	ldr	r3, [pc, #604]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10d      	bne.n	8002a9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a7e:	4b94      	ldr	r3, [pc, #592]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	4a93      	ldr	r2, [pc, #588]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a88:	61d3      	str	r3, [r2, #28]
 8002a8a:	4b91      	ldr	r3, [pc, #580]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a92:	60bb      	str	r3, [r7, #8]
 8002a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a96:	2301      	movs	r3, #1
 8002a98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9a:	4b8e      	ldr	r3, [pc, #568]	; (8002cd4 <HAL_RCC_OscConfig+0x4f8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d118      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aa6:	4b8b      	ldr	r3, [pc, #556]	; (8002cd4 <HAL_RCC_OscConfig+0x4f8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a8a      	ldr	r2, [pc, #552]	; (8002cd4 <HAL_RCC_OscConfig+0x4f8>)
 8002aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab2:	f7fe fe4b 	bl	800174c <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aba:	f7fe fe47 	bl	800174c <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b64      	cmp	r3, #100	; 0x64
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e0fd      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002acc:	4b81      	ldr	r3, [pc, #516]	; (8002cd4 <HAL_RCC_OscConfig+0x4f8>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0f0      	beq.n	8002aba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d106      	bne.n	8002aee <HAL_RCC_OscConfig+0x312>
 8002ae0:	4b7b      	ldr	r3, [pc, #492]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	4a7a      	ldr	r2, [pc, #488]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6213      	str	r3, [r2, #32]
 8002aec:	e02d      	b.n	8002b4a <HAL_RCC_OscConfig+0x36e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x334>
 8002af6:	4b76      	ldr	r3, [pc, #472]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	4a75      	ldr	r2, [pc, #468]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002afc:	f023 0301 	bic.w	r3, r3, #1
 8002b00:	6213      	str	r3, [r2, #32]
 8002b02:	4b73      	ldr	r3, [pc, #460]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	4a72      	ldr	r2, [pc, #456]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002b08:	f023 0304 	bic.w	r3, r3, #4
 8002b0c:	6213      	str	r3, [r2, #32]
 8002b0e:	e01c      	b.n	8002b4a <HAL_RCC_OscConfig+0x36e>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2b05      	cmp	r3, #5
 8002b16:	d10c      	bne.n	8002b32 <HAL_RCC_OscConfig+0x356>
 8002b18:	4b6d      	ldr	r3, [pc, #436]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	4a6c      	ldr	r2, [pc, #432]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002b1e:	f043 0304 	orr.w	r3, r3, #4
 8002b22:	6213      	str	r3, [r2, #32]
 8002b24:	4b6a      	ldr	r3, [pc, #424]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	4a69      	ldr	r2, [pc, #420]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	6213      	str	r3, [r2, #32]
 8002b30:	e00b      	b.n	8002b4a <HAL_RCC_OscConfig+0x36e>
 8002b32:	4b67      	ldr	r3, [pc, #412]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	4a66      	ldr	r2, [pc, #408]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	6213      	str	r3, [r2, #32]
 8002b3e:	4b64      	ldr	r3, [pc, #400]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	4a63      	ldr	r2, [pc, #396]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002b44:	f023 0304 	bic.w	r3, r3, #4
 8002b48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d015      	beq.n	8002b7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b52:	f7fe fdfb 	bl	800174c <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b58:	e00a      	b.n	8002b70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5a:	f7fe fdf7 	bl	800174c <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e0ab      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b70:	4b57      	ldr	r3, [pc, #348]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0ee      	beq.n	8002b5a <HAL_RCC_OscConfig+0x37e>
 8002b7c:	e014      	b.n	8002ba8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7e:	f7fe fde5 	bl	800174c <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b84:	e00a      	b.n	8002b9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b86:	f7fe fde1 	bl	800174c <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e095      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b9c:	4b4c      	ldr	r3, [pc, #304]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1ee      	bne.n	8002b86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ba8:	7dfb      	ldrb	r3, [r7, #23]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d105      	bne.n	8002bba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bae:	4b48      	ldr	r3, [pc, #288]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	4a47      	ldr	r2, [pc, #284]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002bb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 8081 	beq.w	8002cc6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bc4:	4b42      	ldr	r3, [pc, #264]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 030c 	and.w	r3, r3, #12
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d061      	beq.n	8002c94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d146      	bne.n	8002c66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd8:	4b3f      	ldr	r3, [pc, #252]	; (8002cd8 <HAL_RCC_OscConfig+0x4fc>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bde:	f7fe fdb5 	bl	800174c <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be6:	f7fe fdb1 	bl	800174c <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e067      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf8:	4b35      	ldr	r3, [pc, #212]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1f0      	bne.n	8002be6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0c:	d108      	bne.n	8002c20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c0e:	4b30      	ldr	r3, [pc, #192]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	492d      	ldr	r1, [pc, #180]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c20:	4b2b      	ldr	r3, [pc, #172]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a19      	ldr	r1, [r3, #32]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	430b      	orrs	r3, r1
 8002c32:	4927      	ldr	r1, [pc, #156]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c38:	4b27      	ldr	r3, [pc, #156]	; (8002cd8 <HAL_RCC_OscConfig+0x4fc>)
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3e:	f7fe fd85 	bl	800174c <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c46:	f7fe fd81 	bl	800174c <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e037      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c58:	4b1d      	ldr	r3, [pc, #116]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0f0      	beq.n	8002c46 <HAL_RCC_OscConfig+0x46a>
 8002c64:	e02f      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c66:	4b1c      	ldr	r3, [pc, #112]	; (8002cd8 <HAL_RCC_OscConfig+0x4fc>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6c:	f7fe fd6e 	bl	800174c <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c74:	f7fe fd6a 	bl	800174c <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e020      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c86:	4b12      	ldr	r3, [pc, #72]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1f0      	bne.n	8002c74 <HAL_RCC_OscConfig+0x498>
 8002c92:	e018      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d101      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e013      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <HAL_RCC_OscConfig+0x4f4>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d106      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d001      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	40007000 	.word	0x40007000
 8002cd8:	42420060 	.word	0x42420060

08002cdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0d0      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf0:	4b6a      	ldr	r3, [pc, #424]	; (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d910      	bls.n	8002d20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfe:	4b67      	ldr	r3, [pc, #412]	; (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 0207 	bic.w	r2, r3, #7
 8002d06:	4965      	ldr	r1, [pc, #404]	; (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0e:	4b63      	ldr	r3, [pc, #396]	; (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0b8      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d020      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d38:	4b59      	ldr	r3, [pc, #356]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	4a58      	ldr	r2, [pc, #352]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d50:	4b53      	ldr	r3, [pc, #332]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	4a52      	ldr	r2, [pc, #328]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d5c:	4b50      	ldr	r3, [pc, #320]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	494d      	ldr	r1, [pc, #308]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d040      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d107      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d82:	4b47      	ldr	r3, [pc, #284]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d115      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e07f      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d107      	bne.n	8002daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9a:	4b41      	ldr	r3, [pc, #260]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d109      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e073      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002daa:	4b3d      	ldr	r3, [pc, #244]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e06b      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dba:	4b39      	ldr	r3, [pc, #228]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f023 0203 	bic.w	r2, r3, #3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4936      	ldr	r1, [pc, #216]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dcc:	f7fe fcbe 	bl	800174c <HAL_GetTick>
 8002dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd2:	e00a      	b.n	8002dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd4:	f7fe fcba 	bl	800174c <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e053      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dea:	4b2d      	ldr	r3, [pc, #180]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 020c 	and.w	r2, r3, #12
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d1eb      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dfc:	4b27      	ldr	r3, [pc, #156]	; (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d210      	bcs.n	8002e2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0a:	4b24      	ldr	r3, [pc, #144]	; (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f023 0207 	bic.w	r2, r3, #7
 8002e12:	4922      	ldr	r1, [pc, #136]	; (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1a:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e032      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e38:	4b19      	ldr	r3, [pc, #100]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	4916      	ldr	r1, [pc, #88]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d009      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e56:	4b12      	ldr	r3, [pc, #72]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	490e      	ldr	r1, [pc, #56]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e6a:	f000 f821 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 8002e6e:	4601      	mov	r1, r0
 8002e70:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	091b      	lsrs	r3, r3, #4
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e7c:	5cd3      	ldrb	r3, [r2, r3]
 8002e7e:	fa21 f303 	lsr.w	r3, r1, r3
 8002e82:	4a09      	ldr	r2, [pc, #36]	; (8002ea8 <HAL_RCC_ClockConfig+0x1cc>)
 8002e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e86:	4b09      	ldr	r3, [pc, #36]	; (8002eac <HAL_RCC_ClockConfig+0x1d0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fe fc1c 	bl	80016c8 <HAL_InitTick>

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40022000 	.word	0x40022000
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	08005b00 	.word	0x08005b00
 8002ea8:	20000010 	.word	0x20000010
 8002eac:	20000014 	.word	0x20000014

08002eb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb0:	b490      	push	{r4, r7}
 8002eb2:	b08a      	sub	sp, #40	; 0x28
 8002eb4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002eb6:	4b2a      	ldr	r3, [pc, #168]	; (8002f60 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002eb8:	1d3c      	adds	r4, r7, #4
 8002eba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ebc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ec0:	4b28      	ldr	r3, [pc, #160]	; (8002f64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61fb      	str	r3, [r7, #28]
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61bb      	str	r3, [r7, #24]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002eda:	4b23      	ldr	r3, [pc, #140]	; (8002f68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d002      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x40>
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d003      	beq.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x46>
 8002eee:	e02d      	b.n	8002f4c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ef0:	4b1e      	ldr	r3, [pc, #120]	; (8002f6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ef2:	623b      	str	r3, [r7, #32]
      break;
 8002ef4:	e02d      	b.n	8002f52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	0c9b      	lsrs	r3, r3, #18
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f02:	4413      	add	r3, r2
 8002f04:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f08:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d013      	beq.n	8002f3c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f14:	4b14      	ldr	r3, [pc, #80]	; (8002f68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	0c5b      	lsrs	r3, r3, #17
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f22:	4413      	add	r3, r2
 8002f24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f28:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	4a0f      	ldr	r2, [pc, #60]	; (8002f6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f2e:	fb02 f203 	mul.w	r2, r2, r3
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
 8002f3a:	e004      	b.n	8002f46 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	4a0c      	ldr	r2, [pc, #48]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f40:	fb02 f303 	mul.w	r3, r2, r3
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	623b      	str	r3, [r7, #32]
      break;
 8002f4a:	e002      	b.n	8002f52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f4c:	4b07      	ldr	r3, [pc, #28]	; (8002f6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f4e:	623b      	str	r3, [r7, #32]
      break;
 8002f50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f52:	6a3b      	ldr	r3, [r7, #32]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3728      	adds	r7, #40	; 0x28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc90      	pop	{r4, r7}
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	080041b4 	.word	0x080041b4
 8002f64:	080041c4 	.word	0x080041c4
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	007a1200 	.word	0x007a1200
 8002f70:	003d0900 	.word	0x003d0900

08002f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f78:	4b02      	ldr	r3, [pc, #8]	; (8002f84 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr
 8002f84:	20000010 	.word	0x20000010

08002f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f8c:	f7ff fff2 	bl	8002f74 <HAL_RCC_GetHCLKFreq>
 8002f90:	4601      	mov	r1, r0
 8002f92:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	0a1b      	lsrs	r3, r3, #8
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	4a03      	ldr	r2, [pc, #12]	; (8002fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f9e:	5cd3      	ldrb	r3, [r2, r3]
 8002fa0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	08005b10 	.word	0x08005b10

08002fb0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fb8:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <RCC_Delay+0x34>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <RCC_Delay+0x38>)
 8002fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc2:	0a5b      	lsrs	r3, r3, #9
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	fb02 f303 	mul.w	r3, r2, r3
 8002fca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fcc:	bf00      	nop
  }
  while (Delay --);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1e5a      	subs	r2, r3, #1
 8002fd2:	60fa      	str	r2, [r7, #12]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1f9      	bne.n	8002fcc <RCC_Delay+0x1c>
}
 8002fd8:	bf00      	nop
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	20000010 	.word	0x20000010
 8002fe8:	10624dd3 	.word	0x10624dd3

08002fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e041      	b.n	8003082 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fe fa5a 	bl	80014cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3304      	adds	r3, #4
 8003028:	4619      	mov	r1, r3
 800302a:	4610      	mov	r0, r2
 800302c:	f000 fa64 	bl	80034f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b01      	cmp	r3, #1
 800309e:	d001      	beq.n	80030a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e03a      	b.n	800311a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a18      	ldr	r2, [pc, #96]	; (8003124 <HAL_TIM_Base_Start_IT+0x98>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00e      	beq.n	80030e4 <HAL_TIM_Base_Start_IT+0x58>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ce:	d009      	beq.n	80030e4 <HAL_TIM_Base_Start_IT+0x58>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a14      	ldr	r2, [pc, #80]	; (8003128 <HAL_TIM_Base_Start_IT+0x9c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d004      	beq.n	80030e4 <HAL_TIM_Base_Start_IT+0x58>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a13      	ldr	r2, [pc, #76]	; (800312c <HAL_TIM_Base_Start_IT+0xa0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d111      	bne.n	8003108 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b06      	cmp	r3, #6
 80030f4:	d010      	beq.n	8003118 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 0201 	orr.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003106:	e007      	b.n	8003118 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0201 	orr.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr
 8003124:	40012c00 	.word	0x40012c00
 8003128:	40000400 	.word	0x40000400
 800312c:	40000800 	.word	0x40000800

08003130 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b02      	cmp	r3, #2
 8003144:	d122      	bne.n	800318c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b02      	cmp	r3, #2
 8003152:	d11b      	bne.n	800318c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f06f 0202 	mvn.w	r2, #2
 800315c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f9a4 	bl	80034c0 <HAL_TIM_IC_CaptureCallback>
 8003178:	e005      	b.n	8003186 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f997 	bl	80034ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f9a6 	bl	80034d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b04      	cmp	r3, #4
 8003198:	d122      	bne.n	80031e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d11b      	bne.n	80031e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0204 	mvn.w	r2, #4
 80031b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2202      	movs	r2, #2
 80031b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f97a 	bl	80034c0 <HAL_TIM_IC_CaptureCallback>
 80031cc:	e005      	b.n	80031da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f96d 	bl	80034ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f97c 	bl	80034d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d122      	bne.n	8003234 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d11b      	bne.n	8003234 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0208 	mvn.w	r2, #8
 8003204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2204      	movs	r2, #4
 800320a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f950 	bl	80034c0 <HAL_TIM_IC_CaptureCallback>
 8003220:	e005      	b.n	800322e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f943 	bl	80034ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f952 	bl	80034d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	2b10      	cmp	r3, #16
 8003240:	d122      	bne.n	8003288 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f003 0310 	and.w	r3, r3, #16
 800324c:	2b10      	cmp	r3, #16
 800324e:	d11b      	bne.n	8003288 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f06f 0210 	mvn.w	r2, #16
 8003258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2208      	movs	r2, #8
 800325e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f926 	bl	80034c0 <HAL_TIM_IC_CaptureCallback>
 8003274:	e005      	b.n	8003282 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f919 	bl	80034ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f928 	bl	80034d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b01      	cmp	r3, #1
 8003294:	d10e      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d107      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f06f 0201 	mvn.w	r2, #1
 80032ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7fd fc0a 	bl	8000ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032be:	2b80      	cmp	r3, #128	; 0x80
 80032c0:	d10e      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032cc:	2b80      	cmp	r3, #128	; 0x80
 80032ce:	d107      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fa6b 	bl	80037b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ea:	2b40      	cmp	r3, #64	; 0x40
 80032ec:	d10e      	bne.n	800330c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f8:	2b40      	cmp	r3, #64	; 0x40
 80032fa:	d107      	bne.n	800330c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f8ec 	bl	80034e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b20      	cmp	r3, #32
 8003318:	d10e      	bne.n	8003338 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f003 0320 	and.w	r3, r3, #32
 8003324:	2b20      	cmp	r3, #32
 8003326:	d107      	bne.n	8003338 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f06f 0220 	mvn.w	r2, #32
 8003330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fa36 	bl	80037a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003338:	bf00      	nop
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_TIM_ConfigClockSource+0x18>
 8003354:	2302      	movs	r3, #2
 8003356:	e0a6      	b.n	80034a6 <HAL_TIM_ConfigClockSource+0x166>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003376:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800337e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b40      	cmp	r3, #64	; 0x40
 800338e:	d067      	beq.n	8003460 <HAL_TIM_ConfigClockSource+0x120>
 8003390:	2b40      	cmp	r3, #64	; 0x40
 8003392:	d80b      	bhi.n	80033ac <HAL_TIM_ConfigClockSource+0x6c>
 8003394:	2b10      	cmp	r3, #16
 8003396:	d073      	beq.n	8003480 <HAL_TIM_ConfigClockSource+0x140>
 8003398:	2b10      	cmp	r3, #16
 800339a:	d802      	bhi.n	80033a2 <HAL_TIM_ConfigClockSource+0x62>
 800339c:	2b00      	cmp	r3, #0
 800339e:	d06f      	beq.n	8003480 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80033a0:	e078      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80033a2:	2b20      	cmp	r3, #32
 80033a4:	d06c      	beq.n	8003480 <HAL_TIM_ConfigClockSource+0x140>
 80033a6:	2b30      	cmp	r3, #48	; 0x30
 80033a8:	d06a      	beq.n	8003480 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80033aa:	e073      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80033ac:	2b70      	cmp	r3, #112	; 0x70
 80033ae:	d00d      	beq.n	80033cc <HAL_TIM_ConfigClockSource+0x8c>
 80033b0:	2b70      	cmp	r3, #112	; 0x70
 80033b2:	d804      	bhi.n	80033be <HAL_TIM_ConfigClockSource+0x7e>
 80033b4:	2b50      	cmp	r3, #80	; 0x50
 80033b6:	d033      	beq.n	8003420 <HAL_TIM_ConfigClockSource+0xe0>
 80033b8:	2b60      	cmp	r3, #96	; 0x60
 80033ba:	d041      	beq.n	8003440 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80033bc:	e06a      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80033be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c2:	d066      	beq.n	8003492 <HAL_TIM_ConfigClockSource+0x152>
 80033c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c8:	d017      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0xba>
      break;
 80033ca:	e063      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	6899      	ldr	r1, [r3, #8]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f000 f965 	bl	80036aa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	609a      	str	r2, [r3, #8]
      break;
 80033f8:	e04c      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	6899      	ldr	r1, [r3, #8]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f000 f94e 	bl	80036aa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800341c:	609a      	str	r2, [r3, #8]
      break;
 800341e:	e039      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6818      	ldr	r0, [r3, #0]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	6859      	ldr	r1, [r3, #4]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	461a      	mov	r2, r3
 800342e:	f000 f8c5 	bl	80035bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2150      	movs	r1, #80	; 0x50
 8003438:	4618      	mov	r0, r3
 800343a:	f000 f91c 	bl	8003676 <TIM_ITRx_SetConfig>
      break;
 800343e:	e029      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	6859      	ldr	r1, [r3, #4]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	461a      	mov	r2, r3
 800344e:	f000 f8e3 	bl	8003618 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2160      	movs	r1, #96	; 0x60
 8003458:	4618      	mov	r0, r3
 800345a:	f000 f90c 	bl	8003676 <TIM_ITRx_SetConfig>
      break;
 800345e:	e019      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6818      	ldr	r0, [r3, #0]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	6859      	ldr	r1, [r3, #4]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	461a      	mov	r2, r3
 800346e:	f000 f8a5 	bl	80035bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2140      	movs	r1, #64	; 0x40
 8003478:	4618      	mov	r0, r3
 800347a:	f000 f8fc 	bl	8003676 <TIM_ITRx_SetConfig>
      break;
 800347e:	e009      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4619      	mov	r1, r3
 800348a:	4610      	mov	r0, r2
 800348c:	f000 f8f3 	bl	8003676 <TIM_ITRx_SetConfig>
        break;
 8003490:	e000      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003492:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr

080034c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr

080034d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr

080034e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr
	...

080034f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a29      	ldr	r2, [pc, #164]	; (80035b0 <TIM_Base_SetConfig+0xb8>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d00b      	beq.n	8003528 <TIM_Base_SetConfig+0x30>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003516:	d007      	beq.n	8003528 <TIM_Base_SetConfig+0x30>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a26      	ldr	r2, [pc, #152]	; (80035b4 <TIM_Base_SetConfig+0xbc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d003      	beq.n	8003528 <TIM_Base_SetConfig+0x30>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a25      	ldr	r2, [pc, #148]	; (80035b8 <TIM_Base_SetConfig+0xc0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d108      	bne.n	800353a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800352e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	4313      	orrs	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a1c      	ldr	r2, [pc, #112]	; (80035b0 <TIM_Base_SetConfig+0xb8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d00b      	beq.n	800355a <TIM_Base_SetConfig+0x62>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003548:	d007      	beq.n	800355a <TIM_Base_SetConfig+0x62>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a19      	ldr	r2, [pc, #100]	; (80035b4 <TIM_Base_SetConfig+0xbc>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d003      	beq.n	800355a <TIM_Base_SetConfig+0x62>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a18      	ldr	r2, [pc, #96]	; (80035b8 <TIM_Base_SetConfig+0xc0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d108      	bne.n	800356c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4313      	orrs	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	4313      	orrs	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a07      	ldr	r2, [pc, #28]	; (80035b0 <TIM_Base_SetConfig+0xb8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d103      	bne.n	80035a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	615a      	str	r2, [r3, #20]
}
 80035a6:	bf00      	nop
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr
 80035b0:	40012c00 	.word	0x40012c00
 80035b4:	40000400 	.word	0x40000400
 80035b8:	40000800 	.word	0x40000800

080035bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	f023 0201 	bic.w	r2, r3, #1
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f023 030a 	bic.w	r3, r3, #10
 80035f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	4313      	orrs	r3, r2
 8003600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	621a      	str	r2, [r3, #32]
}
 800360e:	bf00      	nop
 8003610:	371c      	adds	r7, #28
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr

08003618 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003618:	b480      	push	{r7}
 800361a:	b087      	sub	sp, #28
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f023 0210 	bic.w	r2, r3, #16
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003642:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	031b      	lsls	r3, r3, #12
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	4313      	orrs	r3, r2
 800364c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003654:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	4313      	orrs	r3, r2
 800365e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	621a      	str	r2, [r3, #32]
}
 800366c:	bf00      	nop
 800366e:	371c      	adds	r7, #28
 8003670:	46bd      	mov	sp, r7
 8003672:	bc80      	pop	{r7}
 8003674:	4770      	bx	lr

08003676 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003676:	b480      	push	{r7}
 8003678:	b085      	sub	sp, #20
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800368c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4313      	orrs	r3, r2
 8003694:	f043 0307 	orr.w	r3, r3, #7
 8003698:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	609a      	str	r2, [r3, #8]
}
 80036a0:	bf00      	nop
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc80      	pop	{r7}
 80036a8:	4770      	bx	lr

080036aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b087      	sub	sp, #28
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	607a      	str	r2, [r7, #4]
 80036b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	021a      	lsls	r2, r3, #8
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	431a      	orrs	r2, r3
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	609a      	str	r2, [r3, #8]
}
 80036de:	bf00      	nop
 80036e0:	371c      	adds	r7, #28
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr

080036e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e046      	b.n	800378e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003726:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4313      	orrs	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a16      	ldr	r2, [pc, #88]	; (8003798 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d00e      	beq.n	8003762 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374c:	d009      	beq.n	8003762 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a12      	ldr	r2, [pc, #72]	; (800379c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d004      	beq.n	8003762 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a10      	ldr	r2, [pc, #64]	; (80037a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d10c      	bne.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003768:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	4313      	orrs	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	bc80      	pop	{r7}
 8003796:	4770      	bx	lr
 8003798:	40012c00 	.word	0x40012c00
 800379c:	40000400 	.word	0x40000400
 80037a0:	40000800 	.word	0x40000800

080037a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bc80      	pop	{r7}
 80037b4:	4770      	bx	lr

080037b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr

080037c8 <__errno>:
 80037c8:	4b01      	ldr	r3, [pc, #4]	; (80037d0 <__errno+0x8>)
 80037ca:	6818      	ldr	r0, [r3, #0]
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	2000001c 	.word	0x2000001c

080037d4 <__libc_init_array>:
 80037d4:	b570      	push	{r4, r5, r6, lr}
 80037d6:	2500      	movs	r5, #0
 80037d8:	4e0c      	ldr	r6, [pc, #48]	; (800380c <__libc_init_array+0x38>)
 80037da:	4c0d      	ldr	r4, [pc, #52]	; (8003810 <__libc_init_array+0x3c>)
 80037dc:	1ba4      	subs	r4, r4, r6
 80037de:	10a4      	asrs	r4, r4, #2
 80037e0:	42a5      	cmp	r5, r4
 80037e2:	d109      	bne.n	80037f8 <__libc_init_array+0x24>
 80037e4:	f000 fc34 	bl	8004050 <_init>
 80037e8:	2500      	movs	r5, #0
 80037ea:	4e0a      	ldr	r6, [pc, #40]	; (8003814 <__libc_init_array+0x40>)
 80037ec:	4c0a      	ldr	r4, [pc, #40]	; (8003818 <__libc_init_array+0x44>)
 80037ee:	1ba4      	subs	r4, r4, r6
 80037f0:	10a4      	asrs	r4, r4, #2
 80037f2:	42a5      	cmp	r5, r4
 80037f4:	d105      	bne.n	8003802 <__libc_init_array+0x2e>
 80037f6:	bd70      	pop	{r4, r5, r6, pc}
 80037f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037fc:	4798      	blx	r3
 80037fe:	3501      	adds	r5, #1
 8003800:	e7ee      	b.n	80037e0 <__libc_init_array+0xc>
 8003802:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003806:	4798      	blx	r3
 8003808:	3501      	adds	r5, #1
 800380a:	e7f2      	b.n	80037f2 <__libc_init_array+0x1e>
 800380c:	08005b4c 	.word	0x08005b4c
 8003810:	08005b4c 	.word	0x08005b4c
 8003814:	08005b4c 	.word	0x08005b4c
 8003818:	08005b50 	.word	0x08005b50

0800381c <memset>:
 800381c:	4603      	mov	r3, r0
 800381e:	4402      	add	r2, r0
 8003820:	4293      	cmp	r3, r2
 8003822:	d100      	bne.n	8003826 <memset+0xa>
 8003824:	4770      	bx	lr
 8003826:	f803 1b01 	strb.w	r1, [r3], #1
 800382a:	e7f9      	b.n	8003820 <memset+0x4>

0800382c <siprintf>:
 800382c:	b40e      	push	{r1, r2, r3}
 800382e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003832:	b500      	push	{lr}
 8003834:	b09c      	sub	sp, #112	; 0x70
 8003836:	ab1d      	add	r3, sp, #116	; 0x74
 8003838:	9002      	str	r0, [sp, #8]
 800383a:	9006      	str	r0, [sp, #24]
 800383c:	9107      	str	r1, [sp, #28]
 800383e:	9104      	str	r1, [sp, #16]
 8003840:	4808      	ldr	r0, [pc, #32]	; (8003864 <siprintf+0x38>)
 8003842:	4909      	ldr	r1, [pc, #36]	; (8003868 <siprintf+0x3c>)
 8003844:	f853 2b04 	ldr.w	r2, [r3], #4
 8003848:	9105      	str	r1, [sp, #20]
 800384a:	6800      	ldr	r0, [r0, #0]
 800384c:	a902      	add	r1, sp, #8
 800384e:	9301      	str	r3, [sp, #4]
 8003850:	f000 f866 	bl	8003920 <_svfiprintf_r>
 8003854:	2200      	movs	r2, #0
 8003856:	9b02      	ldr	r3, [sp, #8]
 8003858:	701a      	strb	r2, [r3, #0]
 800385a:	b01c      	add	sp, #112	; 0x70
 800385c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003860:	b003      	add	sp, #12
 8003862:	4770      	bx	lr
 8003864:	2000001c 	.word	0x2000001c
 8003868:	ffff0208 	.word	0xffff0208

0800386c <__ssputs_r>:
 800386c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003870:	688e      	ldr	r6, [r1, #8]
 8003872:	4682      	mov	sl, r0
 8003874:	429e      	cmp	r6, r3
 8003876:	460c      	mov	r4, r1
 8003878:	4690      	mov	r8, r2
 800387a:	4699      	mov	r9, r3
 800387c:	d837      	bhi.n	80038ee <__ssputs_r+0x82>
 800387e:	898a      	ldrh	r2, [r1, #12]
 8003880:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003884:	d031      	beq.n	80038ea <__ssputs_r+0x7e>
 8003886:	2302      	movs	r3, #2
 8003888:	6825      	ldr	r5, [r4, #0]
 800388a:	6909      	ldr	r1, [r1, #16]
 800388c:	1a6f      	subs	r7, r5, r1
 800388e:	6965      	ldr	r5, [r4, #20]
 8003890:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003894:	fb95 f5f3 	sdiv	r5, r5, r3
 8003898:	f109 0301 	add.w	r3, r9, #1
 800389c:	443b      	add	r3, r7
 800389e:	429d      	cmp	r5, r3
 80038a0:	bf38      	it	cc
 80038a2:	461d      	movcc	r5, r3
 80038a4:	0553      	lsls	r3, r2, #21
 80038a6:	d530      	bpl.n	800390a <__ssputs_r+0x9e>
 80038a8:	4629      	mov	r1, r5
 80038aa:	f000 fb37 	bl	8003f1c <_malloc_r>
 80038ae:	4606      	mov	r6, r0
 80038b0:	b950      	cbnz	r0, 80038c8 <__ssputs_r+0x5c>
 80038b2:	230c      	movs	r3, #12
 80038b4:	f04f 30ff 	mov.w	r0, #4294967295
 80038b8:	f8ca 3000 	str.w	r3, [sl]
 80038bc:	89a3      	ldrh	r3, [r4, #12]
 80038be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038c2:	81a3      	strh	r3, [r4, #12]
 80038c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038c8:	463a      	mov	r2, r7
 80038ca:	6921      	ldr	r1, [r4, #16]
 80038cc:	f000 fab6 	bl	8003e3c <memcpy>
 80038d0:	89a3      	ldrh	r3, [r4, #12]
 80038d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038da:	81a3      	strh	r3, [r4, #12]
 80038dc:	6126      	str	r6, [r4, #16]
 80038de:	443e      	add	r6, r7
 80038e0:	6026      	str	r6, [r4, #0]
 80038e2:	464e      	mov	r6, r9
 80038e4:	6165      	str	r5, [r4, #20]
 80038e6:	1bed      	subs	r5, r5, r7
 80038e8:	60a5      	str	r5, [r4, #8]
 80038ea:	454e      	cmp	r6, r9
 80038ec:	d900      	bls.n	80038f0 <__ssputs_r+0x84>
 80038ee:	464e      	mov	r6, r9
 80038f0:	4632      	mov	r2, r6
 80038f2:	4641      	mov	r1, r8
 80038f4:	6820      	ldr	r0, [r4, #0]
 80038f6:	f000 faac 	bl	8003e52 <memmove>
 80038fa:	68a3      	ldr	r3, [r4, #8]
 80038fc:	2000      	movs	r0, #0
 80038fe:	1b9b      	subs	r3, r3, r6
 8003900:	60a3      	str	r3, [r4, #8]
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	441e      	add	r6, r3
 8003906:	6026      	str	r6, [r4, #0]
 8003908:	e7dc      	b.n	80038c4 <__ssputs_r+0x58>
 800390a:	462a      	mov	r2, r5
 800390c:	f000 fb60 	bl	8003fd0 <_realloc_r>
 8003910:	4606      	mov	r6, r0
 8003912:	2800      	cmp	r0, #0
 8003914:	d1e2      	bne.n	80038dc <__ssputs_r+0x70>
 8003916:	6921      	ldr	r1, [r4, #16]
 8003918:	4650      	mov	r0, sl
 800391a:	f000 fab3 	bl	8003e84 <_free_r>
 800391e:	e7c8      	b.n	80038b2 <__ssputs_r+0x46>

08003920 <_svfiprintf_r>:
 8003920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003924:	461d      	mov	r5, r3
 8003926:	898b      	ldrh	r3, [r1, #12]
 8003928:	b09d      	sub	sp, #116	; 0x74
 800392a:	061f      	lsls	r7, r3, #24
 800392c:	4680      	mov	r8, r0
 800392e:	460c      	mov	r4, r1
 8003930:	4616      	mov	r6, r2
 8003932:	d50f      	bpl.n	8003954 <_svfiprintf_r+0x34>
 8003934:	690b      	ldr	r3, [r1, #16]
 8003936:	b96b      	cbnz	r3, 8003954 <_svfiprintf_r+0x34>
 8003938:	2140      	movs	r1, #64	; 0x40
 800393a:	f000 faef 	bl	8003f1c <_malloc_r>
 800393e:	6020      	str	r0, [r4, #0]
 8003940:	6120      	str	r0, [r4, #16]
 8003942:	b928      	cbnz	r0, 8003950 <_svfiprintf_r+0x30>
 8003944:	230c      	movs	r3, #12
 8003946:	f8c8 3000 	str.w	r3, [r8]
 800394a:	f04f 30ff 	mov.w	r0, #4294967295
 800394e:	e0c8      	b.n	8003ae2 <_svfiprintf_r+0x1c2>
 8003950:	2340      	movs	r3, #64	; 0x40
 8003952:	6163      	str	r3, [r4, #20]
 8003954:	2300      	movs	r3, #0
 8003956:	9309      	str	r3, [sp, #36]	; 0x24
 8003958:	2320      	movs	r3, #32
 800395a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800395e:	2330      	movs	r3, #48	; 0x30
 8003960:	f04f 0b01 	mov.w	fp, #1
 8003964:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003968:	9503      	str	r5, [sp, #12]
 800396a:	4637      	mov	r7, r6
 800396c:	463d      	mov	r5, r7
 800396e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003972:	b10b      	cbz	r3, 8003978 <_svfiprintf_r+0x58>
 8003974:	2b25      	cmp	r3, #37	; 0x25
 8003976:	d13e      	bne.n	80039f6 <_svfiprintf_r+0xd6>
 8003978:	ebb7 0a06 	subs.w	sl, r7, r6
 800397c:	d00b      	beq.n	8003996 <_svfiprintf_r+0x76>
 800397e:	4653      	mov	r3, sl
 8003980:	4632      	mov	r2, r6
 8003982:	4621      	mov	r1, r4
 8003984:	4640      	mov	r0, r8
 8003986:	f7ff ff71 	bl	800386c <__ssputs_r>
 800398a:	3001      	adds	r0, #1
 800398c:	f000 80a4 	beq.w	8003ad8 <_svfiprintf_r+0x1b8>
 8003990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003992:	4453      	add	r3, sl
 8003994:	9309      	str	r3, [sp, #36]	; 0x24
 8003996:	783b      	ldrb	r3, [r7, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 809d 	beq.w	8003ad8 <_svfiprintf_r+0x1b8>
 800399e:	2300      	movs	r3, #0
 80039a0:	f04f 32ff 	mov.w	r2, #4294967295
 80039a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039a8:	9304      	str	r3, [sp, #16]
 80039aa:	9307      	str	r3, [sp, #28]
 80039ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039b0:	931a      	str	r3, [sp, #104]	; 0x68
 80039b2:	462f      	mov	r7, r5
 80039b4:	2205      	movs	r2, #5
 80039b6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80039ba:	4850      	ldr	r0, [pc, #320]	; (8003afc <_svfiprintf_r+0x1dc>)
 80039bc:	f000 fa30 	bl	8003e20 <memchr>
 80039c0:	9b04      	ldr	r3, [sp, #16]
 80039c2:	b9d0      	cbnz	r0, 80039fa <_svfiprintf_r+0xda>
 80039c4:	06d9      	lsls	r1, r3, #27
 80039c6:	bf44      	itt	mi
 80039c8:	2220      	movmi	r2, #32
 80039ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039ce:	071a      	lsls	r2, r3, #28
 80039d0:	bf44      	itt	mi
 80039d2:	222b      	movmi	r2, #43	; 0x2b
 80039d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039d8:	782a      	ldrb	r2, [r5, #0]
 80039da:	2a2a      	cmp	r2, #42	; 0x2a
 80039dc:	d015      	beq.n	8003a0a <_svfiprintf_r+0xea>
 80039de:	462f      	mov	r7, r5
 80039e0:	2000      	movs	r0, #0
 80039e2:	250a      	movs	r5, #10
 80039e4:	9a07      	ldr	r2, [sp, #28]
 80039e6:	4639      	mov	r1, r7
 80039e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039ec:	3b30      	subs	r3, #48	; 0x30
 80039ee:	2b09      	cmp	r3, #9
 80039f0:	d94d      	bls.n	8003a8e <_svfiprintf_r+0x16e>
 80039f2:	b1b8      	cbz	r0, 8003a24 <_svfiprintf_r+0x104>
 80039f4:	e00f      	b.n	8003a16 <_svfiprintf_r+0xf6>
 80039f6:	462f      	mov	r7, r5
 80039f8:	e7b8      	b.n	800396c <_svfiprintf_r+0x4c>
 80039fa:	4a40      	ldr	r2, [pc, #256]	; (8003afc <_svfiprintf_r+0x1dc>)
 80039fc:	463d      	mov	r5, r7
 80039fe:	1a80      	subs	r0, r0, r2
 8003a00:	fa0b f000 	lsl.w	r0, fp, r0
 8003a04:	4318      	orrs	r0, r3
 8003a06:	9004      	str	r0, [sp, #16]
 8003a08:	e7d3      	b.n	80039b2 <_svfiprintf_r+0x92>
 8003a0a:	9a03      	ldr	r2, [sp, #12]
 8003a0c:	1d11      	adds	r1, r2, #4
 8003a0e:	6812      	ldr	r2, [r2, #0]
 8003a10:	9103      	str	r1, [sp, #12]
 8003a12:	2a00      	cmp	r2, #0
 8003a14:	db01      	blt.n	8003a1a <_svfiprintf_r+0xfa>
 8003a16:	9207      	str	r2, [sp, #28]
 8003a18:	e004      	b.n	8003a24 <_svfiprintf_r+0x104>
 8003a1a:	4252      	negs	r2, r2
 8003a1c:	f043 0302 	orr.w	r3, r3, #2
 8003a20:	9207      	str	r2, [sp, #28]
 8003a22:	9304      	str	r3, [sp, #16]
 8003a24:	783b      	ldrb	r3, [r7, #0]
 8003a26:	2b2e      	cmp	r3, #46	; 0x2e
 8003a28:	d10c      	bne.n	8003a44 <_svfiprintf_r+0x124>
 8003a2a:	787b      	ldrb	r3, [r7, #1]
 8003a2c:	2b2a      	cmp	r3, #42	; 0x2a
 8003a2e:	d133      	bne.n	8003a98 <_svfiprintf_r+0x178>
 8003a30:	9b03      	ldr	r3, [sp, #12]
 8003a32:	3702      	adds	r7, #2
 8003a34:	1d1a      	adds	r2, r3, #4
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	9203      	str	r2, [sp, #12]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	bfb8      	it	lt
 8003a3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a42:	9305      	str	r3, [sp, #20]
 8003a44:	4d2e      	ldr	r5, [pc, #184]	; (8003b00 <_svfiprintf_r+0x1e0>)
 8003a46:	2203      	movs	r2, #3
 8003a48:	7839      	ldrb	r1, [r7, #0]
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	f000 f9e8 	bl	8003e20 <memchr>
 8003a50:	b138      	cbz	r0, 8003a62 <_svfiprintf_r+0x142>
 8003a52:	2340      	movs	r3, #64	; 0x40
 8003a54:	1b40      	subs	r0, r0, r5
 8003a56:	fa03 f000 	lsl.w	r0, r3, r0
 8003a5a:	9b04      	ldr	r3, [sp, #16]
 8003a5c:	3701      	adds	r7, #1
 8003a5e:	4303      	orrs	r3, r0
 8003a60:	9304      	str	r3, [sp, #16]
 8003a62:	7839      	ldrb	r1, [r7, #0]
 8003a64:	2206      	movs	r2, #6
 8003a66:	4827      	ldr	r0, [pc, #156]	; (8003b04 <_svfiprintf_r+0x1e4>)
 8003a68:	1c7e      	adds	r6, r7, #1
 8003a6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a6e:	f000 f9d7 	bl	8003e20 <memchr>
 8003a72:	2800      	cmp	r0, #0
 8003a74:	d038      	beq.n	8003ae8 <_svfiprintf_r+0x1c8>
 8003a76:	4b24      	ldr	r3, [pc, #144]	; (8003b08 <_svfiprintf_r+0x1e8>)
 8003a78:	bb13      	cbnz	r3, 8003ac0 <_svfiprintf_r+0x1a0>
 8003a7a:	9b03      	ldr	r3, [sp, #12]
 8003a7c:	3307      	adds	r3, #7
 8003a7e:	f023 0307 	bic.w	r3, r3, #7
 8003a82:	3308      	adds	r3, #8
 8003a84:	9303      	str	r3, [sp, #12]
 8003a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a88:	444b      	add	r3, r9
 8003a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8003a8c:	e76d      	b.n	800396a <_svfiprintf_r+0x4a>
 8003a8e:	fb05 3202 	mla	r2, r5, r2, r3
 8003a92:	2001      	movs	r0, #1
 8003a94:	460f      	mov	r7, r1
 8003a96:	e7a6      	b.n	80039e6 <_svfiprintf_r+0xc6>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	250a      	movs	r5, #10
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	3701      	adds	r7, #1
 8003aa0:	9305      	str	r3, [sp, #20]
 8003aa2:	4638      	mov	r0, r7
 8003aa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003aa8:	3a30      	subs	r2, #48	; 0x30
 8003aaa:	2a09      	cmp	r2, #9
 8003aac:	d903      	bls.n	8003ab6 <_svfiprintf_r+0x196>
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0c8      	beq.n	8003a44 <_svfiprintf_r+0x124>
 8003ab2:	9105      	str	r1, [sp, #20]
 8003ab4:	e7c6      	b.n	8003a44 <_svfiprintf_r+0x124>
 8003ab6:	fb05 2101 	mla	r1, r5, r1, r2
 8003aba:	2301      	movs	r3, #1
 8003abc:	4607      	mov	r7, r0
 8003abe:	e7f0      	b.n	8003aa2 <_svfiprintf_r+0x182>
 8003ac0:	ab03      	add	r3, sp, #12
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	4622      	mov	r2, r4
 8003ac6:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <_svfiprintf_r+0x1ec>)
 8003ac8:	a904      	add	r1, sp, #16
 8003aca:	4640      	mov	r0, r8
 8003acc:	f3af 8000 	nop.w
 8003ad0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003ad4:	4681      	mov	r9, r0
 8003ad6:	d1d6      	bne.n	8003a86 <_svfiprintf_r+0x166>
 8003ad8:	89a3      	ldrh	r3, [r4, #12]
 8003ada:	065b      	lsls	r3, r3, #25
 8003adc:	f53f af35 	bmi.w	800394a <_svfiprintf_r+0x2a>
 8003ae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ae2:	b01d      	add	sp, #116	; 0x74
 8003ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ae8:	ab03      	add	r3, sp, #12
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	4622      	mov	r2, r4
 8003aee:	4b07      	ldr	r3, [pc, #28]	; (8003b0c <_svfiprintf_r+0x1ec>)
 8003af0:	a904      	add	r1, sp, #16
 8003af2:	4640      	mov	r0, r8
 8003af4:	f000 f882 	bl	8003bfc <_printf_i>
 8003af8:	e7ea      	b.n	8003ad0 <_svfiprintf_r+0x1b0>
 8003afa:	bf00      	nop
 8003afc:	08005b18 	.word	0x08005b18
 8003b00:	08005b1e 	.word	0x08005b1e
 8003b04:	08005b22 	.word	0x08005b22
 8003b08:	00000000 	.word	0x00000000
 8003b0c:	0800386d 	.word	0x0800386d

08003b10 <_printf_common>:
 8003b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b14:	4691      	mov	r9, r2
 8003b16:	461f      	mov	r7, r3
 8003b18:	688a      	ldr	r2, [r1, #8]
 8003b1a:	690b      	ldr	r3, [r1, #16]
 8003b1c:	4606      	mov	r6, r0
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	bfb8      	it	lt
 8003b22:	4613      	movlt	r3, r2
 8003b24:	f8c9 3000 	str.w	r3, [r9]
 8003b28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b2c:	460c      	mov	r4, r1
 8003b2e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b32:	b112      	cbz	r2, 8003b3a <_printf_common+0x2a>
 8003b34:	3301      	adds	r3, #1
 8003b36:	f8c9 3000 	str.w	r3, [r9]
 8003b3a:	6823      	ldr	r3, [r4, #0]
 8003b3c:	0699      	lsls	r1, r3, #26
 8003b3e:	bf42      	ittt	mi
 8003b40:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003b44:	3302      	addmi	r3, #2
 8003b46:	f8c9 3000 	strmi.w	r3, [r9]
 8003b4a:	6825      	ldr	r5, [r4, #0]
 8003b4c:	f015 0506 	ands.w	r5, r5, #6
 8003b50:	d107      	bne.n	8003b62 <_printf_common+0x52>
 8003b52:	f104 0a19 	add.w	sl, r4, #25
 8003b56:	68e3      	ldr	r3, [r4, #12]
 8003b58:	f8d9 2000 	ldr.w	r2, [r9]
 8003b5c:	1a9b      	subs	r3, r3, r2
 8003b5e:	42ab      	cmp	r3, r5
 8003b60:	dc29      	bgt.n	8003bb6 <_printf_common+0xa6>
 8003b62:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003b66:	6822      	ldr	r2, [r4, #0]
 8003b68:	3300      	adds	r3, #0
 8003b6a:	bf18      	it	ne
 8003b6c:	2301      	movne	r3, #1
 8003b6e:	0692      	lsls	r2, r2, #26
 8003b70:	d42e      	bmi.n	8003bd0 <_printf_common+0xc0>
 8003b72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b76:	4639      	mov	r1, r7
 8003b78:	4630      	mov	r0, r6
 8003b7a:	47c0      	blx	r8
 8003b7c:	3001      	adds	r0, #1
 8003b7e:	d021      	beq.n	8003bc4 <_printf_common+0xb4>
 8003b80:	6823      	ldr	r3, [r4, #0]
 8003b82:	68e5      	ldr	r5, [r4, #12]
 8003b84:	f003 0306 	and.w	r3, r3, #6
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	bf18      	it	ne
 8003b8c:	2500      	movne	r5, #0
 8003b8e:	f8d9 2000 	ldr.w	r2, [r9]
 8003b92:	f04f 0900 	mov.w	r9, #0
 8003b96:	bf08      	it	eq
 8003b98:	1aad      	subeq	r5, r5, r2
 8003b9a:	68a3      	ldr	r3, [r4, #8]
 8003b9c:	6922      	ldr	r2, [r4, #16]
 8003b9e:	bf08      	it	eq
 8003ba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	bfc4      	itt	gt
 8003ba8:	1a9b      	subgt	r3, r3, r2
 8003baa:	18ed      	addgt	r5, r5, r3
 8003bac:	341a      	adds	r4, #26
 8003bae:	454d      	cmp	r5, r9
 8003bb0:	d11a      	bne.n	8003be8 <_printf_common+0xd8>
 8003bb2:	2000      	movs	r0, #0
 8003bb4:	e008      	b.n	8003bc8 <_printf_common+0xb8>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	4652      	mov	r2, sl
 8003bba:	4639      	mov	r1, r7
 8003bbc:	4630      	mov	r0, r6
 8003bbe:	47c0      	blx	r8
 8003bc0:	3001      	adds	r0, #1
 8003bc2:	d103      	bne.n	8003bcc <_printf_common+0xbc>
 8003bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bcc:	3501      	adds	r5, #1
 8003bce:	e7c2      	b.n	8003b56 <_printf_common+0x46>
 8003bd0:	2030      	movs	r0, #48	; 0x30
 8003bd2:	18e1      	adds	r1, r4, r3
 8003bd4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bde:	4422      	add	r2, r4
 8003be0:	3302      	adds	r3, #2
 8003be2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003be6:	e7c4      	b.n	8003b72 <_printf_common+0x62>
 8003be8:	2301      	movs	r3, #1
 8003bea:	4622      	mov	r2, r4
 8003bec:	4639      	mov	r1, r7
 8003bee:	4630      	mov	r0, r6
 8003bf0:	47c0      	blx	r8
 8003bf2:	3001      	adds	r0, #1
 8003bf4:	d0e6      	beq.n	8003bc4 <_printf_common+0xb4>
 8003bf6:	f109 0901 	add.w	r9, r9, #1
 8003bfa:	e7d8      	b.n	8003bae <_printf_common+0x9e>

08003bfc <_printf_i>:
 8003bfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c00:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003c04:	460c      	mov	r4, r1
 8003c06:	7e09      	ldrb	r1, [r1, #24]
 8003c08:	b085      	sub	sp, #20
 8003c0a:	296e      	cmp	r1, #110	; 0x6e
 8003c0c:	4617      	mov	r7, r2
 8003c0e:	4606      	mov	r6, r0
 8003c10:	4698      	mov	r8, r3
 8003c12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c14:	f000 80b3 	beq.w	8003d7e <_printf_i+0x182>
 8003c18:	d822      	bhi.n	8003c60 <_printf_i+0x64>
 8003c1a:	2963      	cmp	r1, #99	; 0x63
 8003c1c:	d036      	beq.n	8003c8c <_printf_i+0x90>
 8003c1e:	d80a      	bhi.n	8003c36 <_printf_i+0x3a>
 8003c20:	2900      	cmp	r1, #0
 8003c22:	f000 80b9 	beq.w	8003d98 <_printf_i+0x19c>
 8003c26:	2958      	cmp	r1, #88	; 0x58
 8003c28:	f000 8083 	beq.w	8003d32 <_printf_i+0x136>
 8003c2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c30:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003c34:	e032      	b.n	8003c9c <_printf_i+0xa0>
 8003c36:	2964      	cmp	r1, #100	; 0x64
 8003c38:	d001      	beq.n	8003c3e <_printf_i+0x42>
 8003c3a:	2969      	cmp	r1, #105	; 0x69
 8003c3c:	d1f6      	bne.n	8003c2c <_printf_i+0x30>
 8003c3e:	6820      	ldr	r0, [r4, #0]
 8003c40:	6813      	ldr	r3, [r2, #0]
 8003c42:	0605      	lsls	r5, r0, #24
 8003c44:	f103 0104 	add.w	r1, r3, #4
 8003c48:	d52a      	bpl.n	8003ca0 <_printf_i+0xa4>
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6011      	str	r1, [r2, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	da03      	bge.n	8003c5a <_printf_i+0x5e>
 8003c52:	222d      	movs	r2, #45	; 0x2d
 8003c54:	425b      	negs	r3, r3
 8003c56:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003c5a:	486f      	ldr	r0, [pc, #444]	; (8003e18 <_printf_i+0x21c>)
 8003c5c:	220a      	movs	r2, #10
 8003c5e:	e039      	b.n	8003cd4 <_printf_i+0xd8>
 8003c60:	2973      	cmp	r1, #115	; 0x73
 8003c62:	f000 809d 	beq.w	8003da0 <_printf_i+0x1a4>
 8003c66:	d808      	bhi.n	8003c7a <_printf_i+0x7e>
 8003c68:	296f      	cmp	r1, #111	; 0x6f
 8003c6a:	d020      	beq.n	8003cae <_printf_i+0xb2>
 8003c6c:	2970      	cmp	r1, #112	; 0x70
 8003c6e:	d1dd      	bne.n	8003c2c <_printf_i+0x30>
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	f043 0320 	orr.w	r3, r3, #32
 8003c76:	6023      	str	r3, [r4, #0]
 8003c78:	e003      	b.n	8003c82 <_printf_i+0x86>
 8003c7a:	2975      	cmp	r1, #117	; 0x75
 8003c7c:	d017      	beq.n	8003cae <_printf_i+0xb2>
 8003c7e:	2978      	cmp	r1, #120	; 0x78
 8003c80:	d1d4      	bne.n	8003c2c <_printf_i+0x30>
 8003c82:	2378      	movs	r3, #120	; 0x78
 8003c84:	4865      	ldr	r0, [pc, #404]	; (8003e1c <_printf_i+0x220>)
 8003c86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c8a:	e055      	b.n	8003d38 <_printf_i+0x13c>
 8003c8c:	6813      	ldr	r3, [r2, #0]
 8003c8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c92:	1d19      	adds	r1, r3, #4
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6011      	str	r1, [r2, #0]
 8003c98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e08c      	b.n	8003dba <_printf_i+0x1be>
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ca6:	6011      	str	r1, [r2, #0]
 8003ca8:	bf18      	it	ne
 8003caa:	b21b      	sxthne	r3, r3
 8003cac:	e7cf      	b.n	8003c4e <_printf_i+0x52>
 8003cae:	6813      	ldr	r3, [r2, #0]
 8003cb0:	6825      	ldr	r5, [r4, #0]
 8003cb2:	1d18      	adds	r0, r3, #4
 8003cb4:	6010      	str	r0, [r2, #0]
 8003cb6:	0628      	lsls	r0, r5, #24
 8003cb8:	d501      	bpl.n	8003cbe <_printf_i+0xc2>
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	e002      	b.n	8003cc4 <_printf_i+0xc8>
 8003cbe:	0668      	lsls	r0, r5, #25
 8003cc0:	d5fb      	bpl.n	8003cba <_printf_i+0xbe>
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	296f      	cmp	r1, #111	; 0x6f
 8003cc6:	bf14      	ite	ne
 8003cc8:	220a      	movne	r2, #10
 8003cca:	2208      	moveq	r2, #8
 8003ccc:	4852      	ldr	r0, [pc, #328]	; (8003e18 <_printf_i+0x21c>)
 8003cce:	2100      	movs	r1, #0
 8003cd0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cd4:	6865      	ldr	r5, [r4, #4]
 8003cd6:	2d00      	cmp	r5, #0
 8003cd8:	60a5      	str	r5, [r4, #8]
 8003cda:	f2c0 8095 	blt.w	8003e08 <_printf_i+0x20c>
 8003cde:	6821      	ldr	r1, [r4, #0]
 8003ce0:	f021 0104 	bic.w	r1, r1, #4
 8003ce4:	6021      	str	r1, [r4, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d13d      	bne.n	8003d66 <_printf_i+0x16a>
 8003cea:	2d00      	cmp	r5, #0
 8003cec:	f040 808e 	bne.w	8003e0c <_printf_i+0x210>
 8003cf0:	4665      	mov	r5, ip
 8003cf2:	2a08      	cmp	r2, #8
 8003cf4:	d10b      	bne.n	8003d0e <_printf_i+0x112>
 8003cf6:	6823      	ldr	r3, [r4, #0]
 8003cf8:	07db      	lsls	r3, r3, #31
 8003cfa:	d508      	bpl.n	8003d0e <_printf_i+0x112>
 8003cfc:	6923      	ldr	r3, [r4, #16]
 8003cfe:	6862      	ldr	r2, [r4, #4]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	bfde      	ittt	le
 8003d04:	2330      	movle	r3, #48	; 0x30
 8003d06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d0a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d0e:	ebac 0305 	sub.w	r3, ip, r5
 8003d12:	6123      	str	r3, [r4, #16]
 8003d14:	f8cd 8000 	str.w	r8, [sp]
 8003d18:	463b      	mov	r3, r7
 8003d1a:	aa03      	add	r2, sp, #12
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	4630      	mov	r0, r6
 8003d20:	f7ff fef6 	bl	8003b10 <_printf_common>
 8003d24:	3001      	adds	r0, #1
 8003d26:	d14d      	bne.n	8003dc4 <_printf_i+0x1c8>
 8003d28:	f04f 30ff 	mov.w	r0, #4294967295
 8003d2c:	b005      	add	sp, #20
 8003d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d32:	4839      	ldr	r0, [pc, #228]	; (8003e18 <_printf_i+0x21c>)
 8003d34:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003d38:	6813      	ldr	r3, [r2, #0]
 8003d3a:	6821      	ldr	r1, [r4, #0]
 8003d3c:	1d1d      	adds	r5, r3, #4
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6015      	str	r5, [r2, #0]
 8003d42:	060a      	lsls	r2, r1, #24
 8003d44:	d50b      	bpl.n	8003d5e <_printf_i+0x162>
 8003d46:	07ca      	lsls	r2, r1, #31
 8003d48:	bf44      	itt	mi
 8003d4a:	f041 0120 	orrmi.w	r1, r1, #32
 8003d4e:	6021      	strmi	r1, [r4, #0]
 8003d50:	b91b      	cbnz	r3, 8003d5a <_printf_i+0x15e>
 8003d52:	6822      	ldr	r2, [r4, #0]
 8003d54:	f022 0220 	bic.w	r2, r2, #32
 8003d58:	6022      	str	r2, [r4, #0]
 8003d5a:	2210      	movs	r2, #16
 8003d5c:	e7b7      	b.n	8003cce <_printf_i+0xd2>
 8003d5e:	064d      	lsls	r5, r1, #25
 8003d60:	bf48      	it	mi
 8003d62:	b29b      	uxthmi	r3, r3
 8003d64:	e7ef      	b.n	8003d46 <_printf_i+0x14a>
 8003d66:	4665      	mov	r5, ip
 8003d68:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d6c:	fb02 3311 	mls	r3, r2, r1, r3
 8003d70:	5cc3      	ldrb	r3, [r0, r3]
 8003d72:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003d76:	460b      	mov	r3, r1
 8003d78:	2900      	cmp	r1, #0
 8003d7a:	d1f5      	bne.n	8003d68 <_printf_i+0x16c>
 8003d7c:	e7b9      	b.n	8003cf2 <_printf_i+0xf6>
 8003d7e:	6813      	ldr	r3, [r2, #0]
 8003d80:	6825      	ldr	r5, [r4, #0]
 8003d82:	1d18      	adds	r0, r3, #4
 8003d84:	6961      	ldr	r1, [r4, #20]
 8003d86:	6010      	str	r0, [r2, #0]
 8003d88:	0628      	lsls	r0, r5, #24
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	d501      	bpl.n	8003d92 <_printf_i+0x196>
 8003d8e:	6019      	str	r1, [r3, #0]
 8003d90:	e002      	b.n	8003d98 <_printf_i+0x19c>
 8003d92:	066a      	lsls	r2, r5, #25
 8003d94:	d5fb      	bpl.n	8003d8e <_printf_i+0x192>
 8003d96:	8019      	strh	r1, [r3, #0]
 8003d98:	2300      	movs	r3, #0
 8003d9a:	4665      	mov	r5, ip
 8003d9c:	6123      	str	r3, [r4, #16]
 8003d9e:	e7b9      	b.n	8003d14 <_printf_i+0x118>
 8003da0:	6813      	ldr	r3, [r2, #0]
 8003da2:	1d19      	adds	r1, r3, #4
 8003da4:	6011      	str	r1, [r2, #0]
 8003da6:	681d      	ldr	r5, [r3, #0]
 8003da8:	6862      	ldr	r2, [r4, #4]
 8003daa:	2100      	movs	r1, #0
 8003dac:	4628      	mov	r0, r5
 8003dae:	f000 f837 	bl	8003e20 <memchr>
 8003db2:	b108      	cbz	r0, 8003db8 <_printf_i+0x1bc>
 8003db4:	1b40      	subs	r0, r0, r5
 8003db6:	6060      	str	r0, [r4, #4]
 8003db8:	6863      	ldr	r3, [r4, #4]
 8003dba:	6123      	str	r3, [r4, #16]
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dc2:	e7a7      	b.n	8003d14 <_printf_i+0x118>
 8003dc4:	6923      	ldr	r3, [r4, #16]
 8003dc6:	462a      	mov	r2, r5
 8003dc8:	4639      	mov	r1, r7
 8003dca:	4630      	mov	r0, r6
 8003dcc:	47c0      	blx	r8
 8003dce:	3001      	adds	r0, #1
 8003dd0:	d0aa      	beq.n	8003d28 <_printf_i+0x12c>
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	079b      	lsls	r3, r3, #30
 8003dd6:	d413      	bmi.n	8003e00 <_printf_i+0x204>
 8003dd8:	68e0      	ldr	r0, [r4, #12]
 8003dda:	9b03      	ldr	r3, [sp, #12]
 8003ddc:	4298      	cmp	r0, r3
 8003dde:	bfb8      	it	lt
 8003de0:	4618      	movlt	r0, r3
 8003de2:	e7a3      	b.n	8003d2c <_printf_i+0x130>
 8003de4:	2301      	movs	r3, #1
 8003de6:	464a      	mov	r2, r9
 8003de8:	4639      	mov	r1, r7
 8003dea:	4630      	mov	r0, r6
 8003dec:	47c0      	blx	r8
 8003dee:	3001      	adds	r0, #1
 8003df0:	d09a      	beq.n	8003d28 <_printf_i+0x12c>
 8003df2:	3501      	adds	r5, #1
 8003df4:	68e3      	ldr	r3, [r4, #12]
 8003df6:	9a03      	ldr	r2, [sp, #12]
 8003df8:	1a9b      	subs	r3, r3, r2
 8003dfa:	42ab      	cmp	r3, r5
 8003dfc:	dcf2      	bgt.n	8003de4 <_printf_i+0x1e8>
 8003dfe:	e7eb      	b.n	8003dd8 <_printf_i+0x1dc>
 8003e00:	2500      	movs	r5, #0
 8003e02:	f104 0919 	add.w	r9, r4, #25
 8003e06:	e7f5      	b.n	8003df4 <_printf_i+0x1f8>
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1ac      	bne.n	8003d66 <_printf_i+0x16a>
 8003e0c:	7803      	ldrb	r3, [r0, #0]
 8003e0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e16:	e76c      	b.n	8003cf2 <_printf_i+0xf6>
 8003e18:	08005b29 	.word	0x08005b29
 8003e1c:	08005b3a 	.word	0x08005b3a

08003e20 <memchr>:
 8003e20:	b510      	push	{r4, lr}
 8003e22:	b2c9      	uxtb	r1, r1
 8003e24:	4402      	add	r2, r0
 8003e26:	4290      	cmp	r0, r2
 8003e28:	4603      	mov	r3, r0
 8003e2a:	d101      	bne.n	8003e30 <memchr+0x10>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	e003      	b.n	8003e38 <memchr+0x18>
 8003e30:	781c      	ldrb	r4, [r3, #0]
 8003e32:	3001      	adds	r0, #1
 8003e34:	428c      	cmp	r4, r1
 8003e36:	d1f6      	bne.n	8003e26 <memchr+0x6>
 8003e38:	4618      	mov	r0, r3
 8003e3a:	bd10      	pop	{r4, pc}

08003e3c <memcpy>:
 8003e3c:	b510      	push	{r4, lr}
 8003e3e:	1e43      	subs	r3, r0, #1
 8003e40:	440a      	add	r2, r1
 8003e42:	4291      	cmp	r1, r2
 8003e44:	d100      	bne.n	8003e48 <memcpy+0xc>
 8003e46:	bd10      	pop	{r4, pc}
 8003e48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e50:	e7f7      	b.n	8003e42 <memcpy+0x6>

08003e52 <memmove>:
 8003e52:	4288      	cmp	r0, r1
 8003e54:	b510      	push	{r4, lr}
 8003e56:	eb01 0302 	add.w	r3, r1, r2
 8003e5a:	d807      	bhi.n	8003e6c <memmove+0x1a>
 8003e5c:	1e42      	subs	r2, r0, #1
 8003e5e:	4299      	cmp	r1, r3
 8003e60:	d00a      	beq.n	8003e78 <memmove+0x26>
 8003e62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e66:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003e6a:	e7f8      	b.n	8003e5e <memmove+0xc>
 8003e6c:	4283      	cmp	r3, r0
 8003e6e:	d9f5      	bls.n	8003e5c <memmove+0xa>
 8003e70:	1881      	adds	r1, r0, r2
 8003e72:	1ad2      	subs	r2, r2, r3
 8003e74:	42d3      	cmn	r3, r2
 8003e76:	d100      	bne.n	8003e7a <memmove+0x28>
 8003e78:	bd10      	pop	{r4, pc}
 8003e7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e7e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003e82:	e7f7      	b.n	8003e74 <memmove+0x22>

08003e84 <_free_r>:
 8003e84:	b538      	push	{r3, r4, r5, lr}
 8003e86:	4605      	mov	r5, r0
 8003e88:	2900      	cmp	r1, #0
 8003e8a:	d043      	beq.n	8003f14 <_free_r+0x90>
 8003e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e90:	1f0c      	subs	r4, r1, #4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	bfb8      	it	lt
 8003e96:	18e4      	addlt	r4, r4, r3
 8003e98:	f000 f8d0 	bl	800403c <__malloc_lock>
 8003e9c:	4a1e      	ldr	r2, [pc, #120]	; (8003f18 <_free_r+0x94>)
 8003e9e:	6813      	ldr	r3, [r2, #0]
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	b933      	cbnz	r3, 8003eb2 <_free_r+0x2e>
 8003ea4:	6063      	str	r3, [r4, #4]
 8003ea6:	6014      	str	r4, [r2, #0]
 8003ea8:	4628      	mov	r0, r5
 8003eaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003eae:	f000 b8c6 	b.w	800403e <__malloc_unlock>
 8003eb2:	42a3      	cmp	r3, r4
 8003eb4:	d90b      	bls.n	8003ece <_free_r+0x4a>
 8003eb6:	6821      	ldr	r1, [r4, #0]
 8003eb8:	1862      	adds	r2, r4, r1
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	bf01      	itttt	eq
 8003ebe:	681a      	ldreq	r2, [r3, #0]
 8003ec0:	685b      	ldreq	r3, [r3, #4]
 8003ec2:	1852      	addeq	r2, r2, r1
 8003ec4:	6022      	streq	r2, [r4, #0]
 8003ec6:	6063      	str	r3, [r4, #4]
 8003ec8:	6004      	str	r4, [r0, #0]
 8003eca:	e7ed      	b.n	8003ea8 <_free_r+0x24>
 8003ecc:	4613      	mov	r3, r2
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	b10a      	cbz	r2, 8003ed6 <_free_r+0x52>
 8003ed2:	42a2      	cmp	r2, r4
 8003ed4:	d9fa      	bls.n	8003ecc <_free_r+0x48>
 8003ed6:	6819      	ldr	r1, [r3, #0]
 8003ed8:	1858      	adds	r0, r3, r1
 8003eda:	42a0      	cmp	r0, r4
 8003edc:	d10b      	bne.n	8003ef6 <_free_r+0x72>
 8003ede:	6820      	ldr	r0, [r4, #0]
 8003ee0:	4401      	add	r1, r0
 8003ee2:	1858      	adds	r0, r3, r1
 8003ee4:	4282      	cmp	r2, r0
 8003ee6:	6019      	str	r1, [r3, #0]
 8003ee8:	d1de      	bne.n	8003ea8 <_free_r+0x24>
 8003eea:	6810      	ldr	r0, [r2, #0]
 8003eec:	6852      	ldr	r2, [r2, #4]
 8003eee:	4401      	add	r1, r0
 8003ef0:	6019      	str	r1, [r3, #0]
 8003ef2:	605a      	str	r2, [r3, #4]
 8003ef4:	e7d8      	b.n	8003ea8 <_free_r+0x24>
 8003ef6:	d902      	bls.n	8003efe <_free_r+0x7a>
 8003ef8:	230c      	movs	r3, #12
 8003efa:	602b      	str	r3, [r5, #0]
 8003efc:	e7d4      	b.n	8003ea8 <_free_r+0x24>
 8003efe:	6820      	ldr	r0, [r4, #0]
 8003f00:	1821      	adds	r1, r4, r0
 8003f02:	428a      	cmp	r2, r1
 8003f04:	bf01      	itttt	eq
 8003f06:	6811      	ldreq	r1, [r2, #0]
 8003f08:	6852      	ldreq	r2, [r2, #4]
 8003f0a:	1809      	addeq	r1, r1, r0
 8003f0c:	6021      	streq	r1, [r4, #0]
 8003f0e:	6062      	str	r2, [r4, #4]
 8003f10:	605c      	str	r4, [r3, #4]
 8003f12:	e7c9      	b.n	8003ea8 <_free_r+0x24>
 8003f14:	bd38      	pop	{r3, r4, r5, pc}
 8003f16:	bf00      	nop
 8003f18:	200004a8 	.word	0x200004a8

08003f1c <_malloc_r>:
 8003f1c:	b570      	push	{r4, r5, r6, lr}
 8003f1e:	1ccd      	adds	r5, r1, #3
 8003f20:	f025 0503 	bic.w	r5, r5, #3
 8003f24:	3508      	adds	r5, #8
 8003f26:	2d0c      	cmp	r5, #12
 8003f28:	bf38      	it	cc
 8003f2a:	250c      	movcc	r5, #12
 8003f2c:	2d00      	cmp	r5, #0
 8003f2e:	4606      	mov	r6, r0
 8003f30:	db01      	blt.n	8003f36 <_malloc_r+0x1a>
 8003f32:	42a9      	cmp	r1, r5
 8003f34:	d903      	bls.n	8003f3e <_malloc_r+0x22>
 8003f36:	230c      	movs	r3, #12
 8003f38:	6033      	str	r3, [r6, #0]
 8003f3a:	2000      	movs	r0, #0
 8003f3c:	bd70      	pop	{r4, r5, r6, pc}
 8003f3e:	f000 f87d 	bl	800403c <__malloc_lock>
 8003f42:	4a21      	ldr	r2, [pc, #132]	; (8003fc8 <_malloc_r+0xac>)
 8003f44:	6814      	ldr	r4, [r2, #0]
 8003f46:	4621      	mov	r1, r4
 8003f48:	b991      	cbnz	r1, 8003f70 <_malloc_r+0x54>
 8003f4a:	4c20      	ldr	r4, [pc, #128]	; (8003fcc <_malloc_r+0xb0>)
 8003f4c:	6823      	ldr	r3, [r4, #0]
 8003f4e:	b91b      	cbnz	r3, 8003f58 <_malloc_r+0x3c>
 8003f50:	4630      	mov	r0, r6
 8003f52:	f000 f863 	bl	800401c <_sbrk_r>
 8003f56:	6020      	str	r0, [r4, #0]
 8003f58:	4629      	mov	r1, r5
 8003f5a:	4630      	mov	r0, r6
 8003f5c:	f000 f85e 	bl	800401c <_sbrk_r>
 8003f60:	1c43      	adds	r3, r0, #1
 8003f62:	d124      	bne.n	8003fae <_malloc_r+0x92>
 8003f64:	230c      	movs	r3, #12
 8003f66:	4630      	mov	r0, r6
 8003f68:	6033      	str	r3, [r6, #0]
 8003f6a:	f000 f868 	bl	800403e <__malloc_unlock>
 8003f6e:	e7e4      	b.n	8003f3a <_malloc_r+0x1e>
 8003f70:	680b      	ldr	r3, [r1, #0]
 8003f72:	1b5b      	subs	r3, r3, r5
 8003f74:	d418      	bmi.n	8003fa8 <_malloc_r+0x8c>
 8003f76:	2b0b      	cmp	r3, #11
 8003f78:	d90f      	bls.n	8003f9a <_malloc_r+0x7e>
 8003f7a:	600b      	str	r3, [r1, #0]
 8003f7c:	18cc      	adds	r4, r1, r3
 8003f7e:	50cd      	str	r5, [r1, r3]
 8003f80:	4630      	mov	r0, r6
 8003f82:	f000 f85c 	bl	800403e <__malloc_unlock>
 8003f86:	f104 000b 	add.w	r0, r4, #11
 8003f8a:	1d23      	adds	r3, r4, #4
 8003f8c:	f020 0007 	bic.w	r0, r0, #7
 8003f90:	1ac3      	subs	r3, r0, r3
 8003f92:	d0d3      	beq.n	8003f3c <_malloc_r+0x20>
 8003f94:	425a      	negs	r2, r3
 8003f96:	50e2      	str	r2, [r4, r3]
 8003f98:	e7d0      	b.n	8003f3c <_malloc_r+0x20>
 8003f9a:	684b      	ldr	r3, [r1, #4]
 8003f9c:	428c      	cmp	r4, r1
 8003f9e:	bf16      	itet	ne
 8003fa0:	6063      	strne	r3, [r4, #4]
 8003fa2:	6013      	streq	r3, [r2, #0]
 8003fa4:	460c      	movne	r4, r1
 8003fa6:	e7eb      	b.n	8003f80 <_malloc_r+0x64>
 8003fa8:	460c      	mov	r4, r1
 8003faa:	6849      	ldr	r1, [r1, #4]
 8003fac:	e7cc      	b.n	8003f48 <_malloc_r+0x2c>
 8003fae:	1cc4      	adds	r4, r0, #3
 8003fb0:	f024 0403 	bic.w	r4, r4, #3
 8003fb4:	42a0      	cmp	r0, r4
 8003fb6:	d005      	beq.n	8003fc4 <_malloc_r+0xa8>
 8003fb8:	1a21      	subs	r1, r4, r0
 8003fba:	4630      	mov	r0, r6
 8003fbc:	f000 f82e 	bl	800401c <_sbrk_r>
 8003fc0:	3001      	adds	r0, #1
 8003fc2:	d0cf      	beq.n	8003f64 <_malloc_r+0x48>
 8003fc4:	6025      	str	r5, [r4, #0]
 8003fc6:	e7db      	b.n	8003f80 <_malloc_r+0x64>
 8003fc8:	200004a8 	.word	0x200004a8
 8003fcc:	200004ac 	.word	0x200004ac

08003fd0 <_realloc_r>:
 8003fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd2:	4607      	mov	r7, r0
 8003fd4:	4614      	mov	r4, r2
 8003fd6:	460e      	mov	r6, r1
 8003fd8:	b921      	cbnz	r1, 8003fe4 <_realloc_r+0x14>
 8003fda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003fde:	4611      	mov	r1, r2
 8003fe0:	f7ff bf9c 	b.w	8003f1c <_malloc_r>
 8003fe4:	b922      	cbnz	r2, 8003ff0 <_realloc_r+0x20>
 8003fe6:	f7ff ff4d 	bl	8003e84 <_free_r>
 8003fea:	4625      	mov	r5, r4
 8003fec:	4628      	mov	r0, r5
 8003fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ff0:	f000 f826 	bl	8004040 <_malloc_usable_size_r>
 8003ff4:	42a0      	cmp	r0, r4
 8003ff6:	d20f      	bcs.n	8004018 <_realloc_r+0x48>
 8003ff8:	4621      	mov	r1, r4
 8003ffa:	4638      	mov	r0, r7
 8003ffc:	f7ff ff8e 	bl	8003f1c <_malloc_r>
 8004000:	4605      	mov	r5, r0
 8004002:	2800      	cmp	r0, #0
 8004004:	d0f2      	beq.n	8003fec <_realloc_r+0x1c>
 8004006:	4631      	mov	r1, r6
 8004008:	4622      	mov	r2, r4
 800400a:	f7ff ff17 	bl	8003e3c <memcpy>
 800400e:	4631      	mov	r1, r6
 8004010:	4638      	mov	r0, r7
 8004012:	f7ff ff37 	bl	8003e84 <_free_r>
 8004016:	e7e9      	b.n	8003fec <_realloc_r+0x1c>
 8004018:	4635      	mov	r5, r6
 800401a:	e7e7      	b.n	8003fec <_realloc_r+0x1c>

0800401c <_sbrk_r>:
 800401c:	b538      	push	{r3, r4, r5, lr}
 800401e:	2300      	movs	r3, #0
 8004020:	4c05      	ldr	r4, [pc, #20]	; (8004038 <_sbrk_r+0x1c>)
 8004022:	4605      	mov	r5, r0
 8004024:	4608      	mov	r0, r1
 8004026:	6023      	str	r3, [r4, #0]
 8004028:	f7fd fab4 	bl	8001594 <_sbrk>
 800402c:	1c43      	adds	r3, r0, #1
 800402e:	d102      	bne.n	8004036 <_sbrk_r+0x1a>
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	b103      	cbz	r3, 8004036 <_sbrk_r+0x1a>
 8004034:	602b      	str	r3, [r5, #0]
 8004036:	bd38      	pop	{r3, r4, r5, pc}
 8004038:	20000550 	.word	0x20000550

0800403c <__malloc_lock>:
 800403c:	4770      	bx	lr

0800403e <__malloc_unlock>:
 800403e:	4770      	bx	lr

08004040 <_malloc_usable_size_r>:
 8004040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004044:	1f18      	subs	r0, r3, #4
 8004046:	2b00      	cmp	r3, #0
 8004048:	bfbc      	itt	lt
 800404a:	580b      	ldrlt	r3, [r1, r0]
 800404c:	18c0      	addlt	r0, r0, r3
 800404e:	4770      	bx	lr

08004050 <_init>:
 8004050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004052:	bf00      	nop
 8004054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004056:	bc08      	pop	{r3}
 8004058:	469e      	mov	lr, r3
 800405a:	4770      	bx	lr

0800405c <_fini>:
 800405c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405e:	bf00      	nop
 8004060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004062:	bc08      	pop	{r3}
 8004064:	469e      	mov	lr, r3
 8004066:	4770      	bx	lr
