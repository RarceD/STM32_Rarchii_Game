
Rarchi_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004394  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000023fc  080044a0  080044a0  000144a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800689c  0800689c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800689c  0800689c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800689c  0800689c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800689c  0800689c  0001689c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068a0  080068a0  000168a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080068a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  20000080  08006924  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  08006924  00020554  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f944  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020e3  00000000  00000000  0002f9ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000da0  00000000  00000000  00031ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cc0  00000000  00000000  00032870  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001821f  00000000  00000000  00033530  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bc68  00000000  00000000  0004b74f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b0b8  00000000  00000000  000573b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e246f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c20  00000000  00000000  000e24ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08004488 	.word	0x08004488

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08004488 	.word	0x08004488

0800014c <gameplay_1_confirm>:
 *      Author: Tecnica2
 */

#include "gameplay_logic.h"

void gameplay_1_confirm(Player *child) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af02      	add	r7, sp, #8
 8000152:	6078      	str	r0, [r7, #4]

	//I check if is the right response:
	if (game1[child->game_questions].answare == child->selected_game_item) {
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	88db      	ldrh	r3, [r3, #6]
 8000158:	4a53      	ldr	r2, [pc, #332]	; (80002a8 <gameplay_1_confirm+0x15c>)
 800015a:	011b      	lsls	r3, r3, #4
 800015c:	4413      	add	r3, r2
 800015e:	330c      	adds	r3, #12
 8000160:	781a      	ldrb	r2, [r3, #0]
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	7a1b      	ldrb	r3, [r3, #8]
 8000166:	429a      	cmp	r2, r3
 8000168:	d10b      	bne.n	8000182 <gameplay_1_confirm+0x36>
		HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000170:	484e      	ldr	r0, [pc, #312]	; (80002ac <gameplay_1_confirm+0x160>)
 8000172:	f001 ffb2 	bl	80020da <HAL_GPIO_WritePin>
		child->points++;
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	1c5a      	adds	r2, r3, #1
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	601a      	str	r2, [r3, #0]
 8000180:	e005      	b.n	800018e <gameplay_1_confirm+0x42>
	} else {
		HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 1);
 8000182:	2201      	movs	r2, #1
 8000184:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000188:	4848      	ldr	r0, [pc, #288]	; (80002ac <gameplay_1_confirm+0x160>)
 800018a:	f001 ffa6 	bl	80020da <HAL_GPIO_WritePin>
	}
	//Add the points in case of win and then roll over other question:
	child->game_questions++;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	88db      	ldrh	r3, [r3, #6]
 8000192:	3301      	adds	r3, #1
 8000194:	b29a      	uxth	r2, r3
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	80da      	strh	r2, [r3, #6]
	child->selected_game_item = 0;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2200      	movs	r2, #0
 800019e:	721a      	strb	r2, [r3, #8]
	if (child->game_questions <= 5) {
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	88db      	ldrh	r3, [r3, #6]
 80001a4:	2b05      	cmp	r3, #5
 80001a6:	d83f      	bhi.n	8000228 <gameplay_1_confirm+0xdc>
		SSD1306_Clear();
 80001a8:	f001 fab0 	bl	800170c <SSD1306_Clear>
		SSD1306_GotoXY(0, 0);
 80001ac:	2100      	movs	r1, #0
 80001ae:	2000      	movs	r0, #0
 80001b0:	f001 f88c 	bl	80012cc <SSD1306_GotoXY>
		SSD1306_Puts(game1[child->game_questions].question, &Font_7x10, 1);
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	88db      	ldrh	r3, [r3, #6]
 80001b8:	4a3b      	ldr	r2, [pc, #236]	; (80002a8 <gameplay_1_confirm+0x15c>)
 80001ba:	011b      	lsls	r3, r3, #4
 80001bc:	4413      	add	r3, r2
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2201      	movs	r2, #1
 80001c2:	493b      	ldr	r1, [pc, #236]	; (80002b0 <gameplay_1_confirm+0x164>)
 80001c4:	4618      	mov	r0, r3
 80001c6:	f001 f917 	bl	80013f8 <SSD1306_Puts>
		SSD1306_GotoXY(0, 30);
 80001ca:	211e      	movs	r1, #30
 80001cc:	2000      	movs	r0, #0
 80001ce:	f001 f87d 	bl	80012cc <SSD1306_GotoXY>
		SSD1306_Puts(game1[child->game_questions].yes, &Font_7x10, 1);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	88db      	ldrh	r3, [r3, #6]
 80001d6:	4a34      	ldr	r2, [pc, #208]	; (80002a8 <gameplay_1_confirm+0x15c>)
 80001d8:	011b      	lsls	r3, r3, #4
 80001da:	4413      	add	r3, r2
 80001dc:	3304      	adds	r3, #4
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	2201      	movs	r2, #1
 80001e2:	4933      	ldr	r1, [pc, #204]	; (80002b0 <gameplay_1_confirm+0x164>)
 80001e4:	4618      	mov	r0, r3
 80001e6:	f001 f907 	bl	80013f8 <SSD1306_Puts>
		SSD1306_GotoXY(80, 30);
 80001ea:	211e      	movs	r1, #30
 80001ec:	2050      	movs	r0, #80	; 0x50
 80001ee:	f001 f86d 	bl	80012cc <SSD1306_GotoXY>
		SSD1306_Puts(game1[child->game_questions].no, &Font_7x10, 1);
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	88db      	ldrh	r3, [r3, #6]
 80001f6:	4a2c      	ldr	r2, [pc, #176]	; (80002a8 <gameplay_1_confirm+0x15c>)
 80001f8:	011b      	lsls	r3, r3, #4
 80001fa:	4413      	add	r3, r2
 80001fc:	3308      	adds	r3, #8
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	2201      	movs	r2, #1
 8000202:	492b      	ldr	r1, [pc, #172]	; (80002b0 <gameplay_1_confirm+0x164>)
 8000204:	4618      	mov	r0, r3
 8000206:	f001 f8f7 	bl	80013f8 <SSD1306_Puts>
		child->selected_game_item = 0;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2200      	movs	r2, #0
 800020e:	721a      	strb	r2, [r3, #8]
		SSD1306_GotoXY(20, 50);
 8000210:	2132      	movs	r1, #50	; 0x32
 8000212:	2014      	movs	r0, #20
 8000214:	f001 f85a 	bl	80012cc <SSD1306_GotoXY>
		SSD1306_Puts("<=>", &Font_7x10, 1);
 8000218:	2201      	movs	r2, #1
 800021a:	4925      	ldr	r1, [pc, #148]	; (80002b0 <gameplay_1_confirm+0x164>)
 800021c:	4825      	ldr	r0, [pc, #148]	; (80002b4 <gameplay_1_confirm+0x168>)
 800021e:	f001 f8eb 	bl	80013f8 <SSD1306_Puts>
		//SSD1306_GotoXY(100, 50);
		//SSD1306_Puts("<=>", &Font_7x10, 1);
		SSD1306_UpdateScreen();
 8000222:	f000 ffaf 	bl	8001184 <SSD1306_UpdateScreen>
 8000226:	e038      	b.n	800029a <gameplay_1_confirm+0x14e>
	} else {
		SSD1306_Clear();
 8000228:	f001 fa70 	bl	800170c <SSD1306_Clear>
		child->state_machine = INIT;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2200      	movs	r2, #0
 8000230:	711a      	strb	r2, [r3, #4]
		SSD1306_DrawBitmap(0, 0, image_data_test_real, 128, 64, 1);
 8000232:	2301      	movs	r3, #1
 8000234:	9301      	str	r3, [sp, #4]
 8000236:	2340      	movs	r3, #64	; 0x40
 8000238:	9300      	str	r3, [sp, #0]
 800023a:	2380      	movs	r3, #128	; 0x80
 800023c:	4a1e      	ldr	r2, [pc, #120]	; (80002b8 <gameplay_1_confirm+0x16c>)
 800023e:	2100      	movs	r1, #0
 8000240:	2000      	movs	r0, #0
 8000242:	f000 fe73 	bl	8000f2c <SSD1306_DrawBitmap>
		SSD1306_GotoXY(0, 0);
 8000246:	2100      	movs	r1, #0
 8000248:	2000      	movs	r0, #0
 800024a:	f001 f83f 	bl	80012cc <SSD1306_GotoXY>
		SSD1306_Puts("PTS:", &Font_11x18, 1);
 800024e:	2201      	movs	r2, #1
 8000250:	491a      	ldr	r1, [pc, #104]	; (80002bc <gameplay_1_confirm+0x170>)
 8000252:	481b      	ldr	r0, [pc, #108]	; (80002c0 <gameplay_1_confirm+0x174>)
 8000254:	f001 f8d0 	bl	80013f8 <SSD1306_Puts>
		SSD1306_GotoXY(42, 0);
 8000258:	2100      	movs	r1, #0
 800025a:	202a      	movs	r0, #42	; 0x2a
 800025c:	f001 f836 	bl	80012cc <SSD1306_GotoXY>
		char *numberstring[(((sizeof child->points)) + 2) / 3 + 2];
		sprintf(numberstring, "%d", child->points);
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	f107 0308 	add.w	r3, r7, #8
 8000268:	4916      	ldr	r1, [pc, #88]	; (80002c4 <gameplay_1_confirm+0x178>)
 800026a:	4618      	mov	r0, r3
 800026c:	f003 fcfa 	bl	8003c64 <siprintf>
		SSD1306_Puts(numberstring, &Font_11x18, 1);
 8000270:	f107 0308 	add.w	r3, r7, #8
 8000274:	2201      	movs	r2, #1
 8000276:	4911      	ldr	r1, [pc, #68]	; (80002bc <gameplay_1_confirm+0x170>)
 8000278:	4618      	mov	r0, r3
 800027a:	f001 f8bd 	bl	80013f8 <SSD1306_Puts>
		SSD1306_UpdateScreen(); //display
 800027e:	f000 ff81 	bl	8001184 <SSD1306_UpdateScreen>
		HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 0);
 8000282:	2200      	movs	r2, #0
 8000284:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000288:	4808      	ldr	r0, [pc, #32]	; (80002ac <gameplay_1_confirm+0x160>)
 800028a:	f001 ff26 	bl	80020da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 1);
 800028e:	2201      	movs	r2, #1
 8000290:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000294:	4805      	ldr	r0, [pc, #20]	; (80002ac <gameplay_1_confirm+0x160>)
 8000296:	f001 ff20 	bl	80020da <HAL_GPIO_WritePin>

	}
	HAL_Delay(100);
 800029a:	2064      	movs	r0, #100	; 0x64
 800029c:	f001 fc7c 	bl	8001b98 <HAL_Delay>

}
 80002a0:	bf00      	nop
 80002a2:	3718      	adds	r7, #24
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	08006124 	.word	0x08006124
 80002ac:	40010c00 	.word	0x40010c00
 80002b0:	20000000 	.word	0x20000000
 80002b4:	080045d8 	.word	0x080045d8
 80002b8:	08005d24 	.word	0x08005d24
 80002bc:	20000008 	.word	0x20000008
 80002c0:	080045dc 	.word	0x080045dc
 80002c4:	080045e4 	.word	0x080045e4

080002c8 <gameplay_2_confirm>:
void gameplay_2_confirm(Player *child) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b08a      	sub	sp, #40	; 0x28
 80002cc:	af02      	add	r7, sp, #8
 80002ce:	6078      	str	r0, [r7, #4]

	//I check if is the right response:
	if (game2[child->game_questions].answare == child->selected_game_item) {
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	88db      	ldrh	r3, [r3, #6]
 80002d4:	4a55      	ldr	r2, [pc, #340]	; (800042c <gameplay_2_confirm+0x164>)
 80002d6:	011b      	lsls	r3, r3, #4
 80002d8:	4413      	add	r3, r2
 80002da:	3308      	adds	r3, #8
 80002dc:	781a      	ldrb	r2, [r3, #0]
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	7a1b      	ldrb	r3, [r3, #8]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d10b      	bne.n	80002fe <gameplay_2_confirm+0x36>
		HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 0);
 80002e6:	2200      	movs	r2, #0
 80002e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ec:	4850      	ldr	r0, [pc, #320]	; (8000430 <gameplay_2_confirm+0x168>)
 80002ee:	f001 fef4 	bl	80020da <HAL_GPIO_WritePin>
		child->points++;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	1c5a      	adds	r2, r3, #1
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	e005      	b.n	800030a <gameplay_2_confirm+0x42>
	} else {
		HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 1);
 80002fe:	2201      	movs	r2, #1
 8000300:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000304:	484a      	ldr	r0, [pc, #296]	; (8000430 <gameplay_2_confirm+0x168>)
 8000306:	f001 fee8 	bl	80020da <HAL_GPIO_WritePin>
	}
	//Add the points in case of win and then roll over other question:
	child->game_questions++;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	88db      	ldrh	r3, [r3, #6]
 800030e:	3301      	adds	r3, #1
 8000310:	b29a      	uxth	r2, r3
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	80da      	strh	r2, [r3, #6]
	child->selected_game_item = 0;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2200      	movs	r2, #0
 800031a:	721a      	strb	r2, [r3, #8]
	if (child->game_questions <= 5) {
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	88db      	ldrh	r3, [r3, #6]
 8000320:	2b05      	cmp	r3, #5
 8000322:	d843      	bhi.n	80003ac <gameplay_2_confirm+0xe4>
		SSD1306_Clear();
 8000324:	f001 f9f2 	bl	800170c <SSD1306_Clear>
		SSD1306_GotoXY(0, 0);
 8000328:	2100      	movs	r1, #0
 800032a:	2000      	movs	r0, #0
 800032c:	f000 ffce 	bl	80012cc <SSD1306_GotoXY>
		SSD1306_Puts(game2[child->game_questions].question, &Font_11x18, 1);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	88db      	ldrh	r3, [r3, #6]
 8000334:	4a3d      	ldr	r2, [pc, #244]	; (800042c <gameplay_2_confirm+0x164>)
 8000336:	011b      	lsls	r3, r3, #4
 8000338:	4413      	add	r3, r2
 800033a:	330c      	adds	r3, #12
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	2201      	movs	r2, #1
 8000340:	493c      	ldr	r1, [pc, #240]	; (8000434 <gameplay_2_confirm+0x16c>)
 8000342:	4618      	mov	r0, r3
 8000344:	f001 f858 	bl	80013f8 <SSD1306_Puts>
		int position_icon = 20;
 8000348:	2314      	movs	r3, #20
 800034a:	61fb      	str	r3, [r7, #28]
		SSD1306_DrawBitmap(position_icon, 20, game2[child->game_questions].icon_1, 25, 25, 1);
 800034c:	69fb      	ldr	r3, [r7, #28]
 800034e:	b218      	sxth	r0, r3
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	88db      	ldrh	r3, [r3, #6]
 8000354:	4a35      	ldr	r2, [pc, #212]	; (800042c <gameplay_2_confirm+0x164>)
 8000356:	011b      	lsls	r3, r3, #4
 8000358:	4413      	add	r3, r2
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	2301      	movs	r3, #1
 800035e:	9301      	str	r3, [sp, #4]
 8000360:	2319      	movs	r3, #25
 8000362:	9300      	str	r3, [sp, #0]
 8000364:	2319      	movs	r3, #25
 8000366:	2114      	movs	r1, #20
 8000368:	f000 fde0 	bl	8000f2c <SSD1306_DrawBitmap>
		position_icon+=60;
 800036c:	69fb      	ldr	r3, [r7, #28]
 800036e:	333c      	adds	r3, #60	; 0x3c
 8000370:	61fb      	str	r3, [r7, #28]
		SSD1306_DrawBitmap(position_icon, 20,  game2[child->game_questions].icon_2, 25, 25, 1);
 8000372:	69fb      	ldr	r3, [r7, #28]
 8000374:	b218      	sxth	r0, r3
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	88db      	ldrh	r3, [r3, #6]
 800037a:	4a2c      	ldr	r2, [pc, #176]	; (800042c <gameplay_2_confirm+0x164>)
 800037c:	011b      	lsls	r3, r3, #4
 800037e:	4413      	add	r3, r2
 8000380:	3304      	adds	r3, #4
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	2301      	movs	r3, #1
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	2319      	movs	r3, #25
 800038a:	9300      	str	r3, [sp, #0]
 800038c:	2319      	movs	r3, #25
 800038e:	2114      	movs	r1, #20
 8000390:	f000 fdcc 	bl	8000f2c <SSD1306_DrawBitmap>
		SSD1306_GotoXY(22, 50);
 8000394:	2132      	movs	r1, #50	; 0x32
 8000396:	2016      	movs	r0, #22
 8000398:	f000 ff98 	bl	80012cc <SSD1306_GotoXY>
		SSD1306_Puts("<=>", &Font_7x10, 1);
 800039c:	2201      	movs	r2, #1
 800039e:	4926      	ldr	r1, [pc, #152]	; (8000438 <gameplay_2_confirm+0x170>)
 80003a0:	4826      	ldr	r0, [pc, #152]	; (800043c <gameplay_2_confirm+0x174>)
 80003a2:	f001 f829 	bl	80013f8 <SSD1306_Puts>
		//SSD1306_GotoXY(100, 50);
		//SSD1306_Puts("<=>", &Font_7x10, 1);
		SSD1306_UpdateScreen();
 80003a6:	f000 feed 	bl	8001184 <SSD1306_UpdateScreen>
 80003aa:	e038      	b.n	800041e <gameplay_2_confirm+0x156>
	} else {
		SSD1306_Clear();
 80003ac:	f001 f9ae 	bl	800170c <SSD1306_Clear>
		child->state_machine = INIT;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	2200      	movs	r2, #0
 80003b4:	711a      	strb	r2, [r3, #4]
		SSD1306_DrawBitmap(0, 0, image_data_test_real, 128, 64, 1);
 80003b6:	2301      	movs	r3, #1
 80003b8:	9301      	str	r3, [sp, #4]
 80003ba:	2340      	movs	r3, #64	; 0x40
 80003bc:	9300      	str	r3, [sp, #0]
 80003be:	2380      	movs	r3, #128	; 0x80
 80003c0:	4a1f      	ldr	r2, [pc, #124]	; (8000440 <gameplay_2_confirm+0x178>)
 80003c2:	2100      	movs	r1, #0
 80003c4:	2000      	movs	r0, #0
 80003c6:	f000 fdb1 	bl	8000f2c <SSD1306_DrawBitmap>
		SSD1306_GotoXY(0, 0);
 80003ca:	2100      	movs	r1, #0
 80003cc:	2000      	movs	r0, #0
 80003ce:	f000 ff7d 	bl	80012cc <SSD1306_GotoXY>
		SSD1306_Puts("PTS:", &Font_11x18, 1);
 80003d2:	2201      	movs	r2, #1
 80003d4:	4917      	ldr	r1, [pc, #92]	; (8000434 <gameplay_2_confirm+0x16c>)
 80003d6:	481b      	ldr	r0, [pc, #108]	; (8000444 <gameplay_2_confirm+0x17c>)
 80003d8:	f001 f80e 	bl	80013f8 <SSD1306_Puts>
		SSD1306_GotoXY(42, 0);
 80003dc:	2100      	movs	r1, #0
 80003de:	202a      	movs	r0, #42	; 0x2a
 80003e0:	f000 ff74 	bl	80012cc <SSD1306_GotoXY>
		char *numberstring[(((sizeof child->points)) + 2) / 3 + 2];
		sprintf(numberstring, "%d", child->points);
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	f107 030c 	add.w	r3, r7, #12
 80003ec:	4916      	ldr	r1, [pc, #88]	; (8000448 <gameplay_2_confirm+0x180>)
 80003ee:	4618      	mov	r0, r3
 80003f0:	f003 fc38 	bl	8003c64 <siprintf>
		SSD1306_Puts(numberstring, &Font_11x18, 1);
 80003f4:	f107 030c 	add.w	r3, r7, #12
 80003f8:	2201      	movs	r2, #1
 80003fa:	490e      	ldr	r1, [pc, #56]	; (8000434 <gameplay_2_confirm+0x16c>)
 80003fc:	4618      	mov	r0, r3
 80003fe:	f000 fffb 	bl	80013f8 <SSD1306_Puts>
		SSD1306_UpdateScreen(); //display
 8000402:	f000 febf 	bl	8001184 <SSD1306_UpdateScreen>
		HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 0);
 8000406:	2200      	movs	r2, #0
 8000408:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800040c:	4808      	ldr	r0, [pc, #32]	; (8000430 <gameplay_2_confirm+0x168>)
 800040e:	f001 fe64 	bl	80020da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 1);
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000418:	4805      	ldr	r0, [pc, #20]	; (8000430 <gameplay_2_confirm+0x168>)
 800041a:	f001 fe5e 	bl	80020da <HAL_GPIO_WritePin>

	}
	HAL_Delay(100);
 800041e:	2064      	movs	r0, #100	; 0x64
 8000420:	f001 fbba 	bl	8001b98 <HAL_Delay>

}
 8000424:	bf00      	nop
 8000426:	3720      	adds	r7, #32
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	08006194 	.word	0x08006194
 8000430:	40010c00 	.word	0x40010c00
 8000434:	20000008 	.word	0x20000008
 8000438:	20000000 	.word	0x20000000
 800043c:	080045d8 	.word	0x080045d8
 8000440:	08005d24 	.word	0x08005d24
 8000444:	080045dc 	.word	0x080045dc
 8000448:	080045e4 	.word	0x080045e4

0800044c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800044c:	b580      	push	{r7, lr}
 800044e:	b094      	sub	sp, #80	; 0x50
 8000450:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	Player children;
	children.points = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	633b      	str	r3, [r7, #48]	; 0x30
	children.state_machine = INIT;
 8000456:	2300      	movs	r3, #0
 8000458:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	children.scrol_position = 18;
 800045c:	2312      	movs	r3, #18
 800045e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	children.game_questions = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	86fb      	strh	r3, [r7, #54]	; 0x36
	children.selected_game_item = 0;
 8000466:	2300      	movs	r3, #0
 8000468:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800046c:	f001 fb32 	bl	8001ad4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000470:	f000 fc08 	bl	8000c84 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000474:	f000 fcc8 	bl	8000e08 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000478:	f000 fc4a 	bl	8000d10 <MX_I2C1_Init>
	MX_TIM2_Init();
 800047c:	f000 fc76 	bl	8000d6c <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	SSD1306_Init(); // initialise
 8000480:	f000 fdbc 	bl	8000ffc <SSD1306_Init>
	HAL_TIM_Base_Init(&htim2);
 8000484:	48c1      	ldr	r0, [pc, #772]	; (800078c <main+0x340>)
 8000486:	f002 ffcd 	bl	8003424 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 800048a:	48c0      	ldr	r0, [pc, #768]	; (800078c <main+0x340>)
 800048c:	f003 f81a 	bl	80034c4 <HAL_TIM_Base_Start_IT>
	timer_val = __HAL_TIM_GET_COUNTER(&htim2);
 8000490:	4bbe      	ldr	r3, [pc, #760]	; (800078c <main+0x340>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000496:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	SSD1306_GotoXY(0, 0);
 800049a:	2100      	movs	r1, #0
 800049c:	2000      	movs	r0, #0
 800049e:	f000 ff15 	bl	80012cc <SSD1306_GotoXY>
	SSD1306_Puts("PTS:", &Font_11x18, 1);
 80004a2:	2201      	movs	r2, #1
 80004a4:	49ba      	ldr	r1, [pc, #744]	; (8000790 <main+0x344>)
 80004a6:	48bb      	ldr	r0, [pc, #748]	; (8000794 <main+0x348>)
 80004a8:	f000 ffa6 	bl	80013f8 <SSD1306_Puts>
	SSD1306_GotoXY(42, 0);
 80004ac:	2100      	movs	r1, #0
 80004ae:	202a      	movs	r0, #42	; 0x2a
 80004b0:	f000 ff0c 	bl	80012cc <SSD1306_GotoXY>
	char *numberstring[(((sizeof children.points)) + 2) / 3 + 2];
	sprintf(numberstring, "%d", children.points);
 80004b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80004b6:	f107 0320 	add.w	r3, r7, #32
 80004ba:	49b7      	ldr	r1, [pc, #732]	; (8000798 <main+0x34c>)
 80004bc:	4618      	mov	r0, r3
 80004be:	f003 fbd1 	bl	8003c64 <siprintf>
	SSD1306_Puts(numberstring, &Font_11x18, 1);
 80004c2:	f107 0320 	add.w	r3, r7, #32
 80004c6:	2201      	movs	r2, #1
 80004c8:	49b1      	ldr	r1, [pc, #708]	; (8000790 <main+0x344>)
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 ff94 	bl	80013f8 <SSD1306_Puts>
	HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 0);
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004d6:	48b1      	ldr	r0, [pc, #708]	; (800079c <main+0x350>)
 80004d8:	f001 fdff 	bl	80020da <HAL_GPIO_WritePin>

	SSD1306_DrawBitmap(30, 0, image_data_test_real, 128, 64, 1);
 80004dc:	2301      	movs	r3, #1
 80004de:	9301      	str	r3, [sp, #4]
 80004e0:	2340      	movs	r3, #64	; 0x40
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	4aae      	ldr	r2, [pc, #696]	; (80007a0 <main+0x354>)
 80004e8:	2100      	movs	r1, #0
 80004ea:	201e      	movs	r0, #30
 80004ec:	f000 fd1e 	bl	8000f2c <SSD1306_DrawBitmap>
	int position_icon = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	643b      	str	r3, [r7, #64]	; 0x40
	SSD1306_DrawBitmap(position_icon, 20, icon_house, 25, 25, 1);
 80004f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80004f6:	b218      	sxth	r0, r3
 80004f8:	2301      	movs	r3, #1
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	2319      	movs	r3, #25
 80004fe:	9300      	str	r3, [sp, #0]
 8000500:	2319      	movs	r3, #25
 8000502:	4aa8      	ldr	r2, [pc, #672]	; (80007a4 <main+0x358>)
 8000504:	2114      	movs	r1, #20
 8000506:	f000 fd11 	bl	8000f2c <SSD1306_DrawBitmap>
	SSD1306_DrawBitmap(position_icon += 25, 20, icon_cross, 25, 25, 1);
 800050a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800050c:	3319      	adds	r3, #25
 800050e:	643b      	str	r3, [r7, #64]	; 0x40
 8000510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000512:	b218      	sxth	r0, r3
 8000514:	2301      	movs	r3, #1
 8000516:	9301      	str	r3, [sp, #4]
 8000518:	2319      	movs	r3, #25
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2319      	movs	r3, #25
 800051e:	4aa2      	ldr	r2, [pc, #648]	; (80007a8 <main+0x35c>)
 8000520:	2114      	movs	r1, #20
 8000522:	f000 fd03 	bl	8000f2c <SSD1306_DrawBitmap>
	SSD1306_DrawBitmap(position_icon += 25, 20, icon_circle, 25, 25, 1);
 8000526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000528:	3319      	adds	r3, #25
 800052a:	643b      	str	r3, [r7, #64]	; 0x40
 800052c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800052e:	b218      	sxth	r0, r3
 8000530:	2301      	movs	r3, #1
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	2319      	movs	r3, #25
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	2319      	movs	r3, #25
 800053a:	4a9c      	ldr	r2, [pc, #624]	; (80007ac <main+0x360>)
 800053c:	2114      	movs	r1, #20
 800053e:	f000 fcf5 	bl	8000f2c <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 8000542:	f000 fe1f 	bl	8001184 <SSD1306_UpdateScreen>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		switch (children.state_machine) {
 8000546:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800054a:	2b05      	cmp	r3, #5
 800054c:	d8fb      	bhi.n	8000546 <main+0xfa>
 800054e:	a201      	add	r2, pc, #4	; (adr r2, 8000554 <main+0x108>)
 8000550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000554:	0800056d 	.word	0x0800056d
 8000558:	0800062f 	.word	0x0800062f
 800055c:	0800090f 	.word	0x0800090f
 8000560:	080009ab 	.word	0x080009ab
 8000564:	08000a47 	.word	0x08000a47
 8000568:	08000ae1 	.word	0x08000ae1
		case INIT:
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin) == 0
 800056c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000570:	488a      	ldr	r0, [pc, #552]	; (800079c <main+0x350>)
 8000572:	f001 fd9b 	bl	80020ac <HAL_GPIO_ReadPin>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d008      	beq.n	800058e <main+0x142>
					|| HAL_GPIO_ReadPin(BUTTON_LEFT_GPIO_Port, BUTTON_LEFT_Pin)
 800057c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000580:	4886      	ldr	r0, [pc, #536]	; (800079c <main+0x350>)
 8000582:	f001 fd93 	bl	80020ac <HAL_GPIO_ReadPin>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	f040 835e 	bne.w	8000c4a <main+0x7fe>
							== 0) {
				HAL_GPIO_WritePin(RGB_RED_GPIO_Port, RGB_RED_Pin, 1);
 800058e:	2201      	movs	r2, #1
 8000590:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000594:	4881      	ldr	r0, [pc, #516]	; (800079c <main+0x350>)
 8000596:	f001 fda0 	bl	80020da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a0:	487e      	ldr	r0, [pc, #504]	; (800079c <main+0x350>)
 80005a2:	f001 fd9a 	bl	80020da <HAL_GPIO_WritePin>
				//I update the screen
				SSD1306_Clear();
 80005a6:	f001 f8b1 	bl	800170c <SSD1306_Clear>
				SSD1306_GotoXY(20, 18);
 80005aa:	2112      	movs	r1, #18
 80005ac:	2014      	movs	r0, #20
 80005ae:	f000 fe8d 	bl	80012cc <SSD1306_GotoXY>
				SSD1306_Puts("1:Questions", &Font_7x10, 1);
 80005b2:	2201      	movs	r2, #1
 80005b4:	497e      	ldr	r1, [pc, #504]	; (80007b0 <main+0x364>)
 80005b6:	487f      	ldr	r0, [pc, #508]	; (80007b4 <main+0x368>)
 80005b8:	f000 ff1e 	bl	80013f8 <SSD1306_Puts>
				SSD1306_GotoXY(20, 28);
 80005bc:	211c      	movs	r1, #28
 80005be:	2014      	movs	r0, #20
 80005c0:	f000 fe84 	bl	80012cc <SSD1306_GotoXY>
				SSD1306_Puts("2:Relations", &Font_7x10, 1);
 80005c4:	2201      	movs	r2, #1
 80005c6:	497a      	ldr	r1, [pc, #488]	; (80007b0 <main+0x364>)
 80005c8:	487b      	ldr	r0, [pc, #492]	; (80007b8 <main+0x36c>)
 80005ca:	f000 ff15 	bl	80013f8 <SSD1306_Puts>
				SSD1306_GotoXY(20, 38);
 80005ce:	2126      	movs	r1, #38	; 0x26
 80005d0:	2014      	movs	r0, #20
 80005d2:	f000 fe7b 	bl	80012cc <SSD1306_GotoXY>
				SSD1306_Puts("3:Maths", &Font_7x10, 1);
 80005d6:	2201      	movs	r2, #1
 80005d8:	4975      	ldr	r1, [pc, #468]	; (80007b0 <main+0x364>)
 80005da:	4878      	ldr	r0, [pc, #480]	; (80007bc <main+0x370>)
 80005dc:	f000 ff0c 	bl	80013f8 <SSD1306_Puts>
				SSD1306_GotoXY(20, 48);
 80005e0:	2130      	movs	r1, #48	; 0x30
 80005e2:	2014      	movs	r0, #20
 80005e4:	f000 fe72 	bl	80012cc <SSD1306_GotoXY>
				SSD1306_Puts("4:Orthography", &Font_7x10, 1);
 80005e8:	2201      	movs	r2, #1
 80005ea:	4971      	ldr	r1, [pc, #452]	; (80007b0 <main+0x364>)
 80005ec:	4874      	ldr	r0, [pc, #464]	; (80007c0 <main+0x374>)
 80005ee:	f000 ff03 	bl	80013f8 <SSD1306_Puts>
				SSD1306_GotoXY(50, 0);
 80005f2:	2100      	movs	r1, #0
 80005f4:	2032      	movs	r0, #50	; 0x32
 80005f6:	f000 fe69 	bl	80012cc <SSD1306_GotoXY>
				SSD1306_Puts("Select game", &Font_7x10, 1);
 80005fa:	2201      	movs	r2, #1
 80005fc:	496c      	ldr	r1, [pc, #432]	; (80007b0 <main+0x364>)
 80005fe:	4871      	ldr	r0, [pc, #452]	; (80007c4 <main+0x378>)
 8000600:	f000 fefa 	bl	80013f8 <SSD1306_Puts>
				children.scrol_position = 28;
 8000604:	231c      	movs	r3, #28
 8000606:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				SSD1306_GotoXY(10, 18);
 800060a:	2112      	movs	r1, #18
 800060c:	200a      	movs	r0, #10
 800060e:	f000 fe5d 	bl	80012cc <SSD1306_GotoXY>
				SSD1306_Puts(">", &Font_7x10, 1);
 8000612:	2201      	movs	r2, #1
 8000614:	4966      	ldr	r1, [pc, #408]	; (80007b0 <main+0x364>)
 8000616:	486c      	ldr	r0, [pc, #432]	; (80007c8 <main+0x37c>)
 8000618:	f000 feee 	bl	80013f8 <SSD1306_Puts>
				SSD1306_UpdateScreen(); //display
 800061c:	f000 fdb2 	bl	8001184 <SSD1306_UpdateScreen>
				HAL_Delay(60);
 8000620:	203c      	movs	r0, #60	; 0x3c
 8000622:	f001 fab9 	bl	8001b98 <HAL_Delay>
				children.state_machine = MENU;
 8000626:	2301      	movs	r3, #1
 8000628:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			}
			break;
 800062c:	e30d      	b.n	8000c4a <main+0x7fe>
		case MENU:
			if (HAL_GPIO_ReadPin(BUTTON_LEFT_GPIO_Port, BUTTON_LEFT_Pin) == 0) {
 800062e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000632:	485a      	ldr	r0, [pc, #360]	; (800079c <main+0x350>)
 8000634:	f001 fd3a 	bl	80020ac <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d146      	bne.n	80006cc <main+0x280>
				SSD1306_GotoXY(10, 18);
 800063e:	2112      	movs	r1, #18
 8000640:	200a      	movs	r0, #10
 8000642:	f000 fe43 	bl	80012cc <SSD1306_GotoXY>
				SSD1306_Puts(" ", &Font_7x10, 1);
 8000646:	2201      	movs	r2, #1
 8000648:	4959      	ldr	r1, [pc, #356]	; (80007b0 <main+0x364>)
 800064a:	4860      	ldr	r0, [pc, #384]	; (80007cc <main+0x380>)
 800064c:	f000 fed4 	bl	80013f8 <SSD1306_Puts>
				SSD1306_GotoXY(10, 28);
 8000650:	211c      	movs	r1, #28
 8000652:	200a      	movs	r0, #10
 8000654:	f000 fe3a 	bl	80012cc <SSD1306_GotoXY>
				SSD1306_Puts(" ", &Font_7x10, 1);
 8000658:	2201      	movs	r2, #1
 800065a:	4955      	ldr	r1, [pc, #340]	; (80007b0 <main+0x364>)
 800065c:	485b      	ldr	r0, [pc, #364]	; (80007cc <main+0x380>)
 800065e:	f000 fecb 	bl	80013f8 <SSD1306_Puts>
				SSD1306_GotoXY(10, 38);
 8000662:	2126      	movs	r1, #38	; 0x26
 8000664:	200a      	movs	r0, #10
 8000666:	f000 fe31 	bl	80012cc <SSD1306_GotoXY>
				SSD1306_Puts(" ", &Font_7x10, 1);
 800066a:	2201      	movs	r2, #1
 800066c:	4950      	ldr	r1, [pc, #320]	; (80007b0 <main+0x364>)
 800066e:	4857      	ldr	r0, [pc, #348]	; (80007cc <main+0x380>)
 8000670:	f000 fec2 	bl	80013f8 <SSD1306_Puts>
				SSD1306_GotoXY(10, 48);
 8000674:	2130      	movs	r1, #48	; 0x30
 8000676:	200a      	movs	r0, #10
 8000678:	f000 fe28 	bl	80012cc <SSD1306_GotoXY>
				SSD1306_Puts(" ", &Font_7x10, 1);
 800067c:	2201      	movs	r2, #1
 800067e:	494c      	ldr	r1, [pc, #304]	; (80007b0 <main+0x364>)
 8000680:	4852      	ldr	r0, [pc, #328]	; (80007cc <main+0x380>)
 8000682:	f000 feb9 	bl	80013f8 <SSD1306_Puts>
				SSD1306_GotoXY(10, children.scrol_position);
 8000686:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800068a:	b29b      	uxth	r3, r3
 800068c:	4619      	mov	r1, r3
 800068e:	200a      	movs	r0, #10
 8000690:	f000 fe1c 	bl	80012cc <SSD1306_GotoXY>
				SSD1306_Puts(">", &Font_7x10, 1);
 8000694:	2201      	movs	r2, #1
 8000696:	4946      	ldr	r1, [pc, #280]	; (80007b0 <main+0x364>)
 8000698:	484b      	ldr	r0, [pc, #300]	; (80007c8 <main+0x37c>)
 800069a:	f000 fead 	bl	80013f8 <SSD1306_Puts>
				SSD1306_UpdateScreen(); //display
 800069e:	f000 fd71 	bl	8001184 <SSD1306_UpdateScreen>
				if (children.scrol_position >= 48) {
 80006a2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80006a6:	2b2f      	cmp	r3, #47	; 0x2f
 80006a8:	d903      	bls.n	80006b2 <main+0x266>
					children.scrol_position = 18;
 80006aa:	2312      	movs	r3, #18
 80006ac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80006b0:	e009      	b.n	80006c6 <main+0x27a>
				} else if (children.scrol_position != 48) {
 80006b2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80006b6:	2b30      	cmp	r3, #48	; 0x30
 80006b8:	d005      	beq.n	80006c6 <main+0x27a>
					children.scrol_position += 10;
 80006ba:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80006be:	330a      	adds	r3, #10
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				}
				HAL_Delay(60);
 80006c6:	203c      	movs	r0, #60	; 0x3c
 80006c8:	f001 fa66 	bl	8001b98 <HAL_Delay>
			}
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin)
 80006cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d0:	4832      	ldr	r0, [pc, #200]	; (800079c <main+0x350>)
 80006d2:	f001 fceb 	bl	80020ac <HAL_GPIO_ReadPin>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	f040 82b8 	bne.w	8000c4e <main+0x802>
					== 0) {
				SSD1306_Clear();
 80006de:	f001 f815 	bl	800170c <SSD1306_Clear>
				HAL_GPIO_WritePin(RGB_RED_GPIO_Port, RGB_RED_Pin, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e8:	482c      	ldr	r0, [pc, #176]	; (800079c <main+0x350>)
 80006ea:	f001 fcf6 	bl	80020da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f4:	4829      	ldr	r0, [pc, #164]	; (800079c <main+0x350>)
 80006f6:	f001 fcf0 	bl	80020da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 1);
 80006fa:	2201      	movs	r2, #1
 80006fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000700:	4826      	ldr	r0, [pc, #152]	; (800079c <main+0x350>)
 8000702:	f001 fcea 	bl	80020da <HAL_GPIO_WritePin>
				SSD1306_GotoXY(0, 0);
 8000706:	2100      	movs	r1, #0
 8000708:	2000      	movs	r0, #0
 800070a:	f000 fddf 	bl	80012cc <SSD1306_GotoXY>

				if (children.scrol_position == 28) {
 800070e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000712:	2b1c      	cmp	r3, #28
 8000714:	d160      	bne.n	80007d8 <main+0x38c>
					children.state_machine = GAME_1;
 8000716:	2302      	movs	r3, #2
 8000718:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					children.game_questions = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	86fb      	strh	r3, [r7, #54]	; 0x36
					SSD1306_GotoXY(0, 0);
 8000720:	2100      	movs	r1, #0
 8000722:	2000      	movs	r0, #0
 8000724:	f000 fdd2 	bl	80012cc <SSD1306_GotoXY>
					SSD1306_Puts(game1[children.game_questions].question,
 8000728:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800072a:	4a29      	ldr	r2, [pc, #164]	; (80007d0 <main+0x384>)
 800072c:	011b      	lsls	r3, r3, #4
 800072e:	4413      	add	r3, r2
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2201      	movs	r2, #1
 8000734:	491e      	ldr	r1, [pc, #120]	; (80007b0 <main+0x364>)
 8000736:	4618      	mov	r0, r3
 8000738:	f000 fe5e 	bl	80013f8 <SSD1306_Puts>
							&Font_7x10, 1);
					SSD1306_GotoXY(0, 30);
 800073c:	211e      	movs	r1, #30
 800073e:	2000      	movs	r0, #0
 8000740:	f000 fdc4 	bl	80012cc <SSD1306_GotoXY>
					SSD1306_Puts(game1[children.game_questions].yes, &Font_7x10,
 8000744:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000746:	4a22      	ldr	r2, [pc, #136]	; (80007d0 <main+0x384>)
 8000748:	011b      	lsls	r3, r3, #4
 800074a:	4413      	add	r3, r2
 800074c:	3304      	adds	r3, #4
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2201      	movs	r2, #1
 8000752:	4917      	ldr	r1, [pc, #92]	; (80007b0 <main+0x364>)
 8000754:	4618      	mov	r0, r3
 8000756:	f000 fe4f 	bl	80013f8 <SSD1306_Puts>
							1);
					SSD1306_GotoXY(80, 30);
 800075a:	211e      	movs	r1, #30
 800075c:	2050      	movs	r0, #80	; 0x50
 800075e:	f000 fdb5 	bl	80012cc <SSD1306_GotoXY>
					SSD1306_Puts(game1[children.game_questions].no, &Font_7x10,
 8000762:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000764:	4a1a      	ldr	r2, [pc, #104]	; (80007d0 <main+0x384>)
 8000766:	011b      	lsls	r3, r3, #4
 8000768:	4413      	add	r3, r2
 800076a:	3308      	adds	r3, #8
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2201      	movs	r2, #1
 8000770:	490f      	ldr	r1, [pc, #60]	; (80007b0 <main+0x364>)
 8000772:	4618      	mov	r0, r3
 8000774:	f000 fe40 	bl	80013f8 <SSD1306_Puts>
							1);
					SSD1306_GotoXY(20, 50);
 8000778:	2132      	movs	r1, #50	; 0x32
 800077a:	2014      	movs	r0, #20
 800077c:	f000 fda6 	bl	80012cc <SSD1306_GotoXY>
					SSD1306_Puts("<=>", &Font_7x10, 1);
 8000780:	2201      	movs	r2, #1
 8000782:	490b      	ldr	r1, [pc, #44]	; (80007b0 <main+0x364>)
 8000784:	4813      	ldr	r0, [pc, #76]	; (80007d4 <main+0x388>)
 8000786:	f000 fe37 	bl	80013f8 <SSD1306_Puts>
 800078a:	e0ba      	b.n	8000902 <main+0x4b6>
 800078c:	20000504 	.word	0x20000504
 8000790:	20000008 	.word	0x20000008
 8000794:	08004720 	.word	0x08004720
 8000798:	08004728 	.word	0x08004728
 800079c:	40010c00 	.word	0x40010c00
 80007a0:	08006320 	.word	0x08006320
 80007a4:	080061f4 	.word	0x080061f4
 80007a8:	080062bc 	.word	0x080062bc
 80007ac:	08006258 	.word	0x08006258
 80007b0:	20000000 	.word	0x20000000
 80007b4:	0800472c 	.word	0x0800472c
 80007b8:	08004738 	.word	0x08004738
 80007bc:	08004744 	.word	0x08004744
 80007c0:	0800474c 	.word	0x0800474c
 80007c4:	0800475c 	.word	0x0800475c
 80007c8:	08004768 	.word	0x08004768
 80007cc:	0800476c 	.word	0x0800476c
 80007d0:	08006720 	.word	0x08006720
 80007d4:	08004770 	.word	0x08004770
					//SSD1306_GotoXY(100, 50);
					//SSD1306_Puts("<=>", &Font_7x10, 1);

				} else if (children.scrol_position == 38) {
 80007d8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80007dc:	2b26      	cmp	r3, #38	; 0x26
 80007de:	d143      	bne.n	8000868 <main+0x41c>

					children.state_machine = GAME_2;
 80007e0:	2303      	movs	r3, #3
 80007e2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					children.game_questions = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	86fb      	strh	r3, [r7, #54]	; 0x36
					SSD1306_Clear();
 80007ea:	f000 ff8f 	bl	800170c <SSD1306_Clear>
					SSD1306_GotoXY(0, 0);
 80007ee:	2100      	movs	r1, #0
 80007f0:	2000      	movs	r0, #0
 80007f2:	f000 fd6b 	bl	80012cc <SSD1306_GotoXY>
					SSD1306_Puts(game2[children.game_questions].question, &Font_11x18, 1);
 80007f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80007f8:	4aaf      	ldr	r2, [pc, #700]	; (8000ab8 <main+0x66c>)
 80007fa:	011b      	lsls	r3, r3, #4
 80007fc:	4413      	add	r3, r2
 80007fe:	330c      	adds	r3, #12
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2201      	movs	r2, #1
 8000804:	49ad      	ldr	r1, [pc, #692]	; (8000abc <main+0x670>)
 8000806:	4618      	mov	r0, r3
 8000808:	f000 fdf6 	bl	80013f8 <SSD1306_Puts>
					int position_icon = 20;
 800080c:	2314      	movs	r3, #20
 800080e:	63fb      	str	r3, [r7, #60]	; 0x3c
					SSD1306_DrawBitmap(position_icon, 20, game2[children.game_questions].icon_1, 25, 25, 1);
 8000810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000812:	b218      	sxth	r0, r3
 8000814:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000816:	4aa8      	ldr	r2, [pc, #672]	; (8000ab8 <main+0x66c>)
 8000818:	011b      	lsls	r3, r3, #4
 800081a:	4413      	add	r3, r2
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	2301      	movs	r3, #1
 8000820:	9301      	str	r3, [sp, #4]
 8000822:	2319      	movs	r3, #25
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	2319      	movs	r3, #25
 8000828:	2114      	movs	r1, #20
 800082a:	f000 fb7f 	bl	8000f2c <SSD1306_DrawBitmap>
					position_icon+=60;
 800082e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000830:	333c      	adds	r3, #60	; 0x3c
 8000832:	63fb      	str	r3, [r7, #60]	; 0x3c
					SSD1306_DrawBitmap(position_icon, 20,  game2[children.game_questions].icon_2, 25, 25, 1);
 8000834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000836:	b218      	sxth	r0, r3
 8000838:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800083a:	4a9f      	ldr	r2, [pc, #636]	; (8000ab8 <main+0x66c>)
 800083c:	011b      	lsls	r3, r3, #4
 800083e:	4413      	add	r3, r2
 8000840:	3304      	adds	r3, #4
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	2301      	movs	r3, #1
 8000846:	9301      	str	r3, [sp, #4]
 8000848:	2319      	movs	r3, #25
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	2319      	movs	r3, #25
 800084e:	2114      	movs	r1, #20
 8000850:	f000 fb6c 	bl	8000f2c <SSD1306_DrawBitmap>
					SSD1306_GotoXY(22, 50);
 8000854:	2132      	movs	r1, #50	; 0x32
 8000856:	2016      	movs	r0, #22
 8000858:	f000 fd38 	bl	80012cc <SSD1306_GotoXY>
					SSD1306_Puts("<=>", &Font_7x10, 1);
 800085c:	2201      	movs	r2, #1
 800085e:	4998      	ldr	r1, [pc, #608]	; (8000ac0 <main+0x674>)
 8000860:	4898      	ldr	r0, [pc, #608]	; (8000ac4 <main+0x678>)
 8000862:	f000 fdc9 	bl	80013f8 <SSD1306_Puts>
 8000866:	e04c      	b.n	8000902 <main+0x4b6>



				} else if (children.scrol_position == 48) {
 8000868:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800086c:	2b30      	cmp	r3, #48	; 0x30
 800086e:	d10a      	bne.n	8000886 <main+0x43a>
					SSD1306_Puts("GAME 3", &Font_11x18, 1);
 8000870:	2201      	movs	r2, #1
 8000872:	4992      	ldr	r1, [pc, #584]	; (8000abc <main+0x670>)
 8000874:	4894      	ldr	r0, [pc, #592]	; (8000ac8 <main+0x67c>)
 8000876:	f000 fdbf 	bl	80013f8 <SSD1306_Puts>
					children.state_machine = GAME_3;
 800087a:	2304      	movs	r3, #4
 800087c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					children.game_questions = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	86fb      	strh	r3, [r7, #54]	; 0x36
 8000884:	e03d      	b.n	8000902 <main+0x4b6>
				} else if (children.scrol_position == 18) {
 8000886:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800088a:	2b12      	cmp	r3, #18
 800088c:	d139      	bne.n	8000902 <main+0x4b6>

					children.game_questions = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	86fb      	strh	r3, [r7, #54]	; 0x36
					children.state_machine = GAME_4;
 8000892:	2305      	movs	r3, #5
 8000894:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					SSD1306_GotoXY(40, 0);
 8000898:	2100      	movs	r1, #0
 800089a:	2028      	movs	r0, #40	; 0x28
 800089c:	f000 fd16 	bl	80012cc <SSD1306_GotoXY>
					SSD1306_Puts(game4[children.game_questions].question,
 80008a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80008a2:	4a8a      	ldr	r2, [pc, #552]	; (8000acc <main+0x680>)
 80008a4:	011b      	lsls	r3, r3, #4
 80008a6:	4413      	add	r3, r2
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2201      	movs	r2, #1
 80008ac:	4983      	ldr	r1, [pc, #524]	; (8000abc <main+0x670>)
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 fda2 	bl	80013f8 <SSD1306_Puts>
							&Font_11x18, 1);
					SSD1306_GotoXY(20, 30);
 80008b4:	211e      	movs	r1, #30
 80008b6:	2014      	movs	r0, #20
 80008b8:	f000 fd08 	bl	80012cc <SSD1306_GotoXY>
					SSD1306_Puts(game4[children.game_questions].yes,
 80008bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80008be:	4a83      	ldr	r2, [pc, #524]	; (8000acc <main+0x680>)
 80008c0:	011b      	lsls	r3, r3, #4
 80008c2:	4413      	add	r3, r2
 80008c4:	3304      	adds	r3, #4
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2201      	movs	r2, #1
 80008ca:	497c      	ldr	r1, [pc, #496]	; (8000abc <main+0x670>)
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 fd93 	bl	80013f8 <SSD1306_Puts>
							&Font_11x18, 1);
					SSD1306_GotoXY(100, 30);
 80008d2:	211e      	movs	r1, #30
 80008d4:	2064      	movs	r0, #100	; 0x64
 80008d6:	f000 fcf9 	bl	80012cc <SSD1306_GotoXY>
					SSD1306_Puts(game4[children.game_questions].no, &Font_11x18,
 80008da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80008dc:	4a7b      	ldr	r2, [pc, #492]	; (8000acc <main+0x680>)
 80008de:	011b      	lsls	r3, r3, #4
 80008e0:	4413      	add	r3, r2
 80008e2:	3308      	adds	r3, #8
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2201      	movs	r2, #1
 80008e8:	4974      	ldr	r1, [pc, #464]	; (8000abc <main+0x670>)
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 fd84 	bl	80013f8 <SSD1306_Puts>
							1);
					SSD1306_GotoXY(20, 52);
 80008f0:	2134      	movs	r1, #52	; 0x34
 80008f2:	2014      	movs	r0, #20
 80008f4:	f000 fcea 	bl	80012cc <SSD1306_GotoXY>
					SSD1306_Puts("<=>", &Font_7x10, 1);
 80008f8:	2201      	movs	r2, #1
 80008fa:	4971      	ldr	r1, [pc, #452]	; (8000ac0 <main+0x674>)
 80008fc:	4871      	ldr	r0, [pc, #452]	; (8000ac4 <main+0x678>)
 80008fe:	f000 fd7b 	bl	80013f8 <SSD1306_Puts>
				}
				SSD1306_UpdateScreen();
 8000902:	f000 fc3f 	bl	8001184 <SSD1306_UpdateScreen>
				HAL_Delay(60);
 8000906:	203c      	movs	r0, #60	; 0x3c
 8000908:	f001 f946 	bl	8001b98 <HAL_Delay>
			}
			break;
 800090c:	e19f      	b.n	8000c4e <main+0x802>
		case (GAME_1):
			//If I confirm the answer:
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin)
 800090e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000912:	486f      	ldr	r0, [pc, #444]	; (8000ad0 <main+0x684>)
 8000914:	f001 fbca 	bl	80020ac <HAL_GPIO_ReadPin>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d104      	bne.n	8000928 <main+0x4dc>
					== 0) {
				gameplay_1_confirm(&children);
 800091e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fc12 	bl	800014c <gameplay_1_confirm>
			}
			//If I change the response:
			if (HAL_GPIO_ReadPin(BUTTON_LEFT_GPIO_Port, BUTTON_LEFT_Pin) == 0) {
 8000928:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800092c:	4868      	ldr	r0, [pc, #416]	; (8000ad0 <main+0x684>)
 800092e:	f001 fbbd 	bl	80020ac <HAL_GPIO_ReadPin>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	f040 818c 	bne.w	8000c52 <main+0x806>
				if (children.selected_game_item == 0) {
 800093a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800093e:	2b00      	cmp	r3, #0
 8000940:	d118      	bne.n	8000974 <main+0x528>
					SSD1306_GotoXY(20, 50);
 8000942:	2132      	movs	r1, #50	; 0x32
 8000944:	2014      	movs	r0, #20
 8000946:	f000 fcc1 	bl	80012cc <SSD1306_GotoXY>
					SSD1306_Puts("   ", &Font_7x10, 1);
 800094a:	2201      	movs	r2, #1
 800094c:	495c      	ldr	r1, [pc, #368]	; (8000ac0 <main+0x674>)
 800094e:	4861      	ldr	r0, [pc, #388]	; (8000ad4 <main+0x688>)
 8000950:	f000 fd52 	bl	80013f8 <SSD1306_Puts>

					SSD1306_GotoXY(100, 50);
 8000954:	2132      	movs	r1, #50	; 0x32
 8000956:	2064      	movs	r0, #100	; 0x64
 8000958:	f000 fcb8 	bl	80012cc <SSD1306_GotoXY>
					SSD1306_Puts("<=>", &Font_7x10, 1);
 800095c:	2201      	movs	r2, #1
 800095e:	4958      	ldr	r1, [pc, #352]	; (8000ac0 <main+0x674>)
 8000960:	4858      	ldr	r0, [pc, #352]	; (8000ac4 <main+0x678>)
 8000962:	f000 fd49 	bl	80013f8 <SSD1306_Puts>
					children.selected_game_item++;
 8000966:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800096a:	3301      	adds	r3, #1
 800096c:	b2db      	uxtb	r3, r3
 800096e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8000972:	e014      	b.n	800099e <main+0x552>
				} else {
					SSD1306_GotoXY(20, 50);
 8000974:	2132      	movs	r1, #50	; 0x32
 8000976:	2014      	movs	r0, #20
 8000978:	f000 fca8 	bl	80012cc <SSD1306_GotoXY>
					SSD1306_Puts("<=>", &Font_7x10, 1);
 800097c:	2201      	movs	r2, #1
 800097e:	4950      	ldr	r1, [pc, #320]	; (8000ac0 <main+0x674>)
 8000980:	4850      	ldr	r0, [pc, #320]	; (8000ac4 <main+0x678>)
 8000982:	f000 fd39 	bl	80013f8 <SSD1306_Puts>

					SSD1306_GotoXY(100, 50);
 8000986:	2132      	movs	r1, #50	; 0x32
 8000988:	2064      	movs	r0, #100	; 0x64
 800098a:	f000 fc9f 	bl	80012cc <SSD1306_GotoXY>
					SSD1306_Puts("   ", &Font_7x10, 1);
 800098e:	2201      	movs	r2, #1
 8000990:	494b      	ldr	r1, [pc, #300]	; (8000ac0 <main+0x674>)
 8000992:	4850      	ldr	r0, [pc, #320]	; (8000ad4 <main+0x688>)
 8000994:	f000 fd30 	bl	80013f8 <SSD1306_Puts>
					children.selected_game_item = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				}
				SSD1306_UpdateScreen();
 800099e:	f000 fbf1 	bl	8001184 <SSD1306_UpdateScreen>
				HAL_Delay(80);
 80009a2:	2050      	movs	r0, #80	; 0x50
 80009a4:	f001 f8f8 	bl	8001b98 <HAL_Delay>
			}

			break;
 80009a8:	e153      	b.n	8000c52 <main+0x806>
		case (GAME_2):
			//If I confirm the answer:
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin)
 80009aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ae:	4848      	ldr	r0, [pc, #288]	; (8000ad0 <main+0x684>)
 80009b0:	f001 fb7c 	bl	80020ac <HAL_GPIO_ReadPin>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d104      	bne.n	80009c4 <main+0x578>
					== 0) {
				gameplay_2_confirm(&children);
 80009ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fc82 	bl	80002c8 <gameplay_2_confirm>
			}
			//If I change the response:
			if (HAL_GPIO_ReadPin(BUTTON_LEFT_GPIO_Port, BUTTON_LEFT_Pin) == 0) {
 80009c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c8:	4841      	ldr	r0, [pc, #260]	; (8000ad0 <main+0x684>)
 80009ca:	f001 fb6f 	bl	80020ac <HAL_GPIO_ReadPin>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	f040 8140 	bne.w	8000c56 <main+0x80a>
				if (children.selected_game_item == 0) {
 80009d6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d118      	bne.n	8000a10 <main+0x5c4>
					SSD1306_GotoXY(22, 50);
 80009de:	2132      	movs	r1, #50	; 0x32
 80009e0:	2016      	movs	r0, #22
 80009e2:	f000 fc73 	bl	80012cc <SSD1306_GotoXY>
					SSD1306_Puts("   ", &Font_7x10, 1);
 80009e6:	2201      	movs	r2, #1
 80009e8:	4935      	ldr	r1, [pc, #212]	; (8000ac0 <main+0x674>)
 80009ea:	483a      	ldr	r0, [pc, #232]	; (8000ad4 <main+0x688>)
 80009ec:	f000 fd04 	bl	80013f8 <SSD1306_Puts>

					SSD1306_GotoXY(80, 50);
 80009f0:	2132      	movs	r1, #50	; 0x32
 80009f2:	2050      	movs	r0, #80	; 0x50
 80009f4:	f000 fc6a 	bl	80012cc <SSD1306_GotoXY>
					SSD1306_Puts("<=>", &Font_7x10, 1);
 80009f8:	2201      	movs	r2, #1
 80009fa:	4931      	ldr	r1, [pc, #196]	; (8000ac0 <main+0x674>)
 80009fc:	4831      	ldr	r0, [pc, #196]	; (8000ac4 <main+0x678>)
 80009fe:	f000 fcfb 	bl	80013f8 <SSD1306_Puts>
					children.selected_game_item++;
 8000a02:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000a06:	3301      	adds	r3, #1
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8000a0e:	e014      	b.n	8000a3a <main+0x5ee>
				} else {
					SSD1306_GotoXY(22, 50);
 8000a10:	2132      	movs	r1, #50	; 0x32
 8000a12:	2016      	movs	r0, #22
 8000a14:	f000 fc5a 	bl	80012cc <SSD1306_GotoXY>
					SSD1306_Puts("<=>", &Font_7x10, 1);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	4929      	ldr	r1, [pc, #164]	; (8000ac0 <main+0x674>)
 8000a1c:	4829      	ldr	r0, [pc, #164]	; (8000ac4 <main+0x678>)
 8000a1e:	f000 fceb 	bl	80013f8 <SSD1306_Puts>

					SSD1306_GotoXY(80, 50);
 8000a22:	2132      	movs	r1, #50	; 0x32
 8000a24:	2050      	movs	r0, #80	; 0x50
 8000a26:	f000 fc51 	bl	80012cc <SSD1306_GotoXY>
					SSD1306_Puts("   ", &Font_7x10, 1);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4924      	ldr	r1, [pc, #144]	; (8000ac0 <main+0x674>)
 8000a2e:	4829      	ldr	r0, [pc, #164]	; (8000ad4 <main+0x688>)
 8000a30:	f000 fce2 	bl	80013f8 <SSD1306_Puts>
					children.selected_game_item = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				}
				SSD1306_UpdateScreen();
 8000a3a:	f000 fba3 	bl	8001184 <SSD1306_UpdateScreen>
				HAL_Delay(80);
 8000a3e:	2050      	movs	r0, #80	; 0x50
 8000a40:	f001 f8aa 	bl	8001b98 <HAL_Delay>
			}
			break;
 8000a44:	e107      	b.n	8000c56 <main+0x80a>
		case (GAME_3):
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin)
 8000a46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a4a:	4821      	ldr	r0, [pc, #132]	; (8000ad0 <main+0x684>)
 8000a4c:	f001 fb2e 	bl	80020ac <HAL_GPIO_ReadPin>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	f040 8101 	bne.w	8000c5a <main+0x80e>
					== 0) {
				children.state_machine = INIT;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				character_draw(1);
 8000a5e:	2001      	movs	r0, #1
 8000a60:	f000 ffe6 	bl	8001a30 <character_draw>
				SSD1306_GotoXY(0, 0);
 8000a64:	2100      	movs	r1, #0
 8000a66:	2000      	movs	r0, #0
 8000a68:	f000 fc30 	bl	80012cc <SSD1306_GotoXY>
				SSD1306_Puts("PTS:", &Font_11x18, 1);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	4913      	ldr	r1, [pc, #76]	; (8000abc <main+0x670>)
 8000a70:	4819      	ldr	r0, [pc, #100]	; (8000ad8 <main+0x68c>)
 8000a72:	f000 fcc1 	bl	80013f8 <SSD1306_Puts>
				SSD1306_GotoXY(42, 0);
 8000a76:	2100      	movs	r1, #0
 8000a78:	202a      	movs	r0, #42	; 0x2a
 8000a7a:	f000 fc27 	bl	80012cc <SSD1306_GotoXY>
				char *numberstring[(((sizeof children.points)) + 2) / 3 + 2];
				sprintf(numberstring, "%d", children.points);
 8000a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	4915      	ldr	r1, [pc, #84]	; (8000adc <main+0x690>)
 8000a86:	4618      	mov	r0, r3
 8000a88:	f003 f8ec 	bl	8003c64 <siprintf>
				SSD1306_Puts(numberstring, &Font_11x18, 1);
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	2201      	movs	r2, #1
 8000a92:	490a      	ldr	r1, [pc, #40]	; (8000abc <main+0x670>)
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 fcaf 	bl	80013f8 <SSD1306_Puts>
				SSD1306_UpdateScreen(); //display
 8000a9a:	f000 fb73 	bl	8001184 <SSD1306_UpdateScreen>
				HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa4:	480a      	ldr	r0, [pc, #40]	; (8000ad0 <main+0x684>)
 8000aa6:	f001 fb18 	bl	80020da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 1);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ab0:	4807      	ldr	r0, [pc, #28]	; (8000ad0 <main+0x684>)
 8000ab2:	f001 fb12 	bl	80020da <HAL_GPIO_WritePin>
			}
			break;
 8000ab6:	e0d0      	b.n	8000c5a <main+0x80e>
 8000ab8:	08006790 	.word	0x08006790
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	08004770 	.word	0x08004770
 8000ac8:	08004774 	.word	0x08004774
 8000acc:	080067f0 	.word	0x080067f0
 8000ad0:	40010c00 	.word	0x40010c00
 8000ad4:	0800477c 	.word	0x0800477c
 8000ad8:	08004720 	.word	0x08004720
 8000adc:	08004728 	.word	0x08004728
		case (GAME_4):
			//Confirm button
			if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin)
 8000ae0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ae4:	485f      	ldr	r0, [pc, #380]	; (8000c64 <main+0x818>)
 8000ae6:	f001 fae1 	bl	80020ac <HAL_GPIO_ReadPin>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d16c      	bne.n	8000bca <main+0x77e>
					== 0) {
				if (children.game_questions < 5) {
 8000af0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000af2:	2b04      	cmp	r3, #4
 8000af4:	d83b      	bhi.n	8000b6e <main+0x722>
					children.game_questions++;
 8000af6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000af8:	3301      	adds	r3, #1
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	86fb      	strh	r3, [r7, #54]	; 0x36
					SSD1306_Clear();
 8000afe:	f000 fe05 	bl	800170c <SSD1306_Clear>
					SSD1306_GotoXY(40, 0);
 8000b02:	2100      	movs	r1, #0
 8000b04:	2028      	movs	r0, #40	; 0x28
 8000b06:	f000 fbe1 	bl	80012cc <SSD1306_GotoXY>
					SSD1306_Puts(game4[children.game_questions].question,
 8000b0a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000b0c:	4a56      	ldr	r2, [pc, #344]	; (8000c68 <main+0x81c>)
 8000b0e:	011b      	lsls	r3, r3, #4
 8000b10:	4413      	add	r3, r2
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2201      	movs	r2, #1
 8000b16:	4955      	ldr	r1, [pc, #340]	; (8000c6c <main+0x820>)
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f000 fc6d 	bl	80013f8 <SSD1306_Puts>
							&Font_11x18, 1);
					SSD1306_GotoXY(20, 30);
 8000b1e:	211e      	movs	r1, #30
 8000b20:	2014      	movs	r0, #20
 8000b22:	f000 fbd3 	bl	80012cc <SSD1306_GotoXY>
					SSD1306_Puts(game4[children.game_questions].yes,
 8000b26:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000b28:	4a4f      	ldr	r2, [pc, #316]	; (8000c68 <main+0x81c>)
 8000b2a:	011b      	lsls	r3, r3, #4
 8000b2c:	4413      	add	r3, r2
 8000b2e:	3304      	adds	r3, #4
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2201      	movs	r2, #1
 8000b34:	494d      	ldr	r1, [pc, #308]	; (8000c6c <main+0x820>)
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 fc5e 	bl	80013f8 <SSD1306_Puts>
							&Font_11x18, 1);
					SSD1306_GotoXY(100, 30);
 8000b3c:	211e      	movs	r1, #30
 8000b3e:	2064      	movs	r0, #100	; 0x64
 8000b40:	f000 fbc4 	bl	80012cc <SSD1306_GotoXY>
					SSD1306_Puts(game4[children.game_questions].no, &Font_11x18,
 8000b44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000b46:	4a48      	ldr	r2, [pc, #288]	; (8000c68 <main+0x81c>)
 8000b48:	011b      	lsls	r3, r3, #4
 8000b4a:	4413      	add	r3, r2
 8000b4c:	3308      	adds	r3, #8
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2201      	movs	r2, #1
 8000b52:	4946      	ldr	r1, [pc, #280]	; (8000c6c <main+0x820>)
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 fc4f 	bl	80013f8 <SSD1306_Puts>
							1);
					SSD1306_GotoXY(20, 52);
 8000b5a:	2134      	movs	r1, #52	; 0x34
 8000b5c:	2014      	movs	r0, #20
 8000b5e:	f000 fbb5 	bl	80012cc <SSD1306_GotoXY>
					SSD1306_Puts("<=>", &Font_7x10, 1);
 8000b62:	2201      	movs	r2, #1
 8000b64:	4942      	ldr	r1, [pc, #264]	; (8000c70 <main+0x824>)
 8000b66:	4843      	ldr	r0, [pc, #268]	; (8000c74 <main+0x828>)
 8000b68:	f000 fc46 	bl	80013f8 <SSD1306_Puts>
 8000b6c:	e02b      	b.n	8000bc6 <main+0x77a>

				} else {

					children.state_machine = INIT;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					children.game_questions = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	86fb      	strh	r3, [r7, #54]	; 0x36
					//character_draw(1);
					SSD1306_Clear();
 8000b78:	f000 fdc8 	bl	800170c <SSD1306_Clear>
					SSD1306_GotoXY(0, 0);
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f000 fba4 	bl	80012cc <SSD1306_GotoXY>
					SSD1306_Puts("PTS:", &Font_11x18, 1);
 8000b84:	2201      	movs	r2, #1
 8000b86:	4939      	ldr	r1, [pc, #228]	; (8000c6c <main+0x820>)
 8000b88:	483b      	ldr	r0, [pc, #236]	; (8000c78 <main+0x82c>)
 8000b8a:	f000 fc35 	bl	80013f8 <SSD1306_Puts>
					SSD1306_GotoXY(42, 0);
 8000b8e:	2100      	movs	r1, #0
 8000b90:	202a      	movs	r0, #42	; 0x2a
 8000b92:	f000 fb9b 	bl	80012cc <SSD1306_GotoXY>
					char *numberstring[(((sizeof children.points)) + 2) / 3 + 2];
					sprintf(numberstring, "%d", children.points);
 8000b96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b98:	463b      	mov	r3, r7
 8000b9a:	4938      	ldr	r1, [pc, #224]	; (8000c7c <main+0x830>)
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f003 f861 	bl	8003c64 <siprintf>
					SSD1306_Puts(numberstring, &Font_11x18, 1);
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	4931      	ldr	r1, [pc, #196]	; (8000c6c <main+0x820>)
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f000 fc25 	bl	80013f8 <SSD1306_Puts>
					HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb4:	482b      	ldr	r0, [pc, #172]	; (8000c64 <main+0x818>)
 8000bb6:	f001 fa90 	bl	80020da <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, 1);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bc0:	4828      	ldr	r0, [pc, #160]	; (8000c64 <main+0x818>)
 8000bc2:	f001 fa8a 	bl	80020da <HAL_GPIO_WritePin>
				}
				SSD1306_UpdateScreen(); //display
 8000bc6:	f000 fadd 	bl	8001184 <SSD1306_UpdateScreen>
			}
			//If I change the response:
			if (HAL_GPIO_ReadPin(BUTTON_LEFT_GPIO_Port, BUTTON_LEFT_Pin) == 0) {
 8000bca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bce:	4825      	ldr	r0, [pc, #148]	; (8000c64 <main+0x818>)
 8000bd0:	f001 fa6c 	bl	80020ac <HAL_GPIO_ReadPin>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d141      	bne.n	8000c5e <main+0x812>
				if (children.selected_game_item == 0) {
 8000bda:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d118      	bne.n	8000c14 <main+0x7c8>
					SSD1306_GotoXY(20, 50);
 8000be2:	2132      	movs	r1, #50	; 0x32
 8000be4:	2014      	movs	r0, #20
 8000be6:	f000 fb71 	bl	80012cc <SSD1306_GotoXY>
					SSD1306_Puts("   ", &Font_7x10, 1);
 8000bea:	2201      	movs	r2, #1
 8000bec:	4920      	ldr	r1, [pc, #128]	; (8000c70 <main+0x824>)
 8000bee:	4824      	ldr	r0, [pc, #144]	; (8000c80 <main+0x834>)
 8000bf0:	f000 fc02 	bl	80013f8 <SSD1306_Puts>

					SSD1306_GotoXY(100, 50);
 8000bf4:	2132      	movs	r1, #50	; 0x32
 8000bf6:	2064      	movs	r0, #100	; 0x64
 8000bf8:	f000 fb68 	bl	80012cc <SSD1306_GotoXY>
					SSD1306_Puts("<=>", &Font_7x10, 1);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	491c      	ldr	r1, [pc, #112]	; (8000c70 <main+0x824>)
 8000c00:	481c      	ldr	r0, [pc, #112]	; (8000c74 <main+0x828>)
 8000c02:	f000 fbf9 	bl	80013f8 <SSD1306_Puts>
					children.selected_game_item++;
 8000c06:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8000c12:	e014      	b.n	8000c3e <main+0x7f2>
				} else {
					SSD1306_GotoXY(20, 50);
 8000c14:	2132      	movs	r1, #50	; 0x32
 8000c16:	2014      	movs	r0, #20
 8000c18:	f000 fb58 	bl	80012cc <SSD1306_GotoXY>
					SSD1306_Puts("<=>", &Font_7x10, 1);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	4914      	ldr	r1, [pc, #80]	; (8000c70 <main+0x824>)
 8000c20:	4814      	ldr	r0, [pc, #80]	; (8000c74 <main+0x828>)
 8000c22:	f000 fbe9 	bl	80013f8 <SSD1306_Puts>

					SSD1306_GotoXY(100, 50);
 8000c26:	2132      	movs	r1, #50	; 0x32
 8000c28:	2064      	movs	r0, #100	; 0x64
 8000c2a:	f000 fb4f 	bl	80012cc <SSD1306_GotoXY>
					SSD1306_Puts("   ", &Font_7x10, 1);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	490f      	ldr	r1, [pc, #60]	; (8000c70 <main+0x824>)
 8000c32:	4813      	ldr	r0, [pc, #76]	; (8000c80 <main+0x834>)
 8000c34:	f000 fbe0 	bl	80013f8 <SSD1306_Puts>
					children.selected_game_item = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				}
				SSD1306_UpdateScreen();
 8000c3e:	f000 faa1 	bl	8001184 <SSD1306_UpdateScreen>
				HAL_Delay(80);
 8000c42:	2050      	movs	r0, #80	; 0x50
 8000c44:	f000 ffa8 	bl	8001b98 <HAL_Delay>
			}
			break;
 8000c48:	e009      	b.n	8000c5e <main+0x812>
			break;
 8000c4a:	bf00      	nop
 8000c4c:	e47b      	b.n	8000546 <main+0xfa>
			break;
 8000c4e:	bf00      	nop
 8000c50:	e479      	b.n	8000546 <main+0xfa>
			break;
 8000c52:	bf00      	nop
 8000c54:	e477      	b.n	8000546 <main+0xfa>
			break;
 8000c56:	bf00      	nop
 8000c58:	e475      	b.n	8000546 <main+0xfa>
			break;
 8000c5a:	bf00      	nop
 8000c5c:	e473      	b.n	8000546 <main+0xfa>
			break;
 8000c5e:	bf00      	nop
		switch (children.state_machine) {
 8000c60:	e471      	b.n	8000546 <main+0xfa>
 8000c62:	bf00      	nop
 8000c64:	40010c00 	.word	0x40010c00
 8000c68:	080067f0 	.word	0x080067f0
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20000000 	.word	0x20000000
 8000c74:	08004770 	.word	0x08004770
 8000c78:	08004720 	.word	0x08004720
 8000c7c:	08004728 	.word	0x08004728
 8000c80:	0800477c 	.word	0x0800477c

08000c84 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b090      	sub	sp, #64	; 0x40
 8000c88:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c8a:	f107 0318 	add.w	r3, r7, #24
 8000c8e:	2228      	movs	r2, #40	; 0x28
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 ffde 	bl	8003c54 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000caa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cae:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000cb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cb4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 8000cc4:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 8000cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000cca:	f107 0318 	add.w	r3, r7, #24
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f001 ffa0 	bl	8002c14 <HAL_RCC_OscConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0x5a>
		Error_Handler();
 8000cda:	f000 f921 	bl	8000f20 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000cde:	230f      	movs	r3, #15
 8000ce0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cee:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2102      	movs	r1, #2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f002 fa0b 	bl	8003114 <HAL_RCC_ClockConfig>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <SystemClock_Config+0x84>
		Error_Handler();
 8000d04:	f000 f90c 	bl	8000f20 <Error_Handler>
	}
}
 8000d08:	bf00      	nop
 8000d0a:	3740      	adds	r7, #64	; 0x40
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <MX_I2C1_Init+0x50>)
 8000d16:	4a13      	ldr	r2, [pc, #76]	; (8000d64 <MX_I2C1_Init+0x54>)
 8000d18:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_I2C1_Init+0x50>)
 8000d1c:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <MX_I2C1_Init+0x58>)
 8000d1e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_I2C1_Init+0x50>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_I2C1_Init+0x50>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <MX_I2C1_Init+0x50>)
 8000d2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d32:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d34:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <MX_I2C1_Init+0x50>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_I2C1_Init+0x50>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <MX_I2C1_Init+0x50>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <MX_I2C1_Init+0x50>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000d4c:	4804      	ldr	r0, [pc, #16]	; (8000d60 <MX_I2C1_Init+0x50>)
 8000d4e:	f001 f9f5 	bl	800213c <HAL_I2C_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000d58:	f000 f8e2 	bl	8000f20 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	200004b0 	.word	0x200004b0
 8000d64:	40005400 	.word	0x40005400
 8000d68:	00061a80 	.word	0x00061a80

08000d6c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000d80:	463b      	mov	r3, r7
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000d88:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <MX_TIM2_Init+0x98>)
 8000d8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d8e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 6000 - 1;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <MX_TIM2_Init+0x98>)
 8000d92:	f241 726f 	movw	r2, #5999	; 0x176f
 8000d96:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d98:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <MX_TIM2_Init+0x98>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10000 - 1;
 8000d9e:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <MX_TIM2_Init+0x98>)
 8000da0:	f242 720f 	movw	r2, #9999	; 0x270f
 8000da4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <MX_TIM2_Init+0x98>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dac:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <MX_TIM2_Init+0x98>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000db2:	4814      	ldr	r0, [pc, #80]	; (8000e04 <MX_TIM2_Init+0x98>)
 8000db4:	f002 fb36 	bl	8003424 <HAL_TIM_Base_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM2_Init+0x56>
		Error_Handler();
 8000dbe:	f000 f8af 	bl	8000f20 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000dc8:	f107 0308 	add.w	r3, r7, #8
 8000dcc:	4619      	mov	r1, r3
 8000dce:	480d      	ldr	r0, [pc, #52]	; (8000e04 <MX_TIM2_Init+0x98>)
 8000dd0:	f002 fcd2 	bl	8003778 <HAL_TIM_ConfigClockSource>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM2_Init+0x72>
		Error_Handler();
 8000dda:	f000 f8a1 	bl	8000f20 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dde:	2300      	movs	r3, #0
 8000de0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000de6:	463b      	mov	r3, r7
 8000de8:	4619      	mov	r1, r3
 8000dea:	4806      	ldr	r0, [pc, #24]	; (8000e04 <MX_TIM2_Init+0x98>)
 8000dec:	f002 fe98 	bl	8003b20 <HAL_TIMEx_MasterConfigSynchronization>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8000df6:	f000 f893 	bl	8000f20 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000504 	.word	0x20000504

08000e08 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b088      	sub	sp, #32
 8000e0c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e0e:	f107 0310 	add.w	r3, r7, #16
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1c:	4b35      	ldr	r3, [pc, #212]	; (8000ef4 <MX_GPIO_Init+0xec>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a34      	ldr	r2, [pc, #208]	; (8000ef4 <MX_GPIO_Init+0xec>)
 8000e22:	f043 0310 	orr.w	r3, r3, #16
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b32      	ldr	r3, [pc, #200]	; (8000ef4 <MX_GPIO_Init+0xec>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f003 0310 	and.w	r3, r3, #16
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000e34:	4b2f      	ldr	r3, [pc, #188]	; (8000ef4 <MX_GPIO_Init+0xec>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a2e      	ldr	r2, [pc, #184]	; (8000ef4 <MX_GPIO_Init+0xec>)
 8000e3a:	f043 0320 	orr.w	r3, r3, #32
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	4b2c      	ldr	r3, [pc, #176]	; (8000ef4 <MX_GPIO_Init+0xec>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f003 0320 	and.w	r3, r3, #32
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4c:	4b29      	ldr	r3, [pc, #164]	; (8000ef4 <MX_GPIO_Init+0xec>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	4a28      	ldr	r2, [pc, #160]	; (8000ef4 <MX_GPIO_Init+0xec>)
 8000e52:	f043 0308 	orr.w	r3, r3, #8
 8000e56:	6193      	str	r3, [r2, #24]
 8000e58:	4b26      	ldr	r3, [pc, #152]	; (8000ef4 <MX_GPIO_Init+0xec>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	f003 0308 	and.w	r3, r3, #8
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e64:	4b23      	ldr	r3, [pc, #140]	; (8000ef4 <MX_GPIO_Init+0xec>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	4a22      	ldr	r2, [pc, #136]	; (8000ef4 <MX_GPIO_Init+0xec>)
 8000e6a:	f043 0304 	orr.w	r3, r3, #4
 8000e6e:	6193      	str	r3, [r2, #24]
 8000e70:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <MX_GPIO_Init+0xec>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	f003 0304 	and.w	r3, r3, #4
 8000e78:	603b      	str	r3, [r7, #0]
 8000e7a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_BUILD_GPIO_Port, LED_BUILD_Pin, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e82:	481d      	ldr	r0, [pc, #116]	; (8000ef8 <MX_GPIO_Init+0xf0>)
 8000e84:	f001 f929 	bl	80020da <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin | RGB_BLUE_Pin | RGB_GREEN_Pin,
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000e8e:	481b      	ldr	r0, [pc, #108]	; (8000efc <MX_GPIO_Init+0xf4>)
 8000e90:	f001 f923 	bl	80020da <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : LED_BUILD_Pin */
	GPIO_InitStruct.Pin = LED_BUILD_Pin;
 8000e94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e98:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_BUILD_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	f107 0310 	add.w	r3, r7, #16
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4812      	ldr	r0, [pc, #72]	; (8000ef8 <MX_GPIO_Init+0xf0>)
 8000eae:	f000 ffa3 	bl	8001df8 <HAL_GPIO_Init>

	/*Configure GPIO pins : BUTTON_LEFT_Pin BUTTON_RIGHT_Pin */
	GPIO_InitStruct.Pin = BUTTON_LEFT_Pin | BUTTON_RIGHT_Pin;
 8000eb2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000eb6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec0:	f107 0310 	add.w	r3, r7, #16
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	480d      	ldr	r0, [pc, #52]	; (8000efc <MX_GPIO_Init+0xf4>)
 8000ec8:	f000 ff96 	bl	8001df8 <HAL_GPIO_Init>

	/*Configure GPIO pins : RGB_RED_Pin RGB_BLUE_Pin RGB_GREEN_Pin */
	GPIO_InitStruct.Pin = RGB_RED_Pin | RGB_BLUE_Pin | RGB_GREEN_Pin;
 8000ecc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000ed0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2302      	movs	r3, #2
 8000edc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_GPIO_Init+0xf4>)
 8000ee6:	f000 ff87 	bl	8001df8 <HAL_GPIO_Init>

}
 8000eea:	bf00      	nop
 8000eec:	3720      	adds	r7, #32
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40011000 	.word	0x40011000
 8000efc:	40010c00 	.word	0x40010c00

08000f00 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]

	HAL_GPIO_TogglePin(RGB_RED_GPIO_Port, RGB_RED_Pin);
 8000f08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f0c:	4803      	ldr	r0, [pc, #12]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000f0e:	f001 f8fc 	bl	800210a <HAL_GPIO_TogglePin>

}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40010c00 	.word	0x40010c00

08000f20 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60ba      	str	r2, [r7, #8]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4603      	mov	r3, r0
 8000f38:	81fb      	strh	r3, [r7, #14]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	81bb      	strh	r3, [r7, #12]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000f42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f46:	3307      	adds	r3, #7
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	da00      	bge.n	8000f4e <SSD1306_DrawBitmap+0x22>
 8000f4c:	3307      	adds	r3, #7
 8000f4e:	10db      	asrs	r3, r3, #3
 8000f50:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	82bb      	strh	r3, [r7, #20]
 8000f5a:	e044      	b.n	8000fe6 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	827b      	strh	r3, [r7, #18]
 8000f60:	e02f      	b.n	8000fc2 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000f62:	8a7b      	ldrh	r3, [r7, #18]
 8000f64:	f003 0307 	and.w	r3, r3, #7
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8000f6c:	7dfb      	ldrb	r3, [r7, #23]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	75fb      	strb	r3, [r7, #23]
 8000f72:	e012      	b.n	8000f9a <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000f74:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f78:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000f7c:	fb02 f203 	mul.w	r2, r2, r3
 8000f80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	da00      	bge.n	8000f8a <SSD1306_DrawBitmap+0x5e>
 8000f88:	3307      	adds	r3, #7
 8000f8a:	10db      	asrs	r3, r3, #3
 8000f8c:	b21b      	sxth	r3, r3
 8000f8e:	4413      	add	r3, r2
 8000f90:	461a      	mov	r2, r3
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	4413      	add	r3, r2
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000f9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	da09      	bge.n	8000fb6 <SSD1306_DrawBitmap+0x8a>
 8000fa2:	89fa      	ldrh	r2, [r7, #14]
 8000fa4:	8a7b      	ldrh	r3, [r7, #18]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	89b9      	ldrh	r1, [r7, #12]
 8000fac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f000 f92d 	bl	8001210 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000fb6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	827b      	strh	r3, [r7, #18]
 8000fc2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000fc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	dbc9      	blt.n	8000f62 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8000fce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	82bb      	strh	r3, [r7, #20]
 8000fda:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	81bb      	strh	r3, [r7, #12]
 8000fe6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000fea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	dbb4      	blt.n	8000f5c <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8000ff2:	bf00      	nop
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001002:	f000 fb8d 	bl	8001720 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001006:	f644 6320 	movw	r3, #20000	; 0x4e20
 800100a:	2201      	movs	r2, #1
 800100c:	2178      	movs	r1, #120	; 0x78
 800100e:	485b      	ldr	r0, [pc, #364]	; (800117c <SSD1306_Init+0x180>)
 8001010:	f001 faca 	bl	80025a8 <HAL_I2C_IsDeviceReady>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800101a:	2300      	movs	r3, #0
 800101c:	e0a9      	b.n	8001172 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800101e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001022:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001024:	e002      	b.n	800102c <SSD1306_Init+0x30>
		p--;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3b01      	subs	r3, #1
 800102a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f9      	bne.n	8001026 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001032:	22ae      	movs	r2, #174	; 0xae
 8001034:	2100      	movs	r1, #0
 8001036:	2078      	movs	r0, #120	; 0x78
 8001038:	f000 fbce 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800103c:	2220      	movs	r2, #32
 800103e:	2100      	movs	r1, #0
 8001040:	2078      	movs	r0, #120	; 0x78
 8001042:	f000 fbc9 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001046:	2210      	movs	r2, #16
 8001048:	2100      	movs	r1, #0
 800104a:	2078      	movs	r0, #120	; 0x78
 800104c:	f000 fbc4 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001050:	22b0      	movs	r2, #176	; 0xb0
 8001052:	2100      	movs	r1, #0
 8001054:	2078      	movs	r0, #120	; 0x78
 8001056:	f000 fbbf 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800105a:	22c8      	movs	r2, #200	; 0xc8
 800105c:	2100      	movs	r1, #0
 800105e:	2078      	movs	r0, #120	; 0x78
 8001060:	f000 fbba 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001064:	2200      	movs	r2, #0
 8001066:	2100      	movs	r1, #0
 8001068:	2078      	movs	r0, #120	; 0x78
 800106a:	f000 fbb5 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800106e:	2210      	movs	r2, #16
 8001070:	2100      	movs	r1, #0
 8001072:	2078      	movs	r0, #120	; 0x78
 8001074:	f000 fbb0 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001078:	2240      	movs	r2, #64	; 0x40
 800107a:	2100      	movs	r1, #0
 800107c:	2078      	movs	r0, #120	; 0x78
 800107e:	f000 fbab 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001082:	2281      	movs	r2, #129	; 0x81
 8001084:	2100      	movs	r1, #0
 8001086:	2078      	movs	r0, #120	; 0x78
 8001088:	f000 fba6 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800108c:	22ff      	movs	r2, #255	; 0xff
 800108e:	2100      	movs	r1, #0
 8001090:	2078      	movs	r0, #120	; 0x78
 8001092:	f000 fba1 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001096:	22a1      	movs	r2, #161	; 0xa1
 8001098:	2100      	movs	r1, #0
 800109a:	2078      	movs	r0, #120	; 0x78
 800109c:	f000 fb9c 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80010a0:	22a6      	movs	r2, #166	; 0xa6
 80010a2:	2100      	movs	r1, #0
 80010a4:	2078      	movs	r0, #120	; 0x78
 80010a6:	f000 fb97 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80010aa:	22a8      	movs	r2, #168	; 0xa8
 80010ac:	2100      	movs	r1, #0
 80010ae:	2078      	movs	r0, #120	; 0x78
 80010b0:	f000 fb92 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80010b4:	223f      	movs	r2, #63	; 0x3f
 80010b6:	2100      	movs	r1, #0
 80010b8:	2078      	movs	r0, #120	; 0x78
 80010ba:	f000 fb8d 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80010be:	22a4      	movs	r2, #164	; 0xa4
 80010c0:	2100      	movs	r1, #0
 80010c2:	2078      	movs	r0, #120	; 0x78
 80010c4:	f000 fb88 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80010c8:	22d3      	movs	r2, #211	; 0xd3
 80010ca:	2100      	movs	r1, #0
 80010cc:	2078      	movs	r0, #120	; 0x78
 80010ce:	f000 fb83 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	2078      	movs	r0, #120	; 0x78
 80010d8:	f000 fb7e 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80010dc:	22d5      	movs	r2, #213	; 0xd5
 80010de:	2100      	movs	r1, #0
 80010e0:	2078      	movs	r0, #120	; 0x78
 80010e2:	f000 fb79 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80010e6:	22f0      	movs	r2, #240	; 0xf0
 80010e8:	2100      	movs	r1, #0
 80010ea:	2078      	movs	r0, #120	; 0x78
 80010ec:	f000 fb74 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80010f0:	22d9      	movs	r2, #217	; 0xd9
 80010f2:	2100      	movs	r1, #0
 80010f4:	2078      	movs	r0, #120	; 0x78
 80010f6:	f000 fb6f 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80010fa:	2222      	movs	r2, #34	; 0x22
 80010fc:	2100      	movs	r1, #0
 80010fe:	2078      	movs	r0, #120	; 0x78
 8001100:	f000 fb6a 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001104:	22da      	movs	r2, #218	; 0xda
 8001106:	2100      	movs	r1, #0
 8001108:	2078      	movs	r0, #120	; 0x78
 800110a:	f000 fb65 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800110e:	2212      	movs	r2, #18
 8001110:	2100      	movs	r1, #0
 8001112:	2078      	movs	r0, #120	; 0x78
 8001114:	f000 fb60 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001118:	22db      	movs	r2, #219	; 0xdb
 800111a:	2100      	movs	r1, #0
 800111c:	2078      	movs	r0, #120	; 0x78
 800111e:	f000 fb5b 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001122:	2220      	movs	r2, #32
 8001124:	2100      	movs	r1, #0
 8001126:	2078      	movs	r0, #120	; 0x78
 8001128:	f000 fb56 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800112c:	228d      	movs	r2, #141	; 0x8d
 800112e:	2100      	movs	r1, #0
 8001130:	2078      	movs	r0, #120	; 0x78
 8001132:	f000 fb51 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001136:	2214      	movs	r2, #20
 8001138:	2100      	movs	r1, #0
 800113a:	2078      	movs	r0, #120	; 0x78
 800113c:	f000 fb4c 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001140:	22af      	movs	r2, #175	; 0xaf
 8001142:	2100      	movs	r1, #0
 8001144:	2078      	movs	r0, #120	; 0x78
 8001146:	f000 fb47 	bl	80017d8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800114a:	222e      	movs	r2, #46	; 0x2e
 800114c:	2100      	movs	r1, #0
 800114e:	2078      	movs	r0, #120	; 0x78
 8001150:	f000 fb42 	bl	80017d8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001154:	2000      	movs	r0, #0
 8001156:	f000 f843 	bl	80011e0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800115a:	f000 f813 	bl	8001184 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <SSD1306_Init+0x184>)
 8001160:	2200      	movs	r2, #0
 8001162:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <SSD1306_Init+0x184>)
 8001166:	2200      	movs	r2, #0
 8001168:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800116a:	4b05      	ldr	r3, [pc, #20]	; (8001180 <SSD1306_Init+0x184>)
 800116c:	2201      	movs	r2, #1
 800116e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001170:	2301      	movs	r3, #1
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200004b0 	.word	0x200004b0
 8001180:	2000049c 	.word	0x2000049c

08001184 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800118a:	2300      	movs	r3, #0
 800118c:	71fb      	strb	r3, [r7, #7]
 800118e:	e01d      	b.n	80011cc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	3b50      	subs	r3, #80	; 0x50
 8001194:	b2db      	uxtb	r3, r3
 8001196:	461a      	mov	r2, r3
 8001198:	2100      	movs	r1, #0
 800119a:	2078      	movs	r0, #120	; 0x78
 800119c:	f000 fb1c 	bl	80017d8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2100      	movs	r1, #0
 80011a4:	2078      	movs	r0, #120	; 0x78
 80011a6:	f000 fb17 	bl	80017d8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80011aa:	2210      	movs	r2, #16
 80011ac:	2100      	movs	r1, #0
 80011ae:	2078      	movs	r0, #120	; 0x78
 80011b0:	f000 fb12 	bl	80017d8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	01db      	lsls	r3, r3, #7
 80011b8:	4a08      	ldr	r2, [pc, #32]	; (80011dc <SSD1306_UpdateScreen+0x58>)
 80011ba:	441a      	add	r2, r3
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	2140      	movs	r1, #64	; 0x40
 80011c0:	2078      	movs	r0, #120	; 0x78
 80011c2:	f000 fac1 	bl	8001748 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	3301      	adds	r3, #1
 80011ca:	71fb      	strb	r3, [r7, #7]
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	2b07      	cmp	r3, #7
 80011d0:	d9de      	bls.n	8001190 <SSD1306_UpdateScreen+0xc>
	}
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2000009c 	.word	0x2000009c

080011e0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d101      	bne.n	80011f4 <SSD1306_Fill+0x14>
 80011f0:	2300      	movs	r3, #0
 80011f2:	e000      	b.n	80011f6 <SSD1306_Fill+0x16>
 80011f4:	23ff      	movs	r3, #255	; 0xff
 80011f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011fa:	4619      	mov	r1, r3
 80011fc:	4803      	ldr	r0, [pc, #12]	; (800120c <SSD1306_Fill+0x2c>)
 80011fe:	f002 fd29 	bl	8003c54 <memset>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	2000009c 	.word	0x2000009c

08001210 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	80fb      	strh	r3, [r7, #6]
 800121a:	460b      	mov	r3, r1
 800121c:	80bb      	strh	r3, [r7, #4]
 800121e:	4613      	mov	r3, r2
 8001220:	70fb      	strb	r3, [r7, #3]
	if (
 8001222:	88fb      	ldrh	r3, [r7, #6]
 8001224:	2b7f      	cmp	r3, #127	; 0x7f
 8001226:	d848      	bhi.n	80012ba <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001228:	88bb      	ldrh	r3, [r7, #4]
 800122a:	2b3f      	cmp	r3, #63	; 0x3f
 800122c:	d845      	bhi.n	80012ba <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800122e:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <SSD1306_DrawPixel+0xb4>)
 8001230:	791b      	ldrb	r3, [r3, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d006      	beq.n	8001244 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001236:	78fb      	ldrb	r3, [r7, #3]
 8001238:	2b00      	cmp	r3, #0
 800123a:	bf0c      	ite	eq
 800123c:	2301      	moveq	r3, #1
 800123e:	2300      	movne	r3, #0
 8001240:	b2db      	uxtb	r3, r3
 8001242:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001244:	78fb      	ldrb	r3, [r7, #3]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d11a      	bne.n	8001280 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800124a:	88fa      	ldrh	r2, [r7, #6]
 800124c:	88bb      	ldrh	r3, [r7, #4]
 800124e:	08db      	lsrs	r3, r3, #3
 8001250:	b298      	uxth	r0, r3
 8001252:	4603      	mov	r3, r0
 8001254:	01db      	lsls	r3, r3, #7
 8001256:	4413      	add	r3, r2
 8001258:	4a1b      	ldr	r2, [pc, #108]	; (80012c8 <SSD1306_DrawPixel+0xb8>)
 800125a:	5cd3      	ldrb	r3, [r2, r3]
 800125c:	b25a      	sxtb	r2, r3
 800125e:	88bb      	ldrh	r3, [r7, #4]
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	2101      	movs	r1, #1
 8001266:	fa01 f303 	lsl.w	r3, r1, r3
 800126a:	b25b      	sxtb	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b259      	sxtb	r1, r3
 8001270:	88fa      	ldrh	r2, [r7, #6]
 8001272:	4603      	mov	r3, r0
 8001274:	01db      	lsls	r3, r3, #7
 8001276:	4413      	add	r3, r2
 8001278:	b2c9      	uxtb	r1, r1
 800127a:	4a13      	ldr	r2, [pc, #76]	; (80012c8 <SSD1306_DrawPixel+0xb8>)
 800127c:	54d1      	strb	r1, [r2, r3]
 800127e:	e01d      	b.n	80012bc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001280:	88fa      	ldrh	r2, [r7, #6]
 8001282:	88bb      	ldrh	r3, [r7, #4]
 8001284:	08db      	lsrs	r3, r3, #3
 8001286:	b298      	uxth	r0, r3
 8001288:	4603      	mov	r3, r0
 800128a:	01db      	lsls	r3, r3, #7
 800128c:	4413      	add	r3, r2
 800128e:	4a0e      	ldr	r2, [pc, #56]	; (80012c8 <SSD1306_DrawPixel+0xb8>)
 8001290:	5cd3      	ldrb	r3, [r2, r3]
 8001292:	b25a      	sxtb	r2, r3
 8001294:	88bb      	ldrh	r3, [r7, #4]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	2101      	movs	r1, #1
 800129c:	fa01 f303 	lsl.w	r3, r1, r3
 80012a0:	b25b      	sxtb	r3, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	b25b      	sxtb	r3, r3
 80012a6:	4013      	ands	r3, r2
 80012a8:	b259      	sxtb	r1, r3
 80012aa:	88fa      	ldrh	r2, [r7, #6]
 80012ac:	4603      	mov	r3, r0
 80012ae:	01db      	lsls	r3, r3, #7
 80012b0:	4413      	add	r3, r2
 80012b2:	b2c9      	uxtb	r1, r1
 80012b4:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <SSD1306_DrawPixel+0xb8>)
 80012b6:	54d1      	strb	r1, [r2, r3]
 80012b8:	e000      	b.n	80012bc <SSD1306_DrawPixel+0xac>
		return;
 80012ba:	bf00      	nop
	}
}
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	2000049c 	.word	0x2000049c
 80012c8:	2000009c 	.word	0x2000009c

080012cc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	460a      	mov	r2, r1
 80012d6:	80fb      	strh	r3, [r7, #6]
 80012d8:	4613      	mov	r3, r2
 80012da:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80012dc:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <SSD1306_GotoXY+0x28>)
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80012e2:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <SSD1306_GotoXY+0x28>)
 80012e4:	88bb      	ldrh	r3, [r7, #4]
 80012e6:	8053      	strh	r3, [r2, #2]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	2000049c 	.word	0x2000049c

080012f8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	6039      	str	r1, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
 8001304:	4613      	mov	r3, r2
 8001306:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001308:	4b3a      	ldr	r3, [pc, #232]	; (80013f4 <SSD1306_Putc+0xfc>)
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	4413      	add	r3, r2
	if (
 8001314:	2b7f      	cmp	r3, #127	; 0x7f
 8001316:	dc07      	bgt.n	8001328 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001318:	4b36      	ldr	r3, [pc, #216]	; (80013f4 <SSD1306_Putc+0xfc>)
 800131a:	885b      	ldrh	r3, [r3, #2]
 800131c:	461a      	mov	r2, r3
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	785b      	ldrb	r3, [r3, #1]
 8001322:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001324:	2b3f      	cmp	r3, #63	; 0x3f
 8001326:	dd01      	ble.n	800132c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001328:	2300      	movs	r3, #0
 800132a:	e05e      	b.n	80013ea <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	e04b      	b.n	80013ca <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	3b20      	subs	r3, #32
 800133a:	6839      	ldr	r1, [r7, #0]
 800133c:	7849      	ldrb	r1, [r1, #1]
 800133e:	fb01 f303 	mul.w	r3, r1, r3
 8001342:	4619      	mov	r1, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	440b      	add	r3, r1
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	4413      	add	r3, r2
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001350:	2300      	movs	r3, #0
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	e030      	b.n	80013b8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d010      	beq.n	8001388 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001366:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <SSD1306_Putc+0xfc>)
 8001368:	881a      	ldrh	r2, [r3, #0]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	b29b      	uxth	r3, r3
 800136e:	4413      	add	r3, r2
 8001370:	b298      	uxth	r0, r3
 8001372:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <SSD1306_Putc+0xfc>)
 8001374:	885a      	ldrh	r2, [r3, #2]
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	b29b      	uxth	r3, r3
 800137a:	4413      	add	r3, r2
 800137c:	b29b      	uxth	r3, r3
 800137e:	79ba      	ldrb	r2, [r7, #6]
 8001380:	4619      	mov	r1, r3
 8001382:	f7ff ff45 	bl	8001210 <SSD1306_DrawPixel>
 8001386:	e014      	b.n	80013b2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001388:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <SSD1306_Putc+0xfc>)
 800138a:	881a      	ldrh	r2, [r3, #0]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	b29b      	uxth	r3, r3
 8001390:	4413      	add	r3, r2
 8001392:	b298      	uxth	r0, r3
 8001394:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <SSD1306_Putc+0xfc>)
 8001396:	885a      	ldrh	r2, [r3, #2]
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	b29b      	uxth	r3, r3
 800139c:	4413      	add	r3, r2
 800139e:	b299      	uxth	r1, r3
 80013a0:	79bb      	ldrb	r3, [r7, #6]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	bf0c      	ite	eq
 80013a6:	2301      	moveq	r3, #1
 80013a8:	2300      	movne	r3, #0
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	461a      	mov	r2, r3
 80013ae:	f7ff ff2f 	bl	8001210 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	3301      	adds	r3, #1
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d3c8      	bcc.n	8001356 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	3301      	adds	r3, #1
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	785b      	ldrb	r3, [r3, #1]
 80013ce:	461a      	mov	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d3ad      	bcc.n	8001332 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80013d6:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <SSD1306_Putc+0xfc>)
 80013d8:	881a      	ldrh	r2, [r3, #0]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	4413      	add	r3, r2
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <SSD1306_Putc+0xfc>)
 80013e6:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80013e8:	79fb      	ldrb	r3, [r7, #7]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2000049c 	.word	0x2000049c

080013f8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	4613      	mov	r3, r2
 8001404:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001406:	e012      	b.n	800142e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	79fa      	ldrb	r2, [r7, #7]
 800140e:	68b9      	ldr	r1, [r7, #8]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff71 	bl	80012f8 <SSD1306_Putc>
 8001416:	4603      	mov	r3, r0
 8001418:	461a      	mov	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	429a      	cmp	r2, r3
 8001420:	d002      	beq.n	8001428 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	e008      	b.n	800143a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	3301      	adds	r3, #1
 800142c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1e8      	bne.n	8001408 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	781b      	ldrb	r3, [r3, #0]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001442:	b590      	push	{r4, r7, lr}
 8001444:	b087      	sub	sp, #28
 8001446:	af00      	add	r7, sp, #0
 8001448:	4604      	mov	r4, r0
 800144a:	4608      	mov	r0, r1
 800144c:	4611      	mov	r1, r2
 800144e:	461a      	mov	r2, r3
 8001450:	4623      	mov	r3, r4
 8001452:	80fb      	strh	r3, [r7, #6]
 8001454:	4603      	mov	r3, r0
 8001456:	80bb      	strh	r3, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	807b      	strh	r3, [r7, #2]
 800145c:	4613      	mov	r3, r2
 800145e:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	2b7f      	cmp	r3, #127	; 0x7f
 8001464:	d901      	bls.n	800146a <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8001466:	237f      	movs	r3, #127	; 0x7f
 8001468:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 800146a:	887b      	ldrh	r3, [r7, #2]
 800146c:	2b7f      	cmp	r3, #127	; 0x7f
 800146e:	d901      	bls.n	8001474 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8001470:	237f      	movs	r3, #127	; 0x7f
 8001472:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001474:	88bb      	ldrh	r3, [r7, #4]
 8001476:	2b3f      	cmp	r3, #63	; 0x3f
 8001478:	d901      	bls.n	800147e <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 800147a:	233f      	movs	r3, #63	; 0x3f
 800147c:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 800147e:	883b      	ldrh	r3, [r7, #0]
 8001480:	2b3f      	cmp	r3, #63	; 0x3f
 8001482:	d901      	bls.n	8001488 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001484:	233f      	movs	r3, #63	; 0x3f
 8001486:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001488:	88fa      	ldrh	r2, [r7, #6]
 800148a:	887b      	ldrh	r3, [r7, #2]
 800148c:	429a      	cmp	r2, r3
 800148e:	d205      	bcs.n	800149c <SSD1306_DrawLine+0x5a>
 8001490:	887a      	ldrh	r2, [r7, #2]
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	b29b      	uxth	r3, r3
 8001498:	b21b      	sxth	r3, r3
 800149a:	e004      	b.n	80014a6 <SSD1306_DrawLine+0x64>
 800149c:	88fa      	ldrh	r2, [r7, #6]
 800149e:	887b      	ldrh	r3, [r7, #2]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	b21b      	sxth	r3, r3
 80014a6:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80014a8:	88ba      	ldrh	r2, [r7, #4]
 80014aa:	883b      	ldrh	r3, [r7, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d205      	bcs.n	80014bc <SSD1306_DrawLine+0x7a>
 80014b0:	883a      	ldrh	r2, [r7, #0]
 80014b2:	88bb      	ldrh	r3, [r7, #4]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	b21b      	sxth	r3, r3
 80014ba:	e004      	b.n	80014c6 <SSD1306_DrawLine+0x84>
 80014bc:	88ba      	ldrh	r2, [r7, #4]
 80014be:	883b      	ldrh	r3, [r7, #0]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	b21b      	sxth	r3, r3
 80014c6:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 80014c8:	88fa      	ldrh	r2, [r7, #6]
 80014ca:	887b      	ldrh	r3, [r7, #2]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d201      	bcs.n	80014d4 <SSD1306_DrawLine+0x92>
 80014d0:	2301      	movs	r3, #1
 80014d2:	e001      	b.n	80014d8 <SSD1306_DrawLine+0x96>
 80014d4:	f04f 33ff 	mov.w	r3, #4294967295
 80014d8:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 80014da:	88ba      	ldrh	r2, [r7, #4]
 80014dc:	883b      	ldrh	r3, [r7, #0]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d201      	bcs.n	80014e6 <SSD1306_DrawLine+0xa4>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e001      	b.n	80014ea <SSD1306_DrawLine+0xa8>
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80014ec:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80014f0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	dd06      	ble.n	8001506 <SSD1306_DrawLine+0xc4>
 80014f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80014fc:	0fda      	lsrs	r2, r3, #31
 80014fe:	4413      	add	r3, r2
 8001500:	105b      	asrs	r3, r3, #1
 8001502:	b21b      	sxth	r3, r3
 8001504:	e006      	b.n	8001514 <SSD1306_DrawLine+0xd2>
 8001506:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800150a:	425b      	negs	r3, r3
 800150c:	0fda      	lsrs	r2, r3, #31
 800150e:	4413      	add	r3, r2
 8001510:	105b      	asrs	r3, r3, #1
 8001512:	b21b      	sxth	r3, r3
 8001514:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001516:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d129      	bne.n	8001572 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 800151e:	883a      	ldrh	r2, [r7, #0]
 8001520:	88bb      	ldrh	r3, [r7, #4]
 8001522:	429a      	cmp	r2, r3
 8001524:	d205      	bcs.n	8001532 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8001526:	883b      	ldrh	r3, [r7, #0]
 8001528:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800152a:	88bb      	ldrh	r3, [r7, #4]
 800152c:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800152e:	893b      	ldrh	r3, [r7, #8]
 8001530:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001532:	887a      	ldrh	r2, [r7, #2]
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	429a      	cmp	r2, r3
 8001538:	d205      	bcs.n	8001546 <SSD1306_DrawLine+0x104>
			tmp = x1;
 800153a:	887b      	ldrh	r3, [r7, #2]
 800153c:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001542:	893b      	ldrh	r3, [r7, #8]
 8001544:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001546:	88bb      	ldrh	r3, [r7, #4]
 8001548:	82bb      	strh	r3, [r7, #20]
 800154a:	e00c      	b.n	8001566 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 800154c:	8ab9      	ldrh	r1, [r7, #20]
 800154e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fe5b 	bl	8001210 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 800155a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800155e:	b29b      	uxth	r3, r3
 8001560:	3301      	adds	r3, #1
 8001562:	b29b      	uxth	r3, r3
 8001564:	82bb      	strh	r3, [r7, #20]
 8001566:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800156a:	883b      	ldrh	r3, [r7, #0]
 800156c:	429a      	cmp	r2, r3
 800156e:	dded      	ble.n	800154c <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8001570:	e05f      	b.n	8001632 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8001572:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d129      	bne.n	80015ce <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 800157a:	883a      	ldrh	r2, [r7, #0]
 800157c:	88bb      	ldrh	r3, [r7, #4]
 800157e:	429a      	cmp	r2, r3
 8001580:	d205      	bcs.n	800158e <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8001582:	883b      	ldrh	r3, [r7, #0]
 8001584:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001586:	88bb      	ldrh	r3, [r7, #4]
 8001588:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800158a:	893b      	ldrh	r3, [r7, #8]
 800158c:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	88fb      	ldrh	r3, [r7, #6]
 8001592:	429a      	cmp	r2, r3
 8001594:	d205      	bcs.n	80015a2 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8001596:	887b      	ldrh	r3, [r7, #2]
 8001598:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800159e:	893b      	ldrh	r3, [r7, #8]
 80015a0:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	82bb      	strh	r3, [r7, #20]
 80015a6:	e00c      	b.n	80015c2 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 80015a8:	8abb      	ldrh	r3, [r7, #20]
 80015aa:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80015ae:	88b9      	ldrh	r1, [r7, #4]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fe2d 	bl	8001210 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 80015b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	3301      	adds	r3, #1
 80015be:	b29b      	uxth	r3, r3
 80015c0:	82bb      	strh	r3, [r7, #20]
 80015c2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80015c6:	887b      	ldrh	r3, [r7, #2]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	dded      	ble.n	80015a8 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 80015cc:	e031      	b.n	8001632 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 80015ce:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80015d2:	88b9      	ldrh	r1, [r7, #4]
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fe1a 	bl	8001210 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80015dc:	88fa      	ldrh	r2, [r7, #6]
 80015de:	887b      	ldrh	r3, [r7, #2]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d103      	bne.n	80015ec <SSD1306_DrawLine+0x1aa>
 80015e4:	88ba      	ldrh	r2, [r7, #4]
 80015e6:	883b      	ldrh	r3, [r7, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d021      	beq.n	8001630 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 80015ec:	8afb      	ldrh	r3, [r7, #22]
 80015ee:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 80015f0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80015f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80015f8:	425b      	negs	r3, r3
 80015fa:	429a      	cmp	r2, r3
 80015fc:	dd08      	ble.n	8001610 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 80015fe:	8afa      	ldrh	r2, [r7, #22]
 8001600:	8a3b      	ldrh	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	b29b      	uxth	r3, r3
 8001606:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001608:	89fa      	ldrh	r2, [r7, #14]
 800160a:	88fb      	ldrh	r3, [r7, #6]
 800160c:	4413      	add	r3, r2
 800160e:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001610:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001614:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001618:	429a      	cmp	r2, r3
 800161a:	dad8      	bge.n	80015ce <SSD1306_DrawLine+0x18c>
			err += dx;
 800161c:	8afa      	ldrh	r2, [r7, #22]
 800161e:	8a7b      	ldrh	r3, [r7, #18]
 8001620:	4413      	add	r3, r2
 8001622:	b29b      	uxth	r3, r3
 8001624:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001626:	89ba      	ldrh	r2, [r7, #12]
 8001628:	88bb      	ldrh	r3, [r7, #4]
 800162a:	4413      	add	r3, r2
 800162c:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 800162e:	e7ce      	b.n	80015ce <SSD1306_DrawLine+0x18c>
			break;
 8001630:	bf00      	nop
		} 
	}
}
 8001632:	371c      	adds	r7, #28
 8001634:	46bd      	mov	sp, r7
 8001636:	bd90      	pop	{r4, r7, pc}

08001638 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b085      	sub	sp, #20
 800163c:	af02      	add	r7, sp, #8
 800163e:	4604      	mov	r4, r0
 8001640:	4608      	mov	r0, r1
 8001642:	4611      	mov	r1, r2
 8001644:	461a      	mov	r2, r3
 8001646:	4623      	mov	r3, r4
 8001648:	80fb      	strh	r3, [r7, #6]
 800164a:	4603      	mov	r3, r0
 800164c:	80bb      	strh	r3, [r7, #4]
 800164e:	460b      	mov	r3, r1
 8001650:	807b      	strh	r3, [r7, #2]
 8001652:	4613      	mov	r3, r2
 8001654:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	2b7f      	cmp	r3, #127	; 0x7f
 800165a:	d853      	bhi.n	8001704 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 800165c:	88bb      	ldrh	r3, [r7, #4]
 800165e:	2b3f      	cmp	r3, #63	; 0x3f
 8001660:	d850      	bhi.n	8001704 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001662:	88fa      	ldrh	r2, [r7, #6]
 8001664:	887b      	ldrh	r3, [r7, #2]
 8001666:	4413      	add	r3, r2
 8001668:	2b7f      	cmp	r3, #127	; 0x7f
 800166a:	dd03      	ble.n	8001674 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 800166c:	88fb      	ldrh	r3, [r7, #6]
 800166e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001672:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001674:	88ba      	ldrh	r2, [r7, #4]
 8001676:	883b      	ldrh	r3, [r7, #0]
 8001678:	4413      	add	r3, r2
 800167a:	2b3f      	cmp	r3, #63	; 0x3f
 800167c:	dd03      	ble.n	8001686 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 800167e:	88bb      	ldrh	r3, [r7, #4]
 8001680:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001684:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8001686:	88fa      	ldrh	r2, [r7, #6]
 8001688:	887b      	ldrh	r3, [r7, #2]
 800168a:	4413      	add	r3, r2
 800168c:	b29a      	uxth	r2, r3
 800168e:	88bc      	ldrh	r4, [r7, #4]
 8001690:	88b9      	ldrh	r1, [r7, #4]
 8001692:	88f8      	ldrh	r0, [r7, #6]
 8001694:	7e3b      	ldrb	r3, [r7, #24]
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	4623      	mov	r3, r4
 800169a:	f7ff fed2 	bl	8001442 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 800169e:	88ba      	ldrh	r2, [r7, #4]
 80016a0:	883b      	ldrh	r3, [r7, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	b299      	uxth	r1, r3
 80016a6:	88fa      	ldrh	r2, [r7, #6]
 80016a8:	887b      	ldrh	r3, [r7, #2]
 80016aa:	4413      	add	r3, r2
 80016ac:	b29c      	uxth	r4, r3
 80016ae:	88ba      	ldrh	r2, [r7, #4]
 80016b0:	883b      	ldrh	r3, [r7, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	88f8      	ldrh	r0, [r7, #6]
 80016b8:	7e3b      	ldrb	r3, [r7, #24]
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	4613      	mov	r3, r2
 80016be:	4622      	mov	r2, r4
 80016c0:	f7ff febf 	bl	8001442 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 80016c4:	88ba      	ldrh	r2, [r7, #4]
 80016c6:	883b      	ldrh	r3, [r7, #0]
 80016c8:	4413      	add	r3, r2
 80016ca:	b29c      	uxth	r4, r3
 80016cc:	88fa      	ldrh	r2, [r7, #6]
 80016ce:	88b9      	ldrh	r1, [r7, #4]
 80016d0:	88f8      	ldrh	r0, [r7, #6]
 80016d2:	7e3b      	ldrb	r3, [r7, #24]
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	4623      	mov	r3, r4
 80016d8:	f7ff feb3 	bl	8001442 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 80016dc:	88fa      	ldrh	r2, [r7, #6]
 80016de:	887b      	ldrh	r3, [r7, #2]
 80016e0:	4413      	add	r3, r2
 80016e2:	b298      	uxth	r0, r3
 80016e4:	88fa      	ldrh	r2, [r7, #6]
 80016e6:	887b      	ldrh	r3, [r7, #2]
 80016e8:	4413      	add	r3, r2
 80016ea:	b29c      	uxth	r4, r3
 80016ec:	88ba      	ldrh	r2, [r7, #4]
 80016ee:	883b      	ldrh	r3, [r7, #0]
 80016f0:	4413      	add	r3, r2
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	88b9      	ldrh	r1, [r7, #4]
 80016f6:	7e3b      	ldrb	r3, [r7, #24]
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	4613      	mov	r3, r2
 80016fc:	4622      	mov	r2, r4
 80016fe:	f7ff fea0 	bl	8001442 <SSD1306_DrawLine>
 8001702:	e000      	b.n	8001706 <SSD1306_DrawRectangle+0xce>
		return;
 8001704:	bf00      	nop
}
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	bd90      	pop	{r4, r7, pc}

0800170c <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001710:	2000      	movs	r0, #0
 8001712:	f7ff fd65 	bl	80011e0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001716:	f7ff fd35 	bl	8001184 <SSD1306_UpdateScreen>
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001726:	4b07      	ldr	r3, [pc, #28]	; (8001744 <ssd1306_I2C_Init+0x24>)
 8001728:	607b      	str	r3, [r7, #4]
	while(p>0)
 800172a:	e002      	b.n	8001732 <ssd1306_I2C_Init+0x12>
		p--;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1f9      	bne.n	800172c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	0003d090 	.word	0x0003d090

08001748 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b0c7      	sub	sp, #284	; 0x11c
 800174c:	af02      	add	r7, sp, #8
 800174e:	4604      	mov	r4, r0
 8001750:	4608      	mov	r0, r1
 8001752:	4639      	mov	r1, r7
 8001754:	600a      	str	r2, [r1, #0]
 8001756:	4619      	mov	r1, r3
 8001758:	1dfb      	adds	r3, r7, #7
 800175a:	4622      	mov	r2, r4
 800175c:	701a      	strb	r2, [r3, #0]
 800175e:	1dbb      	adds	r3, r7, #6
 8001760:	4602      	mov	r2, r0
 8001762:	701a      	strb	r2, [r3, #0]
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	460a      	mov	r2, r1
 8001768:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800176a:	f107 030c 	add.w	r3, r7, #12
 800176e:	1dba      	adds	r2, r7, #6
 8001770:	7812      	ldrb	r2, [r2, #0]
 8001772:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001774:	2300      	movs	r3, #0
 8001776:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800177a:	e010      	b.n	800179e <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 800177c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001780:	463a      	mov	r2, r7
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	441a      	add	r2, r3
 8001786:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800178a:	3301      	adds	r3, #1
 800178c:	7811      	ldrb	r1, [r2, #0]
 800178e:	f107 020c 	add.w	r2, r7, #12
 8001792:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001794:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001798:	3301      	adds	r3, #1
 800179a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800179e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	1d3a      	adds	r2, r7, #4
 80017a6:	8812      	ldrh	r2, [r2, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d8e7      	bhi.n	800177c <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80017ac:	1dfb      	adds	r3, r7, #7
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	b299      	uxth	r1, r3
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	881b      	ldrh	r3, [r3, #0]
 80017b6:	3301      	adds	r3, #1
 80017b8:	b298      	uxth	r0, r3
 80017ba:	f107 020c 	add.w	r2, r7, #12
 80017be:	230a      	movs	r3, #10
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	4603      	mov	r3, r0
 80017c4:	4803      	ldr	r0, [pc, #12]	; (80017d4 <ssd1306_I2C_WriteMulti+0x8c>)
 80017c6:	f000 fdf1 	bl	80023ac <HAL_I2C_Master_Transmit>
}
 80017ca:	bf00      	nop
 80017cc:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd90      	pop	{r4, r7, pc}
 80017d4:	200004b0 	.word	0x200004b0

080017d8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af02      	add	r7, sp, #8
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
 80017e2:	460b      	mov	r3, r1
 80017e4:	71bb      	strb	r3, [r7, #6]
 80017e6:	4613      	mov	r3, r2
 80017e8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80017ea:	79bb      	ldrb	r3, [r7, #6]
 80017ec:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80017ee:	797b      	ldrb	r3, [r7, #5]
 80017f0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	b299      	uxth	r1, r3
 80017f6:	f107 020c 	add.w	r2, r7, #12
 80017fa:	230a      	movs	r3, #10
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	2302      	movs	r3, #2
 8001800:	4803      	ldr	r0, [pc, #12]	; (8001810 <ssd1306_I2C_Write+0x38>)
 8001802:	f000 fdd3 	bl	80023ac <HAL_I2C_Master_Transmit>
}
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200004b0 	.word	0x200004b0

08001814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800181a:	4b19      	ldr	r3, [pc, #100]	; (8001880 <HAL_MspInit+0x6c>)
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	4a18      	ldr	r2, [pc, #96]	; (8001880 <HAL_MspInit+0x6c>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6193      	str	r3, [r2, #24]
 8001826:	4b16      	ldr	r3, [pc, #88]	; (8001880 <HAL_MspInit+0x6c>)
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <HAL_MspInit+0x6c>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	4a12      	ldr	r2, [pc, #72]	; (8001880 <HAL_MspInit+0x6c>)
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183c:	61d3      	str	r3, [r2, #28]
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <HAL_MspInit+0x6c>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2100      	movs	r1, #0
 800184e:	2005      	movs	r0, #5
 8001850:	f000 fa9b 	bl	8001d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001854:	2005      	movs	r0, #5
 8001856:	f000 fab4 	bl	8001dc2 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <HAL_MspInit+0x70>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	4a04      	ldr	r2, [pc, #16]	; (8001884 <HAL_MspInit+0x70>)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000
 8001884:	40010000 	.word	0x40010000

08001888 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 0310 	add.w	r3, r7, #16
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a15      	ldr	r2, [pc, #84]	; (80018f8 <HAL_I2C_MspInit+0x70>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d123      	bne.n	80018f0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a8:	4b14      	ldr	r3, [pc, #80]	; (80018fc <HAL_I2C_MspInit+0x74>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	4a13      	ldr	r2, [pc, #76]	; (80018fc <HAL_I2C_MspInit+0x74>)
 80018ae:	f043 0308 	orr.w	r3, r3, #8
 80018b2:	6193      	str	r3, [r2, #24]
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <HAL_I2C_MspInit+0x74>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	f003 0308 	and.w	r3, r3, #8
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018c0:	23c0      	movs	r3, #192	; 0xc0
 80018c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c4:	2312      	movs	r3, #18
 80018c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c8:	2303      	movs	r3, #3
 80018ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	4619      	mov	r1, r3
 80018d2:	480b      	ldr	r0, [pc, #44]	; (8001900 <HAL_I2C_MspInit+0x78>)
 80018d4:	f000 fa90 	bl	8001df8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <HAL_I2C_MspInit+0x74>)
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	4a07      	ldr	r2, [pc, #28]	; (80018fc <HAL_I2C_MspInit+0x74>)
 80018de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018e2:	61d3      	str	r3, [r2, #28]
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <HAL_I2C_MspInit+0x74>)
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018f0:	bf00      	nop
 80018f2:	3720      	adds	r7, #32
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40005400 	.word	0x40005400
 80018fc:	40021000 	.word	0x40021000
 8001900:	40010c00 	.word	0x40010c00

08001904 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001914:	d113      	bne.n	800193e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001916:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <HAL_TIM_Base_MspInit+0x44>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <HAL_TIM_Base_MspInit+0x44>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	61d3      	str	r3, [r2, #28]
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_TIM_Base_MspInit+0x44>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800192e:	2200      	movs	r2, #0
 8001930:	2100      	movs	r1, #0
 8001932:	201c      	movs	r0, #28
 8001934:	f000 fa29 	bl	8001d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001938:	201c      	movs	r0, #28
 800193a:	f000 fa42 	bl	8001dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40021000 	.word	0x40021000

0800194c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195c:	e7fe      	b.n	800195c <HardFault_Handler+0x4>

0800195e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001962:	e7fe      	b.n	8001962 <MemManage_Handler+0x4>

08001964 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <BusFault_Handler+0x4>

0800196a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800196e:	e7fe      	b.n	800196e <UsageFault_Handler+0x4>

08001970 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001998:	f000 f8e2 	bl	8001b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}

080019a0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_IRQn 0 */
	HAL_GPIO_TogglePin(RGB_RED_GPIO_Port, RGB_RED_Pin);
 80019a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <RCC_IRQHandler+0x14>)
 80019aa:	f000 fbae 	bl	800210a <HAL_GPIO_TogglePin>
  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40010c00 	.word	0x40010c00

080019b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <TIM2_IRQHandler+0x10>)
 80019be:	f001 fdd3 	bl	8003568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000504 	.word	0x20000504

080019cc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <_sbrk+0x50>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d102      	bne.n	80019e2 <_sbrk+0x16>
		heap_end = &end;
 80019dc:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <_sbrk+0x50>)
 80019de:	4a10      	ldr	r2, [pc, #64]	; (8001a20 <_sbrk+0x54>)
 80019e0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <_sbrk+0x50>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <_sbrk+0x50>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4413      	add	r3, r2
 80019f0:	466a      	mov	r2, sp
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d907      	bls.n	8001a06 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80019f6:	f002 f903 	bl	8003c00 <__errno>
 80019fa:	4602      	mov	r2, r0
 80019fc:	230c      	movs	r3, #12
 80019fe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a00:	f04f 33ff 	mov.w	r3, #4294967295
 8001a04:	e006      	b.n	8001a14 <_sbrk+0x48>
	}

	heap_end += incr;
 8001a06:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <_sbrk+0x50>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	4a03      	ldr	r2, [pc, #12]	; (8001a1c <_sbrk+0x50>)
 8001a10:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a12:	68fb      	ldr	r3, [r7, #12]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	200004a4 	.word	0x200004a4
 8001a20:	20000558 	.word	0x20000558

08001a24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <character_draw>:
				(SSD1306_HEIGHT / 2) - i2, i, i, color);
		SSD1306_UpdateScreen();
		HAL_Delay(10);
	}
}
void character_draw(uint8_t color) {
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b087      	sub	sp, #28
 8001a34:	af02      	add	r7, sp, #8
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
	uint8_t n, i, i2;

	SSD1306_Clear();
 8001a3a:	f7ff fe67 	bl	800170c <SSD1306_Clear>

	n = min(SSD1306_WIDTH, SSD1306_HEIGHT);
 8001a3e:	2340      	movs	r3, #64	; 0x40
 8001a40:	73bb      	strb	r3, [r7, #14]

	for (i = 2; i < 30; i += 6) {
 8001a42:	2302      	movs	r3, #2
 8001a44:	73fb      	strb	r3, [r7, #15]
 8001a46:	e018      	b.n	8001a7a <character_draw+0x4a>
		i2 = i / 2;
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	085b      	lsrs	r3, r3, #1
 8001a4c:	737b      	strb	r3, [r7, #13]
		SSD1306_DrawRectangle((SSD1306_WIDTH / 2) - i2,
 8001a4e:	7b7b      	ldrb	r3, [r7, #13]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001a56:	b298      	uxth	r0, r3
 8001a58:	7b7b      	ldrb	r3, [r7, #13]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	f1c3 032a 	rsb	r3, r3, #42	; 0x2a
 8001a60:	b299      	uxth	r1, r3
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	b29c      	uxth	r4, r3
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	4623      	mov	r3, r4
 8001a70:	f7ff fde2 	bl	8001638 <SSD1306_DrawRectangle>
	for (i = 2; i < 30; i += 6) {
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	3306      	adds	r3, #6
 8001a78:	73fb      	strb	r3, [r7, #15]
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	2b1d      	cmp	r3, #29
 8001a7e:	d9e3      	bls.n	8001a48 <character_draw+0x18>
				(SSD1306_HEIGHT / 2) - i2 + 10, i, i, color);
		//SSD1306_UpdateScreen();
		//HAL_Delay (10);
	}
}
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd90      	pop	{r4, r7, pc}

08001a88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001a88:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001a8a:	e003      	b.n	8001a94 <LoopCopyDataInit>

08001a8c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001a8e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001a90:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001a92:	3104      	adds	r1, #4

08001a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001a94:	480a      	ldr	r0, [pc, #40]	; (8001ac0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001a98:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001a9a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001a9c:	d3f6      	bcc.n	8001a8c <CopyDataInit>
  ldr r2, =_sbss
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001aa0:	e002      	b.n	8001aa8 <LoopFillZerobss>

08001aa2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001aa4:	f842 3b04 	str.w	r3, [r2], #4

08001aa8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001aaa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001aac:	d3f9      	bcc.n	8001aa2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001aae:	f7ff ffb9 	bl	8001a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ab2:	f002 f8ab 	bl	8003c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ab6:	f7fe fcc9 	bl	800044c <main>
  bx lr
 8001aba:	4770      	bx	lr
  ldr r3, =_sidata
 8001abc:	080068a4 	.word	0x080068a4
  ldr r0, =_sdata
 8001ac0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001ac4:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 8001ac8:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 8001acc:	20000554 	.word	0x20000554

08001ad0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ad0:	e7fe      	b.n	8001ad0 <ADC1_2_IRQHandler>
	...

08001ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <HAL_Init+0x28>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a07      	ldr	r2, [pc, #28]	; (8001afc <HAL_Init+0x28>)
 8001ade:	f043 0310 	orr.w	r3, r3, #16
 8001ae2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae4:	2003      	movs	r0, #3
 8001ae6:	f000 f945 	bl	8001d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aea:	2000      	movs	r0, #0
 8001aec:	f000 f808 	bl	8001b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af0:	f7ff fe90 	bl	8001814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40022000 	.word	0x40022000

08001b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_InitTick+0x54>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_InitTick+0x58>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	4619      	mov	r1, r3
 8001b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 f95d 	bl	8001dde <HAL_SYSTICK_Config>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e00e      	b.n	8001b4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b0f      	cmp	r3, #15
 8001b32:	d80a      	bhi.n	8001b4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b34:	2200      	movs	r2, #0
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3c:	f000 f925 	bl	8001d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b40:	4a06      	ldr	r2, [pc, #24]	; (8001b5c <HAL_InitTick+0x5c>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e000      	b.n	8001b4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000010 	.word	0x20000010
 8001b58:	20000018 	.word	0x20000018
 8001b5c:	20000014 	.word	0x20000014

08001b60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_IncTick+0x1c>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <HAL_IncTick+0x20>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	4a03      	ldr	r2, [pc, #12]	; (8001b80 <HAL_IncTick+0x20>)
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	20000018 	.word	0x20000018
 8001b80:	2000054c 	.word	0x2000054c

08001b84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return uwTick;
 8001b88:	4b02      	ldr	r3, [pc, #8]	; (8001b94 <HAL_GetTick+0x10>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	2000054c 	.word	0x2000054c

08001b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba0:	f7ff fff0 	bl	8001b84 <HAL_GetTick>
 8001ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb0:	d005      	beq.n	8001bbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_Delay+0x40>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4413      	add	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bbe:	bf00      	nop
 8001bc0:	f7ff ffe0 	bl	8001b84 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d8f7      	bhi.n	8001bc0 <HAL_Delay+0x28>
  {
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000018 	.word	0x20000018

08001bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <__NVIC_SetPriorityGrouping+0x44>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c0e:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <__NVIC_SetPriorityGrouping+0x44>)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	60d3      	str	r3, [r2, #12]
}
 8001c14:	bf00      	nop
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <__NVIC_GetPriorityGrouping+0x18>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	0a1b      	lsrs	r3, r3, #8
 8001c2e:	f003 0307 	and.w	r3, r3, #7
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	db0b      	blt.n	8001c6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	f003 021f 	and.w	r2, r3, #31
 8001c58:	4906      	ldr	r1, [pc, #24]	; (8001c74 <__NVIC_EnableIRQ+0x34>)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	095b      	lsrs	r3, r3, #5
 8001c60:	2001      	movs	r0, #1
 8001c62:	fa00 f202 	lsl.w	r2, r0, r2
 8001c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	e000e100 	.word	0xe000e100

08001c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	6039      	str	r1, [r7, #0]
 8001c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	db0a      	blt.n	8001ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	490c      	ldr	r1, [pc, #48]	; (8001cc4 <__NVIC_SetPriority+0x4c>)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	0112      	lsls	r2, r2, #4
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca0:	e00a      	b.n	8001cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	4908      	ldr	r1, [pc, #32]	; (8001cc8 <__NVIC_SetPriority+0x50>)
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	3b04      	subs	r3, #4
 8001cb0:	0112      	lsls	r2, r2, #4
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	761a      	strb	r2, [r3, #24]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000e100 	.word	0xe000e100
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b089      	sub	sp, #36	; 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f1c3 0307 	rsb	r3, r3, #7
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	bf28      	it	cs
 8001cea:	2304      	movcs	r3, #4
 8001cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	2b06      	cmp	r3, #6
 8001cf4:	d902      	bls.n	8001cfc <NVIC_EncodePriority+0x30>
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3b03      	subs	r3, #3
 8001cfa:	e000      	b.n	8001cfe <NVIC_EncodePriority+0x32>
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d00:	f04f 32ff 	mov.w	r2, #4294967295
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43da      	mvns	r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	401a      	ands	r2, r3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d14:	f04f 31ff 	mov.w	r1, #4294967295
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1e:	43d9      	mvns	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d24:	4313      	orrs	r3, r2
         );
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3724      	adds	r7, #36	; 0x24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d40:	d301      	bcc.n	8001d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d42:	2301      	movs	r3, #1
 8001d44:	e00f      	b.n	8001d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d46:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <SysTick_Config+0x40>)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d4e:	210f      	movs	r1, #15
 8001d50:	f04f 30ff 	mov.w	r0, #4294967295
 8001d54:	f7ff ff90 	bl	8001c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <SysTick_Config+0x40>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d5e:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <SysTick_Config+0x40>)
 8001d60:	2207      	movs	r2, #7
 8001d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	e000e010 	.word	0xe000e010

08001d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff ff2d 	bl	8001bdc <__NVIC_SetPriorityGrouping>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b086      	sub	sp, #24
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4603      	mov	r3, r0
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
 8001d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d9c:	f7ff ff42 	bl	8001c24 <__NVIC_GetPriorityGrouping>
 8001da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68b9      	ldr	r1, [r7, #8]
 8001da6:	6978      	ldr	r0, [r7, #20]
 8001da8:	f7ff ff90 	bl	8001ccc <NVIC_EncodePriority>
 8001dac:	4602      	mov	r2, r0
 8001dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff5f 	bl	8001c78 <__NVIC_SetPriority>
}
 8001dba:	bf00      	nop
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff35 	bl	8001c40 <__NVIC_EnableIRQ>
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff ffa2 	bl	8001d30 <SysTick_Config>
 8001dec:	4603      	mov	r3, r0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b08b      	sub	sp, #44	; 0x2c
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e02:	2300      	movs	r3, #0
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e06:	2300      	movs	r3, #0
 8001e08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e0a:	e127      	b.n	800205c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	69fa      	ldr	r2, [r7, #28]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	f040 8116 	bne.w	8002056 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b12      	cmp	r3, #18
 8001e30:	d034      	beq.n	8001e9c <HAL_GPIO_Init+0xa4>
 8001e32:	2b12      	cmp	r3, #18
 8001e34:	d80d      	bhi.n	8001e52 <HAL_GPIO_Init+0x5a>
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d02b      	beq.n	8001e92 <HAL_GPIO_Init+0x9a>
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d804      	bhi.n	8001e48 <HAL_GPIO_Init+0x50>
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d031      	beq.n	8001ea6 <HAL_GPIO_Init+0xae>
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d01c      	beq.n	8001e80 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e46:	e048      	b.n	8001eda <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d043      	beq.n	8001ed4 <HAL_GPIO_Init+0xdc>
 8001e4c:	2b11      	cmp	r3, #17
 8001e4e:	d01b      	beq.n	8001e88 <HAL_GPIO_Init+0x90>
          break;
 8001e50:	e043      	b.n	8001eda <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e52:	4a89      	ldr	r2, [pc, #548]	; (8002078 <HAL_GPIO_Init+0x280>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d026      	beq.n	8001ea6 <HAL_GPIO_Init+0xae>
 8001e58:	4a87      	ldr	r2, [pc, #540]	; (8002078 <HAL_GPIO_Init+0x280>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d806      	bhi.n	8001e6c <HAL_GPIO_Init+0x74>
 8001e5e:	4a87      	ldr	r2, [pc, #540]	; (800207c <HAL_GPIO_Init+0x284>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d020      	beq.n	8001ea6 <HAL_GPIO_Init+0xae>
 8001e64:	4a86      	ldr	r2, [pc, #536]	; (8002080 <HAL_GPIO_Init+0x288>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d01d      	beq.n	8001ea6 <HAL_GPIO_Init+0xae>
          break;
 8001e6a:	e036      	b.n	8001eda <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e6c:	4a85      	ldr	r2, [pc, #532]	; (8002084 <HAL_GPIO_Init+0x28c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d019      	beq.n	8001ea6 <HAL_GPIO_Init+0xae>
 8001e72:	4a85      	ldr	r2, [pc, #532]	; (8002088 <HAL_GPIO_Init+0x290>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d016      	beq.n	8001ea6 <HAL_GPIO_Init+0xae>
 8001e78:	4a84      	ldr	r2, [pc, #528]	; (800208c <HAL_GPIO_Init+0x294>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d013      	beq.n	8001ea6 <HAL_GPIO_Init+0xae>
          break;
 8001e7e:	e02c      	b.n	8001eda <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	623b      	str	r3, [r7, #32]
          break;
 8001e86:	e028      	b.n	8001eda <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	623b      	str	r3, [r7, #32]
          break;
 8001e90:	e023      	b.n	8001eda <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	3308      	adds	r3, #8
 8001e98:	623b      	str	r3, [r7, #32]
          break;
 8001e9a:	e01e      	b.n	8001eda <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	330c      	adds	r3, #12
 8001ea2:	623b      	str	r3, [r7, #32]
          break;
 8001ea4:	e019      	b.n	8001eda <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d102      	bne.n	8001eb4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eae:	2304      	movs	r3, #4
 8001eb0:	623b      	str	r3, [r7, #32]
          break;
 8001eb2:	e012      	b.n	8001eda <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d105      	bne.n	8001ec8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ebc:	2308      	movs	r3, #8
 8001ebe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69fa      	ldr	r2, [r7, #28]
 8001ec4:	611a      	str	r2, [r3, #16]
          break;
 8001ec6:	e008      	b.n	8001eda <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ec8:	2308      	movs	r3, #8
 8001eca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69fa      	ldr	r2, [r7, #28]
 8001ed0:	615a      	str	r2, [r3, #20]
          break;
 8001ed2:	e002      	b.n	8001eda <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	623b      	str	r3, [r7, #32]
          break;
 8001ed8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	2bff      	cmp	r3, #255	; 0xff
 8001ede:	d801      	bhi.n	8001ee4 <HAL_GPIO_Init+0xec>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	e001      	b.n	8001ee8 <HAL_GPIO_Init+0xf0>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	2bff      	cmp	r3, #255	; 0xff
 8001eee:	d802      	bhi.n	8001ef6 <HAL_GPIO_Init+0xfe>
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	e002      	b.n	8001efc <HAL_GPIO_Init+0x104>
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	3b08      	subs	r3, #8
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	210f      	movs	r1, #15
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	401a      	ands	r2, r3
 8001f0e:	6a39      	ldr	r1, [r7, #32]
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	431a      	orrs	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 8096 	beq.w	8002056 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f2a:	4b59      	ldr	r3, [pc, #356]	; (8002090 <HAL_GPIO_Init+0x298>)
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	4a58      	ldr	r2, [pc, #352]	; (8002090 <HAL_GPIO_Init+0x298>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6193      	str	r3, [r2, #24]
 8001f36:	4b56      	ldr	r3, [pc, #344]	; (8002090 <HAL_GPIO_Init+0x298>)
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f42:	4a54      	ldr	r2, [pc, #336]	; (8002094 <HAL_GPIO_Init+0x29c>)
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	089b      	lsrs	r3, r3, #2
 8001f48:	3302      	adds	r3, #2
 8001f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	220f      	movs	r2, #15
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4013      	ands	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a4b      	ldr	r2, [pc, #300]	; (8002098 <HAL_GPIO_Init+0x2a0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d013      	beq.n	8001f96 <HAL_GPIO_Init+0x19e>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a4a      	ldr	r2, [pc, #296]	; (800209c <HAL_GPIO_Init+0x2a4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d00d      	beq.n	8001f92 <HAL_GPIO_Init+0x19a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a49      	ldr	r2, [pc, #292]	; (80020a0 <HAL_GPIO_Init+0x2a8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d007      	beq.n	8001f8e <HAL_GPIO_Init+0x196>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a48      	ldr	r2, [pc, #288]	; (80020a4 <HAL_GPIO_Init+0x2ac>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d101      	bne.n	8001f8a <HAL_GPIO_Init+0x192>
 8001f86:	2303      	movs	r3, #3
 8001f88:	e006      	b.n	8001f98 <HAL_GPIO_Init+0x1a0>
 8001f8a:	2304      	movs	r3, #4
 8001f8c:	e004      	b.n	8001f98 <HAL_GPIO_Init+0x1a0>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e002      	b.n	8001f98 <HAL_GPIO_Init+0x1a0>
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <HAL_GPIO_Init+0x1a0>
 8001f96:	2300      	movs	r3, #0
 8001f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f9a:	f002 0203 	and.w	r2, r2, #3
 8001f9e:	0092      	lsls	r2, r2, #2
 8001fa0:	4093      	lsls	r3, r2
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fa8:	493a      	ldr	r1, [pc, #232]	; (8002094 <HAL_GPIO_Init+0x29c>)
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	089b      	lsrs	r3, r3, #2
 8001fae:	3302      	adds	r3, #2
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d006      	beq.n	8001fd0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fc2:	4b39      	ldr	r3, [pc, #228]	; (80020a8 <HAL_GPIO_Init+0x2b0>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	4938      	ldr	r1, [pc, #224]	; (80020a8 <HAL_GPIO_Init+0x2b0>)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]
 8001fce:	e006      	b.n	8001fde <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fd0:	4b35      	ldr	r3, [pc, #212]	; (80020a8 <HAL_GPIO_Init+0x2b0>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	4933      	ldr	r1, [pc, #204]	; (80020a8 <HAL_GPIO_Init+0x2b0>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d006      	beq.n	8001ff8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fea:	4b2f      	ldr	r3, [pc, #188]	; (80020a8 <HAL_GPIO_Init+0x2b0>)
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	492e      	ldr	r1, [pc, #184]	; (80020a8 <HAL_GPIO_Init+0x2b0>)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
 8001ff6:	e006      	b.n	8002006 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ff8:	4b2b      	ldr	r3, [pc, #172]	; (80020a8 <HAL_GPIO_Init+0x2b0>)
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	4929      	ldr	r1, [pc, #164]	; (80020a8 <HAL_GPIO_Init+0x2b0>)
 8002002:	4013      	ands	r3, r2
 8002004:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d006      	beq.n	8002020 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002012:	4b25      	ldr	r3, [pc, #148]	; (80020a8 <HAL_GPIO_Init+0x2b0>)
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	4924      	ldr	r1, [pc, #144]	; (80020a8 <HAL_GPIO_Init+0x2b0>)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	4313      	orrs	r3, r2
 800201c:	608b      	str	r3, [r1, #8]
 800201e:	e006      	b.n	800202e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002020:	4b21      	ldr	r3, [pc, #132]	; (80020a8 <HAL_GPIO_Init+0x2b0>)
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	43db      	mvns	r3, r3
 8002028:	491f      	ldr	r1, [pc, #124]	; (80020a8 <HAL_GPIO_Init+0x2b0>)
 800202a:	4013      	ands	r3, r2
 800202c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d006      	beq.n	8002048 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800203a:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <HAL_GPIO_Init+0x2b0>)
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	491a      	ldr	r1, [pc, #104]	; (80020a8 <HAL_GPIO_Init+0x2b0>)
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	4313      	orrs	r3, r2
 8002044:	60cb      	str	r3, [r1, #12]
 8002046:	e006      	b.n	8002056 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002048:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <HAL_GPIO_Init+0x2b0>)
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	43db      	mvns	r3, r3
 8002050:	4915      	ldr	r1, [pc, #84]	; (80020a8 <HAL_GPIO_Init+0x2b0>)
 8002052:	4013      	ands	r3, r2
 8002054:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	3301      	adds	r3, #1
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	fa22 f303 	lsr.w	r3, r2, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	f47f aed0 	bne.w	8001e0c <HAL_GPIO_Init+0x14>
  }
}
 800206c:	bf00      	nop
 800206e:	372c      	adds	r7, #44	; 0x2c
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	10210000 	.word	0x10210000
 800207c:	10110000 	.word	0x10110000
 8002080:	10120000 	.word	0x10120000
 8002084:	10310000 	.word	0x10310000
 8002088:	10320000 	.word	0x10320000
 800208c:	10220000 	.word	0x10220000
 8002090:	40021000 	.word	0x40021000
 8002094:	40010000 	.word	0x40010000
 8002098:	40010800 	.word	0x40010800
 800209c:	40010c00 	.word	0x40010c00
 80020a0:	40011000 	.word	0x40011000
 80020a4:	40011400 	.word	0x40011400
 80020a8:	40010400 	.word	0x40010400

080020ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	887b      	ldrh	r3, [r7, #2]
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d002      	beq.n	80020ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020c4:	2301      	movs	r3, #1
 80020c6:	73fb      	strb	r3, [r7, #15]
 80020c8:	e001      	b.n	80020ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ca:	2300      	movs	r3, #0
 80020cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr

080020da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	460b      	mov	r3, r1
 80020e4:	807b      	strh	r3, [r7, #2]
 80020e6:	4613      	mov	r3, r2
 80020e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020ea:	787b      	ldrb	r3, [r7, #1]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020f0:	887a      	ldrh	r2, [r7, #2]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020f6:	e003      	b.n	8002100 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020f8:	887b      	ldrh	r3, [r7, #2]
 80020fa:	041a      	lsls	r2, r3, #16
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	611a      	str	r2, [r3, #16]
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr

0800210a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800210a:	b480      	push	{r7}
 800210c:	b085      	sub	sp, #20
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	460b      	mov	r3, r1
 8002114:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800211c:	887a      	ldrh	r2, [r7, #2]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4013      	ands	r3, r2
 8002122:	041a      	lsls	r2, r3, #16
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	43d9      	mvns	r1, r3
 8002128:	887b      	ldrh	r3, [r7, #2]
 800212a:	400b      	ands	r3, r1
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	611a      	str	r2, [r3, #16]
}
 8002132:	bf00      	nop
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e11f      	b.n	800238e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d106      	bne.n	8002168 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff fb90 	bl	8001888 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2224      	movs	r2, #36	; 0x24
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0201 	bic.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800218e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800219e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021a0:	f001 f90e 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 80021a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4a7b      	ldr	r2, [pc, #492]	; (8002398 <HAL_I2C_Init+0x25c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d807      	bhi.n	80021c0 <HAL_I2C_Init+0x84>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4a7a      	ldr	r2, [pc, #488]	; (800239c <HAL_I2C_Init+0x260>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	bf94      	ite	ls
 80021b8:	2301      	movls	r3, #1
 80021ba:	2300      	movhi	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	e006      	b.n	80021ce <HAL_I2C_Init+0x92>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4a77      	ldr	r2, [pc, #476]	; (80023a0 <HAL_I2C_Init+0x264>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	bf94      	ite	ls
 80021c8:	2301      	movls	r3, #1
 80021ca:	2300      	movhi	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e0db      	b.n	800238e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	4a72      	ldr	r2, [pc, #456]	; (80023a4 <HAL_I2C_Init+0x268>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	0c9b      	lsrs	r3, r3, #18
 80021e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	4a64      	ldr	r2, [pc, #400]	; (8002398 <HAL_I2C_Init+0x25c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d802      	bhi.n	8002210 <HAL_I2C_Init+0xd4>
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	3301      	adds	r3, #1
 800220e:	e009      	b.n	8002224 <HAL_I2C_Init+0xe8>
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002216:	fb02 f303 	mul.w	r3, r2, r3
 800221a:	4a63      	ldr	r2, [pc, #396]	; (80023a8 <HAL_I2C_Init+0x26c>)
 800221c:	fba2 2303 	umull	r2, r3, r2, r3
 8002220:	099b      	lsrs	r3, r3, #6
 8002222:	3301      	adds	r3, #1
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	430b      	orrs	r3, r1
 800222a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002236:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	4956      	ldr	r1, [pc, #344]	; (8002398 <HAL_I2C_Init+0x25c>)
 8002240:	428b      	cmp	r3, r1
 8002242:	d80d      	bhi.n	8002260 <HAL_I2C_Init+0x124>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	1e59      	subs	r1, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002252:	3301      	adds	r3, #1
 8002254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002258:	2b04      	cmp	r3, #4
 800225a:	bf38      	it	cc
 800225c:	2304      	movcc	r3, #4
 800225e:	e04f      	b.n	8002300 <HAL_I2C_Init+0x1c4>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d111      	bne.n	800228c <HAL_I2C_Init+0x150>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	1e58      	subs	r0, r3, #1
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6859      	ldr	r1, [r3, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	440b      	add	r3, r1
 8002276:	fbb0 f3f3 	udiv	r3, r0, r3
 800227a:	3301      	adds	r3, #1
 800227c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002280:	2b00      	cmp	r3, #0
 8002282:	bf0c      	ite	eq
 8002284:	2301      	moveq	r3, #1
 8002286:	2300      	movne	r3, #0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	e012      	b.n	80022b2 <HAL_I2C_Init+0x176>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	1e58      	subs	r0, r3, #1
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6859      	ldr	r1, [r3, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	0099      	lsls	r1, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	fbb0 f3f3 	udiv	r3, r0, r3
 80022a2:	3301      	adds	r3, #1
 80022a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	bf0c      	ite	eq
 80022ac:	2301      	moveq	r3, #1
 80022ae:	2300      	movne	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_I2C_Init+0x17e>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e022      	b.n	8002300 <HAL_I2C_Init+0x1c4>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10e      	bne.n	80022e0 <HAL_I2C_Init+0x1a4>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	1e58      	subs	r0, r3, #1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6859      	ldr	r1, [r3, #4]
 80022ca:	460b      	mov	r3, r1
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	440b      	add	r3, r1
 80022d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80022d4:	3301      	adds	r3, #1
 80022d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022de:	e00f      	b.n	8002300 <HAL_I2C_Init+0x1c4>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	1e58      	subs	r0, r3, #1
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6859      	ldr	r1, [r3, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	0099      	lsls	r1, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022f6:	3301      	adds	r3, #1
 80022f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	6809      	ldr	r1, [r1, #0]
 8002304:	4313      	orrs	r3, r2
 8002306:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69da      	ldr	r2, [r3, #28]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800232e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6911      	ldr	r1, [r2, #16]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68d2      	ldr	r2, [r2, #12]
 800233a:	4311      	orrs	r1, r2
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	430b      	orrs	r3, r1
 8002342:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695a      	ldr	r2, [r3, #20]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0201 	orr.w	r2, r2, #1
 800236e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2220      	movs	r2, #32
 800237a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	000186a0 	.word	0x000186a0
 800239c:	001e847f 	.word	0x001e847f
 80023a0:	003d08ff 	.word	0x003d08ff
 80023a4:	431bde83 	.word	0x431bde83
 80023a8:	10624dd3 	.word	0x10624dd3

080023ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af02      	add	r7, sp, #8
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	607a      	str	r2, [r7, #4]
 80023b6:	461a      	mov	r2, r3
 80023b8:	460b      	mov	r3, r1
 80023ba:	817b      	strh	r3, [r7, #10]
 80023bc:	4613      	mov	r3, r2
 80023be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023c0:	f7ff fbe0 	bl	8001b84 <HAL_GetTick>
 80023c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b20      	cmp	r3, #32
 80023d0:	f040 80e0 	bne.w	8002594 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	2319      	movs	r3, #25
 80023da:	2201      	movs	r2, #1
 80023dc:	4970      	ldr	r1, [pc, #448]	; (80025a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 fa92 	bl	8002908 <I2C_WaitOnFlagUntilTimeout>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023ea:	2302      	movs	r3, #2
 80023ec:	e0d3      	b.n	8002596 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d101      	bne.n	80023fc <HAL_I2C_Master_Transmit+0x50>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e0cc      	b.n	8002596 <HAL_I2C_Master_Transmit+0x1ea>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b01      	cmp	r3, #1
 8002410:	d007      	beq.n	8002422 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f042 0201 	orr.w	r2, r2, #1
 8002420:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002430:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2221      	movs	r2, #33	; 0x21
 8002436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2210      	movs	r2, #16
 800243e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	893a      	ldrh	r2, [r7, #8]
 8002452:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4a50      	ldr	r2, [pc, #320]	; (80025a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002462:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002464:	8979      	ldrh	r1, [r7, #10]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	6a3a      	ldr	r2, [r7, #32]
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 f9ca 	bl	8002804 <I2C_MasterRequestWrite>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e08d      	b.n	8002596 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002490:	e066      	b.n	8002560 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	6a39      	ldr	r1, [r7, #32]
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 fb0c 	bl	8002ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00d      	beq.n	80024be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d107      	bne.n	80024ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e06b      	b.n	8002596 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	781a      	ldrb	r2, [r3, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d8:	b29b      	uxth	r3, r3
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d11b      	bne.n	8002534 <HAL_I2C_Master_Transmit+0x188>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002500:	2b00      	cmp	r3, #0
 8002502:	d017      	beq.n	8002534 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	781a      	ldrb	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	6a39      	ldr	r1, [r7, #32]
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 fafc 	bl	8002b36 <I2C_WaitOnBTFFlagUntilTimeout>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00d      	beq.n	8002560 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	2b04      	cmp	r3, #4
 800254a:	d107      	bne.n	800255c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800255a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e01a      	b.n	8002596 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002564:	2b00      	cmp	r3, #0
 8002566:	d194      	bne.n	8002492 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002576:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2220      	movs	r2, #32
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002590:	2300      	movs	r3, #0
 8002592:	e000      	b.n	8002596 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002594:	2302      	movs	r3, #2
  }
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	00100002 	.word	0x00100002
 80025a4:	ffff0000 	.word	0xffff0000

080025a8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08a      	sub	sp, #40	; 0x28
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	607a      	str	r2, [r7, #4]
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	460b      	mov	r3, r1
 80025b6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80025b8:	f7ff fae4 	bl	8001b84 <HAL_GetTick>
 80025bc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80025be:	2301      	movs	r3, #1
 80025c0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b20      	cmp	r3, #32
 80025cc:	f040 8111 	bne.w	80027f2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	2319      	movs	r3, #25
 80025d6:	2201      	movs	r2, #1
 80025d8:	4988      	ldr	r1, [pc, #544]	; (80027fc <HAL_I2C_IsDeviceReady+0x254>)
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 f994 	bl	8002908 <I2C_WaitOnFlagUntilTimeout>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80025e6:	2302      	movs	r3, #2
 80025e8:	e104      	b.n	80027f4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d101      	bne.n	80025f8 <HAL_I2C_IsDeviceReady+0x50>
 80025f4:	2302      	movs	r3, #2
 80025f6:	e0fd      	b.n	80027f4 <HAL_I2C_IsDeviceReady+0x24c>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b01      	cmp	r3, #1
 800260c:	d007      	beq.n	800261e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 0201 	orr.w	r2, r2, #1
 800261c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800262c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2224      	movs	r2, #36	; 0x24
 8002632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4a70      	ldr	r2, [pc, #448]	; (8002800 <HAL_I2C_IsDeviceReady+0x258>)
 8002640:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002650:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2200      	movs	r2, #0
 800265a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 f952 	bl	8002908 <I2C_WaitOnFlagUntilTimeout>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00d      	beq.n	8002686 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002678:	d103      	bne.n	8002682 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002680:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e0b6      	b.n	80027f4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002686:	897b      	ldrh	r3, [r7, #10]
 8002688:	b2db      	uxtb	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002694:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002696:	f7ff fa75 	bl	8001b84 <HAL_GetTick>
 800269a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	bf0c      	ite	eq
 80026aa:	2301      	moveq	r3, #1
 80026ac:	2300      	movne	r3, #0
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026c0:	bf0c      	ite	eq
 80026c2:	2301      	moveq	r3, #1
 80026c4:	2300      	movne	r3, #0
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80026ca:	e025      	b.n	8002718 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026cc:	f7ff fa5a 	bl	8001b84 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d302      	bcc.n	80026e2 <HAL_I2C_IsDeviceReady+0x13a>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d103      	bne.n	80026ea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	22a0      	movs	r2, #160	; 0xa0
 80026e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	bf0c      	ite	eq
 80026f8:	2301      	moveq	r3, #1
 80026fa:	2300      	movne	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270e:	bf0c      	ite	eq
 8002710:	2301      	moveq	r3, #1
 8002712:	2300      	movne	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2ba0      	cmp	r3, #160	; 0xa0
 8002722:	d005      	beq.n	8002730 <HAL_I2C_IsDeviceReady+0x188>
 8002724:	7dfb      	ldrb	r3, [r7, #23]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d102      	bne.n	8002730 <HAL_I2C_IsDeviceReady+0x188>
 800272a:	7dbb      	ldrb	r3, [r7, #22]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0cd      	beq.n	80026cc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b02      	cmp	r3, #2
 8002744:	d129      	bne.n	800279a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002754:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	2319      	movs	r3, #25
 8002772:	2201      	movs	r2, #1
 8002774:	4921      	ldr	r1, [pc, #132]	; (80027fc <HAL_I2C_IsDeviceReady+0x254>)
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 f8c6 	bl	8002908 <I2C_WaitOnFlagUntilTimeout>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e036      	b.n	80027f4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2220      	movs	r2, #32
 800278a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	e02c      	b.n	80027f4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027b2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	2319      	movs	r3, #25
 80027ba:	2201      	movs	r2, #1
 80027bc:	490f      	ldr	r1, [pc, #60]	; (80027fc <HAL_I2C_IsDeviceReady+0x254>)
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 f8a2 	bl	8002908 <I2C_WaitOnFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e012      	b.n	80027f4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	3301      	adds	r3, #1
 80027d2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	429a      	cmp	r2, r3
 80027da:	f4ff af32 	bcc.w	8002642 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2220      	movs	r2, #32
 80027e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80027f2:	2302      	movs	r3, #2
  }
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3720      	adds	r7, #32
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	00100002 	.word	0x00100002
 8002800:	ffff0000 	.word	0xffff0000

08002804 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b088      	sub	sp, #32
 8002808:	af02      	add	r7, sp, #8
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	607a      	str	r2, [r7, #4]
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	460b      	mov	r3, r1
 8002812:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2b08      	cmp	r3, #8
 800281e:	d006      	beq.n	800282e <I2C_MasterRequestWrite+0x2a>
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d003      	beq.n	800282e <I2C_MasterRequestWrite+0x2a>
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800282c:	d108      	bne.n	8002840 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	e00b      	b.n	8002858 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002844:	2b12      	cmp	r3, #18
 8002846:	d107      	bne.n	8002858 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002856:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 f84f 	bl	8002908 <I2C_WaitOnFlagUntilTimeout>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00d      	beq.n	800288c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800287e:	d103      	bne.n	8002888 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002886:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e035      	b.n	80028f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002894:	d108      	bne.n	80028a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002896:	897b      	ldrh	r3, [r7, #10]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	461a      	mov	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028a4:	611a      	str	r2, [r3, #16]
 80028a6:	e01b      	b.n	80028e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028a8:	897b      	ldrh	r3, [r7, #10]
 80028aa:	11db      	asrs	r3, r3, #7
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	f003 0306 	and.w	r3, r3, #6
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f063 030f 	orn	r3, r3, #15
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	490e      	ldr	r1, [pc, #56]	; (8002900 <I2C_MasterRequestWrite+0xfc>)
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 f875 	bl	80029b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e010      	b.n	80028f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028d6:	897b      	ldrh	r3, [r7, #10]
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	4907      	ldr	r1, [pc, #28]	; (8002904 <I2C_MasterRequestWrite+0x100>)
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 f865 	bl	80029b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	00010008 	.word	0x00010008
 8002904:	00010002 	.word	0x00010002

08002908 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	603b      	str	r3, [r7, #0]
 8002914:	4613      	mov	r3, r2
 8002916:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002918:	e025      	b.n	8002966 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002920:	d021      	beq.n	8002966 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002922:	f7ff f92f 	bl	8001b84 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d302      	bcc.n	8002938 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d116      	bne.n	8002966 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2220      	movs	r2, #32
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f043 0220 	orr.w	r2, r3, #32
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e023      	b.n	80029ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	0c1b      	lsrs	r3, r3, #16
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b01      	cmp	r3, #1
 800296e:	d10d      	bne.n	800298c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	43da      	mvns	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	4013      	ands	r3, r2
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	bf0c      	ite	eq
 8002982:	2301      	moveq	r3, #1
 8002984:	2300      	movne	r3, #0
 8002986:	b2db      	uxtb	r3, r3
 8002988:	461a      	mov	r2, r3
 800298a:	e00c      	b.n	80029a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	43da      	mvns	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	4013      	ands	r3, r2
 8002998:	b29b      	uxth	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	bf0c      	ite	eq
 800299e:	2301      	moveq	r3, #1
 80029a0:	2300      	movne	r3, #0
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	461a      	mov	r2, r3
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d0b6      	beq.n	800291a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	607a      	str	r2, [r7, #4]
 80029c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029c4:	e051      	b.n	8002a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d4:	d123      	bne.n	8002a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2220      	movs	r2, #32
 80029fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f043 0204 	orr.w	r2, r3, #4
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e046      	b.n	8002aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a24:	d021      	beq.n	8002a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a26:	f7ff f8ad 	bl	8001b84 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d302      	bcc.n	8002a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d116      	bne.n	8002a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2220      	movs	r2, #32
 8002a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f043 0220 	orr.w	r2, r3, #32
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e020      	b.n	8002aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	0c1b      	lsrs	r3, r3, #16
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d10c      	bne.n	8002a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	43da      	mvns	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	bf14      	ite	ne
 8002a86:	2301      	movne	r3, #1
 8002a88:	2300      	moveq	r3, #0
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	e00b      	b.n	8002aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	43da      	mvns	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	bf14      	ite	ne
 8002aa0:	2301      	movne	r3, #1
 8002aa2:	2300      	moveq	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d18d      	bne.n	80029c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ac0:	e02d      	b.n	8002b1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 f878 	bl	8002bb8 <I2C_IsAcknowledgeFailed>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e02d      	b.n	8002b2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad8:	d021      	beq.n	8002b1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ada:	f7ff f853 	bl	8001b84 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d302      	bcc.n	8002af0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d116      	bne.n	8002b1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2220      	movs	r2, #32
 8002afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f043 0220 	orr.w	r2, r3, #32
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e007      	b.n	8002b2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b28:	2b80      	cmp	r3, #128	; 0x80
 8002b2a:	d1ca      	bne.n	8002ac2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	60f8      	str	r0, [r7, #12]
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b42:	e02d      	b.n	8002ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f837 	bl	8002bb8 <I2C_IsAcknowledgeFailed>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e02d      	b.n	8002bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5a:	d021      	beq.n	8002ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b5c:	f7ff f812 	bl	8001b84 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d302      	bcc.n	8002b72 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d116      	bne.n	8002ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	f043 0220 	orr.w	r2, r3, #32
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e007      	b.n	8002bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d1ca      	bne.n	8002b44 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bce:	d11b      	bne.n	8002c08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bd8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f043 0204 	orr.w	r2, r3, #4
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e000      	b.n	8002c0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr

08002c14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e26c      	b.n	8003100 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 8087 	beq.w	8002d42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c34:	4b92      	ldr	r3, [pc, #584]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 030c 	and.w	r3, r3, #12
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d00c      	beq.n	8002c5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c40:	4b8f      	ldr	r3, [pc, #572]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 030c 	and.w	r3, r3, #12
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d112      	bne.n	8002c72 <HAL_RCC_OscConfig+0x5e>
 8002c4c:	4b8c      	ldr	r3, [pc, #560]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c58:	d10b      	bne.n	8002c72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5a:	4b89      	ldr	r3, [pc, #548]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d06c      	beq.n	8002d40 <HAL_RCC_OscConfig+0x12c>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d168      	bne.n	8002d40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e246      	b.n	8003100 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c7a:	d106      	bne.n	8002c8a <HAL_RCC_OscConfig+0x76>
 8002c7c:	4b80      	ldr	r3, [pc, #512]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a7f      	ldr	r2, [pc, #508]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	e02e      	b.n	8002ce8 <HAL_RCC_OscConfig+0xd4>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10c      	bne.n	8002cac <HAL_RCC_OscConfig+0x98>
 8002c92:	4b7b      	ldr	r3, [pc, #492]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a7a      	ldr	r2, [pc, #488]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	4b78      	ldr	r3, [pc, #480]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a77      	ldr	r2, [pc, #476]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	e01d      	b.n	8002ce8 <HAL_RCC_OscConfig+0xd4>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cb4:	d10c      	bne.n	8002cd0 <HAL_RCC_OscConfig+0xbc>
 8002cb6:	4b72      	ldr	r3, [pc, #456]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a71      	ldr	r2, [pc, #452]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	4b6f      	ldr	r3, [pc, #444]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a6e      	ldr	r2, [pc, #440]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	e00b      	b.n	8002ce8 <HAL_RCC_OscConfig+0xd4>
 8002cd0:	4b6b      	ldr	r3, [pc, #428]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a6a      	ldr	r2, [pc, #424]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	4b68      	ldr	r3, [pc, #416]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a67      	ldr	r2, [pc, #412]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ce6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d013      	beq.n	8002d18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf0:	f7fe ff48 	bl	8001b84 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf8:	f7fe ff44 	bl	8001b84 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b64      	cmp	r3, #100	; 0x64
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e1fa      	b.n	8003100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0a:	4b5d      	ldr	r3, [pc, #372]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCC_OscConfig+0xe4>
 8002d16:	e014      	b.n	8002d42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d18:	f7fe ff34 	bl	8001b84 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d20:	f7fe ff30 	bl	8001b84 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b64      	cmp	r3, #100	; 0x64
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e1e6      	b.n	8003100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d32:	4b53      	ldr	r3, [pc, #332]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x10c>
 8002d3e:	e000      	b.n	8002d42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d063      	beq.n	8002e16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d4e:	4b4c      	ldr	r3, [pc, #304]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 030c 	and.w	r3, r3, #12
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00b      	beq.n	8002d72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d5a:	4b49      	ldr	r3, [pc, #292]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d11c      	bne.n	8002da0 <HAL_RCC_OscConfig+0x18c>
 8002d66:	4b46      	ldr	r3, [pc, #280]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d116      	bne.n	8002da0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d72:	4b43      	ldr	r3, [pc, #268]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d005      	beq.n	8002d8a <HAL_RCC_OscConfig+0x176>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d001      	beq.n	8002d8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e1ba      	b.n	8003100 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8a:	4b3d      	ldr	r3, [pc, #244]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	4939      	ldr	r1, [pc, #228]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d9e:	e03a      	b.n	8002e16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d020      	beq.n	8002dea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002da8:	4b36      	ldr	r3, [pc, #216]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002daa:	2201      	movs	r2, #1
 8002dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dae:	f7fe fee9 	bl	8001b84 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db6:	f7fe fee5 	bl	8001b84 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e19b      	b.n	8003100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc8:	4b2d      	ldr	r3, [pc, #180]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0f0      	beq.n	8002db6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd4:	4b2a      	ldr	r3, [pc, #168]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	4927      	ldr	r1, [pc, #156]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	600b      	str	r3, [r1, #0]
 8002de8:	e015      	b.n	8002e16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dea:	4b26      	ldr	r3, [pc, #152]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7fe fec8 	bl	8001b84 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002df8:	f7fe fec4 	bl	8001b84 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e17a      	b.n	8003100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e0a:	4b1d      	ldr	r3, [pc, #116]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d03a      	beq.n	8002e98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d019      	beq.n	8002e5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e2a:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <HAL_RCC_OscConfig+0x274>)
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e30:	f7fe fea8 	bl	8001b84 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e38:	f7fe fea4 	bl	8001b84 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e15a      	b.n	8003100 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e4a:	4b0d      	ldr	r3, [pc, #52]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e56:	2001      	movs	r0, #1
 8002e58:	f000 fac6 	bl	80033e8 <RCC_Delay>
 8002e5c:	e01c      	b.n	8002e98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <HAL_RCC_OscConfig+0x274>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e64:	f7fe fe8e 	bl	8001b84 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e6a:	e00f      	b.n	8002e8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e6c:	f7fe fe8a 	bl	8001b84 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d908      	bls.n	8002e8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e140      	b.n	8003100 <HAL_RCC_OscConfig+0x4ec>
 8002e7e:	bf00      	nop
 8002e80:	40021000 	.word	0x40021000
 8002e84:	42420000 	.word	0x42420000
 8002e88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e8c:	4b9e      	ldr	r3, [pc, #632]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1e9      	bne.n	8002e6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 80a6 	beq.w	8002ff2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eaa:	4b97      	ldr	r3, [pc, #604]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10d      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eb6:	4b94      	ldr	r3, [pc, #592]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	4a93      	ldr	r2, [pc, #588]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 8002ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec0:	61d3      	str	r3, [r2, #28]
 8002ec2:	4b91      	ldr	r3, [pc, #580]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eca:	60bb      	str	r3, [r7, #8]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed2:	4b8e      	ldr	r3, [pc, #568]	; (800310c <HAL_RCC_OscConfig+0x4f8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d118      	bne.n	8002f10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ede:	4b8b      	ldr	r3, [pc, #556]	; (800310c <HAL_RCC_OscConfig+0x4f8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a8a      	ldr	r2, [pc, #552]	; (800310c <HAL_RCC_OscConfig+0x4f8>)
 8002ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eea:	f7fe fe4b 	bl	8001b84 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef2:	f7fe fe47 	bl	8001b84 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b64      	cmp	r3, #100	; 0x64
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e0fd      	b.n	8003100 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f04:	4b81      	ldr	r3, [pc, #516]	; (800310c <HAL_RCC_OscConfig+0x4f8>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f0      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d106      	bne.n	8002f26 <HAL_RCC_OscConfig+0x312>
 8002f18:	4b7b      	ldr	r3, [pc, #492]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	4a7a      	ldr	r2, [pc, #488]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 8002f1e:	f043 0301 	orr.w	r3, r3, #1
 8002f22:	6213      	str	r3, [r2, #32]
 8002f24:	e02d      	b.n	8002f82 <HAL_RCC_OscConfig+0x36e>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10c      	bne.n	8002f48 <HAL_RCC_OscConfig+0x334>
 8002f2e:	4b76      	ldr	r3, [pc, #472]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	4a75      	ldr	r2, [pc, #468]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 8002f34:	f023 0301 	bic.w	r3, r3, #1
 8002f38:	6213      	str	r3, [r2, #32]
 8002f3a:	4b73      	ldr	r3, [pc, #460]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	4a72      	ldr	r2, [pc, #456]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 8002f40:	f023 0304 	bic.w	r3, r3, #4
 8002f44:	6213      	str	r3, [r2, #32]
 8002f46:	e01c      	b.n	8002f82 <HAL_RCC_OscConfig+0x36e>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	2b05      	cmp	r3, #5
 8002f4e:	d10c      	bne.n	8002f6a <HAL_RCC_OscConfig+0x356>
 8002f50:	4b6d      	ldr	r3, [pc, #436]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	4a6c      	ldr	r2, [pc, #432]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 8002f56:	f043 0304 	orr.w	r3, r3, #4
 8002f5a:	6213      	str	r3, [r2, #32]
 8002f5c:	4b6a      	ldr	r3, [pc, #424]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	4a69      	ldr	r2, [pc, #420]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	6213      	str	r3, [r2, #32]
 8002f68:	e00b      	b.n	8002f82 <HAL_RCC_OscConfig+0x36e>
 8002f6a:	4b67      	ldr	r3, [pc, #412]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	4a66      	ldr	r2, [pc, #408]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 8002f70:	f023 0301 	bic.w	r3, r3, #1
 8002f74:	6213      	str	r3, [r2, #32]
 8002f76:	4b64      	ldr	r3, [pc, #400]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	4a63      	ldr	r2, [pc, #396]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 8002f7c:	f023 0304 	bic.w	r3, r3, #4
 8002f80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d015      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8a:	f7fe fdfb 	bl	8001b84 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f90:	e00a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f92:	f7fe fdf7 	bl	8001b84 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e0ab      	b.n	8003100 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa8:	4b57      	ldr	r3, [pc, #348]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0ee      	beq.n	8002f92 <HAL_RCC_OscConfig+0x37e>
 8002fb4:	e014      	b.n	8002fe0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb6:	f7fe fde5 	bl	8001b84 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fbc:	e00a      	b.n	8002fd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fbe:	f7fe fde1 	bl	8001b84 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e095      	b.n	8003100 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd4:	4b4c      	ldr	r3, [pc, #304]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1ee      	bne.n	8002fbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fe0:	7dfb      	ldrb	r3, [r7, #23]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d105      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe6:	4b48      	ldr	r3, [pc, #288]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	4a47      	ldr	r2, [pc, #284]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 8002fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 8081 	beq.w	80030fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ffc:	4b42      	ldr	r3, [pc, #264]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f003 030c 	and.w	r3, r3, #12
 8003004:	2b08      	cmp	r3, #8
 8003006:	d061      	beq.n	80030cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d146      	bne.n	800309e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003010:	4b3f      	ldr	r3, [pc, #252]	; (8003110 <HAL_RCC_OscConfig+0x4fc>)
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003016:	f7fe fdb5 	bl	8001b84 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301e:	f7fe fdb1 	bl	8001b84 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e067      	b.n	8003100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003030:	4b35      	ldr	r3, [pc, #212]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1f0      	bne.n	800301e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003044:	d108      	bne.n	8003058 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003046:	4b30      	ldr	r3, [pc, #192]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	492d      	ldr	r1, [pc, #180]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 8003054:	4313      	orrs	r3, r2
 8003056:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003058:	4b2b      	ldr	r3, [pc, #172]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a19      	ldr	r1, [r3, #32]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	430b      	orrs	r3, r1
 800306a:	4927      	ldr	r1, [pc, #156]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 800306c:	4313      	orrs	r3, r2
 800306e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003070:	4b27      	ldr	r3, [pc, #156]	; (8003110 <HAL_RCC_OscConfig+0x4fc>)
 8003072:	2201      	movs	r2, #1
 8003074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003076:	f7fe fd85 	bl	8001b84 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307e:	f7fe fd81 	bl	8001b84 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e037      	b.n	8003100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003090:	4b1d      	ldr	r3, [pc, #116]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0f0      	beq.n	800307e <HAL_RCC_OscConfig+0x46a>
 800309c:	e02f      	b.n	80030fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800309e:	4b1c      	ldr	r3, [pc, #112]	; (8003110 <HAL_RCC_OscConfig+0x4fc>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a4:	f7fe fd6e 	bl	8001b84 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ac:	f7fe fd6a 	bl	8001b84 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e020      	b.n	8003100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030be:	4b12      	ldr	r3, [pc, #72]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f0      	bne.n	80030ac <HAL_RCC_OscConfig+0x498>
 80030ca:	e018      	b.n	80030fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e013      	b.n	8003100 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030d8:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <HAL_RCC_OscConfig+0x4f4>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d106      	bne.n	80030fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d001      	beq.n	80030fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40021000 	.word	0x40021000
 800310c:	40007000 	.word	0x40007000
 8003110:	42420060 	.word	0x42420060

08003114 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e0d0      	b.n	80032ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003128:	4b6a      	ldr	r3, [pc, #424]	; (80032d4 <HAL_RCC_ClockConfig+0x1c0>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d910      	bls.n	8003158 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003136:	4b67      	ldr	r3, [pc, #412]	; (80032d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f023 0207 	bic.w	r2, r3, #7
 800313e:	4965      	ldr	r1, [pc, #404]	; (80032d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	4313      	orrs	r3, r2
 8003144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003146:	4b63      	ldr	r3, [pc, #396]	; (80032d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d001      	beq.n	8003158 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e0b8      	b.n	80032ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d020      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003170:	4b59      	ldr	r3, [pc, #356]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	4a58      	ldr	r2, [pc, #352]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003176:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800317a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b00      	cmp	r3, #0
 8003186:	d005      	beq.n	8003194 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003188:	4b53      	ldr	r3, [pc, #332]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	4a52      	ldr	r2, [pc, #328]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 800318e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003192:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003194:	4b50      	ldr	r3, [pc, #320]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	494d      	ldr	r1, [pc, #308]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d040      	beq.n	8003234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d107      	bne.n	80031ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ba:	4b47      	ldr	r3, [pc, #284]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d115      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e07f      	b.n	80032ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d107      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d2:	4b41      	ldr	r3, [pc, #260]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d109      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e073      	b.n	80032ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e2:	4b3d      	ldr	r3, [pc, #244]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e06b      	b.n	80032ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031f2:	4b39      	ldr	r3, [pc, #228]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f023 0203 	bic.w	r2, r3, #3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	4936      	ldr	r1, [pc, #216]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003200:	4313      	orrs	r3, r2
 8003202:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003204:	f7fe fcbe 	bl	8001b84 <HAL_GetTick>
 8003208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320a:	e00a      	b.n	8003222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800320c:	f7fe fcba 	bl	8001b84 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f241 3288 	movw	r2, #5000	; 0x1388
 800321a:	4293      	cmp	r3, r2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e053      	b.n	80032ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003222:	4b2d      	ldr	r3, [pc, #180]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f003 020c 	and.w	r2, r3, #12
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	429a      	cmp	r2, r3
 8003232:	d1eb      	bne.n	800320c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003234:	4b27      	ldr	r3, [pc, #156]	; (80032d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d210      	bcs.n	8003264 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003242:	4b24      	ldr	r3, [pc, #144]	; (80032d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f023 0207 	bic.w	r2, r3, #7
 800324a:	4922      	ldr	r1, [pc, #136]	; (80032d4 <HAL_RCC_ClockConfig+0x1c0>)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	4313      	orrs	r3, r2
 8003250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003252:	4b20      	ldr	r3, [pc, #128]	; (80032d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d001      	beq.n	8003264 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e032      	b.n	80032ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d008      	beq.n	8003282 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003270:	4b19      	ldr	r3, [pc, #100]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	4916      	ldr	r1, [pc, #88]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 800327e:	4313      	orrs	r3, r2
 8003280:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d009      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800328e:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	490e      	ldr	r1, [pc, #56]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032a2:	f000 f821 	bl	80032e8 <HAL_RCC_GetSysClockFreq>
 80032a6:	4601      	mov	r1, r0
 80032a8:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	091b      	lsrs	r3, r3, #4
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	4a0a      	ldr	r2, [pc, #40]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 80032b4:	5cd3      	ldrb	r3, [r2, r3]
 80032b6:	fa21 f303 	lsr.w	r3, r1, r3
 80032ba:	4a09      	ldr	r2, [pc, #36]	; (80032e0 <HAL_RCC_ClockConfig+0x1cc>)
 80032bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032be:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <HAL_RCC_ClockConfig+0x1d0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe fc1c 	bl	8001b00 <HAL_InitTick>

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40022000 	.word	0x40022000
 80032d8:	40021000 	.word	0x40021000
 80032dc:	08006850 	.word	0x08006850
 80032e0:	20000010 	.word	0x20000010
 80032e4:	20000014 	.word	0x20000014

080032e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e8:	b490      	push	{r4, r7}
 80032ea:	b08a      	sub	sp, #40	; 0x28
 80032ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032ee:	4b2a      	ldr	r3, [pc, #168]	; (8003398 <HAL_RCC_GetSysClockFreq+0xb0>)
 80032f0:	1d3c      	adds	r4, r7, #4
 80032f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80032f8:	4b28      	ldr	r3, [pc, #160]	; (800339c <HAL_RCC_GetSysClockFreq+0xb4>)
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	61fb      	str	r3, [r7, #28]
 8003302:	2300      	movs	r3, #0
 8003304:	61bb      	str	r3, [r7, #24]
 8003306:	2300      	movs	r3, #0
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
 800330a:	2300      	movs	r3, #0
 800330c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003312:	4b23      	ldr	r3, [pc, #140]	; (80033a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f003 030c 	and.w	r3, r3, #12
 800331e:	2b04      	cmp	r3, #4
 8003320:	d002      	beq.n	8003328 <HAL_RCC_GetSysClockFreq+0x40>
 8003322:	2b08      	cmp	r3, #8
 8003324:	d003      	beq.n	800332e <HAL_RCC_GetSysClockFreq+0x46>
 8003326:	e02d      	b.n	8003384 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003328:	4b1e      	ldr	r3, [pc, #120]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800332a:	623b      	str	r3, [r7, #32]
      break;
 800332c:	e02d      	b.n	800338a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	0c9b      	lsrs	r3, r3, #18
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800333a:	4413      	add	r3, r2
 800333c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003340:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d013      	beq.n	8003374 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800334c:	4b14      	ldr	r3, [pc, #80]	; (80033a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	0c5b      	lsrs	r3, r3, #17
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800335a:	4413      	add	r3, r2
 800335c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003360:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	4a0f      	ldr	r2, [pc, #60]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003366:	fb02 f203 	mul.w	r2, r2, r3
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
 8003372:	e004      	b.n	800337e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	4a0c      	ldr	r2, [pc, #48]	; (80033a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003378:	fb02 f303 	mul.w	r3, r2, r3
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	623b      	str	r3, [r7, #32]
      break;
 8003382:	e002      	b.n	800338a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003384:	4b07      	ldr	r3, [pc, #28]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003386:	623b      	str	r3, [r7, #32]
      break;
 8003388:	bf00      	nop
    }
  }
  return sysclockfreq;
 800338a:	6a3b      	ldr	r3, [r7, #32]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3728      	adds	r7, #40	; 0x28
 8003390:	46bd      	mov	sp, r7
 8003392:	bc90      	pop	{r4, r7}
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	08004780 	.word	0x08004780
 800339c:	08004790 	.word	0x08004790
 80033a0:	40021000 	.word	0x40021000
 80033a4:	007a1200 	.word	0x007a1200
 80033a8:	003d0900 	.word	0x003d0900

080033ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033b0:	4b02      	ldr	r3, [pc, #8]	; (80033bc <HAL_RCC_GetHCLKFreq+0x10>)
 80033b2:	681b      	ldr	r3, [r3, #0]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr
 80033bc:	20000010 	.word	0x20000010

080033c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033c4:	f7ff fff2 	bl	80033ac <HAL_RCC_GetHCLKFreq>
 80033c8:	4601      	mov	r1, r0
 80033ca:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	0a1b      	lsrs	r3, r3, #8
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	4a03      	ldr	r2, [pc, #12]	; (80033e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033d6:	5cd3      	ldrb	r3, [r2, r3]
 80033d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033dc:	4618      	mov	r0, r3
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40021000 	.word	0x40021000
 80033e4:	08006860 	.word	0x08006860

080033e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033f0:	4b0a      	ldr	r3, [pc, #40]	; (800341c <RCC_Delay+0x34>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a0a      	ldr	r2, [pc, #40]	; (8003420 <RCC_Delay+0x38>)
 80033f6:	fba2 2303 	umull	r2, r3, r2, r3
 80033fa:	0a5b      	lsrs	r3, r3, #9
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	fb02 f303 	mul.w	r3, r2, r3
 8003402:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003404:	bf00      	nop
  }
  while (Delay --);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	1e5a      	subs	r2, r3, #1
 800340a:	60fa      	str	r2, [r7, #12]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1f9      	bne.n	8003404 <RCC_Delay+0x1c>
}
 8003410:	bf00      	nop
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	20000010 	.word	0x20000010
 8003420:	10624dd3 	.word	0x10624dd3

08003424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e041      	b.n	80034ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d106      	bne.n	8003450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7fe fa5a 	bl	8001904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3304      	adds	r3, #4
 8003460:	4619      	mov	r1, r3
 8003462:	4610      	mov	r0, r2
 8003464:	f000 fa64 	bl	8003930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
	...

080034c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d001      	beq.n	80034dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e03a      	b.n	8003552 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a18      	ldr	r2, [pc, #96]	; (800355c <HAL_TIM_Base_Start_IT+0x98>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d00e      	beq.n	800351c <HAL_TIM_Base_Start_IT+0x58>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003506:	d009      	beq.n	800351c <HAL_TIM_Base_Start_IT+0x58>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a14      	ldr	r2, [pc, #80]	; (8003560 <HAL_TIM_Base_Start_IT+0x9c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d004      	beq.n	800351c <HAL_TIM_Base_Start_IT+0x58>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a13      	ldr	r2, [pc, #76]	; (8003564 <HAL_TIM_Base_Start_IT+0xa0>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d111      	bne.n	8003540 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2b06      	cmp	r3, #6
 800352c:	d010      	beq.n	8003550 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 0201 	orr.w	r2, r2, #1
 800353c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800353e:	e007      	b.n	8003550 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr
 800355c:	40012c00 	.word	0x40012c00
 8003560:	40000400 	.word	0x40000400
 8003564:	40000800 	.word	0x40000800

08003568 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b02      	cmp	r3, #2
 800357c:	d122      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b02      	cmp	r3, #2
 800358a:	d11b      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f06f 0202 	mvn.w	r2, #2
 8003594:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f9a4 	bl	80038f8 <HAL_TIM_IC_CaptureCallback>
 80035b0:	e005      	b.n	80035be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f997 	bl	80038e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f9a6 	bl	800390a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d122      	bne.n	8003618 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b04      	cmp	r3, #4
 80035de:	d11b      	bne.n	8003618 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0204 	mvn.w	r2, #4
 80035e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2202      	movs	r2, #2
 80035ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f97a 	bl	80038f8 <HAL_TIM_IC_CaptureCallback>
 8003604:	e005      	b.n	8003612 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f96d 	bl	80038e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f97c 	bl	800390a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b08      	cmp	r3, #8
 8003624:	d122      	bne.n	800366c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f003 0308 	and.w	r3, r3, #8
 8003630:	2b08      	cmp	r3, #8
 8003632:	d11b      	bne.n	800366c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f06f 0208 	mvn.w	r2, #8
 800363c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2204      	movs	r2, #4
 8003642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f950 	bl	80038f8 <HAL_TIM_IC_CaptureCallback>
 8003658:	e005      	b.n	8003666 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f943 	bl	80038e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f952 	bl	800390a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	2b10      	cmp	r3, #16
 8003678:	d122      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f003 0310 	and.w	r3, r3, #16
 8003684:	2b10      	cmp	r3, #16
 8003686:	d11b      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0210 	mvn.w	r2, #16
 8003690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2208      	movs	r2, #8
 8003696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f926 	bl	80038f8 <HAL_TIM_IC_CaptureCallback>
 80036ac:	e005      	b.n	80036ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f919 	bl	80038e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f928 	bl	800390a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d10e      	bne.n	80036ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d107      	bne.n	80036ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f06f 0201 	mvn.w	r2, #1
 80036e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fd fc0a 	bl	8000f00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f6:	2b80      	cmp	r3, #128	; 0x80
 80036f8:	d10e      	bne.n	8003718 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003704:	2b80      	cmp	r3, #128	; 0x80
 8003706:	d107      	bne.n	8003718 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 fa6b 	bl	8003bee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003722:	2b40      	cmp	r3, #64	; 0x40
 8003724:	d10e      	bne.n	8003744 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003730:	2b40      	cmp	r3, #64	; 0x40
 8003732:	d107      	bne.n	8003744 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800373c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f8ec 	bl	800391c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b20      	cmp	r3, #32
 8003750:	d10e      	bne.n	8003770 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b20      	cmp	r3, #32
 800375e:	d107      	bne.n	8003770 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0220 	mvn.w	r2, #32
 8003768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 fa36 	bl	8003bdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003770:	bf00      	nop
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003788:	2b01      	cmp	r3, #1
 800378a:	d101      	bne.n	8003790 <HAL_TIM_ConfigClockSource+0x18>
 800378c:	2302      	movs	r3, #2
 800378e:	e0a6      	b.n	80038de <HAL_TIM_ConfigClockSource+0x166>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b40      	cmp	r3, #64	; 0x40
 80037c6:	d067      	beq.n	8003898 <HAL_TIM_ConfigClockSource+0x120>
 80037c8:	2b40      	cmp	r3, #64	; 0x40
 80037ca:	d80b      	bhi.n	80037e4 <HAL_TIM_ConfigClockSource+0x6c>
 80037cc:	2b10      	cmp	r3, #16
 80037ce:	d073      	beq.n	80038b8 <HAL_TIM_ConfigClockSource+0x140>
 80037d0:	2b10      	cmp	r3, #16
 80037d2:	d802      	bhi.n	80037da <HAL_TIM_ConfigClockSource+0x62>
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d06f      	beq.n	80038b8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80037d8:	e078      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037da:	2b20      	cmp	r3, #32
 80037dc:	d06c      	beq.n	80038b8 <HAL_TIM_ConfigClockSource+0x140>
 80037de:	2b30      	cmp	r3, #48	; 0x30
 80037e0:	d06a      	beq.n	80038b8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80037e2:	e073      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037e4:	2b70      	cmp	r3, #112	; 0x70
 80037e6:	d00d      	beq.n	8003804 <HAL_TIM_ConfigClockSource+0x8c>
 80037e8:	2b70      	cmp	r3, #112	; 0x70
 80037ea:	d804      	bhi.n	80037f6 <HAL_TIM_ConfigClockSource+0x7e>
 80037ec:	2b50      	cmp	r3, #80	; 0x50
 80037ee:	d033      	beq.n	8003858 <HAL_TIM_ConfigClockSource+0xe0>
 80037f0:	2b60      	cmp	r3, #96	; 0x60
 80037f2:	d041      	beq.n	8003878 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80037f4:	e06a      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037fa:	d066      	beq.n	80038ca <HAL_TIM_ConfigClockSource+0x152>
 80037fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003800:	d017      	beq.n	8003832 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003802:	e063      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6818      	ldr	r0, [r3, #0]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	6899      	ldr	r1, [r3, #8]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f000 f965 	bl	8003ae2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003826:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	609a      	str	r2, [r3, #8]
      break;
 8003830:	e04c      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	6899      	ldr	r1, [r3, #8]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f000 f94e 	bl	8003ae2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003854:	609a      	str	r2, [r3, #8]
      break;
 8003856:	e039      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6818      	ldr	r0, [r3, #0]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	6859      	ldr	r1, [r3, #4]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	461a      	mov	r2, r3
 8003866:	f000 f8c5 	bl	80039f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2150      	movs	r1, #80	; 0x50
 8003870:	4618      	mov	r0, r3
 8003872:	f000 f91c 	bl	8003aae <TIM_ITRx_SetConfig>
      break;
 8003876:	e029      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	6859      	ldr	r1, [r3, #4]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	461a      	mov	r2, r3
 8003886:	f000 f8e3 	bl	8003a50 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2160      	movs	r1, #96	; 0x60
 8003890:	4618      	mov	r0, r3
 8003892:	f000 f90c 	bl	8003aae <TIM_ITRx_SetConfig>
      break;
 8003896:	e019      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6818      	ldr	r0, [r3, #0]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	6859      	ldr	r1, [r3, #4]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	461a      	mov	r2, r3
 80038a6:	f000 f8a5 	bl	80039f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2140      	movs	r1, #64	; 0x40
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 f8fc 	bl	8003aae <TIM_ITRx_SetConfig>
      break;
 80038b6:	e009      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4619      	mov	r1, r3
 80038c2:	4610      	mov	r0, r2
 80038c4:	f000 f8f3 	bl	8003aae <TIM_ITRx_SetConfig>
        break;
 80038c8:	e000      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80038ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr

080038f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr

0800390a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr

0800391c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr
	...

08003930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a29      	ldr	r2, [pc, #164]	; (80039e8 <TIM_Base_SetConfig+0xb8>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d00b      	beq.n	8003960 <TIM_Base_SetConfig+0x30>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394e:	d007      	beq.n	8003960 <TIM_Base_SetConfig+0x30>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a26      	ldr	r2, [pc, #152]	; (80039ec <TIM_Base_SetConfig+0xbc>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d003      	beq.n	8003960 <TIM_Base_SetConfig+0x30>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a25      	ldr	r2, [pc, #148]	; (80039f0 <TIM_Base_SetConfig+0xc0>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d108      	bne.n	8003972 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	4313      	orrs	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a1c      	ldr	r2, [pc, #112]	; (80039e8 <TIM_Base_SetConfig+0xb8>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d00b      	beq.n	8003992 <TIM_Base_SetConfig+0x62>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003980:	d007      	beq.n	8003992 <TIM_Base_SetConfig+0x62>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a19      	ldr	r2, [pc, #100]	; (80039ec <TIM_Base_SetConfig+0xbc>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d003      	beq.n	8003992 <TIM_Base_SetConfig+0x62>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a18      	ldr	r2, [pc, #96]	; (80039f0 <TIM_Base_SetConfig+0xc0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d108      	bne.n	80039a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a07      	ldr	r2, [pc, #28]	; (80039e8 <TIM_Base_SetConfig+0xb8>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d103      	bne.n	80039d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	615a      	str	r2, [r3, #20]
}
 80039de:	bf00      	nop
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr
 80039e8:	40012c00 	.word	0x40012c00
 80039ec:	40000400 	.word	0x40000400
 80039f0:	40000800 	.word	0x40000800

080039f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	f023 0201 	bic.w	r2, r3, #1
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f023 030a 	bic.w	r3, r3, #10
 8003a30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	621a      	str	r2, [r3, #32]
}
 8003a46:	bf00      	nop
 8003a48:	371c      	adds	r7, #28
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr

08003a50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	f023 0210 	bic.w	r2, r3, #16
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	031b      	lsls	r3, r3, #12
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	621a      	str	r2, [r3, #32]
}
 8003aa4:	bf00      	nop
 8003aa6:	371c      	adds	r7, #28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bc80      	pop	{r7}
 8003aac:	4770      	bx	lr

08003aae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b085      	sub	sp, #20
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f043 0307 	orr.w	r3, r3, #7
 8003ad0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	609a      	str	r2, [r3, #8]
}
 8003ad8:	bf00      	nop
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bc80      	pop	{r7}
 8003ae0:	4770      	bx	lr

08003ae2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b087      	sub	sp, #28
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	60b9      	str	r1, [r7, #8]
 8003aec:	607a      	str	r2, [r7, #4]
 8003aee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003afc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	021a      	lsls	r2, r3, #8
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	431a      	orrs	r2, r3
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	609a      	str	r2, [r3, #8]
}
 8003b16:	bf00      	nop
 8003b18:	371c      	adds	r7, #28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr

08003b20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e046      	b.n	8003bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a16      	ldr	r2, [pc, #88]	; (8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d00e      	beq.n	8003b9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b84:	d009      	beq.n	8003b9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a12      	ldr	r2, [pc, #72]	; (8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d004      	beq.n	8003b9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a10      	ldr	r2, [pc, #64]	; (8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d10c      	bne.n	8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ba0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr
 8003bd0:	40012c00 	.word	0x40012c00
 8003bd4:	40000400 	.word	0x40000400
 8003bd8:	40000800 	.word	0x40000800

08003bdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr

08003bee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr

08003c00 <__errno>:
 8003c00:	4b01      	ldr	r3, [pc, #4]	; (8003c08 <__errno+0x8>)
 8003c02:	6818      	ldr	r0, [r3, #0]
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	2000001c 	.word	0x2000001c

08003c0c <__libc_init_array>:
 8003c0c:	b570      	push	{r4, r5, r6, lr}
 8003c0e:	2500      	movs	r5, #0
 8003c10:	4e0c      	ldr	r6, [pc, #48]	; (8003c44 <__libc_init_array+0x38>)
 8003c12:	4c0d      	ldr	r4, [pc, #52]	; (8003c48 <__libc_init_array+0x3c>)
 8003c14:	1ba4      	subs	r4, r4, r6
 8003c16:	10a4      	asrs	r4, r4, #2
 8003c18:	42a5      	cmp	r5, r4
 8003c1a:	d109      	bne.n	8003c30 <__libc_init_array+0x24>
 8003c1c:	f000 fc34 	bl	8004488 <_init>
 8003c20:	2500      	movs	r5, #0
 8003c22:	4e0a      	ldr	r6, [pc, #40]	; (8003c4c <__libc_init_array+0x40>)
 8003c24:	4c0a      	ldr	r4, [pc, #40]	; (8003c50 <__libc_init_array+0x44>)
 8003c26:	1ba4      	subs	r4, r4, r6
 8003c28:	10a4      	asrs	r4, r4, #2
 8003c2a:	42a5      	cmp	r5, r4
 8003c2c:	d105      	bne.n	8003c3a <__libc_init_array+0x2e>
 8003c2e:	bd70      	pop	{r4, r5, r6, pc}
 8003c30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c34:	4798      	blx	r3
 8003c36:	3501      	adds	r5, #1
 8003c38:	e7ee      	b.n	8003c18 <__libc_init_array+0xc>
 8003c3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c3e:	4798      	blx	r3
 8003c40:	3501      	adds	r5, #1
 8003c42:	e7f2      	b.n	8003c2a <__libc_init_array+0x1e>
 8003c44:	0800689c 	.word	0x0800689c
 8003c48:	0800689c 	.word	0x0800689c
 8003c4c:	0800689c 	.word	0x0800689c
 8003c50:	080068a0 	.word	0x080068a0

08003c54 <memset>:
 8003c54:	4603      	mov	r3, r0
 8003c56:	4402      	add	r2, r0
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d100      	bne.n	8003c5e <memset+0xa>
 8003c5c:	4770      	bx	lr
 8003c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c62:	e7f9      	b.n	8003c58 <memset+0x4>

08003c64 <siprintf>:
 8003c64:	b40e      	push	{r1, r2, r3}
 8003c66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c6a:	b500      	push	{lr}
 8003c6c:	b09c      	sub	sp, #112	; 0x70
 8003c6e:	ab1d      	add	r3, sp, #116	; 0x74
 8003c70:	9002      	str	r0, [sp, #8]
 8003c72:	9006      	str	r0, [sp, #24]
 8003c74:	9107      	str	r1, [sp, #28]
 8003c76:	9104      	str	r1, [sp, #16]
 8003c78:	4808      	ldr	r0, [pc, #32]	; (8003c9c <siprintf+0x38>)
 8003c7a:	4909      	ldr	r1, [pc, #36]	; (8003ca0 <siprintf+0x3c>)
 8003c7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c80:	9105      	str	r1, [sp, #20]
 8003c82:	6800      	ldr	r0, [r0, #0]
 8003c84:	a902      	add	r1, sp, #8
 8003c86:	9301      	str	r3, [sp, #4]
 8003c88:	f000 f866 	bl	8003d58 <_svfiprintf_r>
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	9b02      	ldr	r3, [sp, #8]
 8003c90:	701a      	strb	r2, [r3, #0]
 8003c92:	b01c      	add	sp, #112	; 0x70
 8003c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c98:	b003      	add	sp, #12
 8003c9a:	4770      	bx	lr
 8003c9c:	2000001c 	.word	0x2000001c
 8003ca0:	ffff0208 	.word	0xffff0208

08003ca4 <__ssputs_r>:
 8003ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca8:	688e      	ldr	r6, [r1, #8]
 8003caa:	4682      	mov	sl, r0
 8003cac:	429e      	cmp	r6, r3
 8003cae:	460c      	mov	r4, r1
 8003cb0:	4690      	mov	r8, r2
 8003cb2:	4699      	mov	r9, r3
 8003cb4:	d837      	bhi.n	8003d26 <__ssputs_r+0x82>
 8003cb6:	898a      	ldrh	r2, [r1, #12]
 8003cb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003cbc:	d031      	beq.n	8003d22 <__ssputs_r+0x7e>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	6825      	ldr	r5, [r4, #0]
 8003cc2:	6909      	ldr	r1, [r1, #16]
 8003cc4:	1a6f      	subs	r7, r5, r1
 8003cc6:	6965      	ldr	r5, [r4, #20]
 8003cc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ccc:	fb95 f5f3 	sdiv	r5, r5, r3
 8003cd0:	f109 0301 	add.w	r3, r9, #1
 8003cd4:	443b      	add	r3, r7
 8003cd6:	429d      	cmp	r5, r3
 8003cd8:	bf38      	it	cc
 8003cda:	461d      	movcc	r5, r3
 8003cdc:	0553      	lsls	r3, r2, #21
 8003cde:	d530      	bpl.n	8003d42 <__ssputs_r+0x9e>
 8003ce0:	4629      	mov	r1, r5
 8003ce2:	f000 fb37 	bl	8004354 <_malloc_r>
 8003ce6:	4606      	mov	r6, r0
 8003ce8:	b950      	cbnz	r0, 8003d00 <__ssputs_r+0x5c>
 8003cea:	230c      	movs	r3, #12
 8003cec:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf0:	f8ca 3000 	str.w	r3, [sl]
 8003cf4:	89a3      	ldrh	r3, [r4, #12]
 8003cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cfa:	81a3      	strh	r3, [r4, #12]
 8003cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d00:	463a      	mov	r2, r7
 8003d02:	6921      	ldr	r1, [r4, #16]
 8003d04:	f000 fab6 	bl	8004274 <memcpy>
 8003d08:	89a3      	ldrh	r3, [r4, #12]
 8003d0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d12:	81a3      	strh	r3, [r4, #12]
 8003d14:	6126      	str	r6, [r4, #16]
 8003d16:	443e      	add	r6, r7
 8003d18:	6026      	str	r6, [r4, #0]
 8003d1a:	464e      	mov	r6, r9
 8003d1c:	6165      	str	r5, [r4, #20]
 8003d1e:	1bed      	subs	r5, r5, r7
 8003d20:	60a5      	str	r5, [r4, #8]
 8003d22:	454e      	cmp	r6, r9
 8003d24:	d900      	bls.n	8003d28 <__ssputs_r+0x84>
 8003d26:	464e      	mov	r6, r9
 8003d28:	4632      	mov	r2, r6
 8003d2a:	4641      	mov	r1, r8
 8003d2c:	6820      	ldr	r0, [r4, #0]
 8003d2e:	f000 faac 	bl	800428a <memmove>
 8003d32:	68a3      	ldr	r3, [r4, #8]
 8003d34:	2000      	movs	r0, #0
 8003d36:	1b9b      	subs	r3, r3, r6
 8003d38:	60a3      	str	r3, [r4, #8]
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	441e      	add	r6, r3
 8003d3e:	6026      	str	r6, [r4, #0]
 8003d40:	e7dc      	b.n	8003cfc <__ssputs_r+0x58>
 8003d42:	462a      	mov	r2, r5
 8003d44:	f000 fb60 	bl	8004408 <_realloc_r>
 8003d48:	4606      	mov	r6, r0
 8003d4a:	2800      	cmp	r0, #0
 8003d4c:	d1e2      	bne.n	8003d14 <__ssputs_r+0x70>
 8003d4e:	6921      	ldr	r1, [r4, #16]
 8003d50:	4650      	mov	r0, sl
 8003d52:	f000 fab3 	bl	80042bc <_free_r>
 8003d56:	e7c8      	b.n	8003cea <__ssputs_r+0x46>

08003d58 <_svfiprintf_r>:
 8003d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d5c:	461d      	mov	r5, r3
 8003d5e:	898b      	ldrh	r3, [r1, #12]
 8003d60:	b09d      	sub	sp, #116	; 0x74
 8003d62:	061f      	lsls	r7, r3, #24
 8003d64:	4680      	mov	r8, r0
 8003d66:	460c      	mov	r4, r1
 8003d68:	4616      	mov	r6, r2
 8003d6a:	d50f      	bpl.n	8003d8c <_svfiprintf_r+0x34>
 8003d6c:	690b      	ldr	r3, [r1, #16]
 8003d6e:	b96b      	cbnz	r3, 8003d8c <_svfiprintf_r+0x34>
 8003d70:	2140      	movs	r1, #64	; 0x40
 8003d72:	f000 faef 	bl	8004354 <_malloc_r>
 8003d76:	6020      	str	r0, [r4, #0]
 8003d78:	6120      	str	r0, [r4, #16]
 8003d7a:	b928      	cbnz	r0, 8003d88 <_svfiprintf_r+0x30>
 8003d7c:	230c      	movs	r3, #12
 8003d7e:	f8c8 3000 	str.w	r3, [r8]
 8003d82:	f04f 30ff 	mov.w	r0, #4294967295
 8003d86:	e0c8      	b.n	8003f1a <_svfiprintf_r+0x1c2>
 8003d88:	2340      	movs	r3, #64	; 0x40
 8003d8a:	6163      	str	r3, [r4, #20]
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8003d90:	2320      	movs	r3, #32
 8003d92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d96:	2330      	movs	r3, #48	; 0x30
 8003d98:	f04f 0b01 	mov.w	fp, #1
 8003d9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003da0:	9503      	str	r5, [sp, #12]
 8003da2:	4637      	mov	r7, r6
 8003da4:	463d      	mov	r5, r7
 8003da6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003daa:	b10b      	cbz	r3, 8003db0 <_svfiprintf_r+0x58>
 8003dac:	2b25      	cmp	r3, #37	; 0x25
 8003dae:	d13e      	bne.n	8003e2e <_svfiprintf_r+0xd6>
 8003db0:	ebb7 0a06 	subs.w	sl, r7, r6
 8003db4:	d00b      	beq.n	8003dce <_svfiprintf_r+0x76>
 8003db6:	4653      	mov	r3, sl
 8003db8:	4632      	mov	r2, r6
 8003dba:	4621      	mov	r1, r4
 8003dbc:	4640      	mov	r0, r8
 8003dbe:	f7ff ff71 	bl	8003ca4 <__ssputs_r>
 8003dc2:	3001      	adds	r0, #1
 8003dc4:	f000 80a4 	beq.w	8003f10 <_svfiprintf_r+0x1b8>
 8003dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dca:	4453      	add	r3, sl
 8003dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8003dce:	783b      	ldrb	r3, [r7, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 809d 	beq.w	8003f10 <_svfiprintf_r+0x1b8>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ddc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003de0:	9304      	str	r3, [sp, #16]
 8003de2:	9307      	str	r3, [sp, #28]
 8003de4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003de8:	931a      	str	r3, [sp, #104]	; 0x68
 8003dea:	462f      	mov	r7, r5
 8003dec:	2205      	movs	r2, #5
 8003dee:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003df2:	4850      	ldr	r0, [pc, #320]	; (8003f34 <_svfiprintf_r+0x1dc>)
 8003df4:	f000 fa30 	bl	8004258 <memchr>
 8003df8:	9b04      	ldr	r3, [sp, #16]
 8003dfa:	b9d0      	cbnz	r0, 8003e32 <_svfiprintf_r+0xda>
 8003dfc:	06d9      	lsls	r1, r3, #27
 8003dfe:	bf44      	itt	mi
 8003e00:	2220      	movmi	r2, #32
 8003e02:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e06:	071a      	lsls	r2, r3, #28
 8003e08:	bf44      	itt	mi
 8003e0a:	222b      	movmi	r2, #43	; 0x2b
 8003e0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e10:	782a      	ldrb	r2, [r5, #0]
 8003e12:	2a2a      	cmp	r2, #42	; 0x2a
 8003e14:	d015      	beq.n	8003e42 <_svfiprintf_r+0xea>
 8003e16:	462f      	mov	r7, r5
 8003e18:	2000      	movs	r0, #0
 8003e1a:	250a      	movs	r5, #10
 8003e1c:	9a07      	ldr	r2, [sp, #28]
 8003e1e:	4639      	mov	r1, r7
 8003e20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e24:	3b30      	subs	r3, #48	; 0x30
 8003e26:	2b09      	cmp	r3, #9
 8003e28:	d94d      	bls.n	8003ec6 <_svfiprintf_r+0x16e>
 8003e2a:	b1b8      	cbz	r0, 8003e5c <_svfiprintf_r+0x104>
 8003e2c:	e00f      	b.n	8003e4e <_svfiprintf_r+0xf6>
 8003e2e:	462f      	mov	r7, r5
 8003e30:	e7b8      	b.n	8003da4 <_svfiprintf_r+0x4c>
 8003e32:	4a40      	ldr	r2, [pc, #256]	; (8003f34 <_svfiprintf_r+0x1dc>)
 8003e34:	463d      	mov	r5, r7
 8003e36:	1a80      	subs	r0, r0, r2
 8003e38:	fa0b f000 	lsl.w	r0, fp, r0
 8003e3c:	4318      	orrs	r0, r3
 8003e3e:	9004      	str	r0, [sp, #16]
 8003e40:	e7d3      	b.n	8003dea <_svfiprintf_r+0x92>
 8003e42:	9a03      	ldr	r2, [sp, #12]
 8003e44:	1d11      	adds	r1, r2, #4
 8003e46:	6812      	ldr	r2, [r2, #0]
 8003e48:	9103      	str	r1, [sp, #12]
 8003e4a:	2a00      	cmp	r2, #0
 8003e4c:	db01      	blt.n	8003e52 <_svfiprintf_r+0xfa>
 8003e4e:	9207      	str	r2, [sp, #28]
 8003e50:	e004      	b.n	8003e5c <_svfiprintf_r+0x104>
 8003e52:	4252      	negs	r2, r2
 8003e54:	f043 0302 	orr.w	r3, r3, #2
 8003e58:	9207      	str	r2, [sp, #28]
 8003e5a:	9304      	str	r3, [sp, #16]
 8003e5c:	783b      	ldrb	r3, [r7, #0]
 8003e5e:	2b2e      	cmp	r3, #46	; 0x2e
 8003e60:	d10c      	bne.n	8003e7c <_svfiprintf_r+0x124>
 8003e62:	787b      	ldrb	r3, [r7, #1]
 8003e64:	2b2a      	cmp	r3, #42	; 0x2a
 8003e66:	d133      	bne.n	8003ed0 <_svfiprintf_r+0x178>
 8003e68:	9b03      	ldr	r3, [sp, #12]
 8003e6a:	3702      	adds	r7, #2
 8003e6c:	1d1a      	adds	r2, r3, #4
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	9203      	str	r2, [sp, #12]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	bfb8      	it	lt
 8003e76:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e7a:	9305      	str	r3, [sp, #20]
 8003e7c:	4d2e      	ldr	r5, [pc, #184]	; (8003f38 <_svfiprintf_r+0x1e0>)
 8003e7e:	2203      	movs	r2, #3
 8003e80:	7839      	ldrb	r1, [r7, #0]
 8003e82:	4628      	mov	r0, r5
 8003e84:	f000 f9e8 	bl	8004258 <memchr>
 8003e88:	b138      	cbz	r0, 8003e9a <_svfiprintf_r+0x142>
 8003e8a:	2340      	movs	r3, #64	; 0x40
 8003e8c:	1b40      	subs	r0, r0, r5
 8003e8e:	fa03 f000 	lsl.w	r0, r3, r0
 8003e92:	9b04      	ldr	r3, [sp, #16]
 8003e94:	3701      	adds	r7, #1
 8003e96:	4303      	orrs	r3, r0
 8003e98:	9304      	str	r3, [sp, #16]
 8003e9a:	7839      	ldrb	r1, [r7, #0]
 8003e9c:	2206      	movs	r2, #6
 8003e9e:	4827      	ldr	r0, [pc, #156]	; (8003f3c <_svfiprintf_r+0x1e4>)
 8003ea0:	1c7e      	adds	r6, r7, #1
 8003ea2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ea6:	f000 f9d7 	bl	8004258 <memchr>
 8003eaa:	2800      	cmp	r0, #0
 8003eac:	d038      	beq.n	8003f20 <_svfiprintf_r+0x1c8>
 8003eae:	4b24      	ldr	r3, [pc, #144]	; (8003f40 <_svfiprintf_r+0x1e8>)
 8003eb0:	bb13      	cbnz	r3, 8003ef8 <_svfiprintf_r+0x1a0>
 8003eb2:	9b03      	ldr	r3, [sp, #12]
 8003eb4:	3307      	adds	r3, #7
 8003eb6:	f023 0307 	bic.w	r3, r3, #7
 8003eba:	3308      	adds	r3, #8
 8003ebc:	9303      	str	r3, [sp, #12]
 8003ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ec0:	444b      	add	r3, r9
 8003ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ec4:	e76d      	b.n	8003da2 <_svfiprintf_r+0x4a>
 8003ec6:	fb05 3202 	mla	r2, r5, r2, r3
 8003eca:	2001      	movs	r0, #1
 8003ecc:	460f      	mov	r7, r1
 8003ece:	e7a6      	b.n	8003e1e <_svfiprintf_r+0xc6>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	250a      	movs	r5, #10
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	3701      	adds	r7, #1
 8003ed8:	9305      	str	r3, [sp, #20]
 8003eda:	4638      	mov	r0, r7
 8003edc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ee0:	3a30      	subs	r2, #48	; 0x30
 8003ee2:	2a09      	cmp	r2, #9
 8003ee4:	d903      	bls.n	8003eee <_svfiprintf_r+0x196>
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0c8      	beq.n	8003e7c <_svfiprintf_r+0x124>
 8003eea:	9105      	str	r1, [sp, #20]
 8003eec:	e7c6      	b.n	8003e7c <_svfiprintf_r+0x124>
 8003eee:	fb05 2101 	mla	r1, r5, r1, r2
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	4607      	mov	r7, r0
 8003ef6:	e7f0      	b.n	8003eda <_svfiprintf_r+0x182>
 8003ef8:	ab03      	add	r3, sp, #12
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	4622      	mov	r2, r4
 8003efe:	4b11      	ldr	r3, [pc, #68]	; (8003f44 <_svfiprintf_r+0x1ec>)
 8003f00:	a904      	add	r1, sp, #16
 8003f02:	4640      	mov	r0, r8
 8003f04:	f3af 8000 	nop.w
 8003f08:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003f0c:	4681      	mov	r9, r0
 8003f0e:	d1d6      	bne.n	8003ebe <_svfiprintf_r+0x166>
 8003f10:	89a3      	ldrh	r3, [r4, #12]
 8003f12:	065b      	lsls	r3, r3, #25
 8003f14:	f53f af35 	bmi.w	8003d82 <_svfiprintf_r+0x2a>
 8003f18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f1a:	b01d      	add	sp, #116	; 0x74
 8003f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f20:	ab03      	add	r3, sp, #12
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	4622      	mov	r2, r4
 8003f26:	4b07      	ldr	r3, [pc, #28]	; (8003f44 <_svfiprintf_r+0x1ec>)
 8003f28:	a904      	add	r1, sp, #16
 8003f2a:	4640      	mov	r0, r8
 8003f2c:	f000 f882 	bl	8004034 <_printf_i>
 8003f30:	e7ea      	b.n	8003f08 <_svfiprintf_r+0x1b0>
 8003f32:	bf00      	nop
 8003f34:	08006868 	.word	0x08006868
 8003f38:	0800686e 	.word	0x0800686e
 8003f3c:	08006872 	.word	0x08006872
 8003f40:	00000000 	.word	0x00000000
 8003f44:	08003ca5 	.word	0x08003ca5

08003f48 <_printf_common>:
 8003f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f4c:	4691      	mov	r9, r2
 8003f4e:	461f      	mov	r7, r3
 8003f50:	688a      	ldr	r2, [r1, #8]
 8003f52:	690b      	ldr	r3, [r1, #16]
 8003f54:	4606      	mov	r6, r0
 8003f56:	4293      	cmp	r3, r2
 8003f58:	bfb8      	it	lt
 8003f5a:	4613      	movlt	r3, r2
 8003f5c:	f8c9 3000 	str.w	r3, [r9]
 8003f60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f64:	460c      	mov	r4, r1
 8003f66:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f6a:	b112      	cbz	r2, 8003f72 <_printf_common+0x2a>
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	f8c9 3000 	str.w	r3, [r9]
 8003f72:	6823      	ldr	r3, [r4, #0]
 8003f74:	0699      	lsls	r1, r3, #26
 8003f76:	bf42      	ittt	mi
 8003f78:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003f7c:	3302      	addmi	r3, #2
 8003f7e:	f8c9 3000 	strmi.w	r3, [r9]
 8003f82:	6825      	ldr	r5, [r4, #0]
 8003f84:	f015 0506 	ands.w	r5, r5, #6
 8003f88:	d107      	bne.n	8003f9a <_printf_common+0x52>
 8003f8a:	f104 0a19 	add.w	sl, r4, #25
 8003f8e:	68e3      	ldr	r3, [r4, #12]
 8003f90:	f8d9 2000 	ldr.w	r2, [r9]
 8003f94:	1a9b      	subs	r3, r3, r2
 8003f96:	42ab      	cmp	r3, r5
 8003f98:	dc29      	bgt.n	8003fee <_printf_common+0xa6>
 8003f9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003f9e:	6822      	ldr	r2, [r4, #0]
 8003fa0:	3300      	adds	r3, #0
 8003fa2:	bf18      	it	ne
 8003fa4:	2301      	movne	r3, #1
 8003fa6:	0692      	lsls	r2, r2, #26
 8003fa8:	d42e      	bmi.n	8004008 <_printf_common+0xc0>
 8003faa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fae:	4639      	mov	r1, r7
 8003fb0:	4630      	mov	r0, r6
 8003fb2:	47c0      	blx	r8
 8003fb4:	3001      	adds	r0, #1
 8003fb6:	d021      	beq.n	8003ffc <_printf_common+0xb4>
 8003fb8:	6823      	ldr	r3, [r4, #0]
 8003fba:	68e5      	ldr	r5, [r4, #12]
 8003fbc:	f003 0306 	and.w	r3, r3, #6
 8003fc0:	2b04      	cmp	r3, #4
 8003fc2:	bf18      	it	ne
 8003fc4:	2500      	movne	r5, #0
 8003fc6:	f8d9 2000 	ldr.w	r2, [r9]
 8003fca:	f04f 0900 	mov.w	r9, #0
 8003fce:	bf08      	it	eq
 8003fd0:	1aad      	subeq	r5, r5, r2
 8003fd2:	68a3      	ldr	r3, [r4, #8]
 8003fd4:	6922      	ldr	r2, [r4, #16]
 8003fd6:	bf08      	it	eq
 8003fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	bfc4      	itt	gt
 8003fe0:	1a9b      	subgt	r3, r3, r2
 8003fe2:	18ed      	addgt	r5, r5, r3
 8003fe4:	341a      	adds	r4, #26
 8003fe6:	454d      	cmp	r5, r9
 8003fe8:	d11a      	bne.n	8004020 <_printf_common+0xd8>
 8003fea:	2000      	movs	r0, #0
 8003fec:	e008      	b.n	8004000 <_printf_common+0xb8>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	4652      	mov	r2, sl
 8003ff2:	4639      	mov	r1, r7
 8003ff4:	4630      	mov	r0, r6
 8003ff6:	47c0      	blx	r8
 8003ff8:	3001      	adds	r0, #1
 8003ffa:	d103      	bne.n	8004004 <_printf_common+0xbc>
 8003ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8004000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004004:	3501      	adds	r5, #1
 8004006:	e7c2      	b.n	8003f8e <_printf_common+0x46>
 8004008:	2030      	movs	r0, #48	; 0x30
 800400a:	18e1      	adds	r1, r4, r3
 800400c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004016:	4422      	add	r2, r4
 8004018:	3302      	adds	r3, #2
 800401a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800401e:	e7c4      	b.n	8003faa <_printf_common+0x62>
 8004020:	2301      	movs	r3, #1
 8004022:	4622      	mov	r2, r4
 8004024:	4639      	mov	r1, r7
 8004026:	4630      	mov	r0, r6
 8004028:	47c0      	blx	r8
 800402a:	3001      	adds	r0, #1
 800402c:	d0e6      	beq.n	8003ffc <_printf_common+0xb4>
 800402e:	f109 0901 	add.w	r9, r9, #1
 8004032:	e7d8      	b.n	8003fe6 <_printf_common+0x9e>

08004034 <_printf_i>:
 8004034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004038:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800403c:	460c      	mov	r4, r1
 800403e:	7e09      	ldrb	r1, [r1, #24]
 8004040:	b085      	sub	sp, #20
 8004042:	296e      	cmp	r1, #110	; 0x6e
 8004044:	4617      	mov	r7, r2
 8004046:	4606      	mov	r6, r0
 8004048:	4698      	mov	r8, r3
 800404a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800404c:	f000 80b3 	beq.w	80041b6 <_printf_i+0x182>
 8004050:	d822      	bhi.n	8004098 <_printf_i+0x64>
 8004052:	2963      	cmp	r1, #99	; 0x63
 8004054:	d036      	beq.n	80040c4 <_printf_i+0x90>
 8004056:	d80a      	bhi.n	800406e <_printf_i+0x3a>
 8004058:	2900      	cmp	r1, #0
 800405a:	f000 80b9 	beq.w	80041d0 <_printf_i+0x19c>
 800405e:	2958      	cmp	r1, #88	; 0x58
 8004060:	f000 8083 	beq.w	800416a <_printf_i+0x136>
 8004064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004068:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800406c:	e032      	b.n	80040d4 <_printf_i+0xa0>
 800406e:	2964      	cmp	r1, #100	; 0x64
 8004070:	d001      	beq.n	8004076 <_printf_i+0x42>
 8004072:	2969      	cmp	r1, #105	; 0x69
 8004074:	d1f6      	bne.n	8004064 <_printf_i+0x30>
 8004076:	6820      	ldr	r0, [r4, #0]
 8004078:	6813      	ldr	r3, [r2, #0]
 800407a:	0605      	lsls	r5, r0, #24
 800407c:	f103 0104 	add.w	r1, r3, #4
 8004080:	d52a      	bpl.n	80040d8 <_printf_i+0xa4>
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6011      	str	r1, [r2, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	da03      	bge.n	8004092 <_printf_i+0x5e>
 800408a:	222d      	movs	r2, #45	; 0x2d
 800408c:	425b      	negs	r3, r3
 800408e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004092:	486f      	ldr	r0, [pc, #444]	; (8004250 <_printf_i+0x21c>)
 8004094:	220a      	movs	r2, #10
 8004096:	e039      	b.n	800410c <_printf_i+0xd8>
 8004098:	2973      	cmp	r1, #115	; 0x73
 800409a:	f000 809d 	beq.w	80041d8 <_printf_i+0x1a4>
 800409e:	d808      	bhi.n	80040b2 <_printf_i+0x7e>
 80040a0:	296f      	cmp	r1, #111	; 0x6f
 80040a2:	d020      	beq.n	80040e6 <_printf_i+0xb2>
 80040a4:	2970      	cmp	r1, #112	; 0x70
 80040a6:	d1dd      	bne.n	8004064 <_printf_i+0x30>
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	f043 0320 	orr.w	r3, r3, #32
 80040ae:	6023      	str	r3, [r4, #0]
 80040b0:	e003      	b.n	80040ba <_printf_i+0x86>
 80040b2:	2975      	cmp	r1, #117	; 0x75
 80040b4:	d017      	beq.n	80040e6 <_printf_i+0xb2>
 80040b6:	2978      	cmp	r1, #120	; 0x78
 80040b8:	d1d4      	bne.n	8004064 <_printf_i+0x30>
 80040ba:	2378      	movs	r3, #120	; 0x78
 80040bc:	4865      	ldr	r0, [pc, #404]	; (8004254 <_printf_i+0x220>)
 80040be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040c2:	e055      	b.n	8004170 <_printf_i+0x13c>
 80040c4:	6813      	ldr	r3, [r2, #0]
 80040c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040ca:	1d19      	adds	r1, r3, #4
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6011      	str	r1, [r2, #0]
 80040d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040d4:	2301      	movs	r3, #1
 80040d6:	e08c      	b.n	80041f2 <_printf_i+0x1be>
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040de:	6011      	str	r1, [r2, #0]
 80040e0:	bf18      	it	ne
 80040e2:	b21b      	sxthne	r3, r3
 80040e4:	e7cf      	b.n	8004086 <_printf_i+0x52>
 80040e6:	6813      	ldr	r3, [r2, #0]
 80040e8:	6825      	ldr	r5, [r4, #0]
 80040ea:	1d18      	adds	r0, r3, #4
 80040ec:	6010      	str	r0, [r2, #0]
 80040ee:	0628      	lsls	r0, r5, #24
 80040f0:	d501      	bpl.n	80040f6 <_printf_i+0xc2>
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	e002      	b.n	80040fc <_printf_i+0xc8>
 80040f6:	0668      	lsls	r0, r5, #25
 80040f8:	d5fb      	bpl.n	80040f2 <_printf_i+0xbe>
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	296f      	cmp	r1, #111	; 0x6f
 80040fe:	bf14      	ite	ne
 8004100:	220a      	movne	r2, #10
 8004102:	2208      	moveq	r2, #8
 8004104:	4852      	ldr	r0, [pc, #328]	; (8004250 <_printf_i+0x21c>)
 8004106:	2100      	movs	r1, #0
 8004108:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800410c:	6865      	ldr	r5, [r4, #4]
 800410e:	2d00      	cmp	r5, #0
 8004110:	60a5      	str	r5, [r4, #8]
 8004112:	f2c0 8095 	blt.w	8004240 <_printf_i+0x20c>
 8004116:	6821      	ldr	r1, [r4, #0]
 8004118:	f021 0104 	bic.w	r1, r1, #4
 800411c:	6021      	str	r1, [r4, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d13d      	bne.n	800419e <_printf_i+0x16a>
 8004122:	2d00      	cmp	r5, #0
 8004124:	f040 808e 	bne.w	8004244 <_printf_i+0x210>
 8004128:	4665      	mov	r5, ip
 800412a:	2a08      	cmp	r2, #8
 800412c:	d10b      	bne.n	8004146 <_printf_i+0x112>
 800412e:	6823      	ldr	r3, [r4, #0]
 8004130:	07db      	lsls	r3, r3, #31
 8004132:	d508      	bpl.n	8004146 <_printf_i+0x112>
 8004134:	6923      	ldr	r3, [r4, #16]
 8004136:	6862      	ldr	r2, [r4, #4]
 8004138:	429a      	cmp	r2, r3
 800413a:	bfde      	ittt	le
 800413c:	2330      	movle	r3, #48	; 0x30
 800413e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004142:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004146:	ebac 0305 	sub.w	r3, ip, r5
 800414a:	6123      	str	r3, [r4, #16]
 800414c:	f8cd 8000 	str.w	r8, [sp]
 8004150:	463b      	mov	r3, r7
 8004152:	aa03      	add	r2, sp, #12
 8004154:	4621      	mov	r1, r4
 8004156:	4630      	mov	r0, r6
 8004158:	f7ff fef6 	bl	8003f48 <_printf_common>
 800415c:	3001      	adds	r0, #1
 800415e:	d14d      	bne.n	80041fc <_printf_i+0x1c8>
 8004160:	f04f 30ff 	mov.w	r0, #4294967295
 8004164:	b005      	add	sp, #20
 8004166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800416a:	4839      	ldr	r0, [pc, #228]	; (8004250 <_printf_i+0x21c>)
 800416c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004170:	6813      	ldr	r3, [r2, #0]
 8004172:	6821      	ldr	r1, [r4, #0]
 8004174:	1d1d      	adds	r5, r3, #4
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6015      	str	r5, [r2, #0]
 800417a:	060a      	lsls	r2, r1, #24
 800417c:	d50b      	bpl.n	8004196 <_printf_i+0x162>
 800417e:	07ca      	lsls	r2, r1, #31
 8004180:	bf44      	itt	mi
 8004182:	f041 0120 	orrmi.w	r1, r1, #32
 8004186:	6021      	strmi	r1, [r4, #0]
 8004188:	b91b      	cbnz	r3, 8004192 <_printf_i+0x15e>
 800418a:	6822      	ldr	r2, [r4, #0]
 800418c:	f022 0220 	bic.w	r2, r2, #32
 8004190:	6022      	str	r2, [r4, #0]
 8004192:	2210      	movs	r2, #16
 8004194:	e7b7      	b.n	8004106 <_printf_i+0xd2>
 8004196:	064d      	lsls	r5, r1, #25
 8004198:	bf48      	it	mi
 800419a:	b29b      	uxthmi	r3, r3
 800419c:	e7ef      	b.n	800417e <_printf_i+0x14a>
 800419e:	4665      	mov	r5, ip
 80041a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80041a4:	fb02 3311 	mls	r3, r2, r1, r3
 80041a8:	5cc3      	ldrb	r3, [r0, r3]
 80041aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80041ae:	460b      	mov	r3, r1
 80041b0:	2900      	cmp	r1, #0
 80041b2:	d1f5      	bne.n	80041a0 <_printf_i+0x16c>
 80041b4:	e7b9      	b.n	800412a <_printf_i+0xf6>
 80041b6:	6813      	ldr	r3, [r2, #0]
 80041b8:	6825      	ldr	r5, [r4, #0]
 80041ba:	1d18      	adds	r0, r3, #4
 80041bc:	6961      	ldr	r1, [r4, #20]
 80041be:	6010      	str	r0, [r2, #0]
 80041c0:	0628      	lsls	r0, r5, #24
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	d501      	bpl.n	80041ca <_printf_i+0x196>
 80041c6:	6019      	str	r1, [r3, #0]
 80041c8:	e002      	b.n	80041d0 <_printf_i+0x19c>
 80041ca:	066a      	lsls	r2, r5, #25
 80041cc:	d5fb      	bpl.n	80041c6 <_printf_i+0x192>
 80041ce:	8019      	strh	r1, [r3, #0]
 80041d0:	2300      	movs	r3, #0
 80041d2:	4665      	mov	r5, ip
 80041d4:	6123      	str	r3, [r4, #16]
 80041d6:	e7b9      	b.n	800414c <_printf_i+0x118>
 80041d8:	6813      	ldr	r3, [r2, #0]
 80041da:	1d19      	adds	r1, r3, #4
 80041dc:	6011      	str	r1, [r2, #0]
 80041de:	681d      	ldr	r5, [r3, #0]
 80041e0:	6862      	ldr	r2, [r4, #4]
 80041e2:	2100      	movs	r1, #0
 80041e4:	4628      	mov	r0, r5
 80041e6:	f000 f837 	bl	8004258 <memchr>
 80041ea:	b108      	cbz	r0, 80041f0 <_printf_i+0x1bc>
 80041ec:	1b40      	subs	r0, r0, r5
 80041ee:	6060      	str	r0, [r4, #4]
 80041f0:	6863      	ldr	r3, [r4, #4]
 80041f2:	6123      	str	r3, [r4, #16]
 80041f4:	2300      	movs	r3, #0
 80041f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041fa:	e7a7      	b.n	800414c <_printf_i+0x118>
 80041fc:	6923      	ldr	r3, [r4, #16]
 80041fe:	462a      	mov	r2, r5
 8004200:	4639      	mov	r1, r7
 8004202:	4630      	mov	r0, r6
 8004204:	47c0      	blx	r8
 8004206:	3001      	adds	r0, #1
 8004208:	d0aa      	beq.n	8004160 <_printf_i+0x12c>
 800420a:	6823      	ldr	r3, [r4, #0]
 800420c:	079b      	lsls	r3, r3, #30
 800420e:	d413      	bmi.n	8004238 <_printf_i+0x204>
 8004210:	68e0      	ldr	r0, [r4, #12]
 8004212:	9b03      	ldr	r3, [sp, #12]
 8004214:	4298      	cmp	r0, r3
 8004216:	bfb8      	it	lt
 8004218:	4618      	movlt	r0, r3
 800421a:	e7a3      	b.n	8004164 <_printf_i+0x130>
 800421c:	2301      	movs	r3, #1
 800421e:	464a      	mov	r2, r9
 8004220:	4639      	mov	r1, r7
 8004222:	4630      	mov	r0, r6
 8004224:	47c0      	blx	r8
 8004226:	3001      	adds	r0, #1
 8004228:	d09a      	beq.n	8004160 <_printf_i+0x12c>
 800422a:	3501      	adds	r5, #1
 800422c:	68e3      	ldr	r3, [r4, #12]
 800422e:	9a03      	ldr	r2, [sp, #12]
 8004230:	1a9b      	subs	r3, r3, r2
 8004232:	42ab      	cmp	r3, r5
 8004234:	dcf2      	bgt.n	800421c <_printf_i+0x1e8>
 8004236:	e7eb      	b.n	8004210 <_printf_i+0x1dc>
 8004238:	2500      	movs	r5, #0
 800423a:	f104 0919 	add.w	r9, r4, #25
 800423e:	e7f5      	b.n	800422c <_printf_i+0x1f8>
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1ac      	bne.n	800419e <_printf_i+0x16a>
 8004244:	7803      	ldrb	r3, [r0, #0]
 8004246:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800424a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800424e:	e76c      	b.n	800412a <_printf_i+0xf6>
 8004250:	08006879 	.word	0x08006879
 8004254:	0800688a 	.word	0x0800688a

08004258 <memchr>:
 8004258:	b510      	push	{r4, lr}
 800425a:	b2c9      	uxtb	r1, r1
 800425c:	4402      	add	r2, r0
 800425e:	4290      	cmp	r0, r2
 8004260:	4603      	mov	r3, r0
 8004262:	d101      	bne.n	8004268 <memchr+0x10>
 8004264:	2300      	movs	r3, #0
 8004266:	e003      	b.n	8004270 <memchr+0x18>
 8004268:	781c      	ldrb	r4, [r3, #0]
 800426a:	3001      	adds	r0, #1
 800426c:	428c      	cmp	r4, r1
 800426e:	d1f6      	bne.n	800425e <memchr+0x6>
 8004270:	4618      	mov	r0, r3
 8004272:	bd10      	pop	{r4, pc}

08004274 <memcpy>:
 8004274:	b510      	push	{r4, lr}
 8004276:	1e43      	subs	r3, r0, #1
 8004278:	440a      	add	r2, r1
 800427a:	4291      	cmp	r1, r2
 800427c:	d100      	bne.n	8004280 <memcpy+0xc>
 800427e:	bd10      	pop	{r4, pc}
 8004280:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004284:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004288:	e7f7      	b.n	800427a <memcpy+0x6>

0800428a <memmove>:
 800428a:	4288      	cmp	r0, r1
 800428c:	b510      	push	{r4, lr}
 800428e:	eb01 0302 	add.w	r3, r1, r2
 8004292:	d807      	bhi.n	80042a4 <memmove+0x1a>
 8004294:	1e42      	subs	r2, r0, #1
 8004296:	4299      	cmp	r1, r3
 8004298:	d00a      	beq.n	80042b0 <memmove+0x26>
 800429a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800429e:	f802 4f01 	strb.w	r4, [r2, #1]!
 80042a2:	e7f8      	b.n	8004296 <memmove+0xc>
 80042a4:	4283      	cmp	r3, r0
 80042a6:	d9f5      	bls.n	8004294 <memmove+0xa>
 80042a8:	1881      	adds	r1, r0, r2
 80042aa:	1ad2      	subs	r2, r2, r3
 80042ac:	42d3      	cmn	r3, r2
 80042ae:	d100      	bne.n	80042b2 <memmove+0x28>
 80042b0:	bd10      	pop	{r4, pc}
 80042b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042b6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80042ba:	e7f7      	b.n	80042ac <memmove+0x22>

080042bc <_free_r>:
 80042bc:	b538      	push	{r3, r4, r5, lr}
 80042be:	4605      	mov	r5, r0
 80042c0:	2900      	cmp	r1, #0
 80042c2:	d043      	beq.n	800434c <_free_r+0x90>
 80042c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042c8:	1f0c      	subs	r4, r1, #4
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	bfb8      	it	lt
 80042ce:	18e4      	addlt	r4, r4, r3
 80042d0:	f000 f8d0 	bl	8004474 <__malloc_lock>
 80042d4:	4a1e      	ldr	r2, [pc, #120]	; (8004350 <_free_r+0x94>)
 80042d6:	6813      	ldr	r3, [r2, #0]
 80042d8:	4610      	mov	r0, r2
 80042da:	b933      	cbnz	r3, 80042ea <_free_r+0x2e>
 80042dc:	6063      	str	r3, [r4, #4]
 80042de:	6014      	str	r4, [r2, #0]
 80042e0:	4628      	mov	r0, r5
 80042e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042e6:	f000 b8c6 	b.w	8004476 <__malloc_unlock>
 80042ea:	42a3      	cmp	r3, r4
 80042ec:	d90b      	bls.n	8004306 <_free_r+0x4a>
 80042ee:	6821      	ldr	r1, [r4, #0]
 80042f0:	1862      	adds	r2, r4, r1
 80042f2:	4293      	cmp	r3, r2
 80042f4:	bf01      	itttt	eq
 80042f6:	681a      	ldreq	r2, [r3, #0]
 80042f8:	685b      	ldreq	r3, [r3, #4]
 80042fa:	1852      	addeq	r2, r2, r1
 80042fc:	6022      	streq	r2, [r4, #0]
 80042fe:	6063      	str	r3, [r4, #4]
 8004300:	6004      	str	r4, [r0, #0]
 8004302:	e7ed      	b.n	80042e0 <_free_r+0x24>
 8004304:	4613      	mov	r3, r2
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	b10a      	cbz	r2, 800430e <_free_r+0x52>
 800430a:	42a2      	cmp	r2, r4
 800430c:	d9fa      	bls.n	8004304 <_free_r+0x48>
 800430e:	6819      	ldr	r1, [r3, #0]
 8004310:	1858      	adds	r0, r3, r1
 8004312:	42a0      	cmp	r0, r4
 8004314:	d10b      	bne.n	800432e <_free_r+0x72>
 8004316:	6820      	ldr	r0, [r4, #0]
 8004318:	4401      	add	r1, r0
 800431a:	1858      	adds	r0, r3, r1
 800431c:	4282      	cmp	r2, r0
 800431e:	6019      	str	r1, [r3, #0]
 8004320:	d1de      	bne.n	80042e0 <_free_r+0x24>
 8004322:	6810      	ldr	r0, [r2, #0]
 8004324:	6852      	ldr	r2, [r2, #4]
 8004326:	4401      	add	r1, r0
 8004328:	6019      	str	r1, [r3, #0]
 800432a:	605a      	str	r2, [r3, #4]
 800432c:	e7d8      	b.n	80042e0 <_free_r+0x24>
 800432e:	d902      	bls.n	8004336 <_free_r+0x7a>
 8004330:	230c      	movs	r3, #12
 8004332:	602b      	str	r3, [r5, #0]
 8004334:	e7d4      	b.n	80042e0 <_free_r+0x24>
 8004336:	6820      	ldr	r0, [r4, #0]
 8004338:	1821      	adds	r1, r4, r0
 800433a:	428a      	cmp	r2, r1
 800433c:	bf01      	itttt	eq
 800433e:	6811      	ldreq	r1, [r2, #0]
 8004340:	6852      	ldreq	r2, [r2, #4]
 8004342:	1809      	addeq	r1, r1, r0
 8004344:	6021      	streq	r1, [r4, #0]
 8004346:	6062      	str	r2, [r4, #4]
 8004348:	605c      	str	r4, [r3, #4]
 800434a:	e7c9      	b.n	80042e0 <_free_r+0x24>
 800434c:	bd38      	pop	{r3, r4, r5, pc}
 800434e:	bf00      	nop
 8004350:	200004a8 	.word	0x200004a8

08004354 <_malloc_r>:
 8004354:	b570      	push	{r4, r5, r6, lr}
 8004356:	1ccd      	adds	r5, r1, #3
 8004358:	f025 0503 	bic.w	r5, r5, #3
 800435c:	3508      	adds	r5, #8
 800435e:	2d0c      	cmp	r5, #12
 8004360:	bf38      	it	cc
 8004362:	250c      	movcc	r5, #12
 8004364:	2d00      	cmp	r5, #0
 8004366:	4606      	mov	r6, r0
 8004368:	db01      	blt.n	800436e <_malloc_r+0x1a>
 800436a:	42a9      	cmp	r1, r5
 800436c:	d903      	bls.n	8004376 <_malloc_r+0x22>
 800436e:	230c      	movs	r3, #12
 8004370:	6033      	str	r3, [r6, #0]
 8004372:	2000      	movs	r0, #0
 8004374:	bd70      	pop	{r4, r5, r6, pc}
 8004376:	f000 f87d 	bl	8004474 <__malloc_lock>
 800437a:	4a21      	ldr	r2, [pc, #132]	; (8004400 <_malloc_r+0xac>)
 800437c:	6814      	ldr	r4, [r2, #0]
 800437e:	4621      	mov	r1, r4
 8004380:	b991      	cbnz	r1, 80043a8 <_malloc_r+0x54>
 8004382:	4c20      	ldr	r4, [pc, #128]	; (8004404 <_malloc_r+0xb0>)
 8004384:	6823      	ldr	r3, [r4, #0]
 8004386:	b91b      	cbnz	r3, 8004390 <_malloc_r+0x3c>
 8004388:	4630      	mov	r0, r6
 800438a:	f000 f863 	bl	8004454 <_sbrk_r>
 800438e:	6020      	str	r0, [r4, #0]
 8004390:	4629      	mov	r1, r5
 8004392:	4630      	mov	r0, r6
 8004394:	f000 f85e 	bl	8004454 <_sbrk_r>
 8004398:	1c43      	adds	r3, r0, #1
 800439a:	d124      	bne.n	80043e6 <_malloc_r+0x92>
 800439c:	230c      	movs	r3, #12
 800439e:	4630      	mov	r0, r6
 80043a0:	6033      	str	r3, [r6, #0]
 80043a2:	f000 f868 	bl	8004476 <__malloc_unlock>
 80043a6:	e7e4      	b.n	8004372 <_malloc_r+0x1e>
 80043a8:	680b      	ldr	r3, [r1, #0]
 80043aa:	1b5b      	subs	r3, r3, r5
 80043ac:	d418      	bmi.n	80043e0 <_malloc_r+0x8c>
 80043ae:	2b0b      	cmp	r3, #11
 80043b0:	d90f      	bls.n	80043d2 <_malloc_r+0x7e>
 80043b2:	600b      	str	r3, [r1, #0]
 80043b4:	18cc      	adds	r4, r1, r3
 80043b6:	50cd      	str	r5, [r1, r3]
 80043b8:	4630      	mov	r0, r6
 80043ba:	f000 f85c 	bl	8004476 <__malloc_unlock>
 80043be:	f104 000b 	add.w	r0, r4, #11
 80043c2:	1d23      	adds	r3, r4, #4
 80043c4:	f020 0007 	bic.w	r0, r0, #7
 80043c8:	1ac3      	subs	r3, r0, r3
 80043ca:	d0d3      	beq.n	8004374 <_malloc_r+0x20>
 80043cc:	425a      	negs	r2, r3
 80043ce:	50e2      	str	r2, [r4, r3]
 80043d0:	e7d0      	b.n	8004374 <_malloc_r+0x20>
 80043d2:	684b      	ldr	r3, [r1, #4]
 80043d4:	428c      	cmp	r4, r1
 80043d6:	bf16      	itet	ne
 80043d8:	6063      	strne	r3, [r4, #4]
 80043da:	6013      	streq	r3, [r2, #0]
 80043dc:	460c      	movne	r4, r1
 80043de:	e7eb      	b.n	80043b8 <_malloc_r+0x64>
 80043e0:	460c      	mov	r4, r1
 80043e2:	6849      	ldr	r1, [r1, #4]
 80043e4:	e7cc      	b.n	8004380 <_malloc_r+0x2c>
 80043e6:	1cc4      	adds	r4, r0, #3
 80043e8:	f024 0403 	bic.w	r4, r4, #3
 80043ec:	42a0      	cmp	r0, r4
 80043ee:	d005      	beq.n	80043fc <_malloc_r+0xa8>
 80043f0:	1a21      	subs	r1, r4, r0
 80043f2:	4630      	mov	r0, r6
 80043f4:	f000 f82e 	bl	8004454 <_sbrk_r>
 80043f8:	3001      	adds	r0, #1
 80043fa:	d0cf      	beq.n	800439c <_malloc_r+0x48>
 80043fc:	6025      	str	r5, [r4, #0]
 80043fe:	e7db      	b.n	80043b8 <_malloc_r+0x64>
 8004400:	200004a8 	.word	0x200004a8
 8004404:	200004ac 	.word	0x200004ac

08004408 <_realloc_r>:
 8004408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440a:	4607      	mov	r7, r0
 800440c:	4614      	mov	r4, r2
 800440e:	460e      	mov	r6, r1
 8004410:	b921      	cbnz	r1, 800441c <_realloc_r+0x14>
 8004412:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004416:	4611      	mov	r1, r2
 8004418:	f7ff bf9c 	b.w	8004354 <_malloc_r>
 800441c:	b922      	cbnz	r2, 8004428 <_realloc_r+0x20>
 800441e:	f7ff ff4d 	bl	80042bc <_free_r>
 8004422:	4625      	mov	r5, r4
 8004424:	4628      	mov	r0, r5
 8004426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004428:	f000 f826 	bl	8004478 <_malloc_usable_size_r>
 800442c:	42a0      	cmp	r0, r4
 800442e:	d20f      	bcs.n	8004450 <_realloc_r+0x48>
 8004430:	4621      	mov	r1, r4
 8004432:	4638      	mov	r0, r7
 8004434:	f7ff ff8e 	bl	8004354 <_malloc_r>
 8004438:	4605      	mov	r5, r0
 800443a:	2800      	cmp	r0, #0
 800443c:	d0f2      	beq.n	8004424 <_realloc_r+0x1c>
 800443e:	4631      	mov	r1, r6
 8004440:	4622      	mov	r2, r4
 8004442:	f7ff ff17 	bl	8004274 <memcpy>
 8004446:	4631      	mov	r1, r6
 8004448:	4638      	mov	r0, r7
 800444a:	f7ff ff37 	bl	80042bc <_free_r>
 800444e:	e7e9      	b.n	8004424 <_realloc_r+0x1c>
 8004450:	4635      	mov	r5, r6
 8004452:	e7e7      	b.n	8004424 <_realloc_r+0x1c>

08004454 <_sbrk_r>:
 8004454:	b538      	push	{r3, r4, r5, lr}
 8004456:	2300      	movs	r3, #0
 8004458:	4c05      	ldr	r4, [pc, #20]	; (8004470 <_sbrk_r+0x1c>)
 800445a:	4605      	mov	r5, r0
 800445c:	4608      	mov	r0, r1
 800445e:	6023      	str	r3, [r4, #0]
 8004460:	f7fd fab4 	bl	80019cc <_sbrk>
 8004464:	1c43      	adds	r3, r0, #1
 8004466:	d102      	bne.n	800446e <_sbrk_r+0x1a>
 8004468:	6823      	ldr	r3, [r4, #0]
 800446a:	b103      	cbz	r3, 800446e <_sbrk_r+0x1a>
 800446c:	602b      	str	r3, [r5, #0]
 800446e:	bd38      	pop	{r3, r4, r5, pc}
 8004470:	20000550 	.word	0x20000550

08004474 <__malloc_lock>:
 8004474:	4770      	bx	lr

08004476 <__malloc_unlock>:
 8004476:	4770      	bx	lr

08004478 <_malloc_usable_size_r>:
 8004478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800447c:	1f18      	subs	r0, r3, #4
 800447e:	2b00      	cmp	r3, #0
 8004480:	bfbc      	itt	lt
 8004482:	580b      	ldrlt	r3, [r1, r0]
 8004484:	18c0      	addlt	r0, r0, r3
 8004486:	4770      	bx	lr

08004488 <_init>:
 8004488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448a:	bf00      	nop
 800448c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800448e:	bc08      	pop	{r3}
 8004490:	469e      	mov	lr, r3
 8004492:	4770      	bx	lr

08004494 <_fini>:
 8004494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004496:	bf00      	nop
 8004498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800449a:	bc08      	pop	{r3}
 800449c:	469e      	mov	lr, r3
 800449e:	4770      	bx	lr
